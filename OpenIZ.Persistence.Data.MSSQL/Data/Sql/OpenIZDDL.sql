-- OPEN IZ DATABASE CORE
-- COPYRIGHT (c) 2015, OPEN IZ
-- PORTIONS COPYRIGHT (C) 2015, FYFE SOFTWARE INC.
-- LICENSED UNDER THE APACHE 2.0 LICENSE

/*
 SECTION: SECURITY TABLES
*/

/**
 * SECURITY USER CLASS CODES. THESE CODES ARE USED TO IDENTIFY THE USER CLASSES AND ARE USED TO DIFFERENTIATE BETWEEN
 * SPECIAL CLASSES OF USERS (SUCH AS APPLICATION USER). THESE SPECIAL USER CLASSES ARE OFTEN USED WHEN THE APPLICATION
 * AND NOT THE USER WISHES TO PERFORM SOME OPERATION
 */
CREATE TABLE SecurityUserClass
(
	ClassId UNIQUEIDENTIFIER NOT NULL DEFAULT NEWSEQUENTIALID(), -- UNIQUE IDENTIFIER FOR THE CLASS
	Mnemonic VARCHAR(32) UNIQUE NOT NULL, -- HUMAN FRIENDLY MNEMONIC FOR THE CLASS
	CONSTRAINT PK_SecurityUserClass PRIMARY KEY (ClassId)
);

INSERT INTO SecurityUserClass (ClassId, Mnemonic) VALUES ('33932B42-6F4B-4659-8849-6ACA54139D8E','HumanUser');
INSERT INTO SecurityUserClass (ClassId, Mnemonic) VALUES ('E9CD4DAD-2759-4022-AB07-92FCFB236A98','ApplictionUser');
INSERT INTO SecurityUserClass (ClassId, Mnemonic) VALUES ('9F71BB34-9691-440F-8249-9C831EA16D58','SystemUser');


/*
 SECURITY USER IS PRIMARILY USED BY THE SECURITY SUBSYSTEM AND IS OFTEN LINKED TO A PERSON IN THE 
 CLINICAL DATA CONTEXT VIA THE USERENTITY RELATIONSHIP TABLE. THIS TABLE'S PRIMARY ROLE IS THE 
 STORAGE OF USER ACCOUNT INFORMATION
*/
CREATE TABLE SecurityUser
(
	UserId UNIQUEIDENTIFIER NOT NULL DEFAULT NEWSEQUENTIALID(), -- THE UNIQUE IDENTIFIER FOR THE USER
	UserClass UNIQUEIDENTIFIER NOT NULL DEFAULT '33932B42-6F4B-4659-8849-6ACA54139D8E', -- CLASS OF USER
	UserName NVARCHAR(128) NOT NULL UNIQUE, -- THE NAME OF THE USER
	Email NVARCHAR(250), -- THE PRIMARY EMAIL ADDRESS OF THE USER
	EmailConfirmed BIT NOT NULL DEFAULT 0, -- TRUE IF EMAIL HAS BEEN CONFIRMED
	PhoneNumber NVARCHAR(128), -- THE PHONE NUMBER OF THE USER
	PhoneNumberConfirmed BIT NOT NULL DEFAULT 0, -- IF PHONE NUMBER HAS BEEN CONFIRMED
	TwoFactorEnabled BIT NOT NULL DEFAULT 0, -- TRUE IF TFA (PHONE or EMAIL CONFIRM) IS ENABLED
	Lockout DATETIMEOFFSET, -- TRUE IF THE ACCOUNT IS LOCKED OUT
	UserPassword NVARCHAR(128) NOT NULL, -- THE PASSWORD OF THE USER
	SecurityStamp NVARCHAR(128) NOT NULL, -- THE SALT FOR USER PASSWORD
	FailedLoginAttempts INT NOT NULL DEFAULT 0, -- THE NUMBER OF FAILED LOGIN ATTEMPTS
	LastSuccessfulLogin DATETIMEOFFSET, -- THE LAST TIME WHEN THE USER SUCCESSFULLLY LOGGED IN
	CreationTime DATETIMEOFFSET NOT NULL DEFAULT CURRENT_TIMESTAMP, -- THE TIME THE USER WAS CREATED
	CreatedBy UNIQUEIDENTIFIER, -- THE USER THAT CREATED THE USER
	ObsoletionTime DATETIMEOFFSET, -- WHEN PRESENT, INDICATES THE DATE THE USER ACCOUNT IS NOT LONGER ACTIVE
	ObsoletedBy UNIQUEIDENTIFIER, -- THE USER WHO OBSOLETED THIS RECORD
	UpdatedTime DATETIMEOFFSET, -- THE TIME THE RECORD WAS UPDATED
	UpdatedBy UNIQUEIDENTIFIER, -- THE PERSON WHO UPDATED THE USER RECORD
	CONSTRAINT PK_SecurityUser PRIMARY KEY (UserId),
	CONSTRAINT FK_SecurityUserObsoletedBy FOREIGN KEY (ObsoletedBy) REFERENCES SecurityUser(UserId),
	CONSTRAINT CK_SecurityUserObsoletedBy CHECK(ObsoletedBy IS NOT NULL AND ObsoletionTime IS NOT NULL OR ObsoletedBy IS NULL AND ObsoletionTime IS NULL),
	CONSTRAINT FK_SecurityUserCreatedBy FOREIGN KEY (CreatedBy) REFERENCES SecurityUser(UserId),
	CONSTRAINT FK_SecurityUserUpdatedBy FOREIGN KEY (UpdatedBy) REFERENCES SecurityUser(UserId),
	CONSTRAINT CK_SecurityUserUpdatedBy CHECK(UpdatedBy IS NOT NULL AND UpdatedTime IS NOT NULL OR UpdatedBy IS NULL AND UpdatedTime IS NULL),
	CONSTRAINT FK_SecurityUserClass FOREIGN KEY (UserClass) REFERENCES SecurityUserClass(ClassId)
);

-- Create a system user
INSERT INTO SecurityUser (UserId, UserName, UserPassword, SecurityStamp, UserClass) VALUES ('fadca076-3690-4a6e-af9e-f1cd68e8c7e8', 'SYSTEM','XXXX','XXXX', '9F71BB34-9691-440F-8249-9C831EA16D58');
-- Create the anonymous user
INSERT INTO SecurityUser (UserId, UserName, UserPassword, SecurityStamp, UserClass) VALUES ('C96859F0-043C-4480-8DAB-F69D6E86696C', 'ANONYMOUS','XXXX','XXXX', '9F71BB34-9691-440F-8249-9C831EA16D58');

-- Enforce SecurityUser
UPDATE SecurityUser SET CreatedBy = 'C96859F0-043C-4480-8DAB-F69D6E86696C';
ALTER TABLE SecurityUser ALTER COLUMN CreatedBy UNIQUEIDENTIFIER NOT NULL;
/*
 THE FOLLOWING INDEXING PROVIDES LOOKUP BY USERNAME AND USERNAME/PASSWORD COMBINATION
*/
CREATE UNIQUE INDEX IX_SecurityUserUserName ON SecurityUser(UserName);
CREATE INDEX IX_SecurityUserUserNamePassword ON SecurityUser(UserName, UserPassword);

/*
 THE FOLLOWING TABLE IS USED BY THE CLAIMS SYSTEM TO STORE THE GRANTED
 CLAIMS FOR EACH USER
*/
CREATE TABLE SecurityUserClaim
(
	ClaimId UNIQUEIDENTIFIER NOT NULL DEFAULT NEWSEQUENTIALID(), -- CLAIM ID
	UserId UNIQUEIDENTIFIER NOT NULL, -- THE USER TO WHICH THE CLAIM BELONGS
	ClaimType NVARCHAR(128), -- THE TYPE OF CLAIM
	ClaimValue NVARCHAR(128), -- THE VALUE OF THE CLAIM
	CONSTRAINT PK_SecurityUserClaim PRIMARY KEY (ClaimId),
	CONSTRAINT FK_SecurityUserClaimUserId FOREIGN KEY (UserId) REFERENCES SecurityUser(UserId)
);

/*
 INDEX LOOKUP CLAIM BY USER
*/
CREATE INDEX IX_SecurityUserClaimUser ON SecurityUserClaim(UserId);

/*
 THIS TABLE IS USED TO STORE THE EXTERNAL LOGIN PROVIDERS AND KEYS FOR 
 EACH USER WHO HAS ASSOCIATED AN EXTERNAL LOGIN PROVIDER. THESE CAN BE 
 OAUTH SERVICES (SUCH AS A CENTRAL PROVIDER) OR PUBLIC SERVICES LIKE GMAIL, 
 LIVEID, ETC.
*/
CREATE TABLE SecurityUserLogins
(
	LoginProvider NVARCHAR(128) NOT NULL, -- THE LOGIN PROVIDER (GMAIL, LIVE, ETC)
	ProviderKey NVARCHAR(128) NOT NULL, -- THE PROVIDER KEY
	UserId UNIQUEIDENTIFIER NOT NULL, -- THE USER
	CONSTRAINT PK_SecurityUserLogins PRIMARY KEY (LoginProvider, ProviderKey, UserId),
	CONSTRAINT FK_SecurityUserLoginsUserId FOREIGN KEY (UserId) REFERENCES SecurityUser(UserId),
);

/*
 SECURITY ROLES ARE USED TO GROUP POLICIES AND ACTIONS AS WELL AS ACCESS TO PARTICULAR 
 AREAS OF POINT OF SERVICE APPLICATIONS BASED ON POLICY. 
*/
CREATE TABLE SecurityRole
(
	RoleId UNIQUEIDENTIFIER NOT NULL DEFAULT NEWSEQUENTIALID(), -- THE ROLE IDENTIFIER
	Name NVARCHAR(50) NOT NULL UNIQUE, -- THE NAME OF THE ROLE
	[Description] NVARCHAR(256), -- THE DESCRIPTION OF THE ROLE
	CreationTime DATETIMEOFFSET NOT NULL DEFAULT CURRENT_TIMESTAMP, -- THE TIME THE ROLE WAS CREATED
	CreatedBy UNIQUEIDENTIFIER NOT NULL, -- THE USER WHO CREATED THE ROLE
	ObsoletionTime DATETIMEOFFSET, -- THE TIME THE ROLE WAS OBSOLETED
	ObsoletedBy UNIQUEIDENTIFIER, -- THE USER WHO OBSOLETED THE RECORD
	UpdatedTime DATETIMEOFFSET, -- THE UPDATE TIME OF THE OBJECT
	UpdatedBy UNIQUEIDENTIFIER, -- THE USER WHO UPDATED THE RECORD
	CONSTRAINT PK_SecurityRole PRIMARY KEY (RoleId),
	CONSTRAINT FK_SecurityRoleCreatedBy FOREIGN KEY (CreatedBy) REFERENCES SecurityUser(UserId),
	CONSTRAINT FK_SecurityRoleUpdatedBy FOREIGN KEY (UpdatedBy) REFERENCES SecurityUser(UserId),
	CONSTRAINT FK_SecurityRoleObsoletedBy FOREIGN KEY (ObsoletedBy) REFERENCES SecurityUser(UserId),
	CONSTRAINT CK_SecurityRoleObsoletedBy CHECK(ObsoletedBy IS NOT NULL AND ObsoletionTime IS NOT NULL OR ObsoletedBy IS NULL AND ObsoletionTime IS NULL)
);

/*
 SECURITY USER <> ROLE ASSOCIATIVE ENTITY
*/
CREATE TABLE SecurityUserRole
(
	UserId UNIQUEIDENTIFIER NOT NULL, -- THE USER TO WHICH THE ASSOCIATION BELONGS
	RoleId UNIQUEIDENTIFIER NOT NULL, -- THE ROLE TO WHICH THE USER BELONGS
	CONSTRAINT PK_SecurityUserRole PRIMARY KEY (UserId, RoleId),
	CONSTRAINT FK_SecurityUserRoleUserId FOREIGN KEY (UserId) REFERENCES SecurityUser(UserId),
	CONSTRAINT FK_SecurityUserRoleRoleId FOREIGN KEY (RoleId) REFERENCES SecurityRole(RoleId)
);

-- INDEX : LOOKUP SECURITY ROLE ASSOCIATIONS BY USER ID
CREATE INDEX IX_SecurityUserRoleUserId ON SecurityUserRole(UserId);

/*
 THE POLICY TABLE IS USED TO DEFINE A SERIES OF POLICIES WHICH MUST BE ADHERED TO
 WHEN ACCESSING, STORING OR RETRIEVING CLINICAL DATA TO/FROM THE OPENIZ BACKBONE.
 EXAMPLES OF A POLICY CAN INCLUDE:

	- ALLOW LOGIN FOR A USER ON A DEVICE
	- ALLOW A GROUP OF USERS TO ACCESS AN ACT
	- RESTRICTED ACCESS TO AN ACT
 
 POLICIES WHICH ARE PUBLIC ARE THOSE POLICIES WHICH ARE ATTACHED TO ANY CDA/FHIR/XDS MESSAGE
 ORIGINATING FROM THE OPEN IZ CORE AND ARE NOT CONTROLLED UNDER THE LOCAL AUTHORITY OF THE 
 ADMINISTRATIVE STAFF. 

 POLICIES ARE ENFORCED TWO WAYS, FIRST THE DATA LAYER WILL CHECK THE SecurityRolePolicy AND
 SecurityDevicePolicy TABLES TO ENSURE THAT NONE OF THE ROLES OR THE CURRENT DEVICE HAS AN 
 IsDeny OF TRUE, IF TRUE IS FOUND ON IsDeny AND CanElevate IS ENABLED FOR THE POLICY THEN 
 THE USER MAY BE GIVEN AN OPTION TO ELEVATE (BREAK THE GLASS). 

 THE SECOND ROUND TYPE OF POLICY CHECK RELIES ON THE PRESENCE OF A POLICY HANDLER WHICH, IF
 ENABLED, WILL BE EXECUTED ON PERSISTENCE AND DE-PERSISTENCE. 
 
 FINALLY SOME OPENIZ CODE MAY EXPLICITLY LOOK FOR POLICIES TO BE ENFORCED. FOR EXAMPLE, ALLOW
 LOGIN POLICY HAS A PARTICULAR OID WHICH THE OPENIZ LOGIN HANDLER WILL CHECK FOR THE USER AND
 DEVICE.
*/ 
CREATE TABLE Policy
(
	PolicyId UNIQUEIDENTIFIER NOT NULL DEFAULT NEWSEQUENTIALID(), -- THE UNIQUE IDENTIFIER FOR THE POLICY
	PolicyOid NVARCHAR(128) NOT NULL, -- THE OID FOR THE POLICY
	Name NVARCHAR(64) NOT NULL, -- THE NAME OF THE POLICY
	HandlerClass NVARCHAR(256), -- THE HANDLER WHICH IS A PIECE OF .NET CODE WHICH ENFORCES THE POLICY
	IsPublic BIT NOT NULL DEFAULT 0, -- WHETHER THE POLICY IS INTERNAL (IS DISCLOSED)
	CanElevate BIT NOT NULL DEFAULT 0, -- WHETHER THE POLICY CAN BE ELEVATED OVER
	CreationTime DATETIMEOFFSET NOT NULL DEFAULT CURRENT_TIMESTAMP, -- THE TIME THE POLICY WAS CREATED
	CreatedBy UNIQUEIDENTIFIER NOT NULL, -- THE USER THAT CREATED THE POLICY
	ObsoletionTime DATETIMEOFFSET, -- THE TIME THE POLICY WAS OBSOLETED
	ObsoletedBy UNIQUEIDENTIFIER, -- IDENTIFIES THE USER THAT OBSOLETED THE POLICY
	CONSTRAINT PK_Policy PRIMARY KEY (PolicyId),
	CONSTRAINT FK_PolicyCreatedBy FOREIGN KEY (CreatedBy) REFERENCES SecurityUser(UserId),
	CONSTRAINT FK_PolicyObsoletedBy FOREIGN KEY (ObsoletedBy) REFERENCES SecurityUser(UserId)
);

CREATE UNIQUE INDEX IX_PolicyOid ON Policy(PolicyOid);

-- BUILT IN OPENIZ POLICIES
INSERT INTO Policy (PolicyId, PolicyOid, Name, CreatedBy) VALUES ('ea73c05a-3159-48c8-bbcb-741911d91cd2', '1.3.6.1.4.1.33349.3.1.5.9.2.0', 'Access Administrative Function', 'fadca076-3690-4a6e-af9e-f1cd68e8c7e8');
INSERT INTO Policy (PolicyId, PolicyOid, Name, CreatedBy) VALUES ('d80ac1cf-3d6e-429f-a4a0-88c0bbbc839d', '1.3.6.1.4.1.33349.3.1.5.9.2.0.1', 'Change Password', 'fadca076-3690-4a6e-af9e-f1cd68e8c7e8');
INSERT INTO Policy (PolicyId, PolicyOid, Name, CreatedBy) VALUES ('9c0d65ac-613e-4a67-8bc6-5ce2c0b42160', '1.3.6.1.4.1.33349.3.1.5.9.2.0.2', 'Create Role', 'fadca076-3690-4a6e-af9e-f1cd68e8c7e8');
INSERT INTO Policy (PolicyId, PolicyOid, Name, CreatedBy) VALUES ('79bcc227-0d13-4fbf-a83e-f2b9fce34151', '1.3.6.1.4.1.33349.3.1.5.9.2.0.3', 'Alter Role', 'fadca076-3690-4a6e-af9e-f1cd68e8c7e8');
INSERT INTO Policy (PolicyId, PolicyOid, Name, CreatedBy) VALUES ('ab8642cb-28e4-4e9e-bd7b-d6dc72b729b2', '1.3.6.1.4.1.33349.3.1.5.9.2.0.4', 'Create Identity', 'fadca076-3690-4a6e-af9e-f1cd68e8c7e8');
INSERT INTO Policy (PolicyId, PolicyOid, Name, CreatedBy) VALUES ('d15b96ab-646c-4c00-9a58-ea09eee67d7c', '1.3.6.1.4.1.33349.3.1.5.9.2.1', 'Login', 'fadca076-3690-4a6e-af9e-f1cd68e8c7e8');
INSERT INTO Policy (PolicyId, PolicyOid, Name, CreatedBy) VALUES ('f6840336-4e20-4bc0-b965-baa6d7c80be3', '1.3.6.1.4.1.33349.3.1.5.9.2.2', 'Unrestricted Clinical Data', 'fadca076-3690-4a6e-af9e-f1cd68e8c7e8');
INSERT INTO Policy (PolicyId, PolicyOid, Name, CreatedBy) VALUES ('b81daf47-17a5-465e-a5fd-706b168b0265', '1.3.6.1.4.1.33349.3.1.5.9.2.2.0', 'Query Clinical Data', 'fadca076-3690-4a6e-af9e-f1cd68e8c7e8');
INSERT INTO Policy (PolicyId, PolicyOid, Name, CreatedBy) VALUES ('d7276921-a078-4348-95f2-ed3cde83e607', '1.3.6.1.4.1.33349.3.1.5.9.2.2.1', 'Write Clinical Data', 'fadca076-3690-4a6e-af9e-f1cd68e8c7e8');
INSERT INTO Policy (PolicyId, PolicyOid, Name, CreatedBy) VALUES ('2e027dee-ede4-4731-b7fa-cb67ae0586be', '1.3.6.1.4.1.33349.3.1.5.9.2.2.2', 'Delete Clinical Data', 'fadca076-3690-4a6e-af9e-f1cd68e8c7e8');
INSERT INTO Policy (PolicyId, PolicyOid, Name, CreatedBy) VALUES ('5fb731bf-4e59-4863-80bd-51757d58ea3b', '1.3.6.1.4.1.33349.3.1.5.9.2.2.3', 'Read Clinical Data', 'fadca076-3690-4a6e-af9e-f1cd68e8c7e8');
INSERT INTO Policy (PolicyId, PolicyOid, Name, CreatedBy) VALUES ('dea891aa-224d-4859-81b3-c1eb2750067e', '1.3.6.1.4.1.33349.3.1.5.9.2.3', 'Override Disclosure', 'fadca076-3690-4a6e-af9e-f1cd68e8c7e8');

/*
 ASSOCIATIVE ENTITY TABLE BETWEEN SecurityRole AND Policy TABLES.
*/
CREATE TABLE SecurityRolePolicy 
(
	SecurityPolicyInstanceId UNIQUEIDENTIFIER NOT NULL DEFAULT NEWSEQUENTIALID(), -- UNIQUE ID 
	RoleId UNIQUEIDENTIFIER NOT NULL, -- THE ROLE TO WHICH THE POLICY APPLIES
	PolicyId UNIQUEIDENTIFIER NOT NULL, -- THE POLICY TO WHICH THE ASSOCIATION APPLIES
	PolicyAction INT NOT NULL DEFAULT 0 CHECK (PolicyAction < 3),
	CONSTRAINT PK_SecurityRolePolicy PRIMARY KEY (SecurityPolicyInstanceId),
	CONSTRAINT FK_SecurityRolePolicyRoleId FOREIGN KEY (RoleId) REFERENCES SecurityRole(RoleId),
	CONSTRAINT FK_SecurityRolePolicyPolicyId FOREIGN KEY (PolicyId) REFERENCES Policy(PolicyId)
);

CREATE INDEX IX_SecurityPolicyRoleId ON SecurityRolePolicy(RoleId);
CREATE UNIQUE INDEX IX_SecurityPolicyRolePolicy ON SecurityRolePolicy(RoleId, PolicyId);

-- CREATE USERS ROLE
INSERT INTO SecurityRole (RoleId, Name, [Description], CreatedBy) VALUES ('f4e58ae8-8bbd-4635-a6d4-8a195b143436', 'USERS', 'Group for users who have login access', 'fadca076-3690-4a6e-af9e-f1cd68e8c7e8');
INSERT INTO SecurityRolePolicy (PolicyId, RoleId, PolicyAction) VALUES ('d15b96ab-646c-4c00-9a58-ea09eee67d7c', 'f4e58ae8-8bbd-4635-a6d4-8a195b143436', 2); -- GRANT Login

-- CREATE ADMINISTRATORS ROLE
INSERT INTO SecurityRole (RoleId, Name, [Description], CreatedBy) VALUES ('f6d2ba1d-5bb5-41e3-b7fb-2ec32418b2e1', 'ADMINISTRATORS', 'Group for users who have administrative access', 'fadca076-3690-4a6e-af9e-f1cd68e8c7e8');
INSERT INTO SecurityRolePolicy (PolicyId, RoleId, PolicyAction) VALUES ('ea73c05a-3159-48c8-bbcb-741911d91cd2', 'f6d2ba1d-5bb5-41e3-b7fb-2ec32418b2e1', 2); -- GRANT Access Administrative Function
INSERT INTO SecurityRolePolicy (PolicyId, RoleId, PolicyAction) VALUES ('d15b96ab-646c-4c00-9a58-ea09eee67d7c', 'f6d2ba1d-5bb5-41e3-b7fb-2ec32418b2e1', 2); -- GRANT Login
INSERT INTO SecurityRolePolicy (PolicyId, RoleId, PolicyAction) VALUES ('f6840336-4e20-4bc0-b965-baa6d7c80be3', 'f6d2ba1d-5bb5-41e3-b7fb-2ec32418b2e1', 0); -- DENY Unrestricted Clinical Data
INSERT INTO SecurityRolePolicy (PolicyId, RoleId, PolicyAction) VALUES ('dea891aa-224d-4859-81b3-c1eb2750067e', 'f6d2ba1d-5bb5-41e3-b7fb-2ec32418b2e1', 0); -- DENY Override disclosure

-- CLINICAL STAFF
INSERT INTO SecurityRole (RoleId, Name, [Description], CreatedBy) VALUES ('43167DCB-6F77-4F37-8222-133E675B4434', 'CLINICAL_STAFF', 'Group for clinic staff', 'fadca076-3690-4a6e-af9e-f1cd68e8c7e8');
INSERT INTO SecurityRolePolicy (PolicyId, RoleId, PolicyAction) VALUES ('ea73c05a-3159-48c8-bbcb-741911d91cd2', '43167DCB-6F77-4F37-8222-133E675B4434', 0); -- GRANT Access Administrative Function
INSERT INTO SecurityRolePolicy (PolicyId, RoleId, PolicyAction) VALUES ('d15b96ab-646c-4c00-9a58-ea09eee67d7c', '43167DCB-6F77-4F37-8222-133E675B4434', 2); -- GRANT Login
INSERT INTO SecurityRolePolicy (PolicyId, RoleId, PolicyAction) VALUES ('f6840336-4e20-4bc0-b965-baa6d7c80be3', '43167DCB-6F77-4F37-8222-133E675B4434', 2); -- GRANT Unrestricted Clinical Data
INSERT INTO SecurityRolePolicy (PolicyId, RoleId, PolicyAction) VALUES ('dea891aa-224d-4859-81b3-c1eb2750067e', '43167DCB-6F77-4F37-8222-133E675B4434', 0); -- DENY Override disclosure

-- CREATE ROLE SYSTEM WHICH IS DENIED LOGIN
INSERT INTO SecurityRole (RoleId, Name, [Description], CreatedBy) VALUES ('c3ae21d2-fc23-4133-ba42-b0e0a3b817d7', 'SYSTEM', 'Group for user SYSTEM. Identifies the functions that internal system functions have access to. EDITING THIS ROLE MAY CAUSE SYSTEM FAILURE', 'fadca076-3690-4a6e-af9e-f1cd68e8c7e8');
INSERT INTO SecurityUserRole (RoleId, UserId) VALUES ('c3ae21d2-fc23-4133-ba42-b0e0a3b817d7', 'fadca076-3690-4a6e-af9e-f1cd68e8c7e8');
INSERT INTO SecurityRolePolicy (PolicyId, RoleId, PolicyAction) VALUES ('ea73c05a-3159-48c8-bbcb-741911d91cd2', 'c3ae21d2-fc23-4133-ba42-b0e0a3b817d7', 2); -- GRANT Access Administrative Function
INSERT INTO SecurityRolePolicy (PolicyId, RoleId, PolicyAction) VALUES ('d15b96ab-646c-4c00-9a58-ea09eee67d7c', 'c3ae21d2-fc23-4133-ba42-b0e0a3b817d7', 0); -- DENY Login
INSERT INTO SecurityRolePolicy (PolicyId, RoleId, PolicyAction) VALUES ('f6840336-4e20-4bc0-b965-baa6d7c80be3', 'c3ae21d2-fc23-4133-ba42-b0e0a3b817d7', 2); -- GRANT Unrestricted Clinical Data
INSERT INTO SecurityRolePolicy (PolicyId, RoleId, PolicyAction) VALUES ('dea891aa-224d-4859-81b3-c1eb2750067e', 'c3ae21d2-fc23-4133-ba42-b0e0a3b817d7', 0); -- DENY Override disclosure

-- CREATE ROLE ANONYMOUS WHICH IS DENIED ALL CLINICAL 
INSERT INTO SecurityRole (RoleId, Name, [Description], CreatedBy) VALUES ('dadbd858-13c5-44a3-ad7d-1c44cecaa4b6', 'ANONYMOUS', 'Group for user ANONYMOUS. Identifies the functions that non-logged in users have access to. EDITING THIS ROLE MAY INTRODUCE SECURITY BREACHES', 'fadca076-3690-4a6e-af9e-f1cd68e8c7e8');
INSERT INTO SecurityUserRole (RoleId, UserId) VALUES ('dadbd858-13c5-44a3-ad7d-1c44cecaa4b6', 'C96859F0-043C-4480-8DAB-F69D6E86696C');
INSERT INTO SecurityRolePolicy (PolicyId, RoleId, PolicyAction) VALUES ('ea73c05a-3159-48c8-bbcb-741911d91cd2', 'dadbd858-13c5-44a3-ad7d-1c44cecaa4b6', 0); -- DENYAccess Administrative Function
INSERT INTO SecurityRolePolicy (PolicyId, RoleId, PolicyAction) VALUES ('d15b96ab-646c-4c00-9a58-ea09eee67d7c', 'dadbd858-13c5-44a3-ad7d-1c44cecaa4b6', 0); -- DENY Login
INSERT INTO SecurityRolePolicy (PolicyId, RoleId, PolicyAction) VALUES ('f6840336-4e20-4bc0-b965-baa6d7c80be3', 'dadbd858-13c5-44a3-ad7d-1c44cecaa4b6', 0); -- DENY Unrestricted Clinical Data
INSERT INTO SecurityRolePolicy (PolicyId, RoleId, PolicyAction) VALUES ('dea891aa-224d-4859-81b3-c1eb2750067e', 'dadbd858-13c5-44a3-ad7d-1c44cecaa4b6', 0); -- DENY Override disclosure

-- CREATE SYNCHRONIZERS ROLE
INSERT INTO SecurityRole (RoleId, Name, [Description], CreatedBy) VALUES ('54B7677C-682B-425F-A937-3AA03D5951F1', 'SYNCHRONIZERS', 'Group for user SYNCHRONIZERS. Identifies the functions that are used for synchronization. EDITING THIS ROLE MAY INTRODUCE SECURITY BREACHES', 'fadca076-3690-4a6e-af9e-f1cd68e8c7e8');
INSERT INTO SecurityRolePolicy (PolicyId, RoleId, PolicyAction) VALUES ('d15b96ab-646c-4c00-9a58-ea09eee67d7c', '54B7677C-682B-425F-A937-3AA03D5951F1', 2); -- GRANT Login
INSERT INTO SecurityRolePolicy (PolicyId, RoleId, PolicyAction) VALUES ('f6840336-4e20-4bc0-b965-baa6d7c80be3', '54B7677C-682B-425F-A937-3AA03D5951F1', 2); -- GRANT Unrestricted Clinical Data
INSERT INTO SecurityRolePolicy (PolicyId, RoleId, PolicyAction) VALUES ('dea891aa-224d-4859-81b3-c1eb2750067e', '54B7677C-682B-425F-A937-3AA03D5951F1', 0); -- DENY Override disclosure
/*
 A SECURITY DEVICE TABLE IS USED TO TRACK THE SECRETS FOR DEVICES DEPLOYED IN THE FIELD
 AND ALLOWS THE OPEN IZ BACKBONE TO DENY AND/OR ALERT THE USER OF NEW SIGN INS FROM
 A NEW DEVICE.

 THE SecurityDevice TABLE IS KEYED OFF THE DEVICE SECRET WHICH MAY BE A BASIC AUTH
 HEADER, A VALUE IN THE IUA HEADER (JWT TOKEN) OR TLS CERTIFICATE USED FOR COMMUNICATION
*/
CREATE TABLE SecurityDevice
(
	DeviceId UNIQUEIDENTIFIER NOT NULL DEFAULT NEWSEQUENTIALID(), -- THE DEVICE IDENTIFIER
	DeviceSecret NVARCHAR(64) NOT NULL, -- THE SECRET USED TO AUTHENTICATE THE DEVICE (EX: X509 THUMBPRINT)
	DevicePublicId NVARCHAR(64) NOT NULL UNIQUE, -- AN EXTERNAL IDENTIFIER USED BY THE DEVICE TO IDENTIFY ITSELF IN MESSAGES
	CreationTime DATETIMEOFFSET NOT NULL DEFAULT CURRENT_TIMESTAMP, -- THE TIME THE DEVICE RECORD WAS CREATED
	CreatedBy UNIQUEIDENTIFIER NOT NULL, -- THE USER THAT CREATED THE DEVICE
	ObsoletionTime DATETIMEOFFSET, -- THE TIME THE DEVICE RECORD WAS OBSOLETED
	ObsoletedBy UNIQUEIDENTIFIER, -- THE PERSON WHO OBSOLETED THE DEVICE
	ReplacesDeviceId UNIQUEIDENTIFIER, -- A POINTER TO A DEVICE THAT THIS DEVICE RECORD REPLACES
	CONSTRAINT PK_SecurityDevice PRIMARY KEY (DeviceId),
	CONSTRAINT FK_SecurityDeviceCreatedBy FOREIGN KEY (CreatedBy) REFERENCES SecurityUser(UserId),
	CONSTRAINT FK_SecuirtyDeviceObsoletedBy FOREIGN KEY (ObsoletedBy) REFERENCES SecurityUser(UserId),
	CONSTRAINT CK_SecurityDeviceObsoletedBy CHECK(ObsoletedBy IS NOT NULL AND ObsoletionTime IS NOT NULL OR ObsoletedBy IS NULL AND ObsoletionTime IS NULL)
);

CREATE INDEX IX_SecurityDeviceSecret ON SecurityDevice(DeviceSecret);

-- SECURITY APPLICATION
CREATE TABLE SecurityApplication
(
	ApplicationId UNIQUEIDENTIFIER NOT NULL DEFAULT NEWSEQUENTIALID(), -- THE APPLICATION ID
	ApplicationPublicId NVARCHAR(64) NOT NULL UNIQUE, -- AN EXTERNAL IDENTIFIER USED BY THE DEVICE TO IDENTIFY ITSELF IN MESSAGES
	ApplicationSecret NVARCHAR(64) NOT NULL, -- THE SECRET USED TO AUTHENTICATE THE DEVICE
	CreationTime DATETIMEOFFSET NOT NULL DEFAULT CURRENT_TIMESTAMP, -- THE CREATION TIME OF THE APPLICATION
	CreatedBy UNIQUEIDENTIFIER NOT NULL, -- THE USER THAT CREATED THE APPLICATION
	ObsoletionTime DATETIMEOFFSET, -- THE TIME THE APPLICATION IS OBSOLETED
	ObsoletedBy UNIQUEIDENTIFIER, -- THE USER WHICH WAS RESPONSIBLE FOR THE OBSOLETION OF THE APPLICATION
	ReplacesApplicationId UNIQUEIDENTIFIER, -- THE APPLICATION THAT IS REPLACED
	CONSTRAINT PK_SecurityApplication PRIMARY KEY (ApplicationId),
	CONSTRAINT FK_SecurityApplicationCreatedBy FOREIGN KEY (CreatedBy) REFERENCES SecurityUser(UserId),
	CONSTRAINT FK_SecurityApplicationObsoletedBy FOREIGN KEY (ObsoletedBy) REFERENCES SecurityUser(UserId),
	CONSTRAINT CK_SecurityApplicationObsoletedBy CHECK (ObsoletedBy IS NOT NULL AND ObsoletionTime IS NOT NULL OR ObsoletedBy IS NULL AND ObsoletionTime IS NULL)
);

CREATE INDEX IX_SecurityApplicationSecret ON SecurityApplication(ApplicationId);

/*
 ASSOCIATIVE ENTITY TABLE BETWEEN SECURITY DEVICE AND POLICY
*/
CREATE TABLE SecurityDevicePolicy
(
	SecurityPolicyInstanceId UNIQUEIDENTIFIER NOT NULL DEFAULT NEWSEQUENTIALID(), -- UNIQUE ID 
	DeviceId UNIQUEIDENTIFIER NOT NULL, -- THE DEVICE TO WHICH THE POLICY ASSOCIATION APPLIES 
	PolicyId UNIQUEIDENTIFIER NOT NULL, -- THE POLICY IDENTIFIER TO WHICH THE POLICY ASSOCIATION APPLIES
	PolicyAction INT NOT NULL DEFAULT 0 CHECK (PolicyAction < 3),	
	CONSTRAINT PK_SecurityDevicePolicy PRIMARY KEY (SecurityPolicyInstanceId),
	CONSTRAINT FK_SecurityDevicePolicyDeviceId FOREIGN KEY (DeviceId) REFERENCES SecurityDevice(DeviceId),
	CONSTRAINT FK_SecurityDevicePolicyPolicyId FOREIGN KEY (PolicyId) REFERENCES Policy(PolicyId)
);

CREATE UNIQUE INDEX IX_SecurityDevicePolicy ON SecurityDevicePolicy(DeviceId, PolicyId);

/*
 ASSOCIATIVE ENTITY TABLE BETWEEN SECURITY APLICATION AND POLICY
*/
CREATE TABLE SecurityApplicationPolicy
(
	SecurityPolicyInstanceId UNIQUEIDENTIFIER NOT NULL DEFAULT NEWSEQUENTIALID(), -- UNIQUE ID 
	ApplicationId UNIQUEIDENTIFIER NOT NULL, -- THE Application TO WHICH THE POLICY ASSOCIATION APPLIES 
	PolicyId UNIQUEIDENTIFIER NOT NULL, -- THE POLICY IDENTIFIER TO WHICH THE POLICY ASSOCIATION APPLIES
	PolicyAction INT NOT NULL DEFAULT 0 CHECK (PolicyAction < 3),
	CONSTRAINT PK_SecurityApplicationPolicy PRIMARY KEY (SecurityPolicyInstanceId),
	CONSTRAINT FK_SecurityApplicationPolicyApplicationId FOREIGN KEY (ApplicationId) REFERENCES SecurityApplication(ApplicationId),
	CONSTRAINT FK_SecurityApplicationPolicyPolicyId FOREIGN KEY (PolicyId) REFERENCES Policy(PolicyId)
);

CREATE UNIQUE INDEX IX_SecurityApplicationPolicy ON SecurityApplicationPolicy(ApplicationId, PolicyId);

/* 
 END SECTION: SECURITY TABLES
 */

/*
 SECTION: PHONETIC ALGORITHM
 */
 
/*
 PHONETIC ALGORITHM TABLE IS USED TO STORE A MASTER LIST OF PHONETIC ALGORITHMS
 REGISTERED WITH THE OPENIZ BACKBONE. THESE CLASSES IMPLEMENT THE IPHONETICALGORITHM
 INTERFACE AND ARE USED FOR CALCULATING THE PHONETIC CODES FOUND IN OTHER TABLES
*/
CREATE TABLE PhoneticAlgorithm
(
	PhoneticAlgorithmId UNIQUEIDENTIFIER NOT NULL DEFAULT NEWSEQUENTIALID(), -- THE ID FOR THE ALGORITHM
	Name NVARCHAR(32) UNIQUE NOT NULL, -- THE NAME OF THE ALGORITHM
	HandlerClass NVARCHAR(MAX), -- THE HANDLER CLASS WHICH GENERATES THE CODE
	CreationTime DATETIMEOFFSET NOT NULL DEFAULT CURRENT_TIMESTAMP, -- THE CREATION TIME OF THE OBJECT
	CreatedBy UNIQUEIDENTIFIER NOT NULL, -- USER THAT CREATED THE OBJECT
	UpdatedTime DATETIMEOFFSET, -- THE UPDATE TIME OF THE OBJECT
	UpdatedBy UNIQUEIDENTIFIER, -- USER THAT UPDATED THE OBJECT
	ObsoletionTime DATETIMEOFFSET, -- OBSOLETION TIME
	ObsoletedBy UNIQUEIDENTIFIER, -- OBSOLETION BY
	CONSTRAINT PK_PhoneticAlgorithm PRIMARY KEY (PhoneticAlgorithmId),
	CONSTRAINT FK_PhoneticAlgorithmCreatedBy FOREIGN KEY (CreatedBy) REFERENCES SecurityUser(UserId),
	CONSTRAINT FK_PhoneticAlgorithmUpdatedBy FOREIGN KEY (UpdatedBy) REFERENCES SecurityUser(UserId),
	CONSTRAINT FK_PhoneticAlgorithmObsoletedBy FOREIGN KEY (ObsoletedBy) REFERENCES SecurityUser(UserId),
	CONSTRAINT CK_PhoneticAlgorithmObsoletedBy CHECK (ObsoletedBy IS NULL AND ObsoletionTime IS NULL OR ObsoletedBy IS NOT NULL AND ObsoletionTime IS NOT NULL) 

);

INSERT INTO PhoneticAlgorithm (PhoneticAlgorithmId, Name, HandlerClass, CreatedBy) VALUES ('402CD339-D0E4-46CE-8FC2-12A4B0E17226', 'NONE', NULL, 'fadca076-3690-4a6e-af9e-f1cd68e8c7e8');
INSERT INTO PhoneticAlgorithm (PhoneticAlgorithmId, Name, HandlerClass, CreatedBy) VALUES ('3352a79a-d2e0-4e0c-9b48-6fd2a202c681', 'SOUNDEX', 'OpenIZ.Core.Services.Impl.PhoneticAlgorithms.SoundexPhoneticAlgorithmHandler, OpenIZ.Core, Version=1.0.0.0', 'fadca076-3690-4a6e-af9e-f1cd68e8c7e8');
INSERT INTO PhoneticAlgorithm (PhoneticAlgorithmId, Name, HandlerClass, CreatedBy) VALUES ('d79a4dc6-66a6-4602-8fcb-7dc09a895793', 'METAPHONE', 'OpenIZ.Core.Services.Impl.PhoneticAlgorithms.MetaphonePhoneticAlgorithmHandler, OpenIZ.Core, Version=1.0.0.0', 'fadca076-3690-4a6e-af9e-f1cd68e8c7e8');

/*
 * A TABLE RESPONSIBLE FOR THE STORAGE OF PHONETIC VALUES
 */
CREATE TABLE PhoneticValues
(
	PhoneticValueId UNIQUEIDENTIFIER NOT NULL DEFAULT NEWSEQUENTIALID(), -- THE UNIQUE IDENTIFIER FOR THE PHONETIC CODE
	Value NVARCHAR(64) NOT NULL, -- THE VALUE OF THE PHONETIC VALUE IN HUMAN READABLE FORM
	PhoneticCode NVARCHAR(32), -- THE PHONETIC CODE OF THE VALUE
	PhoneticAlgorithmId UNIQUEIDENTIFIER NOT NULL, -- THE PHONETIC ALGORITHM USED TO GENERATE THE PHONETIC CODE
	CONSTRAINT PK_PhoneticValues PRIMARY KEY (PhoneticValueId),
	CONSTRAINT FK_PhoneticValuesPhoneticAlgorithmId FOREIGN KEY (PhoneticAlgorithmId) REFERENCES PhoneticAlgorithm(PhoneticAlgorithmId)
);

/*
 END SECTION: PHONETIC VALUES
 */

/*
 SECTION: CONCEPT TABLES
*/

/*
 THE CONCEPT TABLE IS THE MASTER TABLE WHICH TRACKS INTERNAL CONCEPTS USED BY THE 
 OPENIZ SYSTEM. CONCEPTS ARE STORED HERE LOCALLY AS A CANONICAL CONCEPT IN THE
 OPENIZ CONCEPT DICTIONARY

 CONCEPTS MARKED AS IsSystemConcept ARE READONLY AND CANNOT BE EDITED BY USER 
 INTERFACE.
*/
CREATE TABLE Concept
(
	ConceptId UNIQUEIDENTIFIER NOT NULL DEFAULT NEWSEQUENTIALID(), -- THE UNIQUE IDENTIFIER FOR THE CONCEPT
	IsSystemConcept BIT NOT NULL DEFAULT 0, -- WHEN TRUE, INDICATES THE CONCEPT IS A SYSTEM CONCEPT
	CONSTRAINT PK_Concept PRIMARY KEY (ConceptId)
);

/*
 THE CONCEPT CLASSIFICATION TABLE IS USED TO CLASSIFY THE CONCEPTS REPRESENTED
 IN THE DICTIONARY. CONCEPT CLASSIFICATIONS ARE USED BY VALIDATION ROUTINES
 TO ENSURE THAT A CONCEPT IS APPROPRIATELY USED
*/
CREATE TABLE ConceptClass
(
	ConceptClassId UNIQUEIDENTIFIER NOT NULL DEFAULT NEWSEQUENTIALID(), -- THE CONCEPT CLASSIFICATION ID
	Name NVARCHAR(50) NOT NULL, -- THE NAME OF THE CONCEPT CLASSIFICATION
	Mnemonic NVARCHAR(16) NOT NULL, -- THE MNEMONIC USED BY THE SYSTEM TO LOCATE CONCEPTS
	CreationTime DATETIMEOFFSET NOT NULL DEFAULT CURRENT_TIMESTAMP, -- THE CREATION TIME OF THE OBJECT
	CreatedBy UNIQUEIDENTIFIER NOT NULL, -- USER THAT CREATED THE OBJECT
	UpdatedTime DATETIMEOFFSET, -- THE UPDATE TIME OF THE OBJECT
	UpdatedBy UNIQUEIDENTIFIER, -- USER THAT UPDATED THE OBJECT
	ObsoletionTime DATETIMEOFFSET, -- OBSOLETION TIME
	ObsoletedBy UNIQUEIDENTIFIER, -- OBSOLETION BY
	CONSTRAINT PK_ConceptClass PRIMARY KEY (ConceptClassId),
	CONSTRAINT FK_ConceptClassCreatedBy FOREIGN KEY (CreatedBy) REFERENCES SecurityUser(UserId),
	CONSTRAINT FK_ConceptClassUpdatedBy FOREIGN KEY (UpdatedBy) REFERENCES SecurityUser(UserId),
	CONSTRAINT FK_ConceptClassObsoletedBy FOREIGN KEY (ObsoletedBy) REFERENCES SecurityUser(UserId),
	CONSTRAINT CK_ConceptClassObsoletedBy CHECK (ObsoletedBy IS NULL AND ObsoletionTime IS NULL OR ObsoletedBy IS NOT NULL AND ObsoletionTime IS NOT NULL) 

);

-- INDEX: LOOKUP CONCEPT CLASS BY MNEMONIC
CREATE UNIQUE INDEX IX_ConceptClassMnemonic ON ConceptClass(Mnemonic);

/*
 THE CONCEPT SET TABLE IS USED TO DEFINE A SERIES OF CONCEPTS WHICH CAN BE SELECTED FOR A PARTICULAR PURPOSE
 THIS IS NOT LIKE A CONCEPT WITH MEMBERS (EXMAPLE ICD10 Z30 VS Z30.1), RATHER THIS IS A VALUE SET OF RESTRICTED 
 DOMAIN OF CONCEPTS
*/
CREATE TABLE ConceptSet
(
	ConceptSetId UNIQUEIDENTIFIER NOT NULL DEFAULT NEWSEQUENTIALID(), -- THE CONCEPT SET UNIQUE ID
	Name NVARCHAR(128) NOT NULL, -- THE NAME OF THE CONCEPT SET
	Mnemonic NVARCHAR(64) NOT NULL, -- THE SYSTEM MNEMONIC OF THE CONCEPT SET
	Oid NVARCHAR(64) NOT NULL, -- THE OID (EXTERNAL) OF THE CONCEPT SET
	Url NVARCHAR(256) NOT NULL, -- THE URL OF THE CONCEPT SET
	CreationTime DATETIMEOFFSET NOT NULL DEFAULT CURRENT_TIMESTAMP, -- THE CREATIONTIME OF THE CODE SYSTEM
	CreatedBy UNIQUEIDENTIFIER NOT NULL, -- THE USER WHICH CREATED THIS CODE SYSTEM
	ObsoletionTime DATETIMEOFFSET, -- WHEN PRESENT THE TIME THE RECORD WAS OBSOLETED
	ObsoletedBy UNIQUEIDENTIFIER, -- WHEN PRESENT INDICATES THE PERSON WHO OBSOLETED RECORD
	ObsoletionReason NVARCHAR(MAX) , -- WHEN PRESENT INDICATES WHY THE RECORD WAS OBSOLETED
	UpdatedTime DATETIMEOFFSET, -- THE UPDATE TIME OF THE OBJECT
	UpdatedBy UNIQUEIDENTIFIER, -- USER THAT UPDATED THE OBJECT
	CONSTRAINT PK_ConceptSet PRIMARY KEY (ConceptSetId),
	CONSTRAINT FK_ConceptSetCreatedBy FOREIGN KEY (CreatedBy) REFERENCES SecurityUser(UserId),
	CONSTRAINT FK_ConceptSetObsoletedBy FOREIGN KEY (ObsoletedBy) REFERENCES SecurityUser(UserId),
	CONSTRAINT FK_ConceptSetUpdatedBy FOREIGN KEY (UpdatedBy) REFERENCES SecurityUser(UserId),
	CONSTRAINT CK_ConceptSetObsoletedBy CHECK(ObsoletedBy IS NOT NULL AND ObsoletionTime IS NOT NULL OR ObsoletedBy IS NULL AND ObsoletionTime IS NULL),
	CONSTRAINT CK_ConceptSetObsoletionReason CHECK(ObsoletionReason IS NOT NULL AND ObsoletionTime IS NOT NULL OR ObsoletionTime IS NULL AND ObsoletionReason IS NULL)
);

CREATE UNIQUE INDEX IX_ConceptSetOid ON ConceptSet(Oid);
CREATE UNIQUE INDEX IX_ConceptSetUrl ON ConceptSet(Url);
CREATE UNIQUE INDEX IX_ConceptSetMnemonic ON ConceptSet(Mnemonic);

/*
 REPRESENTS A SINGLE CONCEPT WITHIN THE CONCEPT SET
*/
CREATE TABLE ConceptSetMember
(
	ConceptSetId UNIQUEIDENTIFIER NOT NULL, -- THE CONCEPT SET
	ConceptId UNIQUEIDENTIFIER NOT NULL, -- THE CONCEPT WHICH BELONGS TO THE SET
	CONSTRAINT PK_ConceptSetMember PRIMARY KEY (ConceptSetId, ConceptId),
	CONSTRAINT FK_ConceptSetMemberConceptSetId FOREIGN KEY (ConceptSetId) REFERENCES ConceptSet(ConceptSetId),
	CONSTRAINT FK_ConceptSetMemberConceptId FOREIGN KEY (ConceptId) REFERENCES Concept(ConceptId)
);

-- SEQUENCE FOR VERSION SEQ
CREATE SEQUENCE ConceptVersionSequence AS NUMERIC(20) START WITH 1 INCREMENT BY 1;

/*
 CONCEPTS ARE VERSIONED, MEANING THAT EACH EDIT TO A CONCEPT'S CORE ATTRIBUTES
 RESULTS IN A NEW VERSION OF THE CONCEPT. THIS IS DONE FOR A MEDICAL LEGAL REASON
 SUCH THAT THE EXACT ATTRIBUTES OF A CONCEPT SELECTED BY A CLINICIAN CAN BE STORED
 IN ACTS AND ENTITIES FOR LATER RETRIEVAL. 

 CONCEPT VERSIONING CAN MAKE THE DATABASE QUITE LARGE, AND IT IS RECOMMENDED THAT
 PARTITIONING AND/OR PRUNING VIA THE usp_PruneConceptVersions BE PERFORMED REGULARLY
*/
CREATE TABLE ConceptVersion
(
	ConceptVersionId UNIQUEIDENTIFIER NOT NULL DEFAULT NEWSEQUENTIALID(), -- UNIQUE IDENTIFIER FOR THE CONCEPT VERSION
	VersionSequenceId NUMERIC(20) NOT NULL UNIQUE DEFAULT (NEXT VALUE FOR ConceptVersionSequence), -- VERSION SEQUENCE
	ConceptId UNIQUEIDENTIFIER NOT NULL, -- THE CONCEPT TO WHICH THE VERSION APPLIES
	CreationTime DATETIMEOFFSET NOT NULL DEFAULT CURRENT_TIMESTAMP, -- THE CREATION TIME OF THE CONCEPT VERSION
	StatusConceptId UNIQUEIDENTIFIER NOT NULL, -- THE STATUS OF THE CONCEPT
	CreatedBy UNIQUEIDENTIFIER NOT NULL, -- THE USER WHO CREATED THE VERSION
	ObsoletionTime DATETIMEOFFSET, -- THE TIME WHEN THE CONCEPT VERSION IS OBSOLETE
	ObsoletedBy UNIQUEIDENTIFIER, -- THE USER WHO OBSOLETED THE DATA
	ReplacesVersionId UNIQUEIDENTIFIER, -- IDENTIFIES THE VERSION OF THAT THE CURRENT TUPLE REPLACES
	ConceptClassId UNIQUEIDENTIFIER, -- THE CLASSIFICATION OF THE CONCEPT AT THE VERSION
	Mnemonic NVARCHAR(64) NOT NULL, -- AN INVARIANT FOR THE CONCEPT
	CONSTRAINT PK_ConceptVersion PRIMARY KEY (ConceptVersionId),
	CONSTRAINT FK_ConceptVersionStatusConceptId FOREIGN KEY (StatusConceptId) REFERENCES Concept(ConceptId),
	CONSTRAINT FK_ConceptVersionConcept FOREIGN KEY (ConceptId) REFERENCES Concept(ConceptId),
	CONSTRAINT FK_ConceptVersionCreatedBy FOREIGN KEY (CreatedBy) REFERENCES SecurityUser(UserId),
	CONSTRAINT FK_ConceptVersionObsoletedBy FOREIGN KEY (ObsoletedBy) REFERENCES SecurityUser(UserId),
	CONSTRAINT FK_ConceptVersionConceptClass FOREIGN KEY (ConceptClassId) REFERENCES ConceptClass(ConceptClassId),
	CONSTRAINT FK_ConceptVersionReplacesVersionId FOREIGN KEY (ReplacesVersionId) REFERENCES ConceptVersion(ConceptVersionId),
	CONSTRAINT CK_ConceptVersionObsoletedBy CHECK(ObsoletedBy IS NOT NULL AND ObsoletionTime IS NOT NULL OR ObsoletedBy IS NULL AND ObsoletionTime IS NULL)
);

-- INDEX: LOOKUP CONCEPT VERSION BY CONCEPT IDENTIFIER
CREATE INDEX IX_ConceptVersionConceptId ON ConceptVersion(ConceptId);
CREATE INDEX IX_ConceptVersionClassId ON ConceptVersion(ConceptClassId);

/*
 THE CONCEPT NAME LOCALIZATION TABLE IS USED TO PROVIDE A LOCALIZED CONCEPT NAME FOR OPENIZ 
 CONCEPTS. THIS REPRESENTS THE CANONICAL NAME OF THE CONCEPT RATHER THAN THE STANDARD WIRELEVEL
 NAME AS FOUND IN ReferenceTermDisplayName
*/
CREATE TABLE ConceptName
(
	ConceptNameId UNIQUEIDENTIFIER NOT NULL DEFAULT NEWSEQUENTIALID(), -- UNIQUE IDENTIFIER FOR THE CONCEPT NAME ID
	ConceptId UNIQUEIDENTIFIER NOT NULL, -- THE CONCEPT THAT THIS NAME APPLIES TO
	EffectiveVersionSequenceId NUMERIC(20) NOT NULL, -- THE ID OF THE VERSION WHERE THIS CONCEPT NAME DID BECOME ACTIVE
	ObsoleteVersionSequenceId NUMERIC(20), -- THE ID OF THE VERSION WHERE THIS CONCEPT NAME IS NO LONGER ACTIVE
	LanguageCode NVARCHAR(2) NOT NULL, -- THE LANGUAGE CODE OF THE NAME
	Name NVARCHAR(256) NOT NULL, -- THE NAME OF THE CODE
	PhoneticCode NVARCHAR(32), -- THE PHONETIC CODE FOR THE CONCEPT NAME
	PhoneticAlgorithmId UNIQUEIDENTIFIER NOT NULL, -- THE PHONETIC ALGORITHM USED TO GENERATE THE CODE
	CONSTRAINT PK_ConceptName PRIMARY KEY (ConceptNameId),
	CONSTRAINT FK_ConceptNameConcept FOREIGN KEY (ConceptId) REFERENCES Concept(ConceptId),
	CONSTRAINT FK_ConceptNameEffectiveVersionSequenceId FOREIGN KEY (EffectiveVersionSequenceId) REFERENCES ConceptVersion(VersionSequenceId),
	CONSTRAINT FK_ConceptNameObsoleteVersionSequenceId FOREIGN KEY (ObsoleteVersionSequenceId) REFERENCES ConceptVersion(VersionSequenceId),
	CONSTRAINT FK_ConceptNamePhoneticAlgorithmId FOREIGN KEY (PhoneticAlgorithmId) REFERENCES PhoneticAlgorithm(PhoneticAlgorithmId)
);

-- INDEX TO LOOKUP CONCEPT NAME BY EFFECTIVE VERSION RANGE
CREATE INDEX IX_ConceptNameVersion ON ConceptName(EffectiveVersionSequenceId, ObsoleteVersionSequenceId);
-- LOOKUP CONCEPT NAME BY NAME
CREATE INDEX IX_ConceptNameName ON ConceptName(Name);
-- LOOKUP CONCEPT NAME BY PHONETIC MATCH
CREATE INDEX IX_ConceptNamePhoneticCode ON ConceptName(PhoneticCode, PhoneticAlgorithmId);
-- CONCEPT ID LOOKUP
CREATE INDEX IX_ConceptNameConceptId ON ConceptName(ConceptId);

/*
 REPRESENTS THE EXTERNAL CODE SYSTEMS FROM WHICH WIRE-LEVEL CODES CAN BE SENT/RECEIVED
 BY THE OPENIZ BACKBONE. A WIRE-LEVEL CODE IS DIFFERENT THAN A CONCEPT IN THAT MANY
 WIRELEVEL CODES CAN BE USED TO REPRESENT THE SAME CONCEPT. THIS IS THE PIMARY WAY
 THAT WIRE CODES ARE TRANSLATED BETWEEN CODE SYSTEMS AND/OR MESSAGING FORMATS.
*/
CREATE TABLE CodeSystem
(
	CodeSystemId UNIQUEIDENTIFIER NOT NULL DEFAULT NEWSEQUENTIALID(), -- THE UNIQUE IDENTIFIER FOR THE CODE SYSTEM
	Name NVARCHAR(256) NOT NULL, -- HUMAN READABLE NAME FOR THE CODE SYSTEM
	Oid NVARCHAR(64) NOT NULL, -- THE OID OF THE CODE SYSTEM
	Authority NVARCHAR(50), -- THE ASSIGNING AUTHORITY OR ORGANIZATION
	CreationTime DATETIMEOFFSET NOT NULL DEFAULT CURRENT_TIMESTAMP, -- THE CREATIONTIME OF THE CODE SYSTEM
	CreatedBy UNIQUEIDENTIFIER NOT NULL, -- THE USER WHICH CREATED THIS CODE SYSTEM
	ObsoletionTime DATETIMEOFFSET, -- WHEN PRESENT THE TIME THE RECORD WAS OBSOLETED
	ObsoletedBy UNIQUEIDENTIFIER, -- WHEN PRESENT INDICATES THE PERSON WHO OBSOLETED RECORD
	UpdatedTime DATETIMEOFFSET, -- THE UPDATE TIME OF THE OBJECT
	UpdatedBy UNIQUEIDENTIFIER, -- USER THAT UPDATED THE OBJECT
	ObsoletionReason NVARCHAR(MAX) , -- WHEN PRESENT INDICATES WHY THE RECORD WAS OBSOLETED
	Url NVARCHAR(256) NOT NULL, -- THE URL OR URI TO THE CODE SYSTEM
	VersionText NVARCHAR(10), -- THE VERSION OF THE CODE SYSTEM
	[Description] NVARCHAR(256), -- DESCRIPTIVE TEXT
	CONSTRAINT PK_CodeSystem PRIMARY KEY (CodeSystemId),
	CONSTRAINT FK_CodeSystemCreatedBy FOREIGN KEY (CreatedBy) REFERENCES SecurityUser(UserId),
	CONSTRAINT FK_CodeSystemObsoletedBy FOREIGN KEY (ObsoletedBy) REFERENCES SecurityUser(UserId),
	CONSTRAINT FK_CodeSystemUpdatedBy FOREIGN KEY (UpdatedBy) REFERENCES SecurityUser(UserId),
	CONSTRAINT CK_CodeSystemObsoletedBy CHECK(ObsoletedBy IS NOT NULL AND ObsoletionTime IS NOT NULL OR ObsoletedBy IS NULL AND ObsoletionTime IS NULL),
	CONSTRAINT CK_CodeSystemObsoletionReason CHECK(ObsoletionReason IS NOT NULL AND ObsoletionTime IS NOT NULL OR ObsoletionTime IS NULL AND ObsoletionReason IS NULL)
);

-- INDEX: LOOKUP CODE SYSTEM BY OID
CREATE UNIQUE INDEX IX_CodeSystemOid ON CodeSystem(Oid);
-- INDEX: LOOKUP CODE SYSTEM BY URL
CREATE INDEX IX_CodeSystemUrl ON CodeSystem(Url);

CREATE TABLE ConceptRelationshipType
(
	ConceptRelationshipTypeId UNIQUEIDENTIFIER NOT NULL DEFAULT NEWSEQUENTIALID(), -- THE UNIQUE IDENTIFIER OF THE RELATIONSHIP
	Name NVARCHAR(50) NOT NULL, -- THE NAME OF THE RELATIONSHIP TYPE
	Mnemonic NVARCHAR(20) NOT NULL UNIQUE, -- THE UNCHANGING MNEMONIC OF THE RELATIONSHIP TYPE
	CreationTime DATETIMEOFFSET NOT NULL DEFAULT CURRENT_TIMESTAMP, -- THE CREATION TIME OF THE OBJECT
	CreatedBy UNIQUEIDENTIFIER NOT NULL, -- USER THAT CREATED THE OBJECT
	UpdatedTime DATETIMEOFFSET, -- THE UPDATE TIME OF THE OBJECT
	UpdatedBy UNIQUEIDENTIFIER, -- USER THAT UPDATED THE OBJECT
	ObsoletionTime DATETIMEOFFSET, -- OBSOLETION TIME
	ObsoletedBy UNIQUEIDENTIFIER, -- OBSOLETION BY
	CONSTRAINT PK_ConceptRelationshipType PRIMARY KEY (ConceptRelationshipTypeId),
	CONSTRAINT FK_ConceptRelationshipTypeCreatedBy FOREIGN KEY (CreatedBy) REFERENCES SecurityUser(UserId),
	CONSTRAINT FK_ConceptRelationshipTypeUpdatedBy FOREIGN KEY (UpdatedBy) REFERENCES SecurityUser(UserId),
	CONSTRAINT FK_ConceptRelationshipTypeObsoletedBy FOREIGN KEY (ObsoletedBy) REFERENCES SecurityUser(UserId),
	CONSTRAINT CK_ConceptRelationshipTypeObsoletedBy CHECK (ObsoletedBy IS NULL AND ObsoletionTime IS NULL OR ObsoletedBy IS NOT NULL AND ObsoletionTime IS NOT NULL) 

);

CREATE INDEX IX_ConceptRelationshipTypeMnemonic ON ConceptRelationshipType(Mnemonic);

INSERT INTO ConceptRelationshipType (ConceptRelationshipTypeId, Name, Mnemonic, CreatedBy) VALUES ('2c4dafc2-566a-41ae-9ebc-3097d7d22f4a', 'Same as', 'SameAs', 'fadca076-3690-4a6e-af9e-f1cd68e8c7e8');
INSERT INTO ConceptRelationshipType (ConceptRelationshipTypeId, Name, Mnemonic, CreatedBy) VALUES ('ad27293d-433c-4b75-88d2-b5360cd95450', 'Inverse of', 'InverseOf', 'fadca076-3690-4a6e-af9e-f1cd68e8c7e8');
INSERT INTO ConceptRelationshipType (ConceptRelationshipTypeId, Name, Mnemonic, CreatedBy) VALUES ('a159d45b-3c34-4e1b-9b75-9193a7528ced', 'Member of', 'MemberOf', 'fadca076-3690-4a6e-af9e-f1cd68e8c7e8');
INSERT INTO ConceptRelationshipType (ConceptRelationshipTypeId, Name, Mnemonic, CreatedBy) VALUES ('ae8b4f2f-009f-4e0d-b35e-5a89555c5947', 'Negation of', 'NegationOf', 'fadca076-3690-4a6e-af9e-f1cd68e8c7e8');

CREATE TABLE ReferenceTerm
(
	ReferenceTermId UNIQUEIDENTIFIER NOT NULL DEFAULT NEWSEQUENTIALID(), -- THE UNIQUE IDENTIFIER FOR THE REFERENCE TERM
	CodeSystemId UNIQUEIDENTIFIER NOT NULL, -- THE CODE SYSTEM TO WHICH THE REFERENCE TERM BELONGS
	Mnemonic NVARCHAR(50) NOT NULL, -- THE MNEMONIC
	CreationTime DATETIMEOFFSET NOT NULL DEFAULT CURRENT_TIMESTAMP, -- THE CREATION TIME OF THE OBJECT
	CreatedBy UNIQUEIDENTIFIER NOT NULL, -- USER THAT CREATED THE OBJECT
	UpdatedTime DATETIMEOFFSET, -- THE UPDATE TIME OF THE OBJECT
	UpdatedBy UNIQUEIDENTIFIER, -- USER THAT UPDATED THE OBJECT
	ObsoletionTime DATETIMEOFFSET, -- OBSOLETION TIME
	ObsoletedBy UNIQUEIDENTIFIER, -- OBSOLETION BY
	CONSTRAINT PK_ReferenceTerm PRIMARY KEY (ReferenceTermId),
	CONSTRAINT FK_ReferenceTermCodeSystemId FOREIGN KEY (CodeSystemId) REFERENCES CodeSystem(CodeSystemId),
	CONSTRAINT FK_ReferenceTermCreatedBy FOREIGN KEY (CreatedBy) REFERENCES SecurityUser(UserId),
	CONSTRAINT FK_ReferenceTermUpdatedBy FOREIGN KEY (UpdatedBy) REFERENCES SecurityUser(UserId),
	CONSTRAINT FK_ReferenceTermObsoletedBy FOREIGN KEY (ObsoletedBy) REFERENCES SecurityUser(UserId),
	CONSTRAINT CK_ReferenceTermObsoletedBy CHECK (ObsoletedBy IS NULL AND ObsoletionTime IS NULL OR ObsoletedBy IS NOT NULL AND ObsoletionTime IS NOT NULL) 
);

CREATE INDEX IX_ReferenceTermMnemonic ON ReferenceTerm(Mnemonic);
CREATE UNIQUE INDEX IX_ReferenceTermCodeSystemMnemonic ON ReferenceTerm(CodeSystemId, Mnemonic);

CREATE TABLE ConceptReferenceTerm
(
	ConceptReferenceTermId UNIQUEIDENTIFIER NOT NULL DEFAULT NEWSEQUENTIALID(), -- THE UNIQUE IDENTIFIER OF THE REFERENCE TERM LINK
	ReferenceTermId UNIQUEIDENTIFIER NOT NULL, -- THE REFERENCE TERM
	ConceptId UNIQUEIDENTIFIER NOT NULL, -- THE CONCEPT TO WHICH THE REFERENCE TERM APPLIES
	EffectiveVersionSequenceId NUMERIC(20) NOT NULL, -- THE EFFECTIVE VERSION OF THE REFERENCE TERM
	ObsoleteVersionSequenceId NUMERIC(20), -- THE OBSOLETION VERSION OF THE REFERENCE TERM
	ConceptRelationshipTypeId UNIQUEIDENTIFIER NOT NULL, -- THE TYPE OF RELATIONSHIP,
	CONSTRAINT PK_ConceptReferenceTerm PRIMARY KEY (ConceptReferenceTermId),
	CONSTRAINT FK_ConceptReferenceTermConceptId FOREIGN KEY (ConceptId) REFERENCES Concept(ConceptId),
	CONSTRAINT FK_ConceptReferenceTermReferenceTermId FOREIGN KEY (ReferenceTermId) REFERENCES ReferenceTerm(ReferenceTermId),
	CONSTRAINT FK_ConceptReferenceTermEffectiveVersionSequenceId FOREIGN KEY (EffectiveVersionSequenceId) REFERENCES ConceptVersion(VersionSequenceId),
	CONSTRAINT FK_ConceptReferenceTermObsoleteVersionSequenceId FOREIGN KEY (ObsoleteVersionSequenceId) REFERENCES ConceptVersion(VersionSequenceId),
	CONSTRAINT FK_ConceptReferenceTermConceptRelationshipTypeId FOREIGN KEY (ConceptRelationshipTypeId) REFERENCES ConceptRelationshipType(ConceptRelationshipTypeId)
);

-- INDEX LOOKUP BY EFFECTIVE TIMES
CREATE INDEX IX_ConceptReferenceTermEffectiveVersion ON ConceptReferenceTerm(EffectiveVersionSequenceId, ObsoleteVersionSequenceId);

/*
 * REFERENCE TERM DISPLAY NAMES FOR REPRESENTATION ON THE WIRE
 */
CREATE TABLE ReferenceTermDisplayName
(
	ReferenceTermDisplayNameId UNIQUEIDENTIFIER NOT NULL DEFAULT NEWSEQUENTIALID(), -- UNIQUE IDENTIFIER OF THE REFERENCE TERM LINK
	ReferenceTermId UNIQUEIDENTIFIER NOT NULL, -- UNIQUE IDENTIFIER OF THE REFERENCE TERM
	LanguageCode NVARCHAR(2) NOT NULL, -- LANGUAGE IN WHICH THE REFERENCE TERM IS REPRESENTED
	DisplayName NVARCHAR(256) NOT NULL, -- THE DISPLAY NAME 
	CreationTime DATETIMEOFFSET NOT NULL DEFAULT CURRENT_TIMESTAMP, -- THE CREATION TIME
	CreatedBy UNIQUEIDENTIFIER NOT NULL, -- THE USER THAT CREATED THE DISPLAY NAME
	ObsoletionTime DATETIMEOFFSET, -- WHEN PRESENT REPRESENTS THE TIME THE RECORD WAS OBSOLETE
	ObsoletedBy UNIQUEIDENTIFIER, -- THE USER WHO OBSOLETED THIS RECORD
	ObsoletionReason NVARCHAR(MAX), -- WHEN PRESENT INDICATES WHY THE RECORD WAS OBSOLETED
	PhoneticCode NVARCHAR(20), -- THE PHONETIC CODE 
	PhoneticAlgorithmId UNIQUEIDENTIFIER NOT NULL, -- THE ALGORITHM USED TO GENERATE THE CODE
	CONSTRAINT PK_ReferenceTermDisplayName PRIMARY KEY (ReferenceTermDisplayNameId),
	CONSTRAINT FK_ReferenceTermDisplayNameReferenceTermId FOREIGN KEY (ReferenceTermId) REFERENCES ReferenceTerm(ReferenceTermId),
	CONSTRAINT FK_ReferenceTermDisplayNameCreatedBy FOREIGN KEY (CreatedBy) REFERENCES SecurityUser(UserId),
	CONSTRAINT FK_ReferenceTermDisplayNameObsoletedBy FOREIGN KEY (ObsoletedBy) REFERENCES SecurityUser(UserId),
	CONSTRAINT FK_ReferenceTermDisplayNamePhoneticAlgorithmId FOREIGN KEY (PhoneticAlgorithmId) REFERENCES PhoneticAlgorithm(PhoneticAlgorithmId),
	CONSTRAINT CK_ReferenceTermDisplayNameObsoletedBy CHECK(ObsoletedBy IS NOT NULL AND ObsoletionTime IS NOT NULL OR ObsoletedBy IS NULL AND ObsoletionTime IS NULL),
	CONSTRAINT CK_ReferenceTermDisplayNameObsoletionReason  CHECK(ObsoletionReason IS NOT NULL AND ObsoletionTime IS NOT NULL OR ObsoletionTime IS NULL AND ObsoletionReason IS NULL)
);

CREATE INDEX IX_ReferenceTermDisplayNamePhonetic ON ReferenceTermDisplayName(PhoneticCode, PhoneticAlgorithmId);
CREATE INDEX IX_ReferenceTermDisplayNameName ON ReferenceTermDisplayName(DisplayName);

/*
 * REPRESENTS A RELATIONSHIP BETWEEN CONCEPTS
 */
CREATE TABLE ConceptRelationship
(
	ConceptRelationshipId UNIQUEIDENTIFIER NOT NULL DEFAULT NEWSEQUENTIALID(), -- THE UNIQUE IDENTIFIER FOR THE CONCEPT RELATIONSHIP
	SourceConceptId UNIQUEIDENTIFIER NOT NULL, -- THE SOURCE OF THE CONCEPT RELATIONSHIP
	TargetConceptId UNIQUEIDENTIFIER NOT NULL, -- THE TARGET OF THE RELATIONSHIP
	ConceptRelationshipTypeId UNIQUEIDENTIFIER NOT NULL, -- THE TYPE OF RELATIONSHIP
	EffectiveVersionSequenceId NUMERIC(20) NOT NULL, -- THE VERSION OF THE CONCEPT TO WHICH THE SOURCE RELATION APPLIES
	ObsoleteVersionSequenceId NUMERIC(20), -- THE VERSION OF THE CONCEPT WHEN THE RELATION IS NO LONGER VALID
	CONSTRAINT PK_ConceptRelationship PRIMARY KEY (ConceptRelationshipId),
	CONSTRAINT FK_ConceptRelationshipSourceConceptId FOREIGN KEY (SourceConceptId) REFERENCES Concept(ConceptId),
	CONSTRAINT FK_ConceptRelationshipTargetConceptId FOREIGN KEY (TargetConceptId) REFERENCES Concept(ConceptId),
	CONSTRAINT FK_ConceptRelationshipConceptRelationshipTypeId FOREIGN KEY (ConceptRelationshipTypeId) REFERENCES ConceptRelationshipType(ConceptRelationshipTypeId),
	CONSTRAINT FK_ConceptRelationshipEffectiveVersionSequenceId FOREIGN KEY (EffectiveVersionSequenceId) REFERENCES ConceptVersion(VersionSequenceId),
	CONSTRAINT FK_ConceptRelationshpObsoleteVersionSequenceId FOREIGN KEY (ObsoleteVersionSequenceId) REFERENCES ConceptVersion(VersionSequenceId)
);

CREATE INDEX IX_ConceptRelationshipEffectiveVersion ON ConceptRelationship(EffectiveVersionSequenceId, ObsoleteVersionSequenceId);
CREATE INDEX IX_ConceptRelationshipSource ON ConceptRelationship(SourceConceptId);
CREATE INDEX IX_ConceptRelationshipTarget ON ConceptRelationship(TargetConceptId);

GO 

CREATE VIEW ConceptCurrentVersion AS
	SELECT ConceptVersion.*, Concept.IsSystemConcept, ConceptClass.Mnemonic AS ConceptClassMnemonic FROM ConceptVersion INNER JOIN Concept ON (ConceptVersion.ConceptId = Concept.ConceptId)
		INNER JOIN ConceptClass ON (ConceptVersion.ConceptClassId = ConceptClass.ConceptClassId)
		WHERE ConceptVersion.ObsoletionTime IS NULL;
GO

CREATE VIEW ConceptSetMembersView AS 
	SELECT ConceptSet.ConceptSetId, ConceptSet.Mnemonic as ConceptSetMnemonic, ConceptCurrentVersion.ConceptId, ConceptCurrentVersion.ConceptVersionId, ConceptCurrentVersion.Mnemonic as ConceptMnemonic, ConceptCurrentVersion.ConceptClassMnemonic  FROM ConceptSet INNER JOIN ConceptSetMember ON (ConceptSet.ConceptSetId = ConceptSetMember.ConceptSetId)
	INNER JOIN ConceptCurrentVersion ON (ConceptSetMember.ConceptId = ConceptCurrentVersion.ConceptId);

GO 

CREATE FUNCTION fn_AssertConceptClass (@ConceptId UNIQUEIDENTIFIER, @AssertClassMnemonic NVARCHAR(32))
RETURNS BIT BEGIN
	RETURN (SELECT COUNT(*) FROM ConceptCurrentVersion WHERE ConceptId = @ConceptId AND ConceptClassMnemonic = @AssertClassMnemonic);
END;

GO

CREATE FUNCTION fn_IsConceptSetMember (@ConceptId UNIQUEIDENTIFIER, @ConceptSetMnemonic NVARCHAR(32))
RETURNS BIT BEGIN
	RETURN (SELECT COUNT(*) FROM ConceptSetMember INNER JOIN ConceptSet ON (ConceptSetMember.ConceptSetId = ConceptSet.ConceptSetId)
		WHERE ConceptSet.Mnemonic = @ConceptSetMnemonic AND ConceptId = @ConceptId);
END;

GO

-- ADD CONSTRAINT CHECK
ALTER TABLE ConceptVersion ADD CONSTRAINT CK_ConceptVersionStatusConceptIdConceptClass CHECK (dbo.fn_IsConceptSetMember(StatusConceptId, 'ConceptStatus') = 1);

CREATE TABLE ExtensionType
(
	ExtensionTypeId UNIQUEIDENTIFIER NOT NULL DEFAULT NEWSEQUENTIALID(), -- THE UNIQUE IDENTIFIER FOR THE EXTENSION
	HandlerClass NVARCHAR(256) NOT NULL, -- THE IEXTENSIONHANDLER WHICH CAN SERIALIZE/DESERIALIZE AND VALIDATE THE EXTENSION
	Name NVARCHAR(64) NOT NULL, -- THE HUMAN NAME FOR THE EXTENSION
	IsEnabled BIT NOT NULL DEFAULT 0, -- INDICATES WHETHER THE EXTENSION IS ENABLED
	CreationTime DATETIMEOFFSET NOT NULL DEFAULT CURRENT_TIMESTAMP, -- THE TIME THE EXTENSION WAS CREATE
	CreatedBy UNIQUEIDENTIFIER NOT NULL, -- THE USER THAT CREATED THE EXTENSION, OR IF IT WAS INSTALLED, THE USER THAT INSTALLED THE EXTENSION
	UpdatedTime DATETIMEOFFSET, -- THE TIME THE EXTENSION WAS UPDATED
	UpdatedBy UNIQUEIDENTIFIER, -- THE PERSON WHO LAST UPDATED THE EXTENSION
	ObsoletionTime DATETIMEOFFSET, -- THE TIME THE EXTENSION WAS OBSOLETED
	ObsoletedBy UNIQUEIDENTIFIER, -- THE PERSON WHO OBSOLETED THE EXTENSION
	CONSTRAINT PK_ExtensionType PRIMARY KEY (ExtensionTypeId),
	CONSTRAINT FK_ExtensionTypeEnabledBy FOREIGN KEY (CreatedBy) REFERENCES SecurityUser(UserId),
	CONSTRAINT FK_ExtensionTypeUpdatedBy FOREIGN KEY (UpdatedBy) REFERENCES SecurityUser(UserId),
	CONSTRAINT FK_ExtensionTypeObsoletedBy FOREIGN KEY (ObsoletedBy) REFERENCES SecurityUser(UserId),
	CONSTRAINT CK_ExtensionTypeObsoletedBy CHECK(ObsoletedBy IS NOT NULL AND ObsoletionTime IS NOT NULL OR ObsoletedBy IS NULL AND ObsoletionTime IS NULL),
	CONSTRAINT CK_ExtensionTypeUpdatedBy CHECK(UpdatedBy IS NOT NULL AND UpdatedTime IS NOT NULL OR UpdatedBy IS NULL AND UpdatedTime IS NULL)
);

CREATE INDEX IX_PhoneticValuesPhoneticCode ON PhoneticValues(PhoneticCode, PhoneticAlgorithmId);


CREATE TABLE AssigningAuthority
(
	AssigningAuthorityId UNIQUEIDENTIFIER NOT NULL DEFAULT NEWSEQUENTIALID(), -- UNIQUEIDENTIFIER FOR THE ASSIGING AUTHORITY
	Name NVARCHAR(50) NOT NULL, -- THE NAME OF THE ASSIGNING AUTHORITY
	Oid NVARCHAR(256) NOT NULL UNIQUE, -- THE OID OF THE ASSINGING AUTHORITY
	HL7CX4 NVARCHAR(32) NOT NULL UNIQUE, -- THE HL7 v2 CX4 VALUE OF THE AUTHORITY
	Url NVARCHAR(250), -- THE URL OF THE AA IF APPLICABLE
	AssigningDeviceId UNIQUEIDENTIFIER, -- DEVICE IDENTIFIER OF A DEVICE THAT IS PERMITTED TO ASSIGN IDS
	[Description] NVARCHAR(MAX), -- HUMAN DESCRIPTION FOR THE VALUE
	CreationTime DATETIMEOFFSET NOT NULL DEFAULT CURRENT_TIMESTAMP, -- THE TIME THE AUTHORITY WAS CREATED
	CreatedBy UNIQUEIDENTIFIER NOT NULL, -- THE USER WHO CREATED THE AA
	ObsoletionTime DATETIMEOFFSET, -- THE TIME WHEN THE ASSINGING AUTHORITY IS OBSOLETE
	ObsoletedBy UNIQUEIDENTIFIER, -- THE USER WHO OBSOLETED THE AA
	CONSTRAINT PK_AssigningAuthority PRIMARY KEY (AssigningAuthorityId),
	CONSTRAINT FK_AssigningAuthorityCreatedBy FOREIGN KEY (CreatedBy) REFERENCES SecurityUser(UserId),
	CONSTRAINT FK_AssigningAuthorityObsoletedBy FOREIGN KEY (ObsoletedBy) REFERENCES SecurityUser(UserId),
	CONSTRAINT CK_AssigningAuthorityObsoletedBy CHECK (ObsoletionTime IS NOT NULL AND ObsoletedBy IS NOT NULL OR ObsoletionTime IS NULL AND ObsoletedBy IS NULL),
	CONSTRAINT FK_AssigningAuthorityAssigningDeviceId FOREIGN KEY (AssigningDeviceId) REFERENCES SecurityDevice(DeviceId)
);

CREATE TABLE IdentifierType
(
	IdentifierTypeId UNIQUEIDENTIFIER NOT NULL DEFAULT NEWSEQUENTIALID(), -- THE UNIQUE IDENTIFIER FOR THE IDENTITIFER TYPE
	IdentifierTypeConceptId UNIQUEIDENTIFIER NOT NULL, -- THE CONCEPT WHICH REPRESENTS THE TYPE
	EntityClassScopeConceptId UNIQUEIDENTIFIER NOT NULL, -- THE SCOPE IN WHICH THE ENTITY IDENTIFIER TYPE CAN BE USED
	CONSTRAINT PK_EntityIdentifierType PRIMARY KEY (IdentifierTypeId),
	CONSTRAINT FK_EntityIdentifierTypeIdentifierTypeConceptId FOREIGN KEY (IdentifierTypeConceptId) REFERENCES Concept(ConceptId),
	CONSTRAINT FK_EntityIdentifierTypeEntityClassScopeConceptId FOREIGN KEY (EntityClassScopeConceptId) REFERENCES Concept(ConceptId)
);

CREATE TABLE Act
(
	ActId UNIQUEIDENTIFIER NOT NULL DEFAULT NEWSEQUENTIALID(), -- THE UNIQUE IDENTIFIER FOR THE ACT. THIS IS A NUMERIC FOR EASE OF
	ClassConceptId UNIQUEIDENTIFIER NOT NULL, -- CLASSIFIES THE TYPE OF ACT REPRESENTED
	MoodConceptId UNIQUEIDENTIFIER NOT NULL, -- THE MOOD OF THE ACT
	CONSTRAINT PK_Act PRIMARY KEY (ActId),
	CONSTRAINT FK_ActClassConceptId FOREIGN KEY (ClassConceptId) REFERENCES Concept(ConceptId),
	CONSTRAINT CK_ActClassConceptIdConceptClass CHECK (dbo.fn_IsConceptSetMember(ClassConceptId, 'ActClass') = 1),
	CONSTRAINT FK_ActVersionMoodConceptId FOREIGN KEY (MoodConceptId) REFERENCES Concept(ConceptId),
	CONSTRAINT CK_ActVersionActMoodConceptIdConceptClass CHECK (dbo.fn_IsConceptSetMember(MoodConceptId, 'ActMood') = 1)
);

CREATE SEQUENCE ActVersionSequenceId START WITH 1 INCREMENT BY 1;

CREATE TABLE ActVersion
(
	ActVersionId UNIQUEIDENTIFIER NOT NULL DEFAULT NEWSEQUENTIALID(), -- THE UNIQUE IDENTIFIER FOR THE VERSION
	VersionSequenceId NUMERIC(20) NOT NULL UNIQUE DEFAULT (NEXT VALUE FOR ActVersionSequenceId), -- VERSION SEQUENCE ID
	ActId UNIQUEIDENTIFIER NOT NULL, -- THE ACT TO WHICH THE VERSION APPLIES
	CreationTime DATETIMEOFFSET NOT NULL DEFAULT CURRENT_TIMESTAMP, -- THE CREATION TIME OF THE ACT
	CreatedBy UNIQUEIDENTIFIER NOT NULL, -- THE POINTER TO THE USER WHO CREATED THE VERSION
	ObsoletionTime DATETIMEOFFSET, -- THE TIME WHEN THE ACT IS OBSOLETED
	ObsoletedBy UNIQUEIDENTIFIER, -- THE USER WHO OBSOLETED THE RECORD
	ObsoletionReason NVARCHAR(MAX), -- A REASON FOR OBSOLETION
	ReplacesVersionId UNIQUEIDENTIFIER, -- THE VERSION REPLACED BY THIS ACT VERSION
	NegationInd BIT NOT NULL DEFAULT 0, -- AN INDICATOR WHICH DESCRIBES THE ACT DID NOT 
	TypeConceptId UNIQUEIDENTIFIER, -- TYPE CONCEPT 
	StatusConceptId UNIQUEIDENTIFIER NOT NULL, -- THE CURRENT STATUS OF THE ACT
	ActTime DATETIMEOFFSET, -- THE DATE THE ACT OCCURRED
	ActStartTime DATETIMEOFFSET, -- THE TIME WHEN THE ACT STARTED
	ActStopTime DATETIMEOFFSET, -- THE TIME WHEN THE ACT STOPPED
	CONSTRAINT PK_ActVersion PRIMARY KEY (ActVersionId),
	CONSTRAINT FK_ActVersionAct FOREIGN KEY (ActId) REFERENCES Act(ActId),
	CONSTRAINT FK_ActVersionCreatedBy FOREIGN KEY (CreatedBy) REFERENCES SecurityUser(UserId),
	CONSTRAINT FK_ActVersionObsoletedBy FOREIGN KEY (ObsoletedBy) REFERENCES SecurityUser(UserId),
	CONSTRAINT FK_ActVersionReplacesVersionId FOREIGN KEY (ReplacesVersionId) REFERENCES ActVersion(ActVersionId),
	CONSTRAINT FK_ActVersionTypeConceptId FOREIGN KEY (TypeConceptId) REFERENCES Concept(ConceptId),
	CONSTRAINT FK_ActVersionStatusConceptId FOREIGN KEY (StatusConceptId) REFERENCES Concept(ConceptId),
	CONSTRAINT CK_ActVersionActClassStatusConceptIdConceptClass CHECK (dbo.fn_IsConceptSetMember(StatusConceptId, 'ActStatus') = 1),
	CONSTRAINT CK_ActVersionObsoletedBy CHECK(ObsoletedBy IS NOT NULL AND ObsoletionTime IS NOT NULL OR ObsoletedBy IS NULL AND ObsoletionTime IS NULL),
	CONSTRAINT CK_ActVersionActTime CHECK(ActTime IS NOT NULL OR ActStartTime IS NOT NULL OR ActStopTime IS NOT NULL) -- CHECK: ONE OF ACT TIME, START, OR END MUST BE PROVIDED
);

CREATE TABLE ActIdentifier
(
	ActIdentifierId UNIQUEIDENTIFIER NOT NULL DEFAULT NEWSEQUENTIALID(), -- THE UNIQUE IDENTIFIER FOR THE ACT IDENTIFIER 
	IdentifierTypeId UNIQUEIDENTIFIER NOT NULL, -- THE TYPE OF IDENTIFIER
	ActId UNIQUEIDENTIFIER NOT NULL, -- THE ACT TO WHICH THE IDENTIFIER IS ATTACHED
	EffectiveVersionSequenceId NUMERIC(20) NOT NULL, -- THE VERSION WHERE THE IDENTIFIER BECAME ACTIVE
	ObsoleteVersionSequenceId NUMERIC(20), -- THE OBSOLETION VERSION IDENTIFIER
	AssigningAuthorityId UNIQUEIDENTIFIER NOT NULL, -- THE ASSIGNING AUTHORITY OF THE IDENTIFIER
	IdentifierValue NVARCHAR(50) NOT NULL, -- THE VALUE OF THE IDENTIFIER
	CONSTRAINT PK_ActIdentifier PRIMARY KEY (ActIdentifierId),
	CONSTRAINT FK_ActIdentifierActId FOREIGN KEY (ActId) REFERENCES Act(ActId),
	CONSTRAINT FK_ActIdentifierIdentifierTypeId FOREIGN KEY (IdentifierTypeId) REFERENCES IdentifierType(IdentifierTypeId),
	CONSTRAINT FK_ActIdentifierEffectiveVersionSequenceId FOREIGN KEY (EffectiveVersionSequenceId) REFERENCES ActVersion(VersionSequenceId),
	CONSTRAINT FK_ActIdentifierObsoleteVersionSequenceId FOREIGN KEY (ObsoleteVersionSequenceId) REFERENCES ActVersion(VersionSequenceId),
	CONSTRAINT FK_ActIdentifierAssigningAuthorityId FOREIGN KEY (AssigningAuthorityId) REFERENCES AssigningAuthority(AssigningAuthorityId)
	-- TODO: CHECK IDENTIFIER TYPE SCOPE
);

CREATE INDEX IX_ActIdentifierEffectiveVersion ON ActIdentifier(EffectiveVersionSequenceId, ObsoleteVersionSequenceId);
CREATE INDEX IX_ActIdentifierIdentifierValue ON ActIdentifier(AssigningAuthorityId, IdentifierValue);

CREATE TABLE ActRelationship
(
	ActRelationshipId UNIQUEIDENTIFIER NOT NULL DEFAULT NEWSEQUENTIALID(), -- UNIQUE IDENTIFIER FOR THE RELATIONSHIP, ID IS A GUID BECAUSE IT ISN'T PUBLIC FACING
	SourceActId UNIQUEIDENTIFIER NOT NULL, -- THE SOURCE ACT
	TargetActId UNIQUEIDENTIFIER NOT NULL, -- THE TARGET ACT
	EffectiveVersionSequenceId NUMERIC(20) NOT NULL, -- THE EFFECTIVE VERSION OF THE ACT WHERE THE ASSOCIATION IS ACTIVE
	ObsoleteVersionSequenceId NUMERIC(20) NOT NULL, -- THE OBSOLETION VERSION OF THE ACT
	RelationshipTypeConceptId UNIQUEIDENTIFIER NOT NULL, -- THE RELATIONSHIP OF THE ACT
	CONSTRAINT PK_ActRelationship PRIMARY KEY (ActRelationshipId),
	CONSTRAINT FK_ActRelationshipSourceActId FOREIGN KEY (SourceActId) REFERENCES Act(ActId),
	CONSTRAINT FK_ActRelationshipTargetActId FOREIGN KEY (TargetActId) REFERENCES Act(ActId),
	CONSTRAINT FK_ActRelationshipEffectiveVersionSequenceId FOREIGN KEY (EffectiveVersionSequenceId) REFERENCES ActVersion(VersionSequenceId),
	CONSTRAINT FK_ActRelationshipObsoleteVersionSequenceId FOREIGN KEY (ObsoleteVersionSequenceId) REFERENCES ActVersion(VersionSequenceId),
	CONSTRAINT FK_ActRelationshipRelationshipTypeConceptId FOREIGN KEY (RelationshipTypeConceptId) REFERENCES Concept(ConceptId),
	CONSTRAINT CK_ActRelationshipRelationshipTypeConceptConceptClass CHECK (dbo.fn_IsConceptSetMember(RelationshipTypeConceptId, 'ActRelationshipType') = 1)
);

CREATE INDEX IX_ActRelationshipSourceAct ON ActRelationship(SourceActId);
CREATE INDEX IX_ActRelationshipTargetAct ON ActRelationship(TargetActId);
CREATE INDEX IX_ActRelationshipEffectiveVersion ON ActRelationship(EffectiveVersionSequenceId, ObsoleteVersionSequenceId);

CREATE TABLE ActExtension
(
	ActExtensionId UNIQUEIDENTIFIER NOT NULL DEFAULT NEWSEQUENTIALID(), -- UNIQUE IDENTIFIER FOR THE EXTENSION INSTANCE
	ActId UNIQUEIDENTIFIER NOT NULL, -- THE ACT TO WHICH THE EXTENSION APPLIES
	ExtensionTypeId UNIQUEIDENTIFIER NOT NULL, -- THE TYPE OF EXTENSION
	ExtensionValue VARBINARY(MAX), -- THE SERIALIZED EXTENSION VALUE
	ExtensionDisplay NVARCHAR(64), -- A DISPLAY VERSION OF THE EXTENSION VALUE
	EffectiveVersionSequenceId NUMERIC(20) NOT NULL, -- THE VERSION WHERE THE EXTENSION BECOMES ACTIVE
	ObsoleteVersionSequenceId NUMERIC(20), -- THE VERSION WHERE THE EXTENSION IS NO LONGER VALID
	CONSTRAINT PK_ActExtension PRIMARY KEY (ActExtensionId),
	CONSTRAINT FK_ActExtensionActId FOREIGN KEY (ActId) REFERENCES Act(ActId),
	CONSTRAINT FK_ActExtensionExtensionTypeId FOREIGN KEY (ExtensionTypeId) REFERENCES ExtensionType(ExtensionTypeId),
	CONSTRAINT FK_ActExtensionEffectiveVersionSequenceId FOREIGN KEY (EffectiveVersionSequenceId) REFERENCES ActVersion(VersionSequenceId),
	CONSTRAINT FK_ActExtensionObsoleteVersionSequenceId FOREIGN KEY (ObsoleteVersionSequenceId) REFERENCES ActVersion(VersionSequenceId)
);

CREATE INDEX IX_ActExtensionEffectiveVersion ON ActExtension(EffectiveVersionSequenceId, ObsoleteVersionSequenceId);

-- TABLE TO STORE DATA RELATED TO ACTS WHICH ARE CONTROL ACTS
CREATE TABLE ControlAct (
	ActVersionId UNIQUEIDENTIFIER NOT NULL, -- THE VERSION OF THE ACT TO WHICH THE CONTROL ACT DATA APPLIES
	CONSTRAINT PK_ControlAct PRIMARY KEY (ActVersionId),
	CONSTRAINT FK_ControlActActVersionId FOREIGN KEY (ActVersionId) REFERENCES ActVersion(ActVersionId)
);

CREATE TABLE Observation
(
	ActVersionId UNIQUEIDENTIFIER NOT NULL, -- THE VERSION TO WHICH THIS OBSERVATION DATA APPLIES
	InterpretationConceptId UNIQUEIDENTIFIER, -- THE INTERPRETAION CODE
	ValueType CHAR(2) NOT NULL CHECK (ValueType IN ('PQ','ST','CD')),
	CONSTRAINT PK_Observation PRIMARY KEY (ActVersionId),
	CONSTRAINT FK_ObservationActVersionId FOREIGN KEY (ActVersionId) REFERENCES ActVersion(ActVersionId),
	CONSTRAINT FK_ObservationInterpretationConceptId FOREIGN KEY (InterpretationConceptId) REFERENCES Concept(ConceptId),
	CONSTRAINT CK_ObservationInterpretationConceptClass CHECK (dbo.fn_IsConceptSetMember(InterpretationConceptId, 'ActInterpretation') = 1)
);

CREATE TABLE QuantityObservation
(
	ActVersionId UNIQUEIDENTIFIER NOT NULL, -- THE VERSION TO WHICH THE OBSERVATION QUANTITY APPLIES
	Quantity DECIMAL NOT NULL, -- THE QUANTITY OF THE OBSERVATION
	QuantityPrecision NUMERIC(2) NOT NULL, -- IDENTIFIES THE PRECISION OF THE OBSERVED VALUE
	UnitOfMeasureConceptId UNIQUEIDENTIFIER NOT NULL, -- IDENTIFIES THE UNIT OF MEASURE CONCEPT
	CONSTRAINT PK_QuantityObservation PRIMARY KEY (ActVersionId),
	CONSTRAINT FK_QuantityObservationActVersionId FOREIGN KEY (ActVersionId) REFERENCES Observation(ActVersionId),
	CONSTRAINT FK_QuantityObservationUnitOfMeasureConceptId FOREIGN KEY (UnitOfMeasureConceptId) REFERENCES	Concept(ConceptId),
	CONSTRAINT CK_QuantityObservationUnitOfMeasureConceptClass CHECK (dbo.fn_AssertConceptClass(UnitOfMeasureConceptId, 'UnitOfMeasure') = 1)
);

CREATE TABLE CodedObservation
(
	ActVersionId UNIQUEIDENTIFIER NOT NULL, -- THE VERSION OF THE OBSERVATION THIS CODED VALUE CORRESPONDS TO
	ValueConceptId UNIQUEIDENTIFIER NOT NULL, -- THE VALUE OF THE CODE
	CONSTRAINT PK_CodedObservation PRIMARY KEY (ActVersionId),
	CONSTRAINT FK_CodedObservationActVersionId FOREIGN KEY (ActVersionId) REFERENCES Observation(ActVersionId),
	CONSTRAINT FK_CodedObservationValueConceptId FOREIGN KEY (ValueConceptId) REFERENCES Concept(ConceptId)
);

CREATE TABLE TextObservation
(
	ActVersionId UNIQUEIDENTIFIER NOT NULL, -- THE VERSION OF THE OBSERVATION THIS STRING VALUE CORRESPONDS TO
	Value VARCHAR(MAX) NOT NULL, -- THE VALUE OF THE OBSERVATION
	CONSTRAINT PK_StringObservation PRIMARY KEY (ActVersionId),
	CONSTRAINT FK_StringObservationActVersionId FOREIGN KEY (ActVersionId) REFERENCES Observation(ActVersionId),
);

CREATE TABLE PatientEncounter
(
	ActVersionId UNIQUEIDENTIFIER NOT NULL, -- THE ACT IDENTIFIER TO WHICH THIS PATIENT ENCOUNTER DATA BELONGS
	DischargeDispositionConceptId UNIQUEIDENTIFIER, -- THE MANNER IN WHICH THE PATIENT LEFT THE ENCOUNTER
	CONSTRAINT PK_PatientEncounter PRIMARY KEY (ActVersionId),
	CONSTRAINT FK_PatientEncounterActVersionId FOREIGN KEY (ActVersionId) REFERENCES ActVersion(ActVersionId),
	CONSTRAINT FK_PatientEncounterDischargeDispositionConceptId FOREIGN KEY (DischargeDispositionConceptId) REFERENCES Concept(ConceptId)
);

CREATE TABLE SubstanceAdministration
(
	ActVersionId UNIQUEIDENTIFIER NOT NULL, -- THE ACT IDENTIFIER TO WHICH THIS SUBSTANCE ADMINISTRATION DATA BELONGS
	RouteConceptId UNIQUEIDENTIFIER NOT NULL, -- THE ROUTE WHICH THE SUBSTANCE WAS ADMINISTERED
	DoseQuantity DECIMAL NOT NULL, -- THE DOSE QUANTITY GIVEN
	DoseUnitConceptId UNIQUEIDENTIFIER NOT NULL, -- THE UOM FOR THE DOSE
	SequenceId INT NOT NULL, -- THE SEQUENCE OF THE DOSE
	CONSTRAINT PK_SubstanceAdministration PRIMARY KEY (ActVersionId),
	CONSTRAINT FK_SubstanceAdministrationActVersionId FOREIGN KEY (ActVersionId) REFERENCES ActVersion(ActVersionId),
	CONSTRAINT FK_SubstanceAdministrationRouteConceptId FOREIGN KEY (RouteConceptId) REFERENCES Concept(ConceptId),
	CONSTRAINT CK_SubstanceAdministrationRouteConceptClassCode CHECK (dbo.fn_AssertConceptClass(RouteConceptId, 'Route') = 1),
	CONSTRAINT FK_SubstanceAdministrationDoseUnitConceptId FOREIGN KEY (DoseUnitConceptId) REFERENCES Concept(ConceptId),
	CONSTRAINT CK_SubstanceAdministrationDoseUnitConceptClassCode CHECK (dbo.fn_AssertConceptClass(DoseUnitConceptId, 'UnitOfMeasure') = 1)
);

CREATE TABLE ActTag
(
	ActTagId UNIQUEIDENTIFIER NOT NULL DEFAULT NEWSEQUENTIALID(), -- UNIQUE IDENTIFIER FOR THE TAG
	ActId UNIQUEIDENTIFIER NOT NULL, -- THE ACT IDENTIFIER
	Name NVARCHAR(64) NOT NULL, -- THE NAME OF THE TAG
	Value NVARCHAR(MAX), -- THE VALUE OF THE TAG
	CreationTime DATETIMEOFFSET NOT NULL DEFAULT CURRENT_TIMESTAMP, -- THE TIME THAT THE TAG WAS ATTACHED
	CreatedBy UNIQUEIDENTIFIER, -- THE USER THAT CREATED THE TAG
	ObsoletionTime DATETIMEOFFSET, -- THE TIME WHEN THE TAG WAS OBSOLETED
	ObsoletedBy UNIQUEIDENTIFIER, -- THE USER WHO OBSOLETED THE TAG
	CONSTRAINT PK_ActTag PRIMARY KEY (ActTagId),
	CONSTRAINT FK_ActTagActId FOREIGN KEY (ActId) REFERENCES Act(ActId),
	CONSTRAINT FK_ActTagCreatedBy FOREIGN KEY (CreatedBy) REFERENCES SecurityUser(UserId),
	CONSTRAINT FK_ActTagObsoletedBy FOREIGN KEY (ObsoletedBy) REFERENCES SecurityUser(UserId),
	CONSTRAINT CK_ActTagObsoletedBy CHECK(ObsoletedBy IS NOT NULL AND ObsoletionTime IS NOT NULL OR ObsoletedBy IS NULL AND ObsoletionTime IS NULL)
);

CREATE TABLE ActPolicy
(
	ActPolicyId UNIQUEIDENTIFIER NOT NULL DEFAULT NEWSEQUENTIALID(), -- THE UNIQUE IDENTIFIER FOR THE ACT/POLICY 
	ActId UNIQUEIDENTIFIER NOT NULL, -- THE ACT TO WHICH THE POLICY APPLIES
	EffectiveVersionSequenceId NUMERIC(20) NOT NULL, -- THE VERSION FROM WHICH THE POLICY IS EFFECITVE
	ObsoleteVersionSequenceId NUMERIC(20), -- THE VERSION AT WHICH THE POLICY NO LONGER APPLIES
	PolicyId UNIQUEIDENTIFIER NOT NULL, -- THE POLICY APPLIED
	CONSTRAINT PK_ActPolicy PRIMARY KEY (ActPolicyId),
	CONSTRAINT FK_ActPolicyActId FOREIGN KEY (ActId) REFERENCES Act(ActId),
	CONSTRAINT FK_ActPolicyEffectiveVersionSequenceId FOREIGN KEY (EffectiveVersionSequenceId) REFERENCES ActVersion(VersionSequenceId),
	CONSTRAINT FK_ActPolicyObsoleteVersionSequenceId FOREIGN KEY (ObsoleteVersionSequenceId) REFERENCES ActVersion(VersionSequenceId),
	CONSTRAINT FK_ActPolicyPolicyId FOREIGN KEY (PolicyId) REFERENCES Policy(PolicyId)
);

CREATE INDEX IX_ActPolicyEffectiveVersion ON ActPolicy(EffectiveVersionSequenceId, ObsoleteVersionSequenceId);

CREATE TABLE Entity
(
	EntityId UNIQUEIDENTIFIER NOT NULL DEFAULT NEWSEQUENTIALID(), -- THE UNIQUE IDENTIFIER FOR THE ENTITY
	ClassConceptId UNIQUEIDENTIFIER NOT NULL, -- IDENTIFIES THE CONCEPT IDENTIFIER
	DeterminerConceptId UNIQUEIDENTIFIER NOT NULL, -- IDENTIFIES WHETHER THE ENTITY IS A CLASS OF THING OR AN ACTUAL THING
	CONSTRAINT PK_Entity PRIMARY KEY (EntityId),
	CONSTRAINT FK_EntityClassConceptId FOREIGN KEY (ClassConceptId) REFERENCES Concept(ConceptId),
	CONSTRAINT FK_EntityDeterminerConceptId FOREIGN KEY (DeterminerConceptId) REFERENCES Concept(ConceptId),
	CONSTRAINT CK_EntityClassConceptSet CHECK (dbo.fn_IsConceptSetMember(ClassConceptId, 'EntityClass') = 1),
	CONSTRAINT CK_EntityDeterminerConceptSet CHECK (dbo.fn_IsConceptSetMember(DeterminerConceptId, 'EntityDeterminer') = 1)
);

CREATE TABLE EntityTag
(
	EntityTagId UNIQUEIDENTIFIER NOT NULL DEFAULT NEWSEQUENTIALID(), -- UNIQUE IDENTIFIER FOR THE TAG INSTANCE
	EntityId UNIQUEIDENTIFIER NOT NULL, -- THE ENTITY TO WHICH THE TAG IS AFFIXED
	Name NVARCHAR(64) NOT NULL, -- THE NAME OF THE TAG
	Value NVARCHAR(MAX), -- THE VALUE OF THE TAG
	CreationTime DATETIMEOFFSET NOT NULL DEFAULT CURRENT_TIMESTAMP, -- THE TIME THAT THE TAG WAS ATTACHED
	CreatedBy UNIQUEIDENTIFIER NOT NULL, -- THE USER THAT CREATED THE TAG
	ObsoletionTime DATETIMEOFFSET, -- THE TIME WHEN THE TAG WAS OBSOLETED
	ObsoletedBy UNIQUEIDENTIFIER, -- THE USER WHO OBSOLETED THE TAG
	CONSTRAINT PK_EntityTag PRIMARY KEY (EntityTagId),
	CONSTRAINT FK_EntityTagEntityId FOREIGN KEY (EntityId) REFERENCES Entity(EntityId),
	CONSTRAINT FK_EntityTagCreatedBy FOREIGN KEY (CreatedBy) REFERENCES SecurityUser(UserId),
	CONSTRAINT FK_EntityTagObsoletedBy FOREIGN KEY (ObsoletedBy) REFERENCES SecurityUser(UserId),
	CONSTRAINT CK_EntityTagObsoletedBy CHECK(ObsoletedBy IS NOT NULL AND ObsoletionTime IS NOT NULL OR ObsoletedBy IS NULL AND ObsoletionTime IS NULL)
);

CREATE SEQUENCE EntityVersionSequenceId AS NUMERIC(20) START WITH 1 INCREMENT BY 1;

CREATE TABLE EntityVersion
(
	EntityVersionId UNIQUEIDENTIFIER NOT NULL DEFAULT NEWSEQUENTIALID(), -- THE UNIQUE IDENTIFIER FOR THE ENTITY
	VersionSequenceId NUMERIC(20) NOT NULL UNIQUE DEFAULT (NEXT VALUE FOR EntityVersionSequenceId), -- UNIQUE SEQUENCING ID FOR THE VERSION
	EntityId UNIQUEIDENTIFIER NOT NULL, -- THE ENTITY TO WHICH THE VERSION APPLIES
	ReplacesVersionId UNIQUEIDENTIFIER, -- THE VERSION OF THE ENTITY THAT THIS VERSION REPLACES
	StatusConceptId UNIQUEIDENTIFIER NOT NULL, -- THE STATUS OF THE ENTITY AT THIS VERSION
	CreatedBy UNIQUEIDENTIFIER NOT NULL, -- THE USER THAT CREATED THE TAG
	CreationTime DATETIMEOFFSET NOT NULL DEFAULT CURRENT_TIMESTAMP, -- A TIMESTAMP WHEN THE ENTITY WAS CREATED
	ObsoletionTime DATETIMEOFFSET, -- THE TIME WHEN THE ENTITY VERSION WAS OBSOLETED
	ObsoletedBy UNIQUEIDENTIFIER, -- THE USER WHO OBSOLETED THE TAG
	TypeConceptId UNIQUEIDENTIFIER
	CONSTRAINT PK_EntityVersion PRIMARY KEY (EntityVersionId),
	CONSTRAINT FK_EntityVersionEntityId FOREIGN KEY (EntityId) REFERENCES Entity(EntityId),
	CONSTRAINT FK_EntityVersionReplacesVersionId FOREIGN KEY (ReplacesVersionId) REFERENCES EntityVersion(EntityVersionId),
	CONSTRAINT FK_EntityVersionStatusConceptId FOREIGN KEY (StatusConceptId) REFERENCES Concept(ConceptId),
	CONSTRAINT FK_EntityVersionCreatedBy FOREIGN KEY (CreatedBy) REFERENCES SecurityUser(UserId),
	CONSTRAINT FK_EntityVersionObsoletedBy FOREIGN KEY (ObsoletedBy) REFERENCES SecurityUser(UserId),
	CONSTRAINT FK_EntityVersionTypeConceptId FOREIGN KEY (TypeConceptId) REFERENCES Concept(ConceptId),
	CONSTRAINT CK_EntityVersionStatusConceptSet CHECK (dbo.fn_IsConceptSetMember(StatusConceptId, 'EntityStatus') = 1)
);

CREATE TABLE EntityAssociation
(
	EntityAssociationId UNIQUEIDENTIFIER NOT NULL DEFAULT NEWSEQUENTIALID(), -- A UNIQUE IDENTIFIER FOR THE ASSOCIATION
	SourceEntityId UNIQUEIDENTIFIER NOT NULL, -- THE SOURCE OF THE RELATIONSHIP
	TargetEntityId UNIQUEIDENTIFIER NOT NULL, -- THE TARGET OF THE RELATIONSHIP
	EffectiveVersionSequenceId NUMERIC(20) NOT NULL, -- THE VERSION WHERE THE ASSOCIATION BECAME ACTIVE
	ObsoleteVersionSequenceId NUMERIC(20), -- THE VERSION WHERE THE ASSOCIATION IS NO LONGER ACTIVE
	AssociationTypeConceptId UNIQUEIDENTIFIER
	CONSTRAINT PK_EntityAssociation PRIMARY KEY (EntityAssociationId),
	CONSTRAINT FK_EntityAssociationSourceEntityId FOREIGN KEY (SourceEntityId) REFERENCES Entity(EntityId),
	CONSTRAINT FK_EntityAssociationTargetEntityId FOREIGN KEY (TargetEntityId) REFERENCES Entity(EntityId),
	CONSTRAINT FK_EntityAssociationEffectiveVersionSequenceId FOREIGN KEY (EffectiveVersionSequenceId) REFERENCES EntityVersion(VersionSequenceId),
	CONSTRAINT FK_EntityAssociationObsoleteVersionSequenceId FOREIGN KEY (ObsoleteVersionSequenceId) REFERENCES EntityVersion(VersionSequenceId),
	CONSTRAINT FK_EntityAssociationAssociationConceptId FOREIGN KEY (AssociationTypeConceptId) REFERENCES Concept(ConceptId),
	CONSTRAINT CK_EntityAssociationAssociationConcept CHECK (dbo.fn_IsConceptSetMember(AssociationTypeConceptId, 'EntityRelationshipType') = 1)
);

CREATE INDEX IX_EntityAssociationSource ON EntityAssociation(SourceEntityId);
CREATE INDEX IX_EntityAssociationTarget ON EntityAssociation(TargetEntityId);
CREATE INDEX IX_EntityAssociationEffectiveVersion ON EntityAssociation(EffectiveVersionSequenceId, ObsoleteVersionSequenceId);

CREATE TABLE QuantifiedEntityAssociation
(
	EntityAssociationId UNIQUEIDENTIFIER NOT NULL, -- THE UNIQUE IDENTIFIER FOR THE ASSOCIATION
	Quantity FLOAT NOT NULL CHECK (Quantity > 0), -- THE QUANTITY OF THE SOURCE IN THE TARGET
	CONSTRAINT PK_QuantifiedEntityAssociation PRIMARY KEY (EntityAssociationId),
	CONSTRAINT FK_QuantifiedEntityAssociationEntityAssociationId FOREIGN KEY (EntityAssociationId) REFERENCES EntityAssociation(EntityAssociationId)
);

CREATE TABLE EntityAddress
(
	EntityAddressId UNIQUEIDENTIFIER NOT NULL DEFAULT NEWSEQUENTIALID(), -- THE UNIQUE IDENTIFIER FOR THE ADDRESS INSTANCE
	EntityId UNIQUEIDENTIFIER NOT NULL, -- THE ENTITY TO WHICH THE ASSOCIATION BELONGS
	EffectiveVersionSequenceId NUMERIC(20) NOT NULL, -- THE EFFECTIVE VERSION OF THE ENTITY
	ObsoleteVersionSequenceId NUMERIC(20), -- THE VERSION WHERE THE ENTITY ADDRESS IS NO LONGER ACTIVE
	AddressUseConceptId UNIQUEIDENTIFIER NOT NULL, -- INDICATES THE USE OF THE ADDRESS
	CONSTRAINT PK_EntityAddress PRIMARY KEY (EntityAddressId),
	CONSTRAINT FK_EntityAddressEntityId FOREIGN KEY (EntityId) REFERENCES Entity(EntityId),
	CONSTRAINT FK_EntityAddressEffectiveVersionSequenceId FOREIGN KEY (EffectiveVersionSequenceId) REFERENCES EntityVersion(VersionSequenceId),
	CONSTRAINT FK_EntityAddressObsoleteVersionSequenceId FOREIGN KEY (ObsoleteVersionSequenceId) REFERENCES EntityVersion(VersionSequenceId),
	CONSTRAINT FK_EntityAddressAddressUseConceptId FOREIGN KEY (AddressUseConceptId) REFERENCES Concept(ConceptId),
	CONSTRAINT FK_EntityAddressAddressUseConceptConceptSet CHECK (dbo.fn_IsConceptSetMember(AddressUseConceptId, 'AddressUse') = 1)
);

CREATE INDEX IX_EntityAddressEffectiveVersion ON EntityAddress(EffectiveVersionSequenceId, ObsoleteVersionSequenceId);

CREATE TABLE EntityAddressComponentValue
(
	ValueId UNIQUEIDENTIFIER NOT NULL DEFAULT NEWSEQUENTIALID(), -- UNIQUE IDENTIFIER FOR THE COMPONENT VALUE CODE
	Value NVARCHAR(256) NOT NULL, -- THE VALUE OF THE COMPONENT
	CONSTRAINT PK_EntityAddressComponentValue PRIMARY KEY (ValueId)
);

CREATE UNIQUE INDEX IX_EntityAddressComponentValueValue ON EntityAddressComponentValue(Value);

CREATE TABLE EntityAddressComponent
(
	EntityAddressComponentId UNIQUEIDENTIFIER NOT NULL DEFAULT NEWSEQUENTIALID(), -- THE UNIQUE IDENTIFIER FOR THE ADDRESS COMPONENT
	ComponentTypeConceptId UNIQUEIDENTIFIER, -- THE TYPE OF CONCEPT
	ValueId UNIQUEIDENTIFIER NOT NULL, -- THE VALUE OF THE ADDRESS PART
	EntityAddressId UNIQUEIDENTIFIER NOT NULL, -- THE ENTITY ADDRESS ID
	CONSTRAINT PK_EntityAddressComponent PRIMARY KEY (EntityAddressComponentId),
	CONSTRAINT FK_EntityAddressComponentTypeConceptId FOREIGN KEY (ComponentTypeConceptId) REFERENCES Concept(ConceptId),
	CONSTRAINT FK_EntityAddressComponentValueId FOREIGN KEY (ValueId) REFERENCES EntityAddressComponentValue(ValueId),
	CONSTRAINT FK_EntityAddressComponentEntityAddressId FOREIGN KEY (EntityAddressId) REFERENCES EntityAddress(EntityAddressId),
	CONSTRAINT CK_EntityAddressComponentTypeConceptId CHECK (dbo.fn_IsConceptSetMember(ComponentTypeConceptId, 'AddressComponentType') = 1)
);

CREATE TABLE EntityName
(
	EntityNameId UNIQUEIDENTIFIER NOT NULL DEFAULT NEWSEQUENTIALID(), -- THE UNIQUE IDENTIFIER FOR THE NAME INSTANCE
	EntityId UNIQUEIDENTIFIER NOT NULL, -- THE ENTITY TO WHICH THE ASSOCIATION BELONGS
	EffectiveVersionSequenceId NUMERIC(20) NOT NULL, -- THE EFFECTIVE VERSION OF THE ENTITY
	ObsoleteVersionSequenceId NUMERIC(20), -- THE VERSION WHERE THE ENTITY NAME IS NO LONGER ACTIVE
	NameUseConceptId UNIQUEIDENTIFIER
	CONSTRAINT PK_EntityName PRIMARY KEY (EntityNameId),
	CONSTRAINT FK_EntityNameEntityId FOREIGN KEY (EntityId) REFERENCES Entity(EntityId),
	CONSTRAINT FK_EntityNameEffectiveVersionSequenceId FOREIGN KEY (EffectiveVersionSequenceId) REFERENCES EntityVersion(VersionSequenceId),
	CONSTRAINT FK_EntityNameObsoleteVersionSequenceId FOREIGN KEY (ObsoleteVersionSequenceId) REFERENCES EntityVersion(VersionSequenceId),
	CONSTRAINT FK_EntityNameUseConceptId FOREIGN KEY (NameUseConceptId) REFERENCES Concept(ConceptId),
	CONSTRAINT FK_EntityNameUseConceptConceptSet CHECK (dbo.fn_IsConceptSetMember(NameUseConceptId, 'NameUse') = 1)
);

CREATE INDEX IX_EntityNameEffectiveVersion ON EntityName(EffectiveVersionSequenceId, ObsoleteVersionSequenceId);

CREATE TABLE EntityNameComponent
(
	EntityNameComponentId UNIQUEIDENTIFIER NOT NULL DEFAULT NEWSEQUENTIALID(), -- THE UNIQUE IDENTIFIER FOR THE NAME COMPONENT
	ComponentTypeConceptId UNIQUEIDENTIFIER, -- THE TYPE OF NAME COMPONENT
	PhoneticValueId UNIQUEIDENTIFIER NOT NULL, -- THE VALUE OF THE NAME PART
	EntityNameId UNIQUEIDENTIFIER NOT NULL, -- THE ENTITY NAME ID
	CONSTRAINT PK_EntityNameComponent PRIMARY KEY (EntityNameComponentId),
	CONSTRAINT FK_EntityNameComponentTypeConceptId FOREIGN KEY (ComponentTypeConceptId) REFERENCES Concept(ConceptId),
	CONSTRAINT FK_EntityNameComponentValueId FOREIGN KEY (PhoneticValueId) REFERENCES PhoneticValues(PhoneticValueId),
	CONSTRAINT FK_EntityNameComponentEntityNameId FOREIGN KEY (EntityNameId) REFERENCES EntityName(EntityNameId),
	CONSTRAINT CK_EntityNameComponentTypeConceptId CHECK (ComponentTypeConceptId IS NULL OR dbo.fn_IsConceptSetMember(ComponentTypeConceptId, 'NameComponentType') = 1)
);

CREATE TABLE EntityExtension
(
	EntityExtensionId UNIQUEIDENTIFIER NOT NULL DEFAULT NEWSEQUENTIALID(), -- THE UNIQUE IDENTIFIER FOR THE ENTITY EXTENSION
	ExtensionTypeId UNIQUEIDENTIFIER NOT NULL, -- THE TYPE OF EXTENSION
	ExtensionValue VARBINARY(MAX), -- THE SERIALIZED EXTENSION VALUE
	ExtensionDisplay NVARCHAR(64), -- A DISPLAY VERSION OF THE EXTENSION VALUE
	EntityId UNIQUEIDENTIFIER NOT NULL, -- THE ENTITY TO WHICH THE ASSOCIATION BELONGS
	EffectiveVersionSequenceId NUMERIC(20) NOT NULL, -- THE VERSION WHERE THE EXTENSION BECOMES ACTIVE
	ObsoleteVersionSequenceId NUMERIC(20), -- THE VERSION WHERE THE EXTENSION IS NO LONGER VALID
	CONSTRAINT PK_EntityExtension PRIMARY KEY (EntityExtensionId),
	CONSTRAINT FK_EntityExtensionEntityId FOREIGN KEY (EntityId) REFERENCES Entity(EntityId),
	CONSTRAINT FK_EntityExtensionExtensionTypeId FOREIGN KEY (ExtensionTypeId) REFERENCES ExtensionType(ExtensionTypeId),
	CONSTRAINT FK_EntityExtensionEffectiveVersionSequenceId FOREIGN KEY (EffectiveVersionSequenceId) REFERENCES EntityVersion(VersionSequenceId),
	CONSTRAINT FK_EntityExtensionObsoleteVersionSequenceId FOREIGN KEY (ObsoleteVersionSequenceId) REFERENCES EntityVersion(VersionSequenceId)
);

CREATE INDEX IX_EntityVersionEffectiveVersion ON EntityExtension(EffectiveVersionSequenceId, ObsoleteVersionSequenceId);

CREATE TABLE EntityIdentifier
(
	EntityIdentifierId UNIQUEIDENTIFIER NOT NULL DEFAULT NEWSEQUENTIALID(), -- THE UNIQUE IDENTIFIER FOR THE ENTITY IDENTIFIER 
	EntityId UNIQUEIDENTIFIER NOT NULL, -- THE ENTITY TO WHICH THE ASSOCIATION BELONGS
	IdentifierTypeId UNIQUEIDENTIFIER, -- THE TYPE OF IDENTIFIER
	EffectiveVersionSequenceId NUMERIC(20) NOT NULL, -- THE VERSION WHERE THE IDENTIFIER BECAME ACTIVE
	ObsoleteVersionSequenceId NUMERIC(20), -- THE OBSOLETION VERSION IDENTIFIER
	AssigningAuthorityId UNIQUEIDENTIFIER NOT NULL, -- THE ASSIGNING AUTHORITY OF THE IDENTIFIER
	IdentifierValue NVARCHAR(50) NOT NULL, -- THE VALUE OF THE IDENTIFIER
	CONSTRAINT PK_EntityIdentifier PRIMARY KEY (EntityIdentifierId),
	CONSTRAINT FK_EntityIdentifierEntityId FOREIGN KEY (EntityId) REFERENCES Entity(EntityId),
	CONSTRAINT FK_EntityIdentifierIdentifierTypeId FOREIGN KEY (IdentifierTypeId) REFERENCES IdentifierType(IdentifierTypeId),
	CONSTRAINT FK_EntityIdentifierEffectiveVersionSequenceId FOREIGN KEY (EffectiveVersionSequenceId) REFERENCES EntityVersion(VersionSequenceId),
	CONSTRAINT FK_EntityIdentifierObsoleteVersionSequenceId FOREIGN KEY (ObsoleteVersionSequenceId) REFERENCES EntityVersion(VersionSequenceId),
	CONSTRAINT FK_EntityIdentifierAssigningAuthorityId FOREIGN KEY (AssigningAuthorityId) REFERENCES AssigningAuthority(AssigningAuthorityId)
	-- TODO: CHECK IDENTIFIER TYPE SCOPE
);

CREATE INDEX IX_EntityIdentifierEffectiveVersion ON EntityIdentifier(EffectiveVersionSequenceId, ObsoleteVersionSequenceId);
CREATE INDEX IX_EntityIdentifierValue ON EntityIdentifier(AssigningAuthorityId, IdentifierValue);

CREATE TABLE EntityTelecomAddress
(
	EntityTelecomAddressId UNIQUEIDENTIFIER NOT NULL DEFAULT NEWSEQUENTIALID(), -- THE UNIQUE IDENTIFIER FOR THE ADDRESS
	EntityId UNIQUEIDENTIFIER NOT NULL, -- THE ENTITY TO WHICH THE ASSOCIATION BELONGS
	TelecomAddressTypeConceptId UNIQUEIDENTIFIER, -- IDENTIFIES THE ADDRESS TYPE CONCEPT
	TelecomAddress NVARCHAR(256) NOT NULL, -- THE VALUE OF THE TELECOM ADDRESS
	TelecomUseConceptId UNIQUEIDENTIFIER, -- IDENTIFIES THE USE OF THE TELECOMMUNICATIONS ADDRESS
	EffectiveVersionSequenceId NUMERIC(20) NOT NULL, -- THE TIME WHEN THE ADDRESS BECAME ACTIVE
	ObsoleteVersionSequenceId NUMERIC(20), -- THE TIME WHEN THE ADDRESS IS NOT ACTIVE
	CONSTRAINT PK_EntityTelecomAddress PRIMARY KEY (EntityTelecomAddressId),
	CONSTRAINT FK_EntityTelecomAddressEntityId FOREIGN KEY (EntityId) REFERENCES Entity(EntityId),
	CONSTRAINT FK_EntityTelecomAddressTelecomAddressTypeConceptId FOREIGN KEY (TelecomAddressTypeConceptId) REFERENCES Concept(ConceptId),
	CONSTRAINT FK_EntityTelecomAddressUseConceptId FOREIGN KEY (TelecomUseConceptId) REFERENCES Concept(ConceptId),
	CONSTRAINT FK_EntityTelecomAddressEffectiveVersionSequenceId FOREIGN KEY (EffectiveVersionSequenceId) REFERENCES EntityVersion(VersionSequenceId),
	CONSTRAINT FK_EntityTelecomAddressObsoleteVersionSequenceId FOREIGN KEY (ObsoleteVersionSequenceId) REFERENCES EntityVersion(VersionSequenceId),
	CONSTRAINT CK_EntityTelecomAddressTelecomAddressTypeConceptId CHECK (TelecomAddressTypeConceptId IS NULL OR dbo.fn_IsConceptSetMember(TelecomAddressTypeConceptId, 'TelecomAddressType') = 1),
	CONSTRAINT CK_EntityTelecomAddressTelecomAddressUseConceptId CHECK (dbo.fn_IsConceptSetMember(TelecomUseConceptId, 'TelecomAddressUse') = 1)
);

CREATE INDEX IX_EntityTelecomAddressEffectiveVersion ON EntityTelecomAddress(EffectiveVersionSequenceId, ObsoleteVersionSequenceId);

CREATE TABLE Place
(
	EntityVersionId UNIQUEIDENTIFIER NOT NULL, -- THE IDENTIFIER FOR THE PLACE
	MobileInd BIT NOT NULL DEFAULT 0, -- AN INDICATOR WHETHER THE PLACE IS MOBILE (LIKE AN OUTREACH CLINIC)
	Lat FLOAT, -- THE LATITUDE OF THE PLACE
	Lng FLOAT, -- THE LONGITUDE OF THE PLACE
	CONSTRAINT PK_Place PRIMARY KEY (EntityVersionId),
	CONSTRAINT FK_PlaceEntityVersionId FOREIGN KEY (EntityVersionId) REFERENCES EntityVersion(EntityVersionId)
);

CREATE TABLE PlaceService
(
	PlaceServiceId UNIQUEIDENTIFIER NOT NULL DEFAULT NEWSEQUENTIALID(), -- THE UNIQUE IDENTIFIER FOR THE PLACE SERVICE ASSOCIATION
	PlaceEntityId UNIQUEIDENTIFIER NOT NULL, -- THE PLACE ENTITY TO WHICH THE ASSOCIATION APPLIES
	EffectiveVersionSequenceId NUMERIC(20) NOT NULL, -- THE VERSION WHEN THE ASSOCIATION IS ACTIVE
	ObsoleteVersionSequenceId NUMERIC(20), -- THE VERSION WHERE THE ASSOCIATION IS NO LONGER ACTIVE
	ServiceConceptId UNIQUEIDENTIFIER NOT NULL, -- THE SERVICE PERFORMED
	ServiceSchedule XML NOT NULL, -- THE SCHEDULE WHEN THE SERVICE IS PERFORMED (A GTS)
	CONSTRAINT PK_PlaceService PRIMARY KEY (PlaceServiceId),
	CONSTRAINT FK_PlaceServicePlaceEntityId FOREIGN KEY (PlaceEntityId) REFERENCES Entity(EntityId),
	CONSTRAINT FK_PlaceServiceEffectiveVersionSequenceId FOREIGN KEY (EffectiveVersionSequenceId) REFERENCES EntityVersion(VersionSequenceId),
	CONSTRAINT FK_PlaceServiceObsoleteVersionSequenceId FOREIGN KEY (ObsoleteVersionSequenceId) REFERENCES EntityVersion(VersionSequenceId),
	CONSTRAINT FK_PlaceServiceServiceConceptId FOREIGN KEY (ServiceConceptId) REFERENCES Concept(ConceptId),
	CONSTRAINT CK_PlaceServiceServiceConceptConceptSet CHECK (dbo.fn_IsConceptSetMember(ServiceConceptId, 'ServiceCode') = 1)
);

CREATE TABLE Organization
(
	EntityVersionId UNIQUEIDENTIFIER NOT NULL, -- THE VERSION OF THE ENTITY THE ORGANIZATION DATA APPLIES TO
	IndustryConceptId UNIQUEIDENTIFIER NOT NULL, -- THE INDUSTRY IN WHICH THE ORGANIZATION PARTICIPATES
	CONSTRAINT PK_Organization PRIMARY KEY (EntityVersionId),
	CONSTRAINT FK_OrganizationEntityVersionId FOREIGN KEY (EntityVersionId) REFERENCES EntityVersion(EntityVersionId),
	CONSTRAINT FK_OrganizationIndustryConceptId FOREIGN KEY (IndustryConceptId) REFERENCES Concept(ConceptId),
	CONSTRAINT CK_OrganizationIndustryConceptConceptSet CHECK (dbo.fn_IsConceptSetMember(IndustryConceptId, 'IndustryCode') = 1)
);

CREATE TABLE ApplicationEntity
(
	EntityVersionId UNIQUEIDENTIFIER NOT NULL, -- THE VERSION OF THE ENTITY TO WHICH THE APPLICATION ROLE DAT APPLIES
	ApplicationId UNIQUEIDENTIFIER NOT NULL, -- THE SECURITY DEVICE ASSOCIATED WITH THIS
	SoftwareName NVARCHAR(64) NOT NULL, -- THE NAME OF THE SOFTWARE PRODUCT THE APPLICATION REPRESENTS
	VersionName NVARCHAR(64), -- THE VERSION OF THE SOFTWARE PRODUCT
	VendorName NVARCHAR(64), -- THE VENDOR OF THE SOFTWARE PRODUCT
	CONSTRAINT PK_Application PRIMARY KEY (EntityVersionId),
	CONSTRAINT FK_ApplicationEntityVersionId FOREIGN KEY (EntityVersionId) REFERENCES EntityVersion(EntityVersionId),
	CONSTRAINT FK_ApplicationEntitySecurityApplication FOREIGN KEY (ApplicationId) REFERENCES SecurityApplication(ApplicationId)
);

CREATE TABLE DeviceEntity
(
	EntityVersionId UNIQUEIDENTIFIER NOT NULL, -- THE ENTITY VERSION TO WHICH THE ASSOCIATIN APPLIES
	DeviceId UNIQUEIDENTIFIER NOT NULL, -- THE DEVICE TO WHICH THE ASSOCIATION APPLIES
	ManufacturedModelName NVARCHAR(64) NOT NULL, -- THE MANUFACTURER
	OperatingSystemName NVARCHAR(64), -- THE NAME OF THE OPERATING SYSTEM ON THE DEVICE
	CONSTRAINT PK_DeviceEntity PRIMARY KEY (EntityVersionId),
	CONSTRAINT FK_DeviceEntityEntityVersionId FOREIGN KEY (EntityVersionId) REFERENCES EntityVersion(EntityVersionId),
	CONSTRAINT FK_DeviceEntityDeviceId FOREIGN KEY (DeviceId) REFERENCES SecurityDevice(DeviceId)
);

CREATE TABLE Material
(
	EntityVersionId UNIQUEIDENTIFIER NOT NULL, -- THE ENTITY VERSION TO WHICH THE MATERIAL DATA APPLIES
	ExpiryDate DATE, -- THE DATE WHEN THE MATERIAL EXPIRES
	FormConceptId UNIQUEIDENTIFIER, -- IDENTIFIES THE FORM OF THE MATERIAL
	Quantity NUMERIC(20,10), -- THE QUANTITY OF THIS OBJECT IN THE PARENT
	QuantityConceptId UNIQUEIDENTIFIER, -- IDENTIFIES THE QUANTITY OF THE MATERIAL IN ANY PARENT MATERIAL
	IsAdministrative BIT NOT NULL DEFAULT 0, -- WHEN TRUE THE MATERIAL REPRESENTS AN ADMINISTRATIVE MATERIAL IN THAT IT DOESN"T ACTUALLY EXIST BUT IS PRESENT FOR ADMINISTRATIVE PURPOSES SUCH AS ORDER BUNDLING
	CONSTRAINT PK_Material PRIMARY KEY (EntityVersionId),
	CONSTRAINT FK_MaterialEntityVersionId FOREIGN KEY (EntityVersionId) REFERENCES EntityVersion(EntityVersionId),
	CONSTRAINT FK_MaterialFormConceptId FOREIGN KEY (FormConceptId) REFERENCES Concept(ConceptId),
	CONSTRAINT FK_MaterialQuantityConceptId FOREIGN KEY (QuantityConceptId) REFERENCES Concept(ConceptId),
	CONSTRAINT CK_MaterialFormConceptClass CHECK (dbo.fn_AssertConceptClass(FormConceptId, 'Form') = 1),
	CONSTRAINT CK_MaterialQuantityConceptClass CHECK (dbo.fn_AssertConceptClass(FormConceptId, 'UnitOfMeasure') = 1)
);

CREATE TABLE ManufacturedMaterial
(
	EntityVersionId UNIQUEIDENTIFIER NOT NULL, -- THE VERSION TO WHICH THE MANUFACTURED MATERIAL DATA APPLIES
	LotNumber NVARCHAR(32), -- THE LOT NUMBER OF THE MATERIAL FROM THE MANUFACTURER
	CONSTRAINT PK_ManufacturedMaterial PRIMARY KEY (EntityVersionId),
	CONSTRAINT FK_ManufacturedMaterialEntityVersionId FOREIGN KEY (EntityVersionId) REFERENCES Material(EntityVersionId)
);

/*
CREATE TABLE DrugMaterial
(
	EntityVersionId UNIQUEIDENTIFIER NOT NULL, -- THE MANUFACTURED MATERIAL
	RouteConceptId UNIQUEIDENTIFIER, -- THE DEFAULT ROUTE IN WHICH THE DRUG IS CONSUMED
	CONSTRAINT PK_DrugMaterial PRIMARY KEY (EntityVersionId),
	CONSTRAINT FK_DrugMaterialEntityVersionId FOREIGN KEY (EntityVersionId) REFERENCES Material(EntityVersionId),
	CONSTRAINT FK_DrugMaterialRouteConceptId FOREIGN KEY (RouteConceptId) REFERENCES Concept(ConceptId),
	CONSTRAINT CK_MaterialQuantityConceptClass CHECK (dbo.fn_AssertConceptClass(FormConceptId, 'Route') = 1)
);
*/

CREATE TABLE Person
(
	EntityVersionId UNIQUEIDENTIFIER NOT NULL, -- THE VERSION TO WHICH THE PERSON DATA APPLIES
	DateOfBirth DATE, -- THE DATE OF BIRTH OF THE PERSON
	DateOfBirthPrecision CHAR(1) CHECK (DateOfBirthPrecision IN ('Y','M','D')),
	CONSTRAINT PK_Person PRIMARY KEY (EntityVersionId),
	CONSTRAINT FK_PersonEntityVersionId FOREIGN KEY (EntityVersionId) REFERENCES EntityVersion(EntityVersionId)
);

CREATE TABLE PersonLanguageCommunication
(
	PersonLanguageCommunicationId UNIQUEIDENTIFIER NOT NULL DEFAULT NEWSEQUENTIALID(), -- THE LANGUAGE COMMUNICATION ID 
	PersonEntityId UNIQUEIDENTIFIER NOT NULL, -- THE ID OF THE PERSON ENTITY
	EffectiveVersionSequenceId NUMERIC(20) NOT NULL, -- THE VERSION WHERE THE LANGUAGE OF COMMUNICATION BECOMES ACTIVE
	ObsoleteVersionSequenceId NUMERIC(20), -- THE VERSION WHERE THE LANGUAGE IS NO LONGER ACTIVE
	LanguageCommunication CHAR(2), -- THE 2 CHARACTER ISO 639 CODE
	PreferenceIndicator BIT NOT NULL DEFAULT 0, -- WHETHER THE LANGUAGE IS PREFERRED
	CONSTRAINT PK_PersonLanguageCommunication PRIMARY KEY (PersonLanguageCommunicationId),
	CONSTRAINT FK_PersonLanguageCommunicationPersonEntityId FOREIGN KEY (PersonEntityId) REFERENCES Entity(EntityId),
	CONSTRAINT FK_PersonLanguageCommunicationEffectiveVersionSequenceId FOREIGN KEY (EffectiveVersionSequenceId) REFERENCES EntityVersion(VersionSequenceId),
	CONSTRAINT FK_PersonLanguageCommunciationObsoleteVersionSequenceId FOREIGN KEY (ObsoleteVersionSequenceId) REFERENCES EntityVersion(VersionSequenceId)
);

CREATE TABLE Patient
(
	EntityVersionId UNIQUEIDENTIFIER NOT NULL, -- THE UNIQUE IDENTIFIER FOR THE ENTITY VERSION
	GenderConceptId UNIQUEIDENTIFIER NOT NULL, -- THE UNIQUE IDENTIFIER FOR THE GENDER OF THE PERSON
	DeceasedDate DATE, -- THE DATE THAT THE PATIENT DIED
	DeceasedDatePrecision CHAR(1) CHECK (DeceasedDatePrecision IN ('Y','M','D')), -- PRECISION OF THE DATE OF DEATH
	MultipleBirthOrder NUMERIC(2), -- THE ORDER THAT THE PATIENT WAS BORN IF PART OF A MULTIPLE BIRTH
	CONSTRAINT PK_Patient PRIMARY KEY (EntityVersionId),
	CONSTRAINT FK_PatientEntityVersionId FOREIGN KEY (EntityVersionId) REFERENCES Person(EntityVersionId),
	CONSTRAINT FK_PatientGenderConceptId FOREIGN KEY (GenderConceptId) REFERENCES Concept(ConceptId),
	CONSTRAINT CK_PatientGenderConceptClass CHECK (dbo.fn_IsConceptSetMember(GenderConceptId, 'AdministrativeGenderCode') = 1)
);

CREATE TABLE Provider
(
	EntityVersionId UNIQUEIDENTIFIER NOT NULL, -- THE UNIQUE IDENTIFIER FOR THE PROVIDER DATA
	ProviderSpecialtyConceptId UNIQUEIDENTIFIER, -- THE PROVIDER'S SPECIALTY
	CONSTRAINT PK_Provider PRIMARY KEY (EntityVersionId),
	CONSTRAINT FK_ProviderEntityVersionId FOREIGN KEY (EntityVersionId) REFERENCES Person(EntityVersionId),
	CONSTRAINT FK_ProviderProviderSpecialtyConceptId FOREIGN KEY (ProviderSpecialtyConceptId) REFERENCES Concept(ConceptId)
);

/*
 * LINKS A SECURITY USER TO AN ENTITY (PROVIDER, PATIENT, PERSON, ETC)
 */
CREATE TABLE UserEntity
(
	EntityVersionId UNIQUEIDENTIFIER NOT NULL, -- THE USER THAT IS ASSOCIATED WITH THE ENTITY
	UserId UNIQUEIDENTIFIER NOT NULL, -- THE USER THAT ENTITY APPLIES TO
	CONSTRAINT PK_UserEntity PRIMARY KEY (EntityVersionId),
	CONSTRAINT FK_UserEntityUserId FOREIGN KEY (UserId) REFERENCES SecurityUser(UserId),
	CONSTRAINT FK_UserEntityEntityId FOREIGN KEY (EntityVersionId) REFERENCES Person(EntityVersionId),
);


CREATE TABLE ProtocolHandler
(
	ProtocolHandlerId UNIQUEIDENTIFIER NOT NULL DEFAULT NEWSEQUENTIALID(), -- THE UNIQUE IDENTIFIER FOR THE PROTOCOL HANDLER
	Name NVARCHAR(64) NOT NULL, -- HUMAN READABLE NAME FOR THE PROTOCOL HANDLER
	HandlerClass NVARCHAR(256) NOT NULL, -- THE CLASS WHICH IS RESPONSIBLE FOR EXECUTING PROTOCOLS AND STARTING THEM
	IsActive BIT NOT NULL DEFAULT 1, -- WHETHER THE PROTOCOL HANDLER IS ACTIVE
	CreationTime DATETIMEOFFSET NOT NULL DEFAULT CURRENT_TIMESTAMP, -- THE TIME THE PROTOCOL HANDLER WAS CREATED
	CreatedBy UNIQUEIDENTIFIER NOT NULL, -- THE USER WHICH CREATED THE PROTOCOL HANDLER
	ObsoletionTime DATETIMEOFFSET, -- THE TIME WHEN THE HANDLER SHOULD NO LONGER BE USED
	ObsoletedBy UNIQUEIDENTIFIER, -- THE USER WHICH OBSOLETED THE HANDLER
	CONSTRAINT PK_ProtocolHandler PRIMARY KEY (ProtocolHandlerId),
	CONSTRAINT FK_ProtocolHandlerCreatedBy FOREIGN KEY (CreatedBy) REFERENCES SecurityUser(UserId),
	CONSTRAINT FK_ProtocolHandlerObsoletedBy FOREIGN KEY (ObsoletedBy) REFERENCES SecurityUser(UserId),
	CONSTRAINT CK_ProtocolHandlerObsoletionTime CHECK (ObsoletionTime IS NULL AND ObsoletedBy IS NULL OR ObsoletionTime IS NOT NULL AND ObsoletedBy IS NOT NULL)
);

CREATE TABLE Protocol
(
	ProtocolId UNIQUEIDENTIFIER NOT NULL DEFAULT NEWSEQUENTIALID(), -- UNIQUE IDENTIFIER FOR THE Protocol
	Name NVARCHAR(64) NOT NULL, -- NAME FOR THE PROTOCOL (EX: CHILDHOOD VACCINATIONS, TWINWRIX SCHEDULE)
	ProtocolHandlerId UNIQUEIDENTIFIER NOT NULL, -- THE HANDLER WHICH IDENTIFIES THE TYPE OF PROTOCOL	
	ProtocolDefinition XML, -- CONFIGURATION DATA FOR THE PROTOCOL WHICH CAN BE USED BY THE HANDLER
	CreationTime DATETIMEOFFSET NOT NULL DEFAULT CURRENT_TIMESTAMP, -- THE TIME THE PROTOCOL WAS CREATED
	CreatedBy UNIQUEIDENTIFIER NOT NULL, -- THE USER WHICH CREATED THE PROTOCOL
	ObsoletionTime DATETIMEOFFSET, -- THE TIME THE PROTOCOL WAS OBSOLETED
	ObsoletedBy UNIQUEIDENTIFIER, -- THE USER WHICH OBSOLETED THE PROTOCOL
	ReplacesProtocolId UNIQUEIDENTIFIER, -- THE PROTOCOL WHICH IS REPLACED BY THIS
	CONSTRAINT PK_Protocol PRIMARY KEY (ProtocolId),
	CONSTRAINT FK_ProtocolProtocolHandlerId FOREIGN KEY (ProtocolHandlerId) REFERENCES ProtocolHandler(ProtocolHandlerId),
	CONSTRAINT FK_ProtocolCreatedBy FOREIGN KEY (CreatedBy) REFERENCES SecurityUser(UserId),
	CONSTRAINT FK_ProtocolObsoletedBy FOREIGN KEY (ObsoletedBy) REFERENCES SecurityUser(UserId),
	CONSTRAINT FK_ProtocolReplacesProtocolId FOREIGN KEY (ReplacesProtocolId) REFERENCES Protocol(ProtocolId),
	CONSTRAINT CK_ProtocolObsoletionTime CHECK (ObsoletionTime IS NULL AND ObsoletedBy IS NULL OR ObsoletionTime IS NOT NULL AND ObsoletedBy IS NOT NULL)
);

CREATE TABLE ActProtocol
(
	ProtocolId UNIQUEIDENTIFIER NOT NULL, -- THE PROTOCOL BEING EXECUTED AS PART OF THE ACT
	ActId UNIQUEIDENTIFIER NOT NULL, -- THE ACT THAT WAS EXECUTED AND/OR PLANNED AS PART OF THE PROTOCOL
	IsComplete BIT NOT NULL DEFAULT 0, -- INDICATES WHETHER THE ACT COMPLETES THE PROTOCOL
	StateData XML, -- ANY STATE DATA THE PROTOCOL HANDLER MAY WANT TO ASSOCIATE WITH THE ACT FOR FUTURE STEPS
	CONSTRAINT PK_ActProtocol PRIMARY KEY (ProtocolId, ActId),
	CONSTRAINT FK_ActProtocolProtocolId FOREIGN KEY (ProtocolId) REFERENCES Protocol(ProtocolId),
	CONSTRAINT FK_ActProtocolActId FOREIGN KEY (ActId) REFERENCES Act(ActId)
);

CREATE TABLE ActNote
(
	ActNoteId UNIQUEIDENTIFIER NOT NULL DEFAULT NEWSEQUENTIALID(), -- NOTE IDENTIFIER
	ActId UNIQUEIDENTIFIER NOT NULL, -- THE ACT TO WHICH THE NOTE APPLIES
	EffectiveVersionSequenceId NUMERIC(20) NOT NULL, -- THE ACT TO WHICH THE NOTE APPLIES
	ObsoleteVersionSequenceId NUMERIC(20), -- THE VERSION WHEREBY THE NOTE IS NO LONGER ASSOCIATED
	AuthorEntityId UNIQUEIDENTIFIER NOT NULL, -- THE ENTITY WHO AUTHORED THE NOTE
	NoteText TEXT NOT NULL,
	CONSTRAINT PK_ActNote PRIMARY KEY (ActNoteId),
	CONSTRAINT FK_ActNodeActId FOREIGN KEY (ActNoteId) REFERENCES Act(ActId),
	CONSTRAINT FK_ActNoteEffectiveVersionSequenceId FOREIGN KEY (EffectiveVersionSequenceId) REFERENCES ActVersion(VersionSequenceId),
	CONSTRAINT FK_ActNoteObsoleteVersionSequenceId FOREIGN KEY (ObsoleteVersionSequenceId) REFERENCES ActVersion(VersionSequenceId),
	CONSTRAINT FK_ActNoteAuthorEntityId FOREIGN KEY (AuthorEntityId) REFERENCES Entity(EntityId)
);

CREATE TABLE EntityNote
(
	EntityNoteId UNIQUEIDENTIFIER NOT NULL DEFAULT NEWSEQUENTIALID(), -- NOTE IDENTIFIER
	EntityId UNIQUEIDENTIFIER NOT NULL, -- THE ENTITY TO WHICH THE NOTE APPLIES
	EffectiveVersionSequenceId NUMERIC(20) NOT NULL, -- THE Entity TO WHICH THE NOTE APPLIES
	ObsoleteVersionSequenceId NUMERIC(20), -- THE VERSION WHEREBY THE NOTE IS NO LONGER ASSOCIATED
	AuthorEntityId UNIQUEIDENTIFIER NOT NULL, -- THE ENTITY WHO AUTHORED THE NOTE
	NoteText TEXT NOT NULL,
	CONSTRAINT PK_EntityNote PRIMARY KEY (EntityNoteId),
	CONSTRAINT FK_EntityNoteEntityId FOREIGN KEY (EntityId) REFERENCES Entity(EntityId),
	CONSTRAINT FK_EntityNoteEffectiveVersionSequenceId FOREIGN KEY (EffectiveVersionSequenceId) REFERENCES EntityVersion(VersionSequenceId),
	CONSTRAINT FK_EntityNoteObsoleteVersionSequenceId FOREIGN KEY (ObsoleteVersionSequenceId) REFERENCES EntityVersion(VersionSequenceId),
	CONSTRAINT FK_EntityNoteAuthorEntityId FOREIGN KEY (AuthorEntityId) REFERENCES Entity(EntityId)
);

CREATE TABLE ActParticipation
(
	ActParticipationId UNIQUEIDENTIFIER NOT NULL DEFAULT NEWSEQUENTIALID(), -- UNIQUELY IDENTIFIES THE PARTICIPATION
	EntityId UNIQUEIDENTIFIER NOT NULL, -- THE THE ENTITY TO WHICH PARTICIPATION
	ActId UNIQUEIDENTIFIER NOT NULL, -- THE ACT TO WHICH THE PARTICIPATION APPLIES
	EffectiveVersionSequenceId NUMERIC(20) NOT NULL, -- THE ACT TO WHICH THE PARTICIPATION APPLIES
	ObsoleteVersionSequenceId NUMERIC(20), -- THE VERSION WHEREBY THE PARTICIPATION IS NO LONGER ASSOCIATED
	ParticipationRoleConceptId UNIQUEIDENTIFIER NOT NULL, -- THE PARTICIPATION TYPE
	CONSTRAINT PK_ActParticipation PRIMARY KEY (ActParticipationId),
	CONSTRAINT FK_ActParticipationEntityId FOREIGN KEY (EntityId) REFERENCES Entity(EntityId),
	CONSTRAINT FK_ActParticipationActId FOREIGN KEY (ActId) REFERENCES Act(ActId),
	CONSTRAINT FK_ActParticipationEffectiveVersionSequenceId FOREIGN KEY (EffectiveVersionSequenceId) REFERENCES ActVersion(VersionSequenceId),
	CONSTRAINT FK_ActParticipationObsoleteVersionSequenceId FOREIGN KEY (ObsoleteVersionSequenceId) REFERENCES ActVersion(VersionSequenceId),
	CONSTRAINT FK_ActParticipationRoleConceptId FOREIGN KEY (ParticipationRoleConceptId) REFERENCES Concept(ConceptId),
	CONSTRAINT CK_ActParticipationRoleConceptIdSet CHECK (dbo.fn_IsConceptSetMember(ParticipationRoleConceptId, 'ActParticipationType') = 1)
);

CREATE TABLE QuantifiedActParticipation
(
	ActParticipationId UNIQUEIDENTIFIER NOT NULL, -- THE ACT PARTICIPATION THIS QUANTIFIED PARTICIPATION QUALIFIES
	Quantity INT NOT NULL CHECK (Quantity >= 0), -- THE QUANTITY OF ENTITY INSTANCES PARTICIPATING IN THE PARTICIPATION
	CONSTRAINT PK_QuantifiedActParticipation PRIMARY KEY (ActParticipationId),
	CONSTRAINT FK_QuantifiedActParticipationId FOREIGN KEY (ActParticipationId) REFERENCES ActParticipation(ActParticipationId)
);

GO 

-- CREATE CONCEPT VIEW
CREATE VIEW ConceptView AS
	SELECT c.IsSystemConcept, v.* FROM ConceptVersion v INNER JOIN Concept c ON (v.ConceptId = c.ConceptId);

GO

CREATE VIEW EntityNameValue AS 
    SELECT EntityName.EntityNameId, EntityId, EntityName.NameUseConceptId, ConceptCurrentVersion.Mnemonic AS NameUseMnemonic, EffectiveVersionSequenceId, ObsoleteVersionSequenceId, 
	(
		SELECT Mnemonic, Value FROM 
			EntityNameComponent INNER JOIN PhoneticValues ON (EntityNameComponent.PhoneticValueId = PhoneticValues.PhoneticValueId) 
			LEFT JOIN ConceptCurrentVersion ON (EntityNameComponent.ComponentTypeConceptId = ConceptCurrentVersion.ConceptId)
			WHERE EntityNameId = EntityName.EntityNameId FOR XML PATH ('Component')
	) Name FROM 
    EntityName INNER JOIN ConceptCurrentVersion ON (EntityName.NameUseConceptId = ConceptCurrentVersion.ConceptId) ;

GO

CREATE VIEW EntityAddressValue AS 
    SELECT EntityAddress.EntityAddressId, EntityId, EntityAddress.AddressUseConceptId, ConceptCurrentVersion.Mnemonic AS AddressUseMnemonic, EffectiveVersionSequenceId, ObsoleteVersionSequenceId, 
	(
		SELECT Mnemonic, Value FROM 
			EntityAddressComponent INNER JOIN EntityAddressComponentValue ON (EntityAddressComponent.ValueId = EntityAddressComponentValue.ValueId) 
			LEFT JOIN ConceptCurrentVersion ON (EntityAddressComponent.ComponentTypeConceptId = ConceptCurrentVersion.ConceptId)
			WHERE EntityAddressId = EntityAddress.EntityAddressId FOR XML PATH ('Component')
	) Address FROM 
    EntityAddress INNER JOIN ConceptCurrentVersion ON (EntityAddress.AddressUseConceptId = ConceptCurrentVersion.ConceptId) ;
GO

CREATE VIEW EntityTelecomAddressValue AS 
    SELECT EntityTelecomAddress.EntityTelecomAddressId, EntityId, EntityTelecomAddress.TelecomUseConceptId, EntityTelecomAddress.TelecomAddressTypeConceptId, ConceptCurrentVersion.Mnemonic AS TelecomAddressUseMnemonic, TypeConcept.Mnemonic AS TelecomAddressTypeMnemonic, EffectiveVersionSequenceId, ObsoleteVersionSequenceId, TelecomAddress
	FROM EntityTelecomAddress INNER JOIN ConceptCurrentVersion ON (EntityTelecomAddress.TelecomUseConceptId = ConceptCurrentVersion.ConceptId) 
	LEFT JOIN ConceptCurrentVersion TypeConcept ON (EntityTelecomAddress.TelecomAddressTypeConceptId = TypeConcept.ConceptId) ;
	;
GO



CREATE VIEW EntityCurrentVersion AS
SELECT EntityVersion.*, StatusConcept.Mnemonic AS StatusMnemonic, 
	ClassConcept.Mnemonic AS ClassMnemonic, 
	DeterminerConcept.Mnemonic AS DeterminerMnemonic,
	TypeConcept.Mnemonic AS TypeMnmeonic,
	(SELECT NameUseMnemonic, CAST(Name AS XML) FROM EntityNameValue WHERE EntityNameValue.EntityId = Entity.EntityId AND EntityVersion.VersionSequenceId BETWEEN EntityNameValue.EffectiveVersionSequenceId AND COALESCE(EntityNameValue.ObsoleteVersionSequenceId, EntityVersion.VersionSequenceId) FOR XML PATH('EntityName')) AS Name,
	(SELECT AddressUseMnemonic, CAST(Address AS XML) FROM EntityAddressValue WHERE EntityAddressValue.EntityId = Entity.EntityId AND EntityVersion.VersionSequenceId BETWEEN EntityAddressValue.EffectiveVersionSequenceId AND COALESCE(EntityAddressValue.ObsoleteVersionSequenceId, EntityVersion.VersionSequenceId) FOR XML PATH('EntityAddress')) AS Address,
	(SELECT TelecomAddressUseMnemonic, TelecomAddress FROM EntityTelecomAddressValue WHERE EntityTelecomAddressValue.EntityId = Entity.EntityId AND EntityVersion.VersionSequenceId BETWEEN EntityTelecomAddressValue.EffectiveVersionSequenceId AND COALESCE(EntityTelecomAddressValue.ObsoleteVersionSequenceId, EntityVersion.VersionSequenceId) FOR XML PATH('EntityTelecomAddress')) AS Telecom
FROM 
	EntityVersion INNER JOIN Entity ON (EntityVersion.EntityId = Entity.EntityId)
	INNER JOIN ConceptCurrentVersion StatusConcept ON (EntityVersion.StatusConceptId = StatusConcept.ConceptId)
	INNER JOIN ConceptCurrentVersion ClassConcept ON (Entity.ClassConceptId = ClassConcept.ConceptId)
	INNER JOIN ConceptCurrentVersion DeterminerConcept ON (Entity.DeterminerConceptId = DeterminerConcept.ConceptId)
	LEFT JOIN ConceptCurrentVersion TypeConcept ON (EntityVersion.TypeConceptId = TypeConcept.ConceptId)
WHERE EntityVersion.ObsoletionTime IS NULL;

GO

CREATE VIEW PlaceCurrentVersion AS 
	SELECT EntityCurrentVersion.*, Place.MobileInd, Place.Lat, Place.Lng FROM Place INNER JOIN EntityCurrentVersion ON (Place.EntityVersionId = EntityCurrentVersion.EntityVersionId);

GO

CREATE VIEW PersonCurrentVersion AS 
	SELECT EntityCurrentVersion.*, Person.DateOfBirth, Person.DateOfBirthPrecision FROM Person INNER JOIN EntityCurrentVersion ON (Person.EntityVersionId = EntityCurrentVersion.EntityVersionId)

GO

CREATE VIEW ProviderCurrentVersion AS 
	SELECT PersonCurrentVersion.*, Provider.ProviderSpecialtyConceptId, ConceptCurrentVersion.Mnemonic AS SpecialtyMnemonic 
	FROM Provider INNER JOIN PersonCurrentVersion ON (Provider.EntityVersionId = PersonCurrentVersion.EntityVersionId)
		LEFT JOIN ConceptCurrentVersion ON (ConceptCurrentVersion.ConceptId = Provider.ProviderSpecialtyConceptId);

GO

CREATE VIEW UserEntityCurrentVersion AS 
	SELECT PersonCurrentVersion.*, SecurityUser.UserName, SecurityUser.UserPassword, SecurityUser.LastSuccessfulLogin, SecurityUser.SecurityStamp, SecurityUser.TwoFactorEnabled, SecurityUser.FailedLoginAttempts
	FROM UserEntity INNER JOIN PersonCurrentVersion ON (UserEntity.EntityVersionId = PersonCurrentVersion.EntityVersionId)
		INNER JOIN SecurityUser ON (SecurityUser.UserId = UserEntity.UserId);
GO