#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace OpenIZ.Persistence.Data.MSSQL.Data
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="OpenIZ_Test")]
	public partial class ModelDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertAct(Act instance);
    partial void UpdateAct(Act instance);
    partial void DeleteAct(Act instance);
    partial void InsertUserEntity(UserEntity instance);
    partial void UpdateUserEntity(UserEntity instance);
    partial void DeleteUserEntity(UserEntity instance);
    partial void InsertActExtension(ActExtension instance);
    partial void UpdateActExtension(ActExtension instance);
    partial void DeleteActExtension(ActExtension instance);
    partial void InsertActIdentifier(ActIdentifier instance);
    partial void UpdateActIdentifier(ActIdentifier instance);
    partial void DeleteActIdentifier(ActIdentifier instance);
    partial void InsertActNote(ActNote instance);
    partial void UpdateActNote(ActNote instance);
    partial void DeleteActNote(ActNote instance);
    partial void InsertActParticipation(ActParticipation instance);
    partial void UpdateActParticipation(ActParticipation instance);
    partial void DeleteActParticipation(ActParticipation instance);
    partial void InsertActPolicy(ActPolicy instance);
    partial void UpdateActPolicy(ActPolicy instance);
    partial void DeleteActPolicy(ActPolicy instance);
    partial void InsertActProtocol(ActProtocol instance);
    partial void UpdateActProtocol(ActProtocol instance);
    partial void DeleteActProtocol(ActProtocol instance);
    partial void InsertActRelationship(ActRelationship instance);
    partial void UpdateActRelationship(ActRelationship instance);
    partial void DeleteActRelationship(ActRelationship instance);
    partial void InsertActTag(ActTag instance);
    partial void UpdateActTag(ActTag instance);
    partial void DeleteActTag(ActTag instance);
    partial void InsertActVersion(ActVersion instance);
    partial void UpdateActVersion(ActVersion instance);
    partial void DeleteActVersion(ActVersion instance);
    partial void InsertApplicationEntity(ApplicationEntity instance);
    partial void UpdateApplicationEntity(ApplicationEntity instance);
    partial void DeleteApplicationEntity(ApplicationEntity instance);
    partial void InsertAssigningAuthority(AssigningAuthority instance);
    partial void UpdateAssigningAuthority(AssigningAuthority instance);
    partial void DeleteAssigningAuthority(AssigningAuthority instance);
    partial void InsertCodedObservation(CodedObservation instance);
    partial void UpdateCodedObservation(CodedObservation instance);
    partial void DeleteCodedObservation(CodedObservation instance);
    partial void InsertCodeSystem(CodeSystem instance);
    partial void UpdateCodeSystem(CodeSystem instance);
    partial void DeleteCodeSystem(CodeSystem instance);
    partial void InsertConcept(Concept instance);
    partial void UpdateConcept(Concept instance);
    partial void DeleteConcept(Concept instance);
    partial void InsertConceptClass(ConceptClass instance);
    partial void UpdateConceptClass(ConceptClass instance);
    partial void DeleteConceptClass(ConceptClass instance);
    partial void InsertConceptName(ConceptName instance);
    partial void UpdateConceptName(ConceptName instance);
    partial void DeleteConceptName(ConceptName instance);
    partial void InsertConceptReferenceTerm(ConceptReferenceTerm instance);
    partial void UpdateConceptReferenceTerm(ConceptReferenceTerm instance);
    partial void DeleteConceptReferenceTerm(ConceptReferenceTerm instance);
    partial void InsertConceptRelationship(ConceptRelationship instance);
    partial void UpdateConceptRelationship(ConceptRelationship instance);
    partial void DeleteConceptRelationship(ConceptRelationship instance);
    partial void InsertConceptRelationshipType(ConceptRelationshipType instance);
    partial void UpdateConceptRelationshipType(ConceptRelationshipType instance);
    partial void DeleteConceptRelationshipType(ConceptRelationshipType instance);
    partial void InsertConceptSet(ConceptSet instance);
    partial void UpdateConceptSet(ConceptSet instance);
    partial void DeleteConceptSet(ConceptSet instance);
    partial void InsertConceptSetMember(ConceptSetMember instance);
    partial void UpdateConceptSetMember(ConceptSetMember instance);
    partial void DeleteConceptSetMember(ConceptSetMember instance);
    partial void InsertConceptVersion(ConceptVersion instance);
    partial void UpdateConceptVersion(ConceptVersion instance);
    partial void DeleteConceptVersion(ConceptVersion instance);
    partial void InsertDeviceEntity(DeviceEntity instance);
    partial void UpdateDeviceEntity(DeviceEntity instance);
    partial void DeleteDeviceEntity(DeviceEntity instance);
    partial void InsertEntity(Entity instance);
    partial void UpdateEntity(Entity instance);
    partial void DeleteEntity(Entity instance);
    partial void InsertEntityAddress(EntityAddress instance);
    partial void UpdateEntityAddress(EntityAddress instance);
    partial void DeleteEntityAddress(EntityAddress instance);
    partial void InsertEntityAddressComponent(EntityAddressComponent instance);
    partial void UpdateEntityAddressComponent(EntityAddressComponent instance);
    partial void DeleteEntityAddressComponent(EntityAddressComponent instance);
    partial void InsertEntityAddressComponentValue(EntityAddressComponentValue instance);
    partial void UpdateEntityAddressComponentValue(EntityAddressComponentValue instance);
    partial void DeleteEntityAddressComponentValue(EntityAddressComponentValue instance);
    partial void InsertEntityAssociation(EntityAssociation instance);
    partial void UpdateEntityAssociation(EntityAssociation instance);
    partial void DeleteEntityAssociation(EntityAssociation instance);
    partial void InsertEntityExtension(EntityExtension instance);
    partial void UpdateEntityExtension(EntityExtension instance);
    partial void DeleteEntityExtension(EntityExtension instance);
    partial void InsertEntityIdentifier(EntityIdentifier instance);
    partial void UpdateEntityIdentifier(EntityIdentifier instance);
    partial void DeleteEntityIdentifier(EntityIdentifier instance);
    partial void InsertEntityName(EntityName instance);
    partial void UpdateEntityName(EntityName instance);
    partial void DeleteEntityName(EntityName instance);
    partial void InsertEntityNameComponent(EntityNameComponent instance);
    partial void UpdateEntityNameComponent(EntityNameComponent instance);
    partial void DeleteEntityNameComponent(EntityNameComponent instance);
    partial void InsertEntityNote(EntityNote instance);
    partial void UpdateEntityNote(EntityNote instance);
    partial void DeleteEntityNote(EntityNote instance);
    partial void InsertEntityTag(EntityTag instance);
    partial void UpdateEntityTag(EntityTag instance);
    partial void DeleteEntityTag(EntityTag instance);
    partial void InsertEntityTelecomAddress(EntityTelecomAddress instance);
    partial void UpdateEntityTelecomAddress(EntityTelecomAddress instance);
    partial void DeleteEntityTelecomAddress(EntityTelecomAddress instance);
    partial void InsertEntityVersion(EntityVersion instance);
    partial void UpdateEntityVersion(EntityVersion instance);
    partial void DeleteEntityVersion(EntityVersion instance);
    partial void InsertExtensionType(ExtensionType instance);
    partial void UpdateExtensionType(ExtensionType instance);
    partial void DeleteExtensionType(ExtensionType instance);
    partial void InsertIdentifierType(IdentifierType instance);
    partial void UpdateIdentifierType(IdentifierType instance);
    partial void DeleteIdentifierType(IdentifierType instance);
    partial void InsertManufacturedMaterial(ManufacturedMaterial instance);
    partial void UpdateManufacturedMaterial(ManufacturedMaterial instance);
    partial void DeleteManufacturedMaterial(ManufacturedMaterial instance);
    partial void InsertMaterial(Material instance);
    partial void UpdateMaterial(Material instance);
    partial void DeleteMaterial(Material instance);
    partial void InsertObservation(Observation instance);
    partial void UpdateObservation(Observation instance);
    partial void DeleteObservation(Observation instance);
    partial void InsertOrganization(Organization instance);
    partial void UpdateOrganization(Organization instance);
    partial void DeleteOrganization(Organization instance);
    partial void InsertPatient(Patient instance);
    partial void UpdatePatient(Patient instance);
    partial void DeletePatient(Patient instance);
    partial void InsertPatientEncounter(PatientEncounter instance);
    partial void UpdatePatientEncounter(PatientEncounter instance);
    partial void DeletePatientEncounter(PatientEncounter instance);
    partial void InsertPerson(Person instance);
    partial void UpdatePerson(Person instance);
    partial void DeletePerson(Person instance);
    partial void InsertPersonLanguageCommunication(PersonLanguageCommunication instance);
    partial void UpdatePersonLanguageCommunication(PersonLanguageCommunication instance);
    partial void DeletePersonLanguageCommunication(PersonLanguageCommunication instance);
    partial void InsertPhoneticAlgorithm(PhoneticAlgorithm instance);
    partial void UpdatePhoneticAlgorithm(PhoneticAlgorithm instance);
    partial void DeletePhoneticAlgorithm(PhoneticAlgorithm instance);
    partial void InsertPhoneticValue(PhoneticValue instance);
    partial void UpdatePhoneticValue(PhoneticValue instance);
    partial void DeletePhoneticValue(PhoneticValue instance);
    partial void InsertPlace(Place instance);
    partial void UpdatePlace(Place instance);
    partial void DeletePlace(Place instance);
    partial void InsertPlaceService(PlaceService instance);
    partial void UpdatePlaceService(PlaceService instance);
    partial void DeletePlaceService(PlaceService instance);
    partial void InsertPolicy(Policy instance);
    partial void UpdatePolicy(Policy instance);
    partial void DeletePolicy(Policy instance);
    partial void InsertProtocol(Protocol instance);
    partial void UpdateProtocol(Protocol instance);
    partial void DeleteProtocol(Protocol instance);
    partial void InsertProtocolHandler(ProtocolHandler instance);
    partial void UpdateProtocolHandler(ProtocolHandler instance);
    partial void DeleteProtocolHandler(ProtocolHandler instance);
    partial void InsertProvider(Provider instance);
    partial void UpdateProvider(Provider instance);
    partial void DeleteProvider(Provider instance);
    partial void InsertQuantifiedActParticipation(QuantifiedActParticipation instance);
    partial void UpdateQuantifiedActParticipation(QuantifiedActParticipation instance);
    partial void DeleteQuantifiedActParticipation(QuantifiedActParticipation instance);
    partial void InsertQuantifiedEntityAssociation(QuantifiedEntityAssociation instance);
    partial void UpdateQuantifiedEntityAssociation(QuantifiedEntityAssociation instance);
    partial void DeleteQuantifiedEntityAssociation(QuantifiedEntityAssociation instance);
    partial void InsertQuantityObservation(QuantityObservation instance);
    partial void UpdateQuantityObservation(QuantityObservation instance);
    partial void DeleteQuantityObservation(QuantityObservation instance);
    partial void InsertReferenceTerm(ReferenceTerm instance);
    partial void UpdateReferenceTerm(ReferenceTerm instance);
    partial void DeleteReferenceTerm(ReferenceTerm instance);
    partial void InsertReferenceTermDisplayName(ReferenceTermDisplayName instance);
    partial void UpdateReferenceTermDisplayName(ReferenceTermDisplayName instance);
    partial void DeleteReferenceTermDisplayName(ReferenceTermDisplayName instance);
    partial void InsertSecurityApplication(SecurityApplication instance);
    partial void UpdateSecurityApplication(SecurityApplication instance);
    partial void DeleteSecurityApplication(SecurityApplication instance);
    partial void InsertSecurityApplicationPolicy(SecurityApplicationPolicy instance);
    partial void UpdateSecurityApplicationPolicy(SecurityApplicationPolicy instance);
    partial void DeleteSecurityApplicationPolicy(SecurityApplicationPolicy instance);
    partial void InsertSecurityDevice(SecurityDevice instance);
    partial void UpdateSecurityDevice(SecurityDevice instance);
    partial void DeleteSecurityDevice(SecurityDevice instance);
    partial void InsertSecurityDevicePolicy(SecurityDevicePolicy instance);
    partial void UpdateSecurityDevicePolicy(SecurityDevicePolicy instance);
    partial void DeleteSecurityDevicePolicy(SecurityDevicePolicy instance);
    partial void InsertSecurityRole(SecurityRole instance);
    partial void UpdateSecurityRole(SecurityRole instance);
    partial void DeleteSecurityRole(SecurityRole instance);
    partial void InsertSecurityRolePolicy(SecurityRolePolicy instance);
    partial void UpdateSecurityRolePolicy(SecurityRolePolicy instance);
    partial void DeleteSecurityRolePolicy(SecurityRolePolicy instance);
    partial void InsertSecurityUser(SecurityUser instance);
    partial void UpdateSecurityUser(SecurityUser instance);
    partial void DeleteSecurityUser(SecurityUser instance);
    partial void InsertSecurityUserClaim(SecurityUserClaim instance);
    partial void UpdateSecurityUserClaim(SecurityUserClaim instance);
    partial void DeleteSecurityUserClaim(SecurityUserClaim instance);
    partial void InsertSecurityUserClass(SecurityUserClass instance);
    partial void UpdateSecurityUserClass(SecurityUserClass instance);
    partial void DeleteSecurityUserClass(SecurityUserClass instance);
    partial void InsertSecurityUserLogin(SecurityUserLogin instance);
    partial void UpdateSecurityUserLogin(SecurityUserLogin instance);
    partial void DeleteSecurityUserLogin(SecurityUserLogin instance);
    partial void InsertSecurityUserRole(SecurityUserRole instance);
    partial void UpdateSecurityUserRole(SecurityUserRole instance);
    partial void DeleteSecurityUserRole(SecurityUserRole instance);
    partial void InsertSubstanceAdministration(SubstanceAdministration instance);
    partial void UpdateSubstanceAdministration(SubstanceAdministration instance);
    partial void DeleteSubstanceAdministration(SubstanceAdministration instance);
    partial void InsertTextObservation(TextObservation instance);
    partial void UpdateTextObservation(TextObservation instance);
    partial void DeleteTextObservation(TextObservation instance);
    #endregion
		
		public ModelDataContext() : 
				base(global::OpenIZ.Persistence.Data.MSSQL.Properties.Settings.Default.OpenIZ_TestConnectionString1, mappingSource)
		{
			OnCreated();
		}
		
		public ModelDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public ModelDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public ModelDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public ModelDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<Act> Acts
		{
			get
			{
				return this.GetTable<Act>();
			}
		}
		
		public System.Data.Linq.Table<UserEntity> UserEntities
		{
			get
			{
				return this.GetTable<UserEntity>();
			}
		}
		
		public System.Data.Linq.Table<ActExtension> ActExtensions
		{
			get
			{
				return this.GetTable<ActExtension>();
			}
		}
		
		public System.Data.Linq.Table<ActIdentifier> ActIdentifiers
		{
			get
			{
				return this.GetTable<ActIdentifier>();
			}
		}
		
		public System.Data.Linq.Table<ActNote> ActNotes
		{
			get
			{
				return this.GetTable<ActNote>();
			}
		}
		
		public System.Data.Linq.Table<ActParticipation> ActParticipations
		{
			get
			{
				return this.GetTable<ActParticipation>();
			}
		}
		
		public System.Data.Linq.Table<ActPolicy> ActPolicies
		{
			get
			{
				return this.GetTable<ActPolicy>();
			}
		}
		
		public System.Data.Linq.Table<ActProtocol> ActProtocols
		{
			get
			{
				return this.GetTable<ActProtocol>();
			}
		}
		
		public System.Data.Linq.Table<ActRelationship> ActRelationships
		{
			get
			{
				return this.GetTable<ActRelationship>();
			}
		}
		
		public System.Data.Linq.Table<ActTag> ActTags
		{
			get
			{
				return this.GetTable<ActTag>();
			}
		}
		
		public System.Data.Linq.Table<ActVersion> ActVersions
		{
			get
			{
				return this.GetTable<ActVersion>();
			}
		}
		
		public System.Data.Linq.Table<ApplicationEntity> ApplicationEntities
		{
			get
			{
				return this.GetTable<ApplicationEntity>();
			}
		}
		
		public System.Data.Linq.Table<AssigningAuthority> AssigningAuthorities
		{
			get
			{
				return this.GetTable<AssigningAuthority>();
			}
		}
		
		public System.Data.Linq.Table<CodedObservation> CodedObservations
		{
			get
			{
				return this.GetTable<CodedObservation>();
			}
		}
		
		public System.Data.Linq.Table<CodeSystem> CodeSystems
		{
			get
			{
				return this.GetTable<CodeSystem>();
			}
		}
		
		public System.Data.Linq.Table<Concept> Concepts
		{
			get
			{
				return this.GetTable<Concept>();
			}
		}
		
		public System.Data.Linq.Table<ConceptClass> ConceptClasses
		{
			get
			{
				return this.GetTable<ConceptClass>();
			}
		}
		
		public System.Data.Linq.Table<ConceptName> ConceptNames
		{
			get
			{
				return this.GetTable<ConceptName>();
			}
		}
		
		public System.Data.Linq.Table<ConceptReferenceTerm> ConceptReferenceTerms
		{
			get
			{
				return this.GetTable<ConceptReferenceTerm>();
			}
		}
		
		public System.Data.Linq.Table<ConceptRelationship> ConceptRelationships
		{
			get
			{
				return this.GetTable<ConceptRelationship>();
			}
		}
		
		public System.Data.Linq.Table<ConceptRelationshipType> ConceptRelationshipTypes
		{
			get
			{
				return this.GetTable<ConceptRelationshipType>();
			}
		}
		
		public System.Data.Linq.Table<ConceptSet> ConceptSets
		{
			get
			{
				return this.GetTable<ConceptSet>();
			}
		}
		
		public System.Data.Linq.Table<ConceptSetMember> ConceptSetMembers
		{
			get
			{
				return this.GetTable<ConceptSetMember>();
			}
		}
		
		public System.Data.Linq.Table<ConceptVersion> ConceptVersions
		{
			get
			{
				return this.GetTable<ConceptVersion>();
			}
		}
		
		public System.Data.Linq.Table<DeviceEntity> DeviceEntities
		{
			get
			{
				return this.GetTable<DeviceEntity>();
			}
		}
		
		public System.Data.Linq.Table<Entity> Entities
		{
			get
			{
				return this.GetTable<Entity>();
			}
		}
		
		public System.Data.Linq.Table<EntityAddress> EntityAddresses
		{
			get
			{
				return this.GetTable<EntityAddress>();
			}
		}
		
		public System.Data.Linq.Table<EntityAddressComponent> EntityAddressComponents
		{
			get
			{
				return this.GetTable<EntityAddressComponent>();
			}
		}
		
		public System.Data.Linq.Table<EntityAddressComponentValue> EntityAddressComponentValues
		{
			get
			{
				return this.GetTable<EntityAddressComponentValue>();
			}
		}
		
		public System.Data.Linq.Table<EntityAssociation> EntityAssociations
		{
			get
			{
				return this.GetTable<EntityAssociation>();
			}
		}
		
		public System.Data.Linq.Table<EntityExtension> EntityExtensions
		{
			get
			{
				return this.GetTable<EntityExtension>();
			}
		}
		
		public System.Data.Linq.Table<EntityIdentifier> EntityIdentifiers
		{
			get
			{
				return this.GetTable<EntityIdentifier>();
			}
		}
		
		public System.Data.Linq.Table<EntityName> EntityNames
		{
			get
			{
				return this.GetTable<EntityName>();
			}
		}
		
		public System.Data.Linq.Table<EntityNameComponent> EntityNameComponents
		{
			get
			{
				return this.GetTable<EntityNameComponent>();
			}
		}
		
		public System.Data.Linq.Table<EntityNote> EntityNotes
		{
			get
			{
				return this.GetTable<EntityNote>();
			}
		}
		
		public System.Data.Linq.Table<EntityTag> EntityTags
		{
			get
			{
				return this.GetTable<EntityTag>();
			}
		}
		
		public System.Data.Linq.Table<EntityTelecomAddress> EntityTelecomAddresses
		{
			get
			{
				return this.GetTable<EntityTelecomAddress>();
			}
		}
		
		public System.Data.Linq.Table<EntityVersion> EntityVersions
		{
			get
			{
				return this.GetTable<EntityVersion>();
			}
		}
		
		public System.Data.Linq.Table<ExtensionType> ExtensionTypes
		{
			get
			{
				return this.GetTable<ExtensionType>();
			}
		}
		
		public System.Data.Linq.Table<IdentifierType> IdentifierTypes
		{
			get
			{
				return this.GetTable<IdentifierType>();
			}
		}
		
		public System.Data.Linq.Table<ManufacturedMaterial> ManufacturedMaterials
		{
			get
			{
				return this.GetTable<ManufacturedMaterial>();
			}
		}
		
		public System.Data.Linq.Table<Material> Materials
		{
			get
			{
				return this.GetTable<Material>();
			}
		}
		
		public System.Data.Linq.Table<Observation> Observations
		{
			get
			{
				return this.GetTable<Observation>();
			}
		}
		
		public System.Data.Linq.Table<Organization> Organizations
		{
			get
			{
				return this.GetTable<Organization>();
			}
		}
		
		public System.Data.Linq.Table<Patient> Patients
		{
			get
			{
				return this.GetTable<Patient>();
			}
		}
		
		public System.Data.Linq.Table<PatientEncounter> PatientEncounters
		{
			get
			{
				return this.GetTable<PatientEncounter>();
			}
		}
		
		public System.Data.Linq.Table<Person> Persons
		{
			get
			{
				return this.GetTable<Person>();
			}
		}
		
		public System.Data.Linq.Table<PersonLanguageCommunication> PersonLanguageCommunications
		{
			get
			{
				return this.GetTable<PersonLanguageCommunication>();
			}
		}
		
		public System.Data.Linq.Table<PhoneticAlgorithm> PhoneticAlgorithms
		{
			get
			{
				return this.GetTable<PhoneticAlgorithm>();
			}
		}
		
		public System.Data.Linq.Table<PhoneticValue> PhoneticValues
		{
			get
			{
				return this.GetTable<PhoneticValue>();
			}
		}
		
		public System.Data.Linq.Table<Place> Places
		{
			get
			{
				return this.GetTable<Place>();
			}
		}
		
		public System.Data.Linq.Table<PlaceService> PlaceServices
		{
			get
			{
				return this.GetTable<PlaceService>();
			}
		}
		
		public System.Data.Linq.Table<Policy> Policies
		{
			get
			{
				return this.GetTable<Policy>();
			}
		}
		
		public System.Data.Linq.Table<Protocol> Protocols
		{
			get
			{
				return this.GetTable<Protocol>();
			}
		}
		
		public System.Data.Linq.Table<ProtocolHandler> ProtocolHandlers
		{
			get
			{
				return this.GetTable<ProtocolHandler>();
			}
		}
		
		public System.Data.Linq.Table<Provider> Providers
		{
			get
			{
				return this.GetTable<Provider>();
			}
		}
		
		public System.Data.Linq.Table<QuantifiedActParticipation> QuantifiedActParticipations
		{
			get
			{
				return this.GetTable<QuantifiedActParticipation>();
			}
		}
		
		public System.Data.Linq.Table<QuantifiedEntityAssociation> QuantifiedEntityAssociations
		{
			get
			{
				return this.GetTable<QuantifiedEntityAssociation>();
			}
		}
		
		public System.Data.Linq.Table<QuantityObservation> QuantityObservations
		{
			get
			{
				return this.GetTable<QuantityObservation>();
			}
		}
		
		public System.Data.Linq.Table<ReferenceTerm> ReferenceTerms
		{
			get
			{
				return this.GetTable<ReferenceTerm>();
			}
		}
		
		public System.Data.Linq.Table<ReferenceTermDisplayName> ReferenceTermDisplayNames
		{
			get
			{
				return this.GetTable<ReferenceTermDisplayName>();
			}
		}
		
		public System.Data.Linq.Table<SecurityApplication> SecurityApplications
		{
			get
			{
				return this.GetTable<SecurityApplication>();
			}
		}
		
		public System.Data.Linq.Table<SecurityApplicationPolicy> SecurityApplicationPolicies
		{
			get
			{
				return this.GetTable<SecurityApplicationPolicy>();
			}
		}
		
		public System.Data.Linq.Table<SecurityDevice> SecurityDevices
		{
			get
			{
				return this.GetTable<SecurityDevice>();
			}
		}
		
		public System.Data.Linq.Table<SecurityDevicePolicy> SecurityDevicePolicies
		{
			get
			{
				return this.GetTable<SecurityDevicePolicy>();
			}
		}
		
		public System.Data.Linq.Table<SecurityRole> SecurityRoles
		{
			get
			{
				return this.GetTable<SecurityRole>();
			}
		}
		
		public System.Data.Linq.Table<SecurityRolePolicy> SecurityRolePolicies
		{
			get
			{
				return this.GetTable<SecurityRolePolicy>();
			}
		}
		
		public System.Data.Linq.Table<SecurityUser> SecurityUsers
		{
			get
			{
				return this.GetTable<SecurityUser>();
			}
		}
		
		public System.Data.Linq.Table<SecurityUserClaim> SecurityUserClaims
		{
			get
			{
				return this.GetTable<SecurityUserClaim>();
			}
		}
		
		public System.Data.Linq.Table<SecurityUserClass> SecurityUserClasses
		{
			get
			{
				return this.GetTable<SecurityUserClass>();
			}
		}
		
		public System.Data.Linq.Table<SecurityUserLogin> SecurityUserLogins
		{
			get
			{
				return this.GetTable<SecurityUserLogin>();
			}
		}
		
		public System.Data.Linq.Table<SecurityUserRole> SecurityUserRoles
		{
			get
			{
				return this.GetTable<SecurityUserRole>();
			}
		}
		
		public System.Data.Linq.Table<SubstanceAdministration> SubstanceAdministrations
		{
			get
			{
				return this.GetTable<SubstanceAdministration>();
			}
		}
		
		public System.Data.Linq.Table<TextObservation> TextObservations
		{
			get
			{
				return this.GetTable<TextObservation>();
			}
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.sp_Authenticate")]
		public int sp_Authenticate([global::System.Data.Linq.Mapping.ParameterAttribute(Name="UserName", DbType="NVarChar(128)")] string userName, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="PasswordHash", DbType="NVarChar(128)")] string passwordHash, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="MaxInvalidLoginAttempts", DbType="Int")] System.Nullable<int> maxInvalidLoginAttempts, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="SecurityUserId", DbType="UniqueIdentifier")] ref System.Nullable<System.Guid> securityUserId)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), userName, passwordHash, maxInvalidLoginAttempts, securityUserId);
			securityUserId = ((System.Nullable<System.Guid>)(result.GetParameterValue(3)));
			return ((int)(result.ReturnValue));
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Act")]
	public partial class Act : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _ActId;
		
		private System.Guid _ClassConceptId;
		
		private System.Guid _MoodConceptId;
		
		private EntitySet<ActExtension> _ActExtensions;
		
		private EntitySet<ActIdentifier> _ActIdentifiers;
		
		private EntityRef<ActNote> _ActNoteActNoteId;
		
		private EntitySet<ActParticipation> _ActParticipations;
		
		private EntitySet<ActPolicy> _ActPolicies;
		
		private EntitySet<ActProtocol> _ActProtocols;
		
		private EntitySet<ActRelationship> _ActRelationshipsSourceActId;
		
		private EntitySet<ActRelationship> _ActRelationshipsTargetActId;
		
		private EntitySet<ActTag> _ActTags;
		
		private EntitySet<ActVersion> _ActVersions;
		
		private EntityRef<Concept> _ClassConcept;
		
		private EntityRef<Concept> _MoodConcept;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnActIdChanging(System.Guid value);
    partial void OnActIdChanged();
    partial void OnClassConceptIdChanging(System.Guid value);
    partial void OnClassConceptIdChanged();
    partial void OnMoodConceptIdChanging(System.Guid value);
    partial void OnMoodConceptIdChanged();
    #endregion
		
		public Act()
		{
			this._ActExtensions = new EntitySet<ActExtension>(new Action<ActExtension>(this.attach_ActExtensions), new Action<ActExtension>(this.detach_ActExtensions));
			this._ActIdentifiers = new EntitySet<ActIdentifier>(new Action<ActIdentifier>(this.attach_ActIdentifiers), new Action<ActIdentifier>(this.detach_ActIdentifiers));
			this._ActNoteActNoteId = default(EntityRef<ActNote>);
			this._ActParticipations = new EntitySet<ActParticipation>(new Action<ActParticipation>(this.attach_ActParticipations), new Action<ActParticipation>(this.detach_ActParticipations));
			this._ActPolicies = new EntitySet<ActPolicy>(new Action<ActPolicy>(this.attach_ActPolicies), new Action<ActPolicy>(this.detach_ActPolicies));
			this._ActProtocols = new EntitySet<ActProtocol>(new Action<ActProtocol>(this.attach_ActProtocols), new Action<ActProtocol>(this.detach_ActProtocols));
			this._ActRelationshipsSourceActId = new EntitySet<ActRelationship>(new Action<ActRelationship>(this.attach_ActRelationshipsSourceActId), new Action<ActRelationship>(this.detach_ActRelationshipsSourceActId));
			this._ActRelationshipsTargetActId = new EntitySet<ActRelationship>(new Action<ActRelationship>(this.attach_ActRelationshipsTargetActId), new Action<ActRelationship>(this.detach_ActRelationshipsTargetActId));
			this._ActTags = new EntitySet<ActTag>(new Action<ActTag>(this.attach_ActTags), new Action<ActTag>(this.detach_ActTags));
			this._ActVersions = new EntitySet<ActVersion>(new Action<ActVersion>(this.attach_ActVersions), new Action<ActVersion>(this.detach_ActVersions));
			this._ClassConcept = default(EntityRef<Concept>);
			this._MoodConcept = default(EntityRef<Concept>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ActId", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid ActId
		{
			get
			{
				return this._ActId;
			}
			set
			{
				if ((this._ActId != value))
				{
					this.OnActIdChanging(value);
					this.SendPropertyChanging();
					this._ActId = value;
					this.SendPropertyChanged("ActId");
					this.OnActIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ClassConceptId", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid ClassConceptId
		{
			get
			{
				return this._ClassConceptId;
			}
			set
			{
				if ((this._ClassConceptId != value))
				{
					if (this._ClassConcept.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnClassConceptIdChanging(value);
					this.SendPropertyChanging();
					this._ClassConceptId = value;
					this.SendPropertyChanged("ClassConceptId");
					this.OnClassConceptIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MoodConceptId", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid MoodConceptId
		{
			get
			{
				return this._MoodConceptId;
			}
			set
			{
				if ((this._MoodConceptId != value))
				{
					if (this._MoodConcept.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnMoodConceptIdChanging(value);
					this.SendPropertyChanging();
					this._MoodConceptId = value;
					this.SendPropertyChanged("MoodConceptId");
					this.OnMoodConceptIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Act_ActExtension", Storage="_ActExtensions", ThisKey="ActId", OtherKey="ActId")]
		public EntitySet<ActExtension> ActExtensions
		{
			get
			{
				return this._ActExtensions;
			}
			set
			{
				this._ActExtensions.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Act_ActIdentifier", Storage="_ActIdentifiers", ThisKey="ActId", OtherKey="ActId")]
		public EntitySet<ActIdentifier> ActIdentifiers
		{
			get
			{
				return this._ActIdentifiers;
			}
			set
			{
				this._ActIdentifiers.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Act_ActNote", Storage="_ActNoteActNoteId", ThisKey="ActId", OtherKey="ActNoteId", IsUnique=true, IsForeignKey=false)]
		public ActNote ActNoteActNoteId
		{
			get
			{
				return this._ActNoteActNoteId.Entity;
			}
			set
			{
				ActNote previousValue = this._ActNoteActNoteId.Entity;
				if (((previousValue != value) 
							|| (this._ActNoteActNoteId.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ActNoteActNoteId.Entity = null;
						previousValue.Act = null;
					}
					this._ActNoteActNoteId.Entity = value;
					if ((value != null))
					{
						value.Act = this;
					}
					this.SendPropertyChanged("ActNoteActNoteId");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Act_ActParticipation", Storage="_ActParticipations", ThisKey="ActId", OtherKey="ActId")]
		public EntitySet<ActParticipation> ActParticipations
		{
			get
			{
				return this._ActParticipations;
			}
			set
			{
				this._ActParticipations.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Act_ActPolicy", Storage="_ActPolicies", ThisKey="ActId", OtherKey="ActId")]
		public EntitySet<ActPolicy> ActPolicies
		{
			get
			{
				return this._ActPolicies;
			}
			set
			{
				this._ActPolicies.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Act_ActProtocol", Storage="_ActProtocols", ThisKey="ActId", OtherKey="ActId")]
		public EntitySet<ActProtocol> ActProtocols
		{
			get
			{
				return this._ActProtocols;
			}
			set
			{
				this._ActProtocols.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Act_ActRelationship", Storage="_ActRelationshipsSourceActId", ThisKey="ActId", OtherKey="SourceActId")]
		public EntitySet<ActRelationship> ActRelationshipsSourceActId
		{
			get
			{
				return this._ActRelationshipsSourceActId;
			}
			set
			{
				this._ActRelationshipsSourceActId.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Act_ActRelationship1", Storage="_ActRelationshipsTargetActId", ThisKey="ActId", OtherKey="TargetActId")]
		public EntitySet<ActRelationship> ActRelationshipsTargetActId
		{
			get
			{
				return this._ActRelationshipsTargetActId;
			}
			set
			{
				this._ActRelationshipsTargetActId.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Act_ActTag", Storage="_ActTags", ThisKey="ActId", OtherKey="ActId")]
		public EntitySet<ActTag> ActTags
		{
			get
			{
				return this._ActTags;
			}
			set
			{
				this._ActTags.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Act_ActVersion", Storage="_ActVersions", ThisKey="ActId", OtherKey="ActId")]
		public EntitySet<ActVersion> ActVersions
		{
			get
			{
				return this._ActVersions;
			}
			set
			{
				this._ActVersions.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Concept_Act", Storage="_ClassConcept", ThisKey="ClassConceptId", OtherKey="ConceptId", IsForeignKey=true)]
		public Concept ClassConcept
		{
			get
			{
				return this._ClassConcept.Entity;
			}
			set
			{
				Concept previousValue = this._ClassConcept.Entity;
				if (((previousValue != value) 
							|| (this._ClassConcept.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ClassConcept.Entity = null;
						previousValue.ActsClassConceptId.Remove(this);
					}
					this._ClassConcept.Entity = value;
					if ((value != null))
					{
						value.ActsClassConceptId.Add(this);
						this._ClassConceptId = value.ConceptId;
					}
					else
					{
						this._ClassConceptId = default(System.Guid);
					}
					this.SendPropertyChanged("ClassConcept");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Concept_Act1", Storage="_MoodConcept", ThisKey="MoodConceptId", OtherKey="ConceptId", IsForeignKey=true)]
		public Concept MoodConcept
		{
			get
			{
				return this._MoodConcept.Entity;
			}
			set
			{
				Concept previousValue = this._MoodConcept.Entity;
				if (((previousValue != value) 
							|| (this._MoodConcept.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._MoodConcept.Entity = null;
						previousValue.ActsMoodConceptId.Remove(this);
					}
					this._MoodConcept.Entity = value;
					if ((value != null))
					{
						value.ActsMoodConceptId.Add(this);
						this._MoodConceptId = value.ConceptId;
					}
					else
					{
						this._MoodConceptId = default(System.Guid);
					}
					this.SendPropertyChanged("MoodConcept");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_ActExtensions(ActExtension entity)
		{
			this.SendPropertyChanging();
			entity.Act = this;
		}
		
		private void detach_ActExtensions(ActExtension entity)
		{
			this.SendPropertyChanging();
			entity.Act = null;
		}
		
		private void attach_ActIdentifiers(ActIdentifier entity)
		{
			this.SendPropertyChanging();
			entity.Act = this;
		}
		
		private void detach_ActIdentifiers(ActIdentifier entity)
		{
			this.SendPropertyChanging();
			entity.Act = null;
		}
		
		private void attach_ActParticipations(ActParticipation entity)
		{
			this.SendPropertyChanging();
			entity.Act = this;
		}
		
		private void detach_ActParticipations(ActParticipation entity)
		{
			this.SendPropertyChanging();
			entity.Act = null;
		}
		
		private void attach_ActPolicies(ActPolicy entity)
		{
			this.SendPropertyChanging();
			entity.Act = this;
		}
		
		private void detach_ActPolicies(ActPolicy entity)
		{
			this.SendPropertyChanging();
			entity.Act = null;
		}
		
		private void attach_ActProtocols(ActProtocol entity)
		{
			this.SendPropertyChanging();
			entity.Act = this;
		}
		
		private void detach_ActProtocols(ActProtocol entity)
		{
			this.SendPropertyChanging();
			entity.Act = null;
		}
		
		private void attach_ActRelationshipsSourceActId(ActRelationship entity)
		{
			this.SendPropertyChanging();
			entity.SourceAct = this;
		}
		
		private void detach_ActRelationshipsSourceActId(ActRelationship entity)
		{
			this.SendPropertyChanging();
			entity.SourceAct = null;
		}
		
		private void attach_ActRelationshipsTargetActId(ActRelationship entity)
		{
			this.SendPropertyChanging();
			entity.TargetAct = this;
		}
		
		private void detach_ActRelationshipsTargetActId(ActRelationship entity)
		{
			this.SendPropertyChanging();
			entity.TargetAct = null;
		}
		
		private void attach_ActTags(ActTag entity)
		{
			this.SendPropertyChanging();
			entity.Act = this;
		}
		
		private void detach_ActTags(ActTag entity)
		{
			this.SendPropertyChanging();
			entity.Act = null;
		}
		
		private void attach_ActVersions(ActVersion entity)
		{
			this.SendPropertyChanging();
			entity.Act = this;
		}
		
		private void detach_ActVersions(ActVersion entity)
		{
			this.SendPropertyChanging();
			entity.Act = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.UserEntity")]
	public partial class UserEntity : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _EntityVersionId;
		
		private System.Guid _UserId;
		
		private EntityRef<Person> _Person;
		
		private EntityRef<SecurityUser> _SecurityUser;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnEntityVersionIdChanging(System.Guid value);
    partial void OnEntityVersionIdChanged();
    partial void OnUserIdChanging(System.Guid value);
    partial void OnUserIdChanged();
    #endregion
		
		public UserEntity()
		{
			this._Person = default(EntityRef<Person>);
			this._SecurityUser = default(EntityRef<SecurityUser>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EntityVersionId", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid EntityVersionId
		{
			get
			{
				return this._EntityVersionId;
			}
			set
			{
				if ((this._EntityVersionId != value))
				{
					if (this._Person.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnEntityVersionIdChanging(value);
					this.SendPropertyChanging();
					this._EntityVersionId = value;
					this.SendPropertyChanged("EntityVersionId");
					this.OnEntityVersionIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserId", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid UserId
		{
			get
			{
				return this._UserId;
			}
			set
			{
				if ((this._UserId != value))
				{
					if (this._SecurityUser.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserIdChanging(value);
					this.SendPropertyChanging();
					this._UserId = value;
					this.SendPropertyChanged("UserId");
					this.OnUserIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Person_UserEntity", Storage="_Person", ThisKey="EntityVersionId", OtherKey="EntityVersionId", IsForeignKey=true)]
		public Person Person
		{
			get
			{
				return this._Person.Entity;
			}
			set
			{
				Person previousValue = this._Person.Entity;
				if (((previousValue != value) 
							|| (this._Person.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Person.Entity = null;
						previousValue.UserEntity = null;
					}
					this._Person.Entity = value;
					if ((value != null))
					{
						value.UserEntity = this;
						this._EntityVersionId = value.EntityVersionId;
					}
					else
					{
						this._EntityVersionId = default(System.Guid);
					}
					this.SendPropertyChanged("Person");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="SecurityUser_UserEntity", Storage="_SecurityUser", ThisKey="UserId", OtherKey="UserId", IsForeignKey=true)]
		public SecurityUser SecurityUser
		{
			get
			{
				return this._SecurityUser.Entity;
			}
			set
			{
				SecurityUser previousValue = this._SecurityUser.Entity;
				if (((previousValue != value) 
							|| (this._SecurityUser.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._SecurityUser.Entity = null;
						previousValue.UserEntities.Remove(this);
					}
					this._SecurityUser.Entity = value;
					if ((value != null))
					{
						value.UserEntities.Add(this);
						this._UserId = value.UserId;
					}
					else
					{
						this._UserId = default(System.Guid);
					}
					this.SendPropertyChanged("SecurityUser");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ActExtension")]
	public partial class ActExtension : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _ActExtensionId;
		
		private System.Guid _ActId;
		
		private System.Guid _ExtensionTypeId;
		
		private System.Data.Linq.Binary _ExtensionValue;
		
		private string _ExtensionDisplay;
		
		private decimal _EffectiveVersionSequenceId;
		
		private System.Nullable<decimal> _ObsoleteVersionSequenceId;
		
		private EntityRef<Act> _Act;
		
		private EntityRef<ExtensionType> _ExtensionType;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnActExtensionIdChanging(System.Guid value);
    partial void OnActExtensionIdChanged();
    partial void OnActIdChanging(System.Guid value);
    partial void OnActIdChanged();
    partial void OnExtensionTypeIdChanging(System.Guid value);
    partial void OnExtensionTypeIdChanged();
    partial void OnExtensionValueChanging(System.Data.Linq.Binary value);
    partial void OnExtensionValueChanged();
    partial void OnExtensionDisplayChanging(string value);
    partial void OnExtensionDisplayChanged();
    partial void OnEffectiveVersionSequenceIdChanging(decimal value);
    partial void OnEffectiveVersionSequenceIdChanged();
    partial void OnObsoleteVersionSequenceIdChanging(System.Nullable<decimal> value);
    partial void OnObsoleteVersionSequenceIdChanged();
    #endregion
		
		public ActExtension()
		{
			this._Act = default(EntityRef<Act>);
			this._ExtensionType = default(EntityRef<ExtensionType>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ActExtensionId", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid ActExtensionId
		{
			get
			{
				return this._ActExtensionId;
			}
			set
			{
				if ((this._ActExtensionId != value))
				{
					this.OnActExtensionIdChanging(value);
					this.SendPropertyChanging();
					this._ActExtensionId = value;
					this.SendPropertyChanged("ActExtensionId");
					this.OnActExtensionIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ActId", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid ActId
		{
			get
			{
				return this._ActId;
			}
			set
			{
				if ((this._ActId != value))
				{
					if (this._Act.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnActIdChanging(value);
					this.SendPropertyChanging();
					this._ActId = value;
					this.SendPropertyChanged("ActId");
					this.OnActIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ExtensionTypeId", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid ExtensionTypeId
		{
			get
			{
				return this._ExtensionTypeId;
			}
			set
			{
				if ((this._ExtensionTypeId != value))
				{
					if (this._ExtensionType.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnExtensionTypeIdChanging(value);
					this.SendPropertyChanging();
					this._ExtensionTypeId = value;
					this.SendPropertyChanged("ExtensionTypeId");
					this.OnExtensionTypeIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ExtensionValue", DbType="VarBinary(MAX)", UpdateCheck=UpdateCheck.Never)]
		public System.Data.Linq.Binary ExtensionValue
		{
			get
			{
				return this._ExtensionValue;
			}
			set
			{
				if ((this._ExtensionValue != value))
				{
					this.OnExtensionValueChanging(value);
					this.SendPropertyChanging();
					this._ExtensionValue = value;
					this.SendPropertyChanged("ExtensionValue");
					this.OnExtensionValueChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ExtensionDisplay", DbType="NVarChar(64)")]
		public string ExtensionDisplay
		{
			get
			{
				return this._ExtensionDisplay;
			}
			set
			{
				if ((this._ExtensionDisplay != value))
				{
					this.OnExtensionDisplayChanging(value);
					this.SendPropertyChanging();
					this._ExtensionDisplay = value;
					this.SendPropertyChanged("ExtensionDisplay");
					this.OnExtensionDisplayChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EffectiveVersionSequenceId", DbType="Decimal(20,0) NOT NULL")]
		public decimal EffectiveVersionSequenceId
		{
			get
			{
				return this._EffectiveVersionSequenceId;
			}
			set
			{
				if ((this._EffectiveVersionSequenceId != value))
				{
					this.OnEffectiveVersionSequenceIdChanging(value);
					this.SendPropertyChanging();
					this._EffectiveVersionSequenceId = value;
					this.SendPropertyChanged("EffectiveVersionSequenceId");
					this.OnEffectiveVersionSequenceIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ObsoleteVersionSequenceId", DbType="Decimal(20,0)")]
		public System.Nullable<decimal> ObsoleteVersionSequenceId
		{
			get
			{
				return this._ObsoleteVersionSequenceId;
			}
			set
			{
				if ((this._ObsoleteVersionSequenceId != value))
				{
					this.OnObsoleteVersionSequenceIdChanging(value);
					this.SendPropertyChanging();
					this._ObsoleteVersionSequenceId = value;
					this.SendPropertyChanged("ObsoleteVersionSequenceId");
					this.OnObsoleteVersionSequenceIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Act_ActExtension", Storage="_Act", ThisKey="ActId", OtherKey="ActId", IsForeignKey=true)]
		public Act Act
		{
			get
			{
				return this._Act.Entity;
			}
			set
			{
				Act previousValue = this._Act.Entity;
				if (((previousValue != value) 
							|| (this._Act.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Act.Entity = null;
						previousValue.ActExtensions.Remove(this);
					}
					this._Act.Entity = value;
					if ((value != null))
					{
						value.ActExtensions.Add(this);
						this._ActId = value.ActId;
					}
					else
					{
						this._ActId = default(System.Guid);
					}
					this.SendPropertyChanged("Act");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ExtensionType_ActExtension", Storage="_ExtensionType", ThisKey="ExtensionTypeId", OtherKey="ExtensionTypeId", IsForeignKey=true)]
		public ExtensionType ExtensionType
		{
			get
			{
				return this._ExtensionType.Entity;
			}
			set
			{
				ExtensionType previousValue = this._ExtensionType.Entity;
				if (((previousValue != value) 
							|| (this._ExtensionType.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ExtensionType.Entity = null;
						previousValue.ActExtensions.Remove(this);
					}
					this._ExtensionType.Entity = value;
					if ((value != null))
					{
						value.ActExtensions.Add(this);
						this._ExtensionTypeId = value.ExtensionTypeId;
					}
					else
					{
						this._ExtensionTypeId = default(System.Guid);
					}
					this.SendPropertyChanged("ExtensionType");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ActIdentifier")]
	public partial class ActIdentifier : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _ActIdentifierId;
		
		private System.Guid _IdentifierTypeId;
		
		private System.Guid _ActId;
		
		private decimal _EffectiveVersionSequenceId;
		
		private System.Nullable<decimal> _ObsoleteVersionSequenceId;
		
		private System.Guid _AssigningAuthorityId;
		
		private string _IdentifierValue;
		
		private EntityRef<Act> _Act;
		
		private EntityRef<AssigningAuthority> _AssigningAuthority;
		
		private EntityRef<IdentifierType> _IdentifierType;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnActIdentifierIdChanging(System.Guid value);
    partial void OnActIdentifierIdChanged();
    partial void OnIdentifierTypeIdChanging(System.Guid value);
    partial void OnIdentifierTypeIdChanged();
    partial void OnActIdChanging(System.Guid value);
    partial void OnActIdChanged();
    partial void OnEffectiveVersionSequenceIdChanging(decimal value);
    partial void OnEffectiveVersionSequenceIdChanged();
    partial void OnObsoleteVersionSequenceIdChanging(System.Nullable<decimal> value);
    partial void OnObsoleteVersionSequenceIdChanged();
    partial void OnAssigningAuthorityIdChanging(System.Guid value);
    partial void OnAssigningAuthorityIdChanged();
    partial void OnIdentifierValueChanging(string value);
    partial void OnIdentifierValueChanged();
    #endregion
		
		public ActIdentifier()
		{
			this._Act = default(EntityRef<Act>);
			this._AssigningAuthority = default(EntityRef<AssigningAuthority>);
			this._IdentifierType = default(EntityRef<IdentifierType>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ActIdentifierId", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid ActIdentifierId
		{
			get
			{
				return this._ActIdentifierId;
			}
			set
			{
				if ((this._ActIdentifierId != value))
				{
					this.OnActIdentifierIdChanging(value);
					this.SendPropertyChanging();
					this._ActIdentifierId = value;
					this.SendPropertyChanged("ActIdentifierId");
					this.OnActIdentifierIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IdentifierTypeId", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid IdentifierTypeId
		{
			get
			{
				return this._IdentifierTypeId;
			}
			set
			{
				if ((this._IdentifierTypeId != value))
				{
					if (this._IdentifierType.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIdentifierTypeIdChanging(value);
					this.SendPropertyChanging();
					this._IdentifierTypeId = value;
					this.SendPropertyChanged("IdentifierTypeId");
					this.OnIdentifierTypeIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ActId", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid ActId
		{
			get
			{
				return this._ActId;
			}
			set
			{
				if ((this._ActId != value))
				{
					if (this._Act.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnActIdChanging(value);
					this.SendPropertyChanging();
					this._ActId = value;
					this.SendPropertyChanged("ActId");
					this.OnActIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EffectiveVersionSequenceId", DbType="Decimal(20,0) NOT NULL")]
		public decimal EffectiveVersionSequenceId
		{
			get
			{
				return this._EffectiveVersionSequenceId;
			}
			set
			{
				if ((this._EffectiveVersionSequenceId != value))
				{
					this.OnEffectiveVersionSequenceIdChanging(value);
					this.SendPropertyChanging();
					this._EffectiveVersionSequenceId = value;
					this.SendPropertyChanged("EffectiveVersionSequenceId");
					this.OnEffectiveVersionSequenceIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ObsoleteVersionSequenceId", DbType="Decimal(20,0)")]
		public System.Nullable<decimal> ObsoleteVersionSequenceId
		{
			get
			{
				return this._ObsoleteVersionSequenceId;
			}
			set
			{
				if ((this._ObsoleteVersionSequenceId != value))
				{
					this.OnObsoleteVersionSequenceIdChanging(value);
					this.SendPropertyChanging();
					this._ObsoleteVersionSequenceId = value;
					this.SendPropertyChanged("ObsoleteVersionSequenceId");
					this.OnObsoleteVersionSequenceIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AssigningAuthorityId", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid AssigningAuthorityId
		{
			get
			{
				return this._AssigningAuthorityId;
			}
			set
			{
				if ((this._AssigningAuthorityId != value))
				{
					if (this._AssigningAuthority.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnAssigningAuthorityIdChanging(value);
					this.SendPropertyChanging();
					this._AssigningAuthorityId = value;
					this.SendPropertyChanged("AssigningAuthorityId");
					this.OnAssigningAuthorityIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IdentifierValue", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string IdentifierValue
		{
			get
			{
				return this._IdentifierValue;
			}
			set
			{
				if ((this._IdentifierValue != value))
				{
					this.OnIdentifierValueChanging(value);
					this.SendPropertyChanging();
					this._IdentifierValue = value;
					this.SendPropertyChanged("IdentifierValue");
					this.OnIdentifierValueChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Act_ActIdentifier", Storage="_Act", ThisKey="ActId", OtherKey="ActId", IsForeignKey=true)]
		public Act Act
		{
			get
			{
				return this._Act.Entity;
			}
			set
			{
				Act previousValue = this._Act.Entity;
				if (((previousValue != value) 
							|| (this._Act.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Act.Entity = null;
						previousValue.ActIdentifiers.Remove(this);
					}
					this._Act.Entity = value;
					if ((value != null))
					{
						value.ActIdentifiers.Add(this);
						this._ActId = value.ActId;
					}
					else
					{
						this._ActId = default(System.Guid);
					}
					this.SendPropertyChanged("Act");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="AssigningAuthority_ActIdentifier", Storage="_AssigningAuthority", ThisKey="AssigningAuthorityId", OtherKey="AssigningAuthorityId", IsForeignKey=true)]
		public AssigningAuthority AssigningAuthority
		{
			get
			{
				return this._AssigningAuthority.Entity;
			}
			set
			{
				AssigningAuthority previousValue = this._AssigningAuthority.Entity;
				if (((previousValue != value) 
							|| (this._AssigningAuthority.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._AssigningAuthority.Entity = null;
						previousValue.ActIdentifiers.Remove(this);
					}
					this._AssigningAuthority.Entity = value;
					if ((value != null))
					{
						value.ActIdentifiers.Add(this);
						this._AssigningAuthorityId = value.AssigningAuthorityId;
					}
					else
					{
						this._AssigningAuthorityId = default(System.Guid);
					}
					this.SendPropertyChanged("AssigningAuthority");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="IdentifierType_ActIdentifier", Storage="_IdentifierType", ThisKey="IdentifierTypeId", OtherKey="IdentifierTypeId", IsForeignKey=true)]
		public IdentifierType IdentifierType
		{
			get
			{
				return this._IdentifierType.Entity;
			}
			set
			{
				IdentifierType previousValue = this._IdentifierType.Entity;
				if (((previousValue != value) 
							|| (this._IdentifierType.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._IdentifierType.Entity = null;
						previousValue.ActIdentifiers.Remove(this);
					}
					this._IdentifierType.Entity = value;
					if ((value != null))
					{
						value.ActIdentifiers.Add(this);
						this._IdentifierTypeId = value.IdentifierTypeId;
					}
					else
					{
						this._IdentifierTypeId = default(System.Guid);
					}
					this.SendPropertyChanged("IdentifierType");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ActNote")]
	public partial class ActNote : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _ActNoteId;
		
		private System.Guid _ActId;
		
		private decimal _EffectiveVersionSequenceId;
		
		private System.Nullable<decimal> _ObsoleteVersionSequenceId;
		
		private System.Guid _AuthorEntityId;
		
		private string _NoteText;
		
		private EntityRef<Act> _Act;
		
		private EntityRef<Entity> _AuthorEntity;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnActNoteIdChanging(System.Guid value);
    partial void OnActNoteIdChanged();
    partial void OnActIdChanging(System.Guid value);
    partial void OnActIdChanged();
    partial void OnEffectiveVersionSequenceIdChanging(decimal value);
    partial void OnEffectiveVersionSequenceIdChanged();
    partial void OnObsoleteVersionSequenceIdChanging(System.Nullable<decimal> value);
    partial void OnObsoleteVersionSequenceIdChanged();
    partial void OnAuthorEntityIdChanging(System.Guid value);
    partial void OnAuthorEntityIdChanged();
    partial void OnNoteTextChanging(string value);
    partial void OnNoteTextChanged();
    #endregion
		
		public ActNote()
		{
			this._Act = default(EntityRef<Act>);
			this._AuthorEntity = default(EntityRef<Entity>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ActNoteId", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid ActNoteId
		{
			get
			{
				return this._ActNoteId;
			}
			set
			{
				if ((this._ActNoteId != value))
				{
					if (this._Act.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnActNoteIdChanging(value);
					this.SendPropertyChanging();
					this._ActNoteId = value;
					this.SendPropertyChanged("ActNoteId");
					this.OnActNoteIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ActId", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid ActId
		{
			get
			{
				return this._ActId;
			}
			set
			{
				if ((this._ActId != value))
				{
					this.OnActIdChanging(value);
					this.SendPropertyChanging();
					this._ActId = value;
					this.SendPropertyChanged("ActId");
					this.OnActIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EffectiveVersionSequenceId", DbType="Decimal(20,0) NOT NULL")]
		public decimal EffectiveVersionSequenceId
		{
			get
			{
				return this._EffectiveVersionSequenceId;
			}
			set
			{
				if ((this._EffectiveVersionSequenceId != value))
				{
					this.OnEffectiveVersionSequenceIdChanging(value);
					this.SendPropertyChanging();
					this._EffectiveVersionSequenceId = value;
					this.SendPropertyChanged("EffectiveVersionSequenceId");
					this.OnEffectiveVersionSequenceIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ObsoleteVersionSequenceId", DbType="Decimal(20,0)")]
		public System.Nullable<decimal> ObsoleteVersionSequenceId
		{
			get
			{
				return this._ObsoleteVersionSequenceId;
			}
			set
			{
				if ((this._ObsoleteVersionSequenceId != value))
				{
					this.OnObsoleteVersionSequenceIdChanging(value);
					this.SendPropertyChanging();
					this._ObsoleteVersionSequenceId = value;
					this.SendPropertyChanged("ObsoleteVersionSequenceId");
					this.OnObsoleteVersionSequenceIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AuthorEntityId", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid AuthorEntityId
		{
			get
			{
				return this._AuthorEntityId;
			}
			set
			{
				if ((this._AuthorEntityId != value))
				{
					if (this._AuthorEntity.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnAuthorEntityIdChanging(value);
					this.SendPropertyChanging();
					this._AuthorEntityId = value;
					this.SendPropertyChanged("AuthorEntityId");
					this.OnAuthorEntityIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NoteText", DbType="Text NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string NoteText
		{
			get
			{
				return this._NoteText;
			}
			set
			{
				if ((this._NoteText != value))
				{
					this.OnNoteTextChanging(value);
					this.SendPropertyChanging();
					this._NoteText = value;
					this.SendPropertyChanged("NoteText");
					this.OnNoteTextChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Act_ActNote", Storage="_Act", ThisKey="ActNoteId", OtherKey="ActId", IsForeignKey=true)]
		public Act Act
		{
			get
			{
				return this._Act.Entity;
			}
			set
			{
				Act previousValue = this._Act.Entity;
				if (((previousValue != value) 
							|| (this._Act.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Act.Entity = null;
						previousValue.ActNoteActNoteId = null;
					}
					this._Act.Entity = value;
					if ((value != null))
					{
						value.ActNoteActNoteId = this;
						this._ActNoteId = value.ActId;
					}
					else
					{
						this._ActNoteId = default(System.Guid);
					}
					this.SendPropertyChanged("Act");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Entity_ActNote", Storage="_AuthorEntity", ThisKey="AuthorEntityId", OtherKey="EntityId", IsForeignKey=true)]
		public Entity AuthorEntity
		{
			get
			{
				return this._AuthorEntity.Entity;
			}
			set
			{
				Entity previousValue = this._AuthorEntity.Entity;
				if (((previousValue != value) 
							|| (this._AuthorEntity.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._AuthorEntity.Entity = null;
						previousValue.ActNotesAuthorEntityId.Remove(this);
					}
					this._AuthorEntity.Entity = value;
					if ((value != null))
					{
						value.ActNotesAuthorEntityId.Add(this);
						this._AuthorEntityId = value.EntityId;
					}
					else
					{
						this._AuthorEntityId = default(System.Guid);
					}
					this.SendPropertyChanged("AuthorEntity");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ActParticipation")]
	public partial class ActParticipation : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _ActParticipationId;
		
		private System.Guid _EntityId;
		
		private System.Guid _ActId;
		
		private decimal _EffectiveVersionSequenceId;
		
		private System.Nullable<decimal> _ObsoleteVersionSequenceId;
		
		private System.Guid _ParticipationRoleConceptId;
		
		private EntityRef<QuantifiedActParticipation> _QuantifiedActParticipation;
		
		private EntityRef<Act> _Act;
		
		private EntityRef<Concept> _ParticipationRoleConcept;
		
		private EntityRef<Entity> _Entity;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnActParticipationIdChanging(System.Guid value);
    partial void OnActParticipationIdChanged();
    partial void OnEntityIdChanging(System.Guid value);
    partial void OnEntityIdChanged();
    partial void OnActIdChanging(System.Guid value);
    partial void OnActIdChanged();
    partial void OnEffectiveVersionSequenceIdChanging(decimal value);
    partial void OnEffectiveVersionSequenceIdChanged();
    partial void OnObsoleteVersionSequenceIdChanging(System.Nullable<decimal> value);
    partial void OnObsoleteVersionSequenceIdChanged();
    partial void OnParticipationRoleConceptIdChanging(System.Guid value);
    partial void OnParticipationRoleConceptIdChanged();
    #endregion
		
		public ActParticipation()
		{
			this._QuantifiedActParticipation = default(EntityRef<QuantifiedActParticipation>);
			this._Act = default(EntityRef<Act>);
			this._ParticipationRoleConcept = default(EntityRef<Concept>);
			this._Entity = default(EntityRef<Entity>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ActParticipationId", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid ActParticipationId
		{
			get
			{
				return this._ActParticipationId;
			}
			set
			{
				if ((this._ActParticipationId != value))
				{
					this.OnActParticipationIdChanging(value);
					this.SendPropertyChanging();
					this._ActParticipationId = value;
					this.SendPropertyChanged("ActParticipationId");
					this.OnActParticipationIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EntityId", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid EntityId
		{
			get
			{
				return this._EntityId;
			}
			set
			{
				if ((this._EntityId != value))
				{
					if (this._Entity.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnEntityIdChanging(value);
					this.SendPropertyChanging();
					this._EntityId = value;
					this.SendPropertyChanged("EntityId");
					this.OnEntityIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ActId", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid ActId
		{
			get
			{
				return this._ActId;
			}
			set
			{
				if ((this._ActId != value))
				{
					if (this._Act.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnActIdChanging(value);
					this.SendPropertyChanging();
					this._ActId = value;
					this.SendPropertyChanged("ActId");
					this.OnActIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EffectiveVersionSequenceId", DbType="Decimal(20,0) NOT NULL")]
		public decimal EffectiveVersionSequenceId
		{
			get
			{
				return this._EffectiveVersionSequenceId;
			}
			set
			{
				if ((this._EffectiveVersionSequenceId != value))
				{
					this.OnEffectiveVersionSequenceIdChanging(value);
					this.SendPropertyChanging();
					this._EffectiveVersionSequenceId = value;
					this.SendPropertyChanged("EffectiveVersionSequenceId");
					this.OnEffectiveVersionSequenceIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ObsoleteVersionSequenceId", DbType="Decimal(20,0)")]
		public System.Nullable<decimal> ObsoleteVersionSequenceId
		{
			get
			{
				return this._ObsoleteVersionSequenceId;
			}
			set
			{
				if ((this._ObsoleteVersionSequenceId != value))
				{
					this.OnObsoleteVersionSequenceIdChanging(value);
					this.SendPropertyChanging();
					this._ObsoleteVersionSequenceId = value;
					this.SendPropertyChanged("ObsoleteVersionSequenceId");
					this.OnObsoleteVersionSequenceIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ParticipationRoleConceptId", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid ParticipationRoleConceptId
		{
			get
			{
				return this._ParticipationRoleConceptId;
			}
			set
			{
				if ((this._ParticipationRoleConceptId != value))
				{
					if (this._ParticipationRoleConcept.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnParticipationRoleConceptIdChanging(value);
					this.SendPropertyChanging();
					this._ParticipationRoleConceptId = value;
					this.SendPropertyChanged("ParticipationRoleConceptId");
					this.OnParticipationRoleConceptIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ActParticipation_QuantifiedActParticipation", Storage="_QuantifiedActParticipation", ThisKey="ActParticipationId", OtherKey="ActParticipationId", IsUnique=true, IsForeignKey=false)]
		public QuantifiedActParticipation QuantifiedActParticipation
		{
			get
			{
				return this._QuantifiedActParticipation.Entity;
			}
			set
			{
				QuantifiedActParticipation previousValue = this._QuantifiedActParticipation.Entity;
				if (((previousValue != value) 
							|| (this._QuantifiedActParticipation.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._QuantifiedActParticipation.Entity = null;
						previousValue.ActParticipation = null;
					}
					this._QuantifiedActParticipation.Entity = value;
					if ((value != null))
					{
						value.ActParticipation = this;
					}
					this.SendPropertyChanged("QuantifiedActParticipation");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Act_ActParticipation", Storage="_Act", ThisKey="ActId", OtherKey="ActId", IsForeignKey=true)]
		public Act Act
		{
			get
			{
				return this._Act.Entity;
			}
			set
			{
				Act previousValue = this._Act.Entity;
				if (((previousValue != value) 
							|| (this._Act.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Act.Entity = null;
						previousValue.ActParticipations.Remove(this);
					}
					this._Act.Entity = value;
					if ((value != null))
					{
						value.ActParticipations.Add(this);
						this._ActId = value.ActId;
					}
					else
					{
						this._ActId = default(System.Guid);
					}
					this.SendPropertyChanged("Act");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Concept_ActParticipation", Storage="_ParticipationRoleConcept", ThisKey="ParticipationRoleConceptId", OtherKey="ConceptId", IsForeignKey=true)]
		public Concept ParticipationRoleConcept
		{
			get
			{
				return this._ParticipationRoleConcept.Entity;
			}
			set
			{
				Concept previousValue = this._ParticipationRoleConcept.Entity;
				if (((previousValue != value) 
							|| (this._ParticipationRoleConcept.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ParticipationRoleConcept.Entity = null;
						previousValue.ActParticipationsParticipationRoleConceptId.Remove(this);
					}
					this._ParticipationRoleConcept.Entity = value;
					if ((value != null))
					{
						value.ActParticipationsParticipationRoleConceptId.Add(this);
						this._ParticipationRoleConceptId = value.ConceptId;
					}
					else
					{
						this._ParticipationRoleConceptId = default(System.Guid);
					}
					this.SendPropertyChanged("ParticipationRoleConcept");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Entity_ActParticipation", Storage="_Entity", ThisKey="EntityId", OtherKey="EntityId", IsForeignKey=true)]
		public Entity Entity
		{
			get
			{
				return this._Entity.Entity;
			}
			set
			{
				Entity previousValue = this._Entity.Entity;
				if (((previousValue != value) 
							|| (this._Entity.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Entity.Entity = null;
						previousValue.ActParticipations.Remove(this);
					}
					this._Entity.Entity = value;
					if ((value != null))
					{
						value.ActParticipations.Add(this);
						this._EntityId = value.EntityId;
					}
					else
					{
						this._EntityId = default(System.Guid);
					}
					this.SendPropertyChanged("Entity");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ActPolicy")]
	public partial class ActPolicy : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _ActPolicyId;
		
		private System.Guid _ActId;
		
		private decimal _EffectiveVersionSequenceId;
		
		private System.Nullable<decimal> _ObsoleteVersionSequenceId;
		
		private System.Guid _PolicyId;
		
		private EntityRef<Act> _Act;
		
		private EntityRef<Policy> _Policy;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnActPolicyIdChanging(System.Guid value);
    partial void OnActPolicyIdChanged();
    partial void OnActIdChanging(System.Guid value);
    partial void OnActIdChanged();
    partial void OnEffectiveVersionSequenceIdChanging(decimal value);
    partial void OnEffectiveVersionSequenceIdChanged();
    partial void OnObsoleteVersionSequenceIdChanging(System.Nullable<decimal> value);
    partial void OnObsoleteVersionSequenceIdChanged();
    partial void OnPolicyIdChanging(System.Guid value);
    partial void OnPolicyIdChanged();
    #endregion
		
		public ActPolicy()
		{
			this._Act = default(EntityRef<Act>);
			this._Policy = default(EntityRef<Policy>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ActPolicyId", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid ActPolicyId
		{
			get
			{
				return this._ActPolicyId;
			}
			set
			{
				if ((this._ActPolicyId != value))
				{
					this.OnActPolicyIdChanging(value);
					this.SendPropertyChanging();
					this._ActPolicyId = value;
					this.SendPropertyChanged("ActPolicyId");
					this.OnActPolicyIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ActId", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid ActId
		{
			get
			{
				return this._ActId;
			}
			set
			{
				if ((this._ActId != value))
				{
					if (this._Act.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnActIdChanging(value);
					this.SendPropertyChanging();
					this._ActId = value;
					this.SendPropertyChanged("ActId");
					this.OnActIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EffectiveVersionSequenceId", DbType="Decimal(20,0) NOT NULL")]
		public decimal EffectiveVersionSequenceId
		{
			get
			{
				return this._EffectiveVersionSequenceId;
			}
			set
			{
				if ((this._EffectiveVersionSequenceId != value))
				{
					this.OnEffectiveVersionSequenceIdChanging(value);
					this.SendPropertyChanging();
					this._EffectiveVersionSequenceId = value;
					this.SendPropertyChanged("EffectiveVersionSequenceId");
					this.OnEffectiveVersionSequenceIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ObsoleteVersionSequenceId", DbType="Decimal(20,0)")]
		public System.Nullable<decimal> ObsoleteVersionSequenceId
		{
			get
			{
				return this._ObsoleteVersionSequenceId;
			}
			set
			{
				if ((this._ObsoleteVersionSequenceId != value))
				{
					this.OnObsoleteVersionSequenceIdChanging(value);
					this.SendPropertyChanging();
					this._ObsoleteVersionSequenceId = value;
					this.SendPropertyChanged("ObsoleteVersionSequenceId");
					this.OnObsoleteVersionSequenceIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PolicyId", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid PolicyId
		{
			get
			{
				return this._PolicyId;
			}
			set
			{
				if ((this._PolicyId != value))
				{
					if (this._Policy.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPolicyIdChanging(value);
					this.SendPropertyChanging();
					this._PolicyId = value;
					this.SendPropertyChanged("PolicyId");
					this.OnPolicyIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Act_ActPolicy", Storage="_Act", ThisKey="ActId", OtherKey="ActId", IsForeignKey=true)]
		public Act Act
		{
			get
			{
				return this._Act.Entity;
			}
			set
			{
				Act previousValue = this._Act.Entity;
				if (((previousValue != value) 
							|| (this._Act.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Act.Entity = null;
						previousValue.ActPolicies.Remove(this);
					}
					this._Act.Entity = value;
					if ((value != null))
					{
						value.ActPolicies.Add(this);
						this._ActId = value.ActId;
					}
					else
					{
						this._ActId = default(System.Guid);
					}
					this.SendPropertyChanged("Act");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Policy_ActPolicy", Storage="_Policy", ThisKey="PolicyId", OtherKey="PolicyId", IsForeignKey=true)]
		public Policy Policy
		{
			get
			{
				return this._Policy.Entity;
			}
			set
			{
				Policy previousValue = this._Policy.Entity;
				if (((previousValue != value) 
							|| (this._Policy.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Policy.Entity = null;
						previousValue.ActPolicies.Remove(this);
					}
					this._Policy.Entity = value;
					if ((value != null))
					{
						value.ActPolicies.Add(this);
						this._PolicyId = value.PolicyId;
					}
					else
					{
						this._PolicyId = default(System.Guid);
					}
					this.SendPropertyChanged("Policy");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ActProtocol")]
	public partial class ActProtocol : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _ProtocolId;
		
		private System.Guid _ActId;
		
		private bool _IsComplete;
		
		private System.Xml.Linq.XElement _StateData;
		
		private EntityRef<Act> _Act;
		
		private EntityRef<Protocol> _Protocol;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnProtocolIdChanging(System.Guid value);
    partial void OnProtocolIdChanged();
    partial void OnActIdChanging(System.Guid value);
    partial void OnActIdChanged();
    partial void OnIsCompleteChanging(bool value);
    partial void OnIsCompleteChanged();
    partial void OnStateDataChanging(System.Xml.Linq.XElement value);
    partial void OnStateDataChanged();
    #endregion
		
		public ActProtocol()
		{
			this._Act = default(EntityRef<Act>);
			this._Protocol = default(EntityRef<Protocol>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProtocolId", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid ProtocolId
		{
			get
			{
				return this._ProtocolId;
			}
			set
			{
				if ((this._ProtocolId != value))
				{
					if (this._Protocol.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnProtocolIdChanging(value);
					this.SendPropertyChanging();
					this._ProtocolId = value;
					this.SendPropertyChanged("ProtocolId");
					this.OnProtocolIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ActId", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid ActId
		{
			get
			{
				return this._ActId;
			}
			set
			{
				if ((this._ActId != value))
				{
					if (this._Act.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnActIdChanging(value);
					this.SendPropertyChanging();
					this._ActId = value;
					this.SendPropertyChanged("ActId");
					this.OnActIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsComplete", DbType="Bit NOT NULL")]
		public bool IsComplete
		{
			get
			{
				return this._IsComplete;
			}
			set
			{
				if ((this._IsComplete != value))
				{
					this.OnIsCompleteChanging(value);
					this.SendPropertyChanging();
					this._IsComplete = value;
					this.SendPropertyChanged("IsComplete");
					this.OnIsCompleteChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StateData", DbType="Xml", UpdateCheck=UpdateCheck.Never)]
		public System.Xml.Linq.XElement StateData
		{
			get
			{
				return this._StateData;
			}
			set
			{
				if ((this._StateData != value))
				{
					this.OnStateDataChanging(value);
					this.SendPropertyChanging();
					this._StateData = value;
					this.SendPropertyChanged("StateData");
					this.OnStateDataChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Act_ActProtocol", Storage="_Act", ThisKey="ActId", OtherKey="ActId", IsForeignKey=true)]
		public Act Act
		{
			get
			{
				return this._Act.Entity;
			}
			set
			{
				Act previousValue = this._Act.Entity;
				if (((previousValue != value) 
							|| (this._Act.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Act.Entity = null;
						previousValue.ActProtocols.Remove(this);
					}
					this._Act.Entity = value;
					if ((value != null))
					{
						value.ActProtocols.Add(this);
						this._ActId = value.ActId;
					}
					else
					{
						this._ActId = default(System.Guid);
					}
					this.SendPropertyChanged("Act");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Protocol_ActProtocol", Storage="_Protocol", ThisKey="ProtocolId", OtherKey="ProtocolId", IsForeignKey=true)]
		public Protocol Protocol
		{
			get
			{
				return this._Protocol.Entity;
			}
			set
			{
				Protocol previousValue = this._Protocol.Entity;
				if (((previousValue != value) 
							|| (this._Protocol.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Protocol.Entity = null;
						previousValue.ActProtocols.Remove(this);
					}
					this._Protocol.Entity = value;
					if ((value != null))
					{
						value.ActProtocols.Add(this);
						this._ProtocolId = value.ProtocolId;
					}
					else
					{
						this._ProtocolId = default(System.Guid);
					}
					this.SendPropertyChanged("Protocol");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ActRelationship")]
	public partial class ActRelationship : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _ActRelationshipId;
		
		private System.Guid _SourceActId;
		
		private System.Guid _TargetActId;
		
		private decimal _EffectiveVersionSequenceId;
		
		private decimal _ObsoleteVersionSequenceId;
		
		private System.Guid _RelationshipTypeConceptId;
		
		private EntityRef<Act> _SourceAct;
		
		private EntityRef<Act> _TargetAct;
		
		private EntityRef<Concept> _RelationshipTypeConcept;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnActRelationshipIdChanging(System.Guid value);
    partial void OnActRelationshipIdChanged();
    partial void OnSourceActIdChanging(System.Guid value);
    partial void OnSourceActIdChanged();
    partial void OnTargetActIdChanging(System.Guid value);
    partial void OnTargetActIdChanged();
    partial void OnEffectiveVersionSequenceIdChanging(decimal value);
    partial void OnEffectiveVersionSequenceIdChanged();
    partial void OnObsoleteVersionSequenceIdChanging(decimal value);
    partial void OnObsoleteVersionSequenceIdChanged();
    partial void OnRelationshipTypeConceptIdChanging(System.Guid value);
    partial void OnRelationshipTypeConceptIdChanged();
    #endregion
		
		public ActRelationship()
		{
			this._SourceAct = default(EntityRef<Act>);
			this._TargetAct = default(EntityRef<Act>);
			this._RelationshipTypeConcept = default(EntityRef<Concept>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ActRelationshipId", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid ActRelationshipId
		{
			get
			{
				return this._ActRelationshipId;
			}
			set
			{
				if ((this._ActRelationshipId != value))
				{
					this.OnActRelationshipIdChanging(value);
					this.SendPropertyChanging();
					this._ActRelationshipId = value;
					this.SendPropertyChanged("ActRelationshipId");
					this.OnActRelationshipIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SourceActId", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid SourceActId
		{
			get
			{
				return this._SourceActId;
			}
			set
			{
				if ((this._SourceActId != value))
				{
					if (this._SourceAct.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSourceActIdChanging(value);
					this.SendPropertyChanging();
					this._SourceActId = value;
					this.SendPropertyChanged("SourceActId");
					this.OnSourceActIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TargetActId", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid TargetActId
		{
			get
			{
				return this._TargetActId;
			}
			set
			{
				if ((this._TargetActId != value))
				{
					if (this._TargetAct.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnTargetActIdChanging(value);
					this.SendPropertyChanging();
					this._TargetActId = value;
					this.SendPropertyChanged("TargetActId");
					this.OnTargetActIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EffectiveVersionSequenceId", DbType="Decimal(20,0) NOT NULL")]
		public decimal EffectiveVersionSequenceId
		{
			get
			{
				return this._EffectiveVersionSequenceId;
			}
			set
			{
				if ((this._EffectiveVersionSequenceId != value))
				{
					this.OnEffectiveVersionSequenceIdChanging(value);
					this.SendPropertyChanging();
					this._EffectiveVersionSequenceId = value;
					this.SendPropertyChanged("EffectiveVersionSequenceId");
					this.OnEffectiveVersionSequenceIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ObsoleteVersionSequenceId", DbType="Decimal(20,0) NOT NULL")]
		public decimal ObsoleteVersionSequenceId
		{
			get
			{
				return this._ObsoleteVersionSequenceId;
			}
			set
			{
				if ((this._ObsoleteVersionSequenceId != value))
				{
					this.OnObsoleteVersionSequenceIdChanging(value);
					this.SendPropertyChanging();
					this._ObsoleteVersionSequenceId = value;
					this.SendPropertyChanged("ObsoleteVersionSequenceId");
					this.OnObsoleteVersionSequenceIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RelationshipTypeConceptId", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid RelationshipTypeConceptId
		{
			get
			{
				return this._RelationshipTypeConceptId;
			}
			set
			{
				if ((this._RelationshipTypeConceptId != value))
				{
					if (this._RelationshipTypeConcept.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnRelationshipTypeConceptIdChanging(value);
					this.SendPropertyChanging();
					this._RelationshipTypeConceptId = value;
					this.SendPropertyChanged("RelationshipTypeConceptId");
					this.OnRelationshipTypeConceptIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Act_ActRelationship", Storage="_SourceAct", ThisKey="SourceActId", OtherKey="ActId", IsForeignKey=true)]
		public Act SourceAct
		{
			get
			{
				return this._SourceAct.Entity;
			}
			set
			{
				Act previousValue = this._SourceAct.Entity;
				if (((previousValue != value) 
							|| (this._SourceAct.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._SourceAct.Entity = null;
						previousValue.ActRelationshipsSourceActId.Remove(this);
					}
					this._SourceAct.Entity = value;
					if ((value != null))
					{
						value.ActRelationshipsSourceActId.Add(this);
						this._SourceActId = value.ActId;
					}
					else
					{
						this._SourceActId = default(System.Guid);
					}
					this.SendPropertyChanged("SourceAct");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Act_ActRelationship1", Storage="_TargetAct", ThisKey="TargetActId", OtherKey="ActId", IsForeignKey=true)]
		public Act TargetAct
		{
			get
			{
				return this._TargetAct.Entity;
			}
			set
			{
				Act previousValue = this._TargetAct.Entity;
				if (((previousValue != value) 
							|| (this._TargetAct.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._TargetAct.Entity = null;
						previousValue.ActRelationshipsTargetActId.Remove(this);
					}
					this._TargetAct.Entity = value;
					if ((value != null))
					{
						value.ActRelationshipsTargetActId.Add(this);
						this._TargetActId = value.ActId;
					}
					else
					{
						this._TargetActId = default(System.Guid);
					}
					this.SendPropertyChanged("TargetAct");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Concept_ActRelationship", Storage="_RelationshipTypeConcept", ThisKey="RelationshipTypeConceptId", OtherKey="ConceptId", IsForeignKey=true)]
		public Concept RelationshipTypeConcept
		{
			get
			{
				return this._RelationshipTypeConcept.Entity;
			}
			set
			{
				Concept previousValue = this._RelationshipTypeConcept.Entity;
				if (((previousValue != value) 
							|| (this._RelationshipTypeConcept.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._RelationshipTypeConcept.Entity = null;
						previousValue.ActRelationshipsRelationshipTypeConceptId.Remove(this);
					}
					this._RelationshipTypeConcept.Entity = value;
					if ((value != null))
					{
						value.ActRelationshipsRelationshipTypeConceptId.Add(this);
						this._RelationshipTypeConceptId = value.ConceptId;
					}
					else
					{
						this._RelationshipTypeConceptId = default(System.Guid);
					}
					this.SendPropertyChanged("RelationshipTypeConcept");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ActTag")]
	public partial class ActTag : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _ActTagId;
		
		private System.Guid _ActId;
		
		private string _Name;
		
		private string _Value;
		
		private System.DateTimeOffset _CreationTime;
		
		private System.Nullable<System.Guid> _CreatedBy;
		
		private System.Nullable<System.DateTimeOffset> _ObsoletionTime;
		
		private System.Nullable<System.Guid> _ObsoletedBy;
		
		private EntityRef<Act> _Act;
		
		private EntityRef<SecurityUser> _CreatedByEntity;
		
		private EntityRef<SecurityUser> _ObsoletedByEntity;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnActTagIdChanging(System.Guid value);
    partial void OnActTagIdChanged();
    partial void OnActIdChanging(System.Guid value);
    partial void OnActIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnValueChanging(string value);
    partial void OnValueChanged();
    partial void OnCreationTimeChanging(System.DateTimeOffset value);
    partial void OnCreationTimeChanged();
    partial void OnCreatedByChanging(System.Nullable<System.Guid> value);
    partial void OnCreatedByChanged();
    partial void OnObsoletionTimeChanging(System.Nullable<System.DateTimeOffset> value);
    partial void OnObsoletionTimeChanged();
    partial void OnObsoletedByChanging(System.Nullable<System.Guid> value);
    partial void OnObsoletedByChanged();
    #endregion
		
		public ActTag()
		{
			this._Act = default(EntityRef<Act>);
			this._CreatedByEntity = default(EntityRef<SecurityUser>);
			this._ObsoletedByEntity = default(EntityRef<SecurityUser>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ActTagId", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid ActTagId
		{
			get
			{
				return this._ActTagId;
			}
			set
			{
				if ((this._ActTagId != value))
				{
					this.OnActTagIdChanging(value);
					this.SendPropertyChanging();
					this._ActTagId = value;
					this.SendPropertyChanged("ActTagId");
					this.OnActTagIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ActId", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid ActId
		{
			get
			{
				return this._ActId;
			}
			set
			{
				if ((this._ActId != value))
				{
					if (this._Act.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnActIdChanging(value);
					this.SendPropertyChanging();
					this._ActId = value;
					this.SendPropertyChanged("ActId");
					this.OnActIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(64) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Value", DbType="NVarChar(MAX)")]
		public string Value
		{
			get
			{
				return this._Value;
			}
			set
			{
				if ((this._Value != value))
				{
					this.OnValueChanging(value);
					this.SendPropertyChanging();
					this._Value = value;
					this.SendPropertyChanged("Value");
					this.OnValueChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CreationTime", AutoSync=AutoSync.Always, DbType="DateTimeOffset NOT NULL", IsDbGenerated=true)]
		public System.DateTimeOffset CreationTime
		{
			get
			{
				return this._CreationTime;
			}
			set
			{
				if ((this._CreationTime != value))
				{
					this.OnCreationTimeChanging(value);
					this.SendPropertyChanging();
					this._CreationTime = value;
					this.SendPropertyChanged("CreationTime");
					this.OnCreationTimeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CreatedBy", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> CreatedBy
		{
			get
			{
				return this._CreatedBy;
			}
			set
			{
				if ((this._CreatedBy != value))
				{
					if (this._CreatedByEntity.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCreatedByChanging(value);
					this.SendPropertyChanging();
					this._CreatedBy = value;
					this.SendPropertyChanged("CreatedBy");
					this.OnCreatedByChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ObsoletionTime", DbType="DateTimeOffset")]
		public System.Nullable<System.DateTimeOffset> ObsoletionTime
		{
			get
			{
				return this._ObsoletionTime;
			}
			set
			{
				if ((this._ObsoletionTime != value))
				{
					this.OnObsoletionTimeChanging(value);
					this.SendPropertyChanging();
					this._ObsoletionTime = value;
					this.SendPropertyChanged("ObsoletionTime");
					this.OnObsoletionTimeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ObsoletedBy", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> ObsoletedBy
		{
			get
			{
				return this._ObsoletedBy;
			}
			set
			{
				if ((this._ObsoletedBy != value))
				{
					if (this._ObsoletedByEntity.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnObsoletedByChanging(value);
					this.SendPropertyChanging();
					this._ObsoletedBy = value;
					this.SendPropertyChanged("ObsoletedBy");
					this.OnObsoletedByChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Act_ActTag", Storage="_Act", ThisKey="ActId", OtherKey="ActId", IsForeignKey=true)]
		public Act Act
		{
			get
			{
				return this._Act.Entity;
			}
			set
			{
				Act previousValue = this._Act.Entity;
				if (((previousValue != value) 
							|| (this._Act.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Act.Entity = null;
						previousValue.ActTags.Remove(this);
					}
					this._Act.Entity = value;
					if ((value != null))
					{
						value.ActTags.Add(this);
						this._ActId = value.ActId;
					}
					else
					{
						this._ActId = default(System.Guid);
					}
					this.SendPropertyChanged("Act");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="SecurityUser_ActTag", Storage="_CreatedByEntity", ThisKey="CreatedBy", OtherKey="UserId", IsForeignKey=true)]
		public SecurityUser CreatedByEntity
		{
			get
			{
				return this._CreatedByEntity.Entity;
			}
			set
			{
				SecurityUser previousValue = this._CreatedByEntity.Entity;
				if (((previousValue != value) 
							|| (this._CreatedByEntity.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._CreatedByEntity.Entity = null;
						previousValue.ActTagsCreatedBy.Remove(this);
					}
					this._CreatedByEntity.Entity = value;
					if ((value != null))
					{
						value.ActTagsCreatedBy.Add(this);
						this._CreatedBy = value.UserId;
					}
					else
					{
						this._CreatedBy = default(Nullable<System.Guid>);
					}
					this.SendPropertyChanged("CreatedByEntity");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="SecurityUser_ActTag1", Storage="_ObsoletedByEntity", ThisKey="ObsoletedBy", OtherKey="UserId", IsForeignKey=true)]
		public SecurityUser ObsoletedByEntity
		{
			get
			{
				return this._ObsoletedByEntity.Entity;
			}
			set
			{
				SecurityUser previousValue = this._ObsoletedByEntity.Entity;
				if (((previousValue != value) 
							|| (this._ObsoletedByEntity.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ObsoletedByEntity.Entity = null;
						previousValue.ActTagsObsoletedBy.Remove(this);
					}
					this._ObsoletedByEntity.Entity = value;
					if ((value != null))
					{
						value.ActTagsObsoletedBy.Add(this);
						this._ObsoletedBy = value.UserId;
					}
					else
					{
						this._ObsoletedBy = default(Nullable<System.Guid>);
					}
					this.SendPropertyChanged("ObsoletedByEntity");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ActVersion")]
	public partial class ActVersion : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _ActVersionId;
		
		private decimal _VersionSequenceId;
		
		private System.Guid _ActId;
		
		private System.DateTimeOffset _CreationTime;
		
		private System.Guid _CreatedBy;
		
		private System.Nullable<System.DateTimeOffset> _ObsoletionTime;
		
		private System.Nullable<System.Guid> _ObsoletedBy;
		
		private string _ObsoletionReason;
		
		private System.Nullable<System.Guid> _ReplacesVersionId;
		
		private bool _NegationInd;
		
		private System.Nullable<System.Guid> _TypeConceptId;
		
		private System.Guid _StatusConceptId;
		
		private System.Nullable<System.DateTimeOffset> _ActTime;
		
		private System.Nullable<System.DateTimeOffset> _ActStartTime;
		
		private System.Nullable<System.DateTimeOffset> _ActStopTime;
		
		private EntitySet<ActVersion> _ActVersionsReplacesVersionId;
		
		private EntityRef<Observation> _Observation;
		
		private EntityRef<PatientEncounter> _PatientEncounter;
		
		private EntityRef<SubstanceAdministration> _SubstanceAdministration;
		
		private EntityRef<Act> _Act;
		
		private EntityRef<ActVersion> _ReplacesVersion;
		
		private EntityRef<Concept> _StatusConcept;
		
		private EntityRef<Concept> _TypeConcept;
		
		private EntityRef<SecurityUser> _CreatedByEntity;
		
		private EntityRef<SecurityUser> _ObsoletedByEntity;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnActVersionIdChanging(System.Guid value);
    partial void OnActVersionIdChanged();
    partial void OnVersionSequenceIdChanging(decimal value);
    partial void OnVersionSequenceIdChanged();
    partial void OnActIdChanging(System.Guid value);
    partial void OnActIdChanged();
    partial void OnCreationTimeChanging(System.DateTimeOffset value);
    partial void OnCreationTimeChanged();
    partial void OnCreatedByChanging(System.Guid value);
    partial void OnCreatedByChanged();
    partial void OnObsoletionTimeChanging(System.Nullable<System.DateTimeOffset> value);
    partial void OnObsoletionTimeChanged();
    partial void OnObsoletedByChanging(System.Nullable<System.Guid> value);
    partial void OnObsoletedByChanged();
    partial void OnObsoletionReasonChanging(string value);
    partial void OnObsoletionReasonChanged();
    partial void OnReplacesVersionIdChanging(System.Nullable<System.Guid> value);
    partial void OnReplacesVersionIdChanged();
    partial void OnNegationIndChanging(bool value);
    partial void OnNegationIndChanged();
    partial void OnTypeConceptIdChanging(System.Nullable<System.Guid> value);
    partial void OnTypeConceptIdChanged();
    partial void OnStatusConceptIdChanging(System.Guid value);
    partial void OnStatusConceptIdChanged();
    partial void OnActTimeChanging(System.Nullable<System.DateTimeOffset> value);
    partial void OnActTimeChanged();
    partial void OnActStartTimeChanging(System.Nullable<System.DateTimeOffset> value);
    partial void OnActStartTimeChanged();
    partial void OnActStopTimeChanging(System.Nullable<System.DateTimeOffset> value);
    partial void OnActStopTimeChanged();
    #endregion
		
		public ActVersion()
		{
			this._ActVersionsReplacesVersionId = new EntitySet<ActVersion>(new Action<ActVersion>(this.attach_ActVersionsReplacesVersionId), new Action<ActVersion>(this.detach_ActVersionsReplacesVersionId));
			this._Observation = default(EntityRef<Observation>);
			this._PatientEncounter = default(EntityRef<PatientEncounter>);
			this._SubstanceAdministration = default(EntityRef<SubstanceAdministration>);
			this._Act = default(EntityRef<Act>);
			this._ReplacesVersion = default(EntityRef<ActVersion>);
			this._StatusConcept = default(EntityRef<Concept>);
			this._TypeConcept = default(EntityRef<Concept>);
			this._CreatedByEntity = default(EntityRef<SecurityUser>);
			this._ObsoletedByEntity = default(EntityRef<SecurityUser>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ActVersionId", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid ActVersionId
		{
			get
			{
				return this._ActVersionId;
			}
			set
			{
				if ((this._ActVersionId != value))
				{
					this.OnActVersionIdChanging(value);
					this.SendPropertyChanging();
					this._ActVersionId = value;
					this.SendPropertyChanged("ActVersionId");
					this.OnActVersionIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_VersionSequenceId", AutoSync=AutoSync.Always, DbType="Decimal(20,0) NOT NULL", IsDbGenerated=true)]
		public decimal VersionSequenceId
		{
			get
			{
				return this._VersionSequenceId;
			}
			set
			{
				if ((this._VersionSequenceId != value))
				{
					this.OnVersionSequenceIdChanging(value);
					this.SendPropertyChanging();
					this._VersionSequenceId = value;
					this.SendPropertyChanged("VersionSequenceId");
					this.OnVersionSequenceIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ActId", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid ActId
		{
			get
			{
				return this._ActId;
			}
			set
			{
				if ((this._ActId != value))
				{
					if (this._Act.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnActIdChanging(value);
					this.SendPropertyChanging();
					this._ActId = value;
					this.SendPropertyChanged("ActId");
					this.OnActIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CreationTime", AutoSync=AutoSync.Always, DbType="DateTimeOffset NOT NULL", IsDbGenerated=true)]
		public System.DateTimeOffset CreationTime
		{
			get
			{
				return this._CreationTime;
			}
			set
			{
				if ((this._CreationTime != value))
				{
					this.OnCreationTimeChanging(value);
					this.SendPropertyChanging();
					this._CreationTime = value;
					this.SendPropertyChanged("CreationTime");
					this.OnCreationTimeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CreatedBy", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid CreatedBy
		{
			get
			{
				return this._CreatedBy;
			}
			set
			{
				if ((this._CreatedBy != value))
				{
					if (this._CreatedByEntity.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCreatedByChanging(value);
					this.SendPropertyChanging();
					this._CreatedBy = value;
					this.SendPropertyChanged("CreatedBy");
					this.OnCreatedByChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ObsoletionTime", DbType="DateTimeOffset")]
		public System.Nullable<System.DateTimeOffset> ObsoletionTime
		{
			get
			{
				return this._ObsoletionTime;
			}
			set
			{
				if ((this._ObsoletionTime != value))
				{
					this.OnObsoletionTimeChanging(value);
					this.SendPropertyChanging();
					this._ObsoletionTime = value;
					this.SendPropertyChanged("ObsoletionTime");
					this.OnObsoletionTimeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ObsoletedBy", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> ObsoletedBy
		{
			get
			{
				return this._ObsoletedBy;
			}
			set
			{
				if ((this._ObsoletedBy != value))
				{
					if (this._ObsoletedByEntity.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnObsoletedByChanging(value);
					this.SendPropertyChanging();
					this._ObsoletedBy = value;
					this.SendPropertyChanged("ObsoletedBy");
					this.OnObsoletedByChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ObsoletionReason", DbType="NVarChar(MAX)")]
		public string ObsoletionReason
		{
			get
			{
				return this._ObsoletionReason;
			}
			set
			{
				if ((this._ObsoletionReason != value))
				{
					this.OnObsoletionReasonChanging(value);
					this.SendPropertyChanging();
					this._ObsoletionReason = value;
					this.SendPropertyChanged("ObsoletionReason");
					this.OnObsoletionReasonChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ReplacesVersionId", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> ReplacesVersionId
		{
			get
			{
				return this._ReplacesVersionId;
			}
			set
			{
				if ((this._ReplacesVersionId != value))
				{
					if (this._ReplacesVersion.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnReplacesVersionIdChanging(value);
					this.SendPropertyChanging();
					this._ReplacesVersionId = value;
					this.SendPropertyChanged("ReplacesVersionId");
					this.OnReplacesVersionIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NegationInd", DbType="Bit NOT NULL")]
		public bool NegationInd
		{
			get
			{
				return this._NegationInd;
			}
			set
			{
				if ((this._NegationInd != value))
				{
					this.OnNegationIndChanging(value);
					this.SendPropertyChanging();
					this._NegationInd = value;
					this.SendPropertyChanged("NegationInd");
					this.OnNegationIndChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TypeConceptId", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> TypeConceptId
		{
			get
			{
				return this._TypeConceptId;
			}
			set
			{
				if ((this._TypeConceptId != value))
				{
					if (this._TypeConcept.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnTypeConceptIdChanging(value);
					this.SendPropertyChanging();
					this._TypeConceptId = value;
					this.SendPropertyChanged("TypeConceptId");
					this.OnTypeConceptIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StatusConceptId", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid StatusConceptId
		{
			get
			{
				return this._StatusConceptId;
			}
			set
			{
				if ((this._StatusConceptId != value))
				{
					if (this._StatusConcept.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnStatusConceptIdChanging(value);
					this.SendPropertyChanging();
					this._StatusConceptId = value;
					this.SendPropertyChanged("StatusConceptId");
					this.OnStatusConceptIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ActTime", DbType="DateTimeOffset")]
		public System.Nullable<System.DateTimeOffset> ActTime
		{
			get
			{
				return this._ActTime;
			}
			set
			{
				if ((this._ActTime != value))
				{
					this.OnActTimeChanging(value);
					this.SendPropertyChanging();
					this._ActTime = value;
					this.SendPropertyChanged("ActTime");
					this.OnActTimeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ActStartTime", DbType="DateTimeOffset")]
		public System.Nullable<System.DateTimeOffset> ActStartTime
		{
			get
			{
				return this._ActStartTime;
			}
			set
			{
				if ((this._ActStartTime != value))
				{
					this.OnActStartTimeChanging(value);
					this.SendPropertyChanging();
					this._ActStartTime = value;
					this.SendPropertyChanged("ActStartTime");
					this.OnActStartTimeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ActStopTime", DbType="DateTimeOffset")]
		public System.Nullable<System.DateTimeOffset> ActStopTime
		{
			get
			{
				return this._ActStopTime;
			}
			set
			{
				if ((this._ActStopTime != value))
				{
					this.OnActStopTimeChanging(value);
					this.SendPropertyChanging();
					this._ActStopTime = value;
					this.SendPropertyChanged("ActStopTime");
					this.OnActStopTimeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ActVersion_ActVersion", Storage="_ActVersionsReplacesVersionId", ThisKey="ActVersionId", OtherKey="ReplacesVersionId")]
		public EntitySet<ActVersion> ActVersionsReplacesVersionId
		{
			get
			{
				return this._ActVersionsReplacesVersionId;
			}
			set
			{
				this._ActVersionsReplacesVersionId.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ActVersion_Observation", Storage="_Observation", ThisKey="ActVersionId", OtherKey="ActVersionId", IsUnique=true, IsForeignKey=false)]
		public Observation Observation
		{
			get
			{
				return this._Observation.Entity;
			}
			set
			{
				Observation previousValue = this._Observation.Entity;
				if (((previousValue != value) 
							|| (this._Observation.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Observation.Entity = null;
						previousValue.ActVersion = null;
					}
					this._Observation.Entity = value;
					if ((value != null))
					{
						value.ActVersion = this;
					}
					this.SendPropertyChanged("Observation");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ActVersion_PatientEncounter", Storage="_PatientEncounter", ThisKey="ActVersionId", OtherKey="ActVersionId", IsUnique=true, IsForeignKey=false)]
		public PatientEncounter PatientEncounter
		{
			get
			{
				return this._PatientEncounter.Entity;
			}
			set
			{
				PatientEncounter previousValue = this._PatientEncounter.Entity;
				if (((previousValue != value) 
							|| (this._PatientEncounter.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._PatientEncounter.Entity = null;
						previousValue.ActVersion = null;
					}
					this._PatientEncounter.Entity = value;
					if ((value != null))
					{
						value.ActVersion = this;
					}
					this.SendPropertyChanged("PatientEncounter");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ActVersion_SubstanceAdministration", Storage="_SubstanceAdministration", ThisKey="ActVersionId", OtherKey="ActVersionId", IsUnique=true, IsForeignKey=false)]
		public SubstanceAdministration SubstanceAdministration
		{
			get
			{
				return this._SubstanceAdministration.Entity;
			}
			set
			{
				SubstanceAdministration previousValue = this._SubstanceAdministration.Entity;
				if (((previousValue != value) 
							|| (this._SubstanceAdministration.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._SubstanceAdministration.Entity = null;
						previousValue.ActVersion = null;
					}
					this._SubstanceAdministration.Entity = value;
					if ((value != null))
					{
						value.ActVersion = this;
					}
					this.SendPropertyChanged("SubstanceAdministration");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Act_ActVersion", Storage="_Act", ThisKey="ActId", OtherKey="ActId", IsForeignKey=true)]
		public Act Act
		{
			get
			{
				return this._Act.Entity;
			}
			set
			{
				Act previousValue = this._Act.Entity;
				if (((previousValue != value) 
							|| (this._Act.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Act.Entity = null;
						previousValue.ActVersions.Remove(this);
					}
					this._Act.Entity = value;
					if ((value != null))
					{
						value.ActVersions.Add(this);
						this._ActId = value.ActId;
					}
					else
					{
						this._ActId = default(System.Guid);
					}
					this.SendPropertyChanged("Act");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ActVersion_ActVersion", Storage="_ReplacesVersion", ThisKey="ReplacesVersionId", OtherKey="ActVersionId", IsForeignKey=true)]
		public ActVersion ReplacesVersion
		{
			get
			{
				return this._ReplacesVersion.Entity;
			}
			set
			{
				ActVersion previousValue = this._ReplacesVersion.Entity;
				if (((previousValue != value) 
							|| (this._ReplacesVersion.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ReplacesVersion.Entity = null;
						previousValue.ActVersionsReplacesVersionId.Remove(this);
					}
					this._ReplacesVersion.Entity = value;
					if ((value != null))
					{
						value.ActVersionsReplacesVersionId.Add(this);
						this._ReplacesVersionId = value.ActVersionId;
					}
					else
					{
						this._ReplacesVersionId = default(Nullable<System.Guid>);
					}
					this.SendPropertyChanged("ReplacesVersion");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Concept_ActVersion", Storage="_StatusConcept", ThisKey="StatusConceptId", OtherKey="ConceptId", IsForeignKey=true)]
		public Concept StatusConcept
		{
			get
			{
				return this._StatusConcept.Entity;
			}
			set
			{
				Concept previousValue = this._StatusConcept.Entity;
				if (((previousValue != value) 
							|| (this._StatusConcept.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._StatusConcept.Entity = null;
						previousValue.ActVersionsStatusConceptId.Remove(this);
					}
					this._StatusConcept.Entity = value;
					if ((value != null))
					{
						value.ActVersionsStatusConceptId.Add(this);
						this._StatusConceptId = value.ConceptId;
					}
					else
					{
						this._StatusConceptId = default(System.Guid);
					}
					this.SendPropertyChanged("StatusConcept");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Concept_ActVersion1", Storage="_TypeConcept", ThisKey="TypeConceptId", OtherKey="ConceptId", IsForeignKey=true)]
		public Concept TypeConcept
		{
			get
			{
				return this._TypeConcept.Entity;
			}
			set
			{
				Concept previousValue = this._TypeConcept.Entity;
				if (((previousValue != value) 
							|| (this._TypeConcept.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._TypeConcept.Entity = null;
						previousValue.ActVersionsTypeConceptId.Remove(this);
					}
					this._TypeConcept.Entity = value;
					if ((value != null))
					{
						value.ActVersionsTypeConceptId.Add(this);
						this._TypeConceptId = value.ConceptId;
					}
					else
					{
						this._TypeConceptId = default(Nullable<System.Guid>);
					}
					this.SendPropertyChanged("TypeConcept");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="SecurityUser_ActVersion", Storage="_CreatedByEntity", ThisKey="CreatedBy", OtherKey="UserId", IsForeignKey=true)]
		public SecurityUser CreatedByEntity
		{
			get
			{
				return this._CreatedByEntity.Entity;
			}
			set
			{
				SecurityUser previousValue = this._CreatedByEntity.Entity;
				if (((previousValue != value) 
							|| (this._CreatedByEntity.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._CreatedByEntity.Entity = null;
						previousValue.ActVersionsCreatedBy.Remove(this);
					}
					this._CreatedByEntity.Entity = value;
					if ((value != null))
					{
						value.ActVersionsCreatedBy.Add(this);
						this._CreatedBy = value.UserId;
					}
					else
					{
						this._CreatedBy = default(System.Guid);
					}
					this.SendPropertyChanged("CreatedByEntity");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="SecurityUser_ActVersion1", Storage="_ObsoletedByEntity", ThisKey="ObsoletedBy", OtherKey="UserId", IsForeignKey=true)]
		public SecurityUser ObsoletedByEntity
		{
			get
			{
				return this._ObsoletedByEntity.Entity;
			}
			set
			{
				SecurityUser previousValue = this._ObsoletedByEntity.Entity;
				if (((previousValue != value) 
							|| (this._ObsoletedByEntity.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ObsoletedByEntity.Entity = null;
						previousValue.ActVersionsObsoletedBy.Remove(this);
					}
					this._ObsoletedByEntity.Entity = value;
					if ((value != null))
					{
						value.ActVersionsObsoletedBy.Add(this);
						this._ObsoletedBy = value.UserId;
					}
					else
					{
						this._ObsoletedBy = default(Nullable<System.Guid>);
					}
					this.SendPropertyChanged("ObsoletedByEntity");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_ActVersionsReplacesVersionId(ActVersion entity)
		{
			this.SendPropertyChanging();
			entity.ReplacesVersion = this;
		}
		
		private void detach_ActVersionsReplacesVersionId(ActVersion entity)
		{
			this.SendPropertyChanging();
			entity.ReplacesVersion = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ApplicationEntity")]
	public partial class ApplicationEntity : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _EntityVersionId;
		
		private System.Guid _ApplicationId;
		
		private string _SoftwareName;
		
		private string _VersionName;
		
		private string _VendorName;
		
		private EntityRef<EntityVersion> _EntityVersion;
		
		private EntityRef<SecurityApplication> _SecurityApplication;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnEntityVersionIdChanging(System.Guid value);
    partial void OnEntityVersionIdChanged();
    partial void OnApplicationIdChanging(System.Guid value);
    partial void OnApplicationIdChanged();
    partial void OnSoftwareNameChanging(string value);
    partial void OnSoftwareNameChanged();
    partial void OnVersionNameChanging(string value);
    partial void OnVersionNameChanged();
    partial void OnVendorNameChanging(string value);
    partial void OnVendorNameChanged();
    #endregion
		
		public ApplicationEntity()
		{
			this._EntityVersion = default(EntityRef<EntityVersion>);
			this._SecurityApplication = default(EntityRef<SecurityApplication>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EntityVersionId", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid EntityVersionId
		{
			get
			{
				return this._EntityVersionId;
			}
			set
			{
				if ((this._EntityVersionId != value))
				{
					if (this._EntityVersion.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnEntityVersionIdChanging(value);
					this.SendPropertyChanging();
					this._EntityVersionId = value;
					this.SendPropertyChanged("EntityVersionId");
					this.OnEntityVersionIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ApplicationId", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid ApplicationId
		{
			get
			{
				return this._ApplicationId;
			}
			set
			{
				if ((this._ApplicationId != value))
				{
					if (this._SecurityApplication.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnApplicationIdChanging(value);
					this.SendPropertyChanging();
					this._ApplicationId = value;
					this.SendPropertyChanged("ApplicationId");
					this.OnApplicationIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SoftwareName", DbType="NVarChar(64) NOT NULL", CanBeNull=false)]
		public string SoftwareName
		{
			get
			{
				return this._SoftwareName;
			}
			set
			{
				if ((this._SoftwareName != value))
				{
					this.OnSoftwareNameChanging(value);
					this.SendPropertyChanging();
					this._SoftwareName = value;
					this.SendPropertyChanged("SoftwareName");
					this.OnSoftwareNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_VersionName", DbType="NVarChar(64)")]
		public string VersionName
		{
			get
			{
				return this._VersionName;
			}
			set
			{
				if ((this._VersionName != value))
				{
					this.OnVersionNameChanging(value);
					this.SendPropertyChanging();
					this._VersionName = value;
					this.SendPropertyChanged("VersionName");
					this.OnVersionNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_VendorName", DbType="NVarChar(64)")]
		public string VendorName
		{
			get
			{
				return this._VendorName;
			}
			set
			{
				if ((this._VendorName != value))
				{
					this.OnVendorNameChanging(value);
					this.SendPropertyChanging();
					this._VendorName = value;
					this.SendPropertyChanged("VendorName");
					this.OnVendorNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="EntityVersion_ApplicationEntity", Storage="_EntityVersion", ThisKey="EntityVersionId", OtherKey="EntityVersionId", IsForeignKey=true)]
		public EntityVersion EntityVersion
		{
			get
			{
				return this._EntityVersion.Entity;
			}
			set
			{
				EntityVersion previousValue = this._EntityVersion.Entity;
				if (((previousValue != value) 
							|| (this._EntityVersion.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._EntityVersion.Entity = null;
						previousValue.ApplicationEntity = null;
					}
					this._EntityVersion.Entity = value;
					if ((value != null))
					{
						value.ApplicationEntity = this;
						this._EntityVersionId = value.EntityVersionId;
					}
					else
					{
						this._EntityVersionId = default(System.Guid);
					}
					this.SendPropertyChanged("EntityVersion");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="SecurityApplication_ApplicationEntity", Storage="_SecurityApplication", ThisKey="ApplicationId", OtherKey="ApplicationId", IsForeignKey=true)]
		public SecurityApplication SecurityApplication
		{
			get
			{
				return this._SecurityApplication.Entity;
			}
			set
			{
				SecurityApplication previousValue = this._SecurityApplication.Entity;
				if (((previousValue != value) 
							|| (this._SecurityApplication.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._SecurityApplication.Entity = null;
						previousValue.ApplicationEntities.Remove(this);
					}
					this._SecurityApplication.Entity = value;
					if ((value != null))
					{
						value.ApplicationEntities.Add(this);
						this._ApplicationId = value.ApplicationId;
					}
					else
					{
						this._ApplicationId = default(System.Guid);
					}
					this.SendPropertyChanged("SecurityApplication");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.AssigningAuthority")]
	public partial class AssigningAuthority : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _AssigningAuthorityId;
		
		private string _Name;
		
		private string _Oid;
		
		private string _HL7CX4;
		
		private string _Url;
		
		private System.Nullable<System.Guid> _AssigningDeviceId;
		
		private string _Description;
		
		private System.DateTimeOffset _CreationTime;
		
		private System.Guid _CreatedBy;
		
		private System.Nullable<System.DateTimeOffset> _ObsoletionTime;
		
		private System.Nullable<System.Guid> _ObsoletedBy;
		
		private EntitySet<ActIdentifier> _ActIdentifiers;
		
		private EntitySet<EntityIdentifier> _EntityIdentifiers;
		
		private EntityRef<SecurityDevice> _AssigningDevice;
		
		private EntityRef<SecurityUser> _CreatedByEntity;
		
		private EntityRef<SecurityUser> _ObsoletedByEntity;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnAssigningAuthorityIdChanging(System.Guid value);
    partial void OnAssigningAuthorityIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnOidChanging(string value);
    partial void OnOidChanged();
    partial void OnHL7CX4Changing(string value);
    partial void OnHL7CX4Changed();
    partial void OnUrlChanging(string value);
    partial void OnUrlChanged();
    partial void OnAssigningDeviceIdChanging(System.Nullable<System.Guid> value);
    partial void OnAssigningDeviceIdChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    partial void OnCreationTimeChanging(System.DateTimeOffset value);
    partial void OnCreationTimeChanged();
    partial void OnCreatedByChanging(System.Guid value);
    partial void OnCreatedByChanged();
    partial void OnObsoletionTimeChanging(System.Nullable<System.DateTimeOffset> value);
    partial void OnObsoletionTimeChanged();
    partial void OnObsoletedByChanging(System.Nullable<System.Guid> value);
    partial void OnObsoletedByChanged();
    #endregion
		
		public AssigningAuthority()
		{
			this._ActIdentifiers = new EntitySet<ActIdentifier>(new Action<ActIdentifier>(this.attach_ActIdentifiers), new Action<ActIdentifier>(this.detach_ActIdentifiers));
			this._EntityIdentifiers = new EntitySet<EntityIdentifier>(new Action<EntityIdentifier>(this.attach_EntityIdentifiers), new Action<EntityIdentifier>(this.detach_EntityIdentifiers));
			this._AssigningDevice = default(EntityRef<SecurityDevice>);
			this._CreatedByEntity = default(EntityRef<SecurityUser>);
			this._ObsoletedByEntity = default(EntityRef<SecurityUser>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AssigningAuthorityId", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid AssigningAuthorityId
		{
			get
			{
				return this._AssigningAuthorityId;
			}
			set
			{
				if ((this._AssigningAuthorityId != value))
				{
					this.OnAssigningAuthorityIdChanging(value);
					this.SendPropertyChanging();
					this._AssigningAuthorityId = value;
					this.SendPropertyChanged("AssigningAuthorityId");
					this.OnAssigningAuthorityIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Oid", DbType="NVarChar(256) NOT NULL", CanBeNull=false)]
		public string Oid
		{
			get
			{
				return this._Oid;
			}
			set
			{
				if ((this._Oid != value))
				{
					this.OnOidChanging(value);
					this.SendPropertyChanging();
					this._Oid = value;
					this.SendPropertyChanged("Oid");
					this.OnOidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_HL7CX4", DbType="NVarChar(32) NOT NULL", CanBeNull=false)]
		public string HL7CX4
		{
			get
			{
				return this._HL7CX4;
			}
			set
			{
				if ((this._HL7CX4 != value))
				{
					this.OnHL7CX4Changing(value);
					this.SendPropertyChanging();
					this._HL7CX4 = value;
					this.SendPropertyChanged("HL7CX4");
					this.OnHL7CX4Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Url", DbType="NVarChar(250)")]
		public string Url
		{
			get
			{
				return this._Url;
			}
			set
			{
				if ((this._Url != value))
				{
					this.OnUrlChanging(value);
					this.SendPropertyChanging();
					this._Url = value;
					this.SendPropertyChanged("Url");
					this.OnUrlChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AssigningDeviceId", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> AssigningDeviceId
		{
			get
			{
				return this._AssigningDeviceId;
			}
			set
			{
				if ((this._AssigningDeviceId != value))
				{
					if (this._AssigningDevice.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnAssigningDeviceIdChanging(value);
					this.SendPropertyChanging();
					this._AssigningDeviceId = value;
					this.SendPropertyChanged("AssigningDeviceId");
					this.OnAssigningDeviceIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="NVarChar(MAX)")]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CreationTime", AutoSync=AutoSync.Always, DbType="DateTimeOffset NOT NULL", IsDbGenerated=true)]
		public System.DateTimeOffset CreationTime
		{
			get
			{
				return this._CreationTime;
			}
			set
			{
				if ((this._CreationTime != value))
				{
					this.OnCreationTimeChanging(value);
					this.SendPropertyChanging();
					this._CreationTime = value;
					this.SendPropertyChanged("CreationTime");
					this.OnCreationTimeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CreatedBy", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid CreatedBy
		{
			get
			{
				return this._CreatedBy;
			}
			set
			{
				if ((this._CreatedBy != value))
				{
					if (this._CreatedByEntity.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCreatedByChanging(value);
					this.SendPropertyChanging();
					this._CreatedBy = value;
					this.SendPropertyChanged("CreatedBy");
					this.OnCreatedByChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ObsoletionTime", DbType="DateTimeOffset")]
		public System.Nullable<System.DateTimeOffset> ObsoletionTime
		{
			get
			{
				return this._ObsoletionTime;
			}
			set
			{
				if ((this._ObsoletionTime != value))
				{
					this.OnObsoletionTimeChanging(value);
					this.SendPropertyChanging();
					this._ObsoletionTime = value;
					this.SendPropertyChanged("ObsoletionTime");
					this.OnObsoletionTimeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ObsoletedBy", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> ObsoletedBy
		{
			get
			{
				return this._ObsoletedBy;
			}
			set
			{
				if ((this._ObsoletedBy != value))
				{
					if (this._ObsoletedByEntity.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnObsoletedByChanging(value);
					this.SendPropertyChanging();
					this._ObsoletedBy = value;
					this.SendPropertyChanged("ObsoletedBy");
					this.OnObsoletedByChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="AssigningAuthority_ActIdentifier", Storage="_ActIdentifiers", ThisKey="AssigningAuthorityId", OtherKey="AssigningAuthorityId")]
		public EntitySet<ActIdentifier> ActIdentifiers
		{
			get
			{
				return this._ActIdentifiers;
			}
			set
			{
				this._ActIdentifiers.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="AssigningAuthority_EntityIdentifier", Storage="_EntityIdentifiers", ThisKey="AssigningAuthorityId", OtherKey="AssigningAuthorityId")]
		public EntitySet<EntityIdentifier> EntityIdentifiers
		{
			get
			{
				return this._EntityIdentifiers;
			}
			set
			{
				this._EntityIdentifiers.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="SecurityDevice_AssigningAuthority", Storage="_AssigningDevice", ThisKey="AssigningDeviceId", OtherKey="DeviceId", IsForeignKey=true)]
		public SecurityDevice AssigningDevice
		{
			get
			{
				return this._AssigningDevice.Entity;
			}
			set
			{
				SecurityDevice previousValue = this._AssigningDevice.Entity;
				if (((previousValue != value) 
							|| (this._AssigningDevice.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._AssigningDevice.Entity = null;
						previousValue.AssigningAuthoritiesAssigningDeviceId.Remove(this);
					}
					this._AssigningDevice.Entity = value;
					if ((value != null))
					{
						value.AssigningAuthoritiesAssigningDeviceId.Add(this);
						this._AssigningDeviceId = value.DeviceId;
					}
					else
					{
						this._AssigningDeviceId = default(Nullable<System.Guid>);
					}
					this.SendPropertyChanged("AssigningDevice");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="SecurityUser_AssigningAuthority", Storage="_CreatedByEntity", ThisKey="CreatedBy", OtherKey="UserId", IsForeignKey=true)]
		public SecurityUser CreatedByEntity
		{
			get
			{
				return this._CreatedByEntity.Entity;
			}
			set
			{
				SecurityUser previousValue = this._CreatedByEntity.Entity;
				if (((previousValue != value) 
							|| (this._CreatedByEntity.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._CreatedByEntity.Entity = null;
						previousValue.AssigningAuthoritiesCreatedBy.Remove(this);
					}
					this._CreatedByEntity.Entity = value;
					if ((value != null))
					{
						value.AssigningAuthoritiesCreatedBy.Add(this);
						this._CreatedBy = value.UserId;
					}
					else
					{
						this._CreatedBy = default(System.Guid);
					}
					this.SendPropertyChanged("CreatedByEntity");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="SecurityUser_AssigningAuthority1", Storage="_ObsoletedByEntity", ThisKey="ObsoletedBy", OtherKey="UserId", IsForeignKey=true)]
		public SecurityUser ObsoletedByEntity
		{
			get
			{
				return this._ObsoletedByEntity.Entity;
			}
			set
			{
				SecurityUser previousValue = this._ObsoletedByEntity.Entity;
				if (((previousValue != value) 
							|| (this._ObsoletedByEntity.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ObsoletedByEntity.Entity = null;
						previousValue.AssigningAuthoritiesObsoletedBy.Remove(this);
					}
					this._ObsoletedByEntity.Entity = value;
					if ((value != null))
					{
						value.AssigningAuthoritiesObsoletedBy.Add(this);
						this._ObsoletedBy = value.UserId;
					}
					else
					{
						this._ObsoletedBy = default(Nullable<System.Guid>);
					}
					this.SendPropertyChanged("ObsoletedByEntity");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_ActIdentifiers(ActIdentifier entity)
		{
			this.SendPropertyChanging();
			entity.AssigningAuthority = this;
		}
		
		private void detach_ActIdentifiers(ActIdentifier entity)
		{
			this.SendPropertyChanging();
			entity.AssigningAuthority = null;
		}
		
		private void attach_EntityIdentifiers(EntityIdentifier entity)
		{
			this.SendPropertyChanging();
			entity.AssigningAuthority = this;
		}
		
		private void detach_EntityIdentifiers(EntityIdentifier entity)
		{
			this.SendPropertyChanging();
			entity.AssigningAuthority = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.CodedObservation")]
	public partial class CodedObservation : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _ActVersionId;
		
		private System.Guid _ValueConceptId;
		
		private EntityRef<Concept> _ValueConcept;
		
		private EntityRef<Observation> _Observation;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnActVersionIdChanging(System.Guid value);
    partial void OnActVersionIdChanged();
    partial void OnValueConceptIdChanging(System.Guid value);
    partial void OnValueConceptIdChanged();
    #endregion
		
		public CodedObservation()
		{
			this._ValueConcept = default(EntityRef<Concept>);
			this._Observation = default(EntityRef<Observation>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ActVersionId", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid ActVersionId
		{
			get
			{
				return this._ActVersionId;
			}
			set
			{
				if ((this._ActVersionId != value))
				{
					if (this._Observation.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnActVersionIdChanging(value);
					this.SendPropertyChanging();
					this._ActVersionId = value;
					this.SendPropertyChanged("ActVersionId");
					this.OnActVersionIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ValueConceptId", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid ValueConceptId
		{
			get
			{
				return this._ValueConceptId;
			}
			set
			{
				if ((this._ValueConceptId != value))
				{
					if (this._ValueConcept.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnValueConceptIdChanging(value);
					this.SendPropertyChanging();
					this._ValueConceptId = value;
					this.SendPropertyChanged("ValueConceptId");
					this.OnValueConceptIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Concept_CodedObservation", Storage="_ValueConcept", ThisKey="ValueConceptId", OtherKey="ConceptId", IsForeignKey=true)]
		public Concept ValueConcept
		{
			get
			{
				return this._ValueConcept.Entity;
			}
			set
			{
				Concept previousValue = this._ValueConcept.Entity;
				if (((previousValue != value) 
							|| (this._ValueConcept.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ValueConcept.Entity = null;
						previousValue.CodedObservationsValueConceptId.Remove(this);
					}
					this._ValueConcept.Entity = value;
					if ((value != null))
					{
						value.CodedObservationsValueConceptId.Add(this);
						this._ValueConceptId = value.ConceptId;
					}
					else
					{
						this._ValueConceptId = default(System.Guid);
					}
					this.SendPropertyChanged("ValueConcept");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Observation_CodedObservation", Storage="_Observation", ThisKey="ActVersionId", OtherKey="ActVersionId", IsForeignKey=true)]
		public Observation Observation
		{
			get
			{
				return this._Observation.Entity;
			}
			set
			{
				Observation previousValue = this._Observation.Entity;
				if (((previousValue != value) 
							|| (this._Observation.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Observation.Entity = null;
						previousValue.CodedObservation = null;
					}
					this._Observation.Entity = value;
					if ((value != null))
					{
						value.CodedObservation = this;
						this._ActVersionId = value.ActVersionId;
					}
					else
					{
						this._ActVersionId = default(System.Guid);
					}
					this.SendPropertyChanged("Observation");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.CodeSystem")]
	public partial class CodeSystem : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _CodeSystemId;
		
		private string _Name;
		
		private string _Oid;
		
		private string _Authority;
		
		private System.DateTimeOffset _CreationTime;
		
		private System.Guid _CreatedBy;
		
		private System.Nullable<System.DateTimeOffset> _ObsoletionTime;
		
		private System.Nullable<System.Guid> _ObsoletedBy;
		
		private System.Nullable<System.DateTimeOffset> _UpdatedTime;
		
		private System.Nullable<System.Guid> _UpdatedBy;
		
		private string _ObsoletionReason;
		
		private string _Url;
		
		private string _VersionText;
		
		private string _Description;
		
		private EntitySet<ReferenceTerm> _ReferenceTerms;
		
		private EntityRef<SecurityUser> _CreatedByEntity;
		
		private EntityRef<SecurityUser> _ObsoletedByEntity;
		
		private EntityRef<SecurityUser> _UpdatedByEntity;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnCodeSystemIdChanging(System.Guid value);
    partial void OnCodeSystemIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnOidChanging(string value);
    partial void OnOidChanged();
    partial void OnAuthorityChanging(string value);
    partial void OnAuthorityChanged();
    partial void OnCreationTimeChanging(System.DateTimeOffset value);
    partial void OnCreationTimeChanged();
    partial void OnCreatedByChanging(System.Guid value);
    partial void OnCreatedByChanged();
    partial void OnObsoletionTimeChanging(System.Nullable<System.DateTimeOffset> value);
    partial void OnObsoletionTimeChanged();
    partial void OnObsoletedByChanging(System.Nullable<System.Guid> value);
    partial void OnObsoletedByChanged();
    partial void OnUpdatedTimeChanging(System.Nullable<System.DateTimeOffset> value);
    partial void OnUpdatedTimeChanged();
    partial void OnUpdatedByChanging(System.Nullable<System.Guid> value);
    partial void OnUpdatedByChanged();
    partial void OnObsoletionReasonChanging(string value);
    partial void OnObsoletionReasonChanged();
    partial void OnUrlChanging(string value);
    partial void OnUrlChanged();
    partial void OnVersionTextChanging(string value);
    partial void OnVersionTextChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    #endregion
		
		public CodeSystem()
		{
			this._ReferenceTerms = new EntitySet<ReferenceTerm>(new Action<ReferenceTerm>(this.attach_ReferenceTerms), new Action<ReferenceTerm>(this.detach_ReferenceTerms));
			this._CreatedByEntity = default(EntityRef<SecurityUser>);
			this._ObsoletedByEntity = default(EntityRef<SecurityUser>);
			this._UpdatedByEntity = default(EntityRef<SecurityUser>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CodeSystemId", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid CodeSystemId
		{
			get
			{
				return this._CodeSystemId;
			}
			set
			{
				if ((this._CodeSystemId != value))
				{
					this.OnCodeSystemIdChanging(value);
					this.SendPropertyChanging();
					this._CodeSystemId = value;
					this.SendPropertyChanged("CodeSystemId");
					this.OnCodeSystemIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(256) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Oid", DbType="NVarChar(64) NOT NULL", CanBeNull=false)]
		public string Oid
		{
			get
			{
				return this._Oid;
			}
			set
			{
				if ((this._Oid != value))
				{
					this.OnOidChanging(value);
					this.SendPropertyChanging();
					this._Oid = value;
					this.SendPropertyChanged("Oid");
					this.OnOidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Authority", DbType="NVarChar(50)")]
		public string Authority
		{
			get
			{
				return this._Authority;
			}
			set
			{
				if ((this._Authority != value))
				{
					this.OnAuthorityChanging(value);
					this.SendPropertyChanging();
					this._Authority = value;
					this.SendPropertyChanged("Authority");
					this.OnAuthorityChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CreationTime", AutoSync=AutoSync.Always, DbType="DateTimeOffset NOT NULL", IsDbGenerated=true)]
		public System.DateTimeOffset CreationTime
		{
			get
			{
				return this._CreationTime;
			}
			set
			{
				if ((this._CreationTime != value))
				{
					this.OnCreationTimeChanging(value);
					this.SendPropertyChanging();
					this._CreationTime = value;
					this.SendPropertyChanged("CreationTime");
					this.OnCreationTimeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CreatedBy", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid CreatedBy
		{
			get
			{
				return this._CreatedBy;
			}
			set
			{
				if ((this._CreatedBy != value))
				{
					if (this._CreatedByEntity.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCreatedByChanging(value);
					this.SendPropertyChanging();
					this._CreatedBy = value;
					this.SendPropertyChanged("CreatedBy");
					this.OnCreatedByChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ObsoletionTime", DbType="DateTimeOffset")]
		public System.Nullable<System.DateTimeOffset> ObsoletionTime
		{
			get
			{
				return this._ObsoletionTime;
			}
			set
			{
				if ((this._ObsoletionTime != value))
				{
					this.OnObsoletionTimeChanging(value);
					this.SendPropertyChanging();
					this._ObsoletionTime = value;
					this.SendPropertyChanged("ObsoletionTime");
					this.OnObsoletionTimeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ObsoletedBy", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> ObsoletedBy
		{
			get
			{
				return this._ObsoletedBy;
			}
			set
			{
				if ((this._ObsoletedBy != value))
				{
					if (this._ObsoletedByEntity.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnObsoletedByChanging(value);
					this.SendPropertyChanging();
					this._ObsoletedBy = value;
					this.SendPropertyChanged("ObsoletedBy");
					this.OnObsoletedByChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UpdatedTime", DbType="DateTimeOffset")]
		public System.Nullable<System.DateTimeOffset> UpdatedTime
		{
			get
			{
				return this._UpdatedTime;
			}
			set
			{
				if ((this._UpdatedTime != value))
				{
					this.OnUpdatedTimeChanging(value);
					this.SendPropertyChanging();
					this._UpdatedTime = value;
					this.SendPropertyChanged("UpdatedTime");
					this.OnUpdatedTimeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UpdatedBy", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> UpdatedBy
		{
			get
			{
				return this._UpdatedBy;
			}
			set
			{
				if ((this._UpdatedBy != value))
				{
					if (this._UpdatedByEntity.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUpdatedByChanging(value);
					this.SendPropertyChanging();
					this._UpdatedBy = value;
					this.SendPropertyChanged("UpdatedBy");
					this.OnUpdatedByChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ObsoletionReason", DbType="NVarChar(MAX)")]
		public string ObsoletionReason
		{
			get
			{
				return this._ObsoletionReason;
			}
			set
			{
				if ((this._ObsoletionReason != value))
				{
					this.OnObsoletionReasonChanging(value);
					this.SendPropertyChanging();
					this._ObsoletionReason = value;
					this.SendPropertyChanged("ObsoletionReason");
					this.OnObsoletionReasonChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Url", DbType="NVarChar(256) NOT NULL", CanBeNull=false)]
		public string Url
		{
			get
			{
				return this._Url;
			}
			set
			{
				if ((this._Url != value))
				{
					this.OnUrlChanging(value);
					this.SendPropertyChanging();
					this._Url = value;
					this.SendPropertyChanged("Url");
					this.OnUrlChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_VersionText", DbType="NVarChar(10)")]
		public string VersionText
		{
			get
			{
				return this._VersionText;
			}
			set
			{
				if ((this._VersionText != value))
				{
					this.OnVersionTextChanging(value);
					this.SendPropertyChanging();
					this._VersionText = value;
					this.SendPropertyChanged("VersionText");
					this.OnVersionTextChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="NVarChar(256)")]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="CodeSystem_ReferenceTerm", Storage="_ReferenceTerms", ThisKey="CodeSystemId", OtherKey="CodeSystemId")]
		public EntitySet<ReferenceTerm> ReferenceTerms
		{
			get
			{
				return this._ReferenceTerms;
			}
			set
			{
				this._ReferenceTerms.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="SecurityUser_CodeSystem", Storage="_CreatedByEntity", ThisKey="CreatedBy", OtherKey="UserId", IsForeignKey=true)]
		public SecurityUser CreatedByEntity
		{
			get
			{
				return this._CreatedByEntity.Entity;
			}
			set
			{
				SecurityUser previousValue = this._CreatedByEntity.Entity;
				if (((previousValue != value) 
							|| (this._CreatedByEntity.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._CreatedByEntity.Entity = null;
						previousValue.CodeSystemsCreatedBy.Remove(this);
					}
					this._CreatedByEntity.Entity = value;
					if ((value != null))
					{
						value.CodeSystemsCreatedBy.Add(this);
						this._CreatedBy = value.UserId;
					}
					else
					{
						this._CreatedBy = default(System.Guid);
					}
					this.SendPropertyChanged("CreatedByEntity");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="SecurityUser_CodeSystem1", Storage="_ObsoletedByEntity", ThisKey="ObsoletedBy", OtherKey="UserId", IsForeignKey=true)]
		public SecurityUser ObsoletedByEntity
		{
			get
			{
				return this._ObsoletedByEntity.Entity;
			}
			set
			{
				SecurityUser previousValue = this._ObsoletedByEntity.Entity;
				if (((previousValue != value) 
							|| (this._ObsoletedByEntity.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ObsoletedByEntity.Entity = null;
						previousValue.CodeSystemsObsoletedBy.Remove(this);
					}
					this._ObsoletedByEntity.Entity = value;
					if ((value != null))
					{
						value.CodeSystemsObsoletedBy.Add(this);
						this._ObsoletedBy = value.UserId;
					}
					else
					{
						this._ObsoletedBy = default(Nullable<System.Guid>);
					}
					this.SendPropertyChanged("ObsoletedByEntity");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="SecurityUser_CodeSystem2", Storage="_UpdatedByEntity", ThisKey="UpdatedBy", OtherKey="UserId", IsForeignKey=true)]
		public SecurityUser UpdatedByEntity
		{
			get
			{
				return this._UpdatedByEntity.Entity;
			}
			set
			{
				SecurityUser previousValue = this._UpdatedByEntity.Entity;
				if (((previousValue != value) 
							|| (this._UpdatedByEntity.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._UpdatedByEntity.Entity = null;
						previousValue.CodeSystemsUpdatedBy.Remove(this);
					}
					this._UpdatedByEntity.Entity = value;
					if ((value != null))
					{
						value.CodeSystemsUpdatedBy.Add(this);
						this._UpdatedBy = value.UserId;
					}
					else
					{
						this._UpdatedBy = default(Nullable<System.Guid>);
					}
					this.SendPropertyChanged("UpdatedByEntity");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_ReferenceTerms(ReferenceTerm entity)
		{
			this.SendPropertyChanging();
			entity.CodeSystem = this;
		}
		
		private void detach_ReferenceTerms(ReferenceTerm entity)
		{
			this.SendPropertyChanging();
			entity.CodeSystem = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Concept")]
	public partial class Concept : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _ConceptId;
		
		private bool _IsSystemConcept;
		
		private EntitySet<Act> _ActsClassConceptId;
		
		private EntitySet<Act> _ActsMoodConceptId;
		
		private EntitySet<ActParticipation> _ActParticipationsParticipationRoleConceptId;
		
		private EntitySet<ActRelationship> _ActRelationshipsRelationshipTypeConceptId;
		
		private EntitySet<ActVersion> _ActVersionsStatusConceptId;
		
		private EntitySet<ActVersion> _ActVersionsTypeConceptId;
		
		private EntitySet<CodedObservation> _CodedObservationsValueConceptId;
		
		private EntitySet<ConceptName> _ConceptNames;
		
		private EntitySet<ConceptReferenceTerm> _ConceptReferenceTerms;
		
		private EntitySet<ConceptRelationship> _ConceptRelationshipsSourceConceptId;
		
		private EntitySet<ConceptRelationship> _ConceptRelationshipsTargetConceptId;
		
		private EntitySet<ConceptSetMember> _ConceptSetMembers;
		
		private EntitySet<ConceptVersion> _ConceptVersions;
		
		private EntitySet<ConceptVersion> _ConceptVersionsStatusConceptId;
		
		private EntitySet<Entity> _EntitiesClassConceptId;
		
		private EntitySet<Entity> _EntitiesDeterminerConceptId;
		
		private EntitySet<EntityAddress> _EntityAddressesAddressUseConceptId;
		
		private EntitySet<EntityAddressComponent> _EntityAddressComponentsComponentTypeConceptId;
		
		private EntitySet<EntityAssociation> _EntityAssociationsAssociationTypeConceptId;
		
		private EntitySet<EntityName> _EntityNamesNameUseConceptId;
		
		private EntitySet<EntityNameComponent> _EntityNameComponentsComponentTypeConceptId;
		
		private EntitySet<EntityTelecomAddress> _EntityTelecomAddressesTelecomAddressTypeConceptId;
		
		private EntitySet<EntityTelecomAddress> _EntityTelecomAddressesTelecomUseConceptId;
		
		private EntitySet<EntityVersion> _EntityVersionsStatusConceptId;
		
		private EntitySet<EntityVersion> _EntityVersionsTypeConceptId;
		
		private EntitySet<IdentifierType> _IdentifierTypesEntityClassScopeConceptId;
		
		private EntitySet<IdentifierType> _IdentifierTypesIdentifierTypeConceptId;
		
		private EntitySet<Material> _MaterialsFormConceptId;
		
		private EntitySet<Material> _MaterialsQuantityConceptId;
		
		private EntitySet<Observation> _ObservationsInterpretationConceptId;
		
		private EntitySet<Organization> _OrganizationsIndustryConceptId;
		
		private EntitySet<Patient> _PatientsGenderConceptId;
		
		private EntitySet<PatientEncounter> _PatientEncountersDischargeDispositionConceptId;
		
		private EntitySet<PlaceService> _PlaceServicesServiceConceptId;
		
		private EntitySet<Provider> _ProvidersProviderSpecialtyConceptId;
		
		private EntitySet<QuantityObservation> _QuantityObservationsUnitOfMeasureConceptId;
		
		private EntitySet<SubstanceAdministration> _SubstanceAdministrationsDoseUnitConceptId;
		
		private EntitySet<SubstanceAdministration> _SubstanceAdministrationsRouteConceptId;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnConceptIdChanging(System.Guid value);
    partial void OnConceptIdChanged();
    partial void OnIsSystemConceptChanging(bool value);
    partial void OnIsSystemConceptChanged();
    #endregion
		
		public Concept()
		{
			this._ActsClassConceptId = new EntitySet<Act>(new Action<Act>(this.attach_ActsClassConceptId), new Action<Act>(this.detach_ActsClassConceptId));
			this._ActsMoodConceptId = new EntitySet<Act>(new Action<Act>(this.attach_ActsMoodConceptId), new Action<Act>(this.detach_ActsMoodConceptId));
			this._ActParticipationsParticipationRoleConceptId = new EntitySet<ActParticipation>(new Action<ActParticipation>(this.attach_ActParticipationsParticipationRoleConceptId), new Action<ActParticipation>(this.detach_ActParticipationsParticipationRoleConceptId));
			this._ActRelationshipsRelationshipTypeConceptId = new EntitySet<ActRelationship>(new Action<ActRelationship>(this.attach_ActRelationshipsRelationshipTypeConceptId), new Action<ActRelationship>(this.detach_ActRelationshipsRelationshipTypeConceptId));
			this._ActVersionsStatusConceptId = new EntitySet<ActVersion>(new Action<ActVersion>(this.attach_ActVersionsStatusConceptId), new Action<ActVersion>(this.detach_ActVersionsStatusConceptId));
			this._ActVersionsTypeConceptId = new EntitySet<ActVersion>(new Action<ActVersion>(this.attach_ActVersionsTypeConceptId), new Action<ActVersion>(this.detach_ActVersionsTypeConceptId));
			this._CodedObservationsValueConceptId = new EntitySet<CodedObservation>(new Action<CodedObservation>(this.attach_CodedObservationsValueConceptId), new Action<CodedObservation>(this.detach_CodedObservationsValueConceptId));
			this._ConceptNames = new EntitySet<ConceptName>(new Action<ConceptName>(this.attach_ConceptNames), new Action<ConceptName>(this.detach_ConceptNames));
			this._ConceptReferenceTerms = new EntitySet<ConceptReferenceTerm>(new Action<ConceptReferenceTerm>(this.attach_ConceptReferenceTerms), new Action<ConceptReferenceTerm>(this.detach_ConceptReferenceTerms));
			this._ConceptRelationshipsSourceConceptId = new EntitySet<ConceptRelationship>(new Action<ConceptRelationship>(this.attach_ConceptRelationshipsSourceConceptId), new Action<ConceptRelationship>(this.detach_ConceptRelationshipsSourceConceptId));
			this._ConceptRelationshipsTargetConceptId = new EntitySet<ConceptRelationship>(new Action<ConceptRelationship>(this.attach_ConceptRelationshipsTargetConceptId), new Action<ConceptRelationship>(this.detach_ConceptRelationshipsTargetConceptId));
			this._ConceptSetMembers = new EntitySet<ConceptSetMember>(new Action<ConceptSetMember>(this.attach_ConceptSetMembers), new Action<ConceptSetMember>(this.detach_ConceptSetMembers));
			this._ConceptVersions = new EntitySet<ConceptVersion>(new Action<ConceptVersion>(this.attach_ConceptVersions), new Action<ConceptVersion>(this.detach_ConceptVersions));
			this._ConceptVersionsStatusConceptId = new EntitySet<ConceptVersion>(new Action<ConceptVersion>(this.attach_ConceptVersionsStatusConceptId), new Action<ConceptVersion>(this.detach_ConceptVersionsStatusConceptId));
			this._EntitiesClassConceptId = new EntitySet<Entity>(new Action<Entity>(this.attach_EntitiesClassConceptId), new Action<Entity>(this.detach_EntitiesClassConceptId));
			this._EntitiesDeterminerConceptId = new EntitySet<Entity>(new Action<Entity>(this.attach_EntitiesDeterminerConceptId), new Action<Entity>(this.detach_EntitiesDeterminerConceptId));
			this._EntityAddressesAddressUseConceptId = new EntitySet<EntityAddress>(new Action<EntityAddress>(this.attach_EntityAddressesAddressUseConceptId), new Action<EntityAddress>(this.detach_EntityAddressesAddressUseConceptId));
			this._EntityAddressComponentsComponentTypeConceptId = new EntitySet<EntityAddressComponent>(new Action<EntityAddressComponent>(this.attach_EntityAddressComponentsComponentTypeConceptId), new Action<EntityAddressComponent>(this.detach_EntityAddressComponentsComponentTypeConceptId));
			this._EntityAssociationsAssociationTypeConceptId = new EntitySet<EntityAssociation>(new Action<EntityAssociation>(this.attach_EntityAssociationsAssociationTypeConceptId), new Action<EntityAssociation>(this.detach_EntityAssociationsAssociationTypeConceptId));
			this._EntityNamesNameUseConceptId = new EntitySet<EntityName>(new Action<EntityName>(this.attach_EntityNamesNameUseConceptId), new Action<EntityName>(this.detach_EntityNamesNameUseConceptId));
			this._EntityNameComponentsComponentTypeConceptId = new EntitySet<EntityNameComponent>(new Action<EntityNameComponent>(this.attach_EntityNameComponentsComponentTypeConceptId), new Action<EntityNameComponent>(this.detach_EntityNameComponentsComponentTypeConceptId));
			this._EntityTelecomAddressesTelecomAddressTypeConceptId = new EntitySet<EntityTelecomAddress>(new Action<EntityTelecomAddress>(this.attach_EntityTelecomAddressesTelecomAddressTypeConceptId), new Action<EntityTelecomAddress>(this.detach_EntityTelecomAddressesTelecomAddressTypeConceptId));
			this._EntityTelecomAddressesTelecomUseConceptId = new EntitySet<EntityTelecomAddress>(new Action<EntityTelecomAddress>(this.attach_EntityTelecomAddressesTelecomUseConceptId), new Action<EntityTelecomAddress>(this.detach_EntityTelecomAddressesTelecomUseConceptId));
			this._EntityVersionsStatusConceptId = new EntitySet<EntityVersion>(new Action<EntityVersion>(this.attach_EntityVersionsStatusConceptId), new Action<EntityVersion>(this.detach_EntityVersionsStatusConceptId));
			this._EntityVersionsTypeConceptId = new EntitySet<EntityVersion>(new Action<EntityVersion>(this.attach_EntityVersionsTypeConceptId), new Action<EntityVersion>(this.detach_EntityVersionsTypeConceptId));
			this._IdentifierTypesEntityClassScopeConceptId = new EntitySet<IdentifierType>(new Action<IdentifierType>(this.attach_IdentifierTypesEntityClassScopeConceptId), new Action<IdentifierType>(this.detach_IdentifierTypesEntityClassScopeConceptId));
			this._IdentifierTypesIdentifierTypeConceptId = new EntitySet<IdentifierType>(new Action<IdentifierType>(this.attach_IdentifierTypesIdentifierTypeConceptId), new Action<IdentifierType>(this.detach_IdentifierTypesIdentifierTypeConceptId));
			this._MaterialsFormConceptId = new EntitySet<Material>(new Action<Material>(this.attach_MaterialsFormConceptId), new Action<Material>(this.detach_MaterialsFormConceptId));
			this._MaterialsQuantityConceptId = new EntitySet<Material>(new Action<Material>(this.attach_MaterialsQuantityConceptId), new Action<Material>(this.detach_MaterialsQuantityConceptId));
			this._ObservationsInterpretationConceptId = new EntitySet<Observation>(new Action<Observation>(this.attach_ObservationsInterpretationConceptId), new Action<Observation>(this.detach_ObservationsInterpretationConceptId));
			this._OrganizationsIndustryConceptId = new EntitySet<Organization>(new Action<Organization>(this.attach_OrganizationsIndustryConceptId), new Action<Organization>(this.detach_OrganizationsIndustryConceptId));
			this._PatientsGenderConceptId = new EntitySet<Patient>(new Action<Patient>(this.attach_PatientsGenderConceptId), new Action<Patient>(this.detach_PatientsGenderConceptId));
			this._PatientEncountersDischargeDispositionConceptId = new EntitySet<PatientEncounter>(new Action<PatientEncounter>(this.attach_PatientEncountersDischargeDispositionConceptId), new Action<PatientEncounter>(this.detach_PatientEncountersDischargeDispositionConceptId));
			this._PlaceServicesServiceConceptId = new EntitySet<PlaceService>(new Action<PlaceService>(this.attach_PlaceServicesServiceConceptId), new Action<PlaceService>(this.detach_PlaceServicesServiceConceptId));
			this._ProvidersProviderSpecialtyConceptId = new EntitySet<Provider>(new Action<Provider>(this.attach_ProvidersProviderSpecialtyConceptId), new Action<Provider>(this.detach_ProvidersProviderSpecialtyConceptId));
			this._QuantityObservationsUnitOfMeasureConceptId = new EntitySet<QuantityObservation>(new Action<QuantityObservation>(this.attach_QuantityObservationsUnitOfMeasureConceptId), new Action<QuantityObservation>(this.detach_QuantityObservationsUnitOfMeasureConceptId));
			this._SubstanceAdministrationsDoseUnitConceptId = new EntitySet<SubstanceAdministration>(new Action<SubstanceAdministration>(this.attach_SubstanceAdministrationsDoseUnitConceptId), new Action<SubstanceAdministration>(this.detach_SubstanceAdministrationsDoseUnitConceptId));
			this._SubstanceAdministrationsRouteConceptId = new EntitySet<SubstanceAdministration>(new Action<SubstanceAdministration>(this.attach_SubstanceAdministrationsRouteConceptId), new Action<SubstanceAdministration>(this.detach_SubstanceAdministrationsRouteConceptId));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ConceptId", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid ConceptId
		{
			get
			{
				return this._ConceptId;
			}
			set
			{
				if ((this._ConceptId != value))
				{
					this.OnConceptIdChanging(value);
					this.SendPropertyChanging();
					this._ConceptId = value;
					this.SendPropertyChanged("ConceptId");
					this.OnConceptIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsSystemConcept", DbType="Bit NOT NULL")]
		public bool IsSystemConcept
		{
			get
			{
				return this._IsSystemConcept;
			}
			set
			{
				if ((this._IsSystemConcept != value))
				{
					this.OnIsSystemConceptChanging(value);
					this.SendPropertyChanging();
					this._IsSystemConcept = value;
					this.SendPropertyChanged("IsSystemConcept");
					this.OnIsSystemConceptChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Concept_Act", Storage="_ActsClassConceptId", ThisKey="ConceptId", OtherKey="ClassConceptId")]
		public EntitySet<Act> ActsClassConceptId
		{
			get
			{
				return this._ActsClassConceptId;
			}
			set
			{
				this._ActsClassConceptId.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Concept_Act1", Storage="_ActsMoodConceptId", ThisKey="ConceptId", OtherKey="MoodConceptId")]
		public EntitySet<Act> ActsMoodConceptId
		{
			get
			{
				return this._ActsMoodConceptId;
			}
			set
			{
				this._ActsMoodConceptId.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Concept_ActParticipation", Storage="_ActParticipationsParticipationRoleConceptId", ThisKey="ConceptId", OtherKey="ParticipationRoleConceptId")]
		public EntitySet<ActParticipation> ActParticipationsParticipationRoleConceptId
		{
			get
			{
				return this._ActParticipationsParticipationRoleConceptId;
			}
			set
			{
				this._ActParticipationsParticipationRoleConceptId.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Concept_ActRelationship", Storage="_ActRelationshipsRelationshipTypeConceptId", ThisKey="ConceptId", OtherKey="RelationshipTypeConceptId")]
		public EntitySet<ActRelationship> ActRelationshipsRelationshipTypeConceptId
		{
			get
			{
				return this._ActRelationshipsRelationshipTypeConceptId;
			}
			set
			{
				this._ActRelationshipsRelationshipTypeConceptId.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Concept_ActVersion", Storage="_ActVersionsStatusConceptId", ThisKey="ConceptId", OtherKey="StatusConceptId")]
		public EntitySet<ActVersion> ActVersionsStatusConceptId
		{
			get
			{
				return this._ActVersionsStatusConceptId;
			}
			set
			{
				this._ActVersionsStatusConceptId.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Concept_ActVersion1", Storage="_ActVersionsTypeConceptId", ThisKey="ConceptId", OtherKey="TypeConceptId")]
		public EntitySet<ActVersion> ActVersionsTypeConceptId
		{
			get
			{
				return this._ActVersionsTypeConceptId;
			}
			set
			{
				this._ActVersionsTypeConceptId.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Concept_CodedObservation", Storage="_CodedObservationsValueConceptId", ThisKey="ConceptId", OtherKey="ValueConceptId")]
		public EntitySet<CodedObservation> CodedObservationsValueConceptId
		{
			get
			{
				return this._CodedObservationsValueConceptId;
			}
			set
			{
				this._CodedObservationsValueConceptId.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Concept_ConceptName", Storage="_ConceptNames", ThisKey="ConceptId", OtherKey="ConceptId")]
		public EntitySet<ConceptName> ConceptNames
		{
			get
			{
				return this._ConceptNames;
			}
			set
			{
				this._ConceptNames.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Concept_ConceptReferenceTerm", Storage="_ConceptReferenceTerms", ThisKey="ConceptId", OtherKey="ConceptId")]
		public EntitySet<ConceptReferenceTerm> ConceptReferenceTerms
		{
			get
			{
				return this._ConceptReferenceTerms;
			}
			set
			{
				this._ConceptReferenceTerms.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Concept_ConceptRelationship", Storage="_ConceptRelationshipsSourceConceptId", ThisKey="ConceptId", OtherKey="SourceConceptId")]
		public EntitySet<ConceptRelationship> ConceptRelationshipsSourceConceptId
		{
			get
			{
				return this._ConceptRelationshipsSourceConceptId;
			}
			set
			{
				this._ConceptRelationshipsSourceConceptId.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Concept_ConceptRelationship1", Storage="_ConceptRelationshipsTargetConceptId", ThisKey="ConceptId", OtherKey="TargetConceptId")]
		public EntitySet<ConceptRelationship> ConceptRelationshipsTargetConceptId
		{
			get
			{
				return this._ConceptRelationshipsTargetConceptId;
			}
			set
			{
				this._ConceptRelationshipsTargetConceptId.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Concept_ConceptSetMember", Storage="_ConceptSetMembers", ThisKey="ConceptId", OtherKey="ConceptId")]
		public EntitySet<ConceptSetMember> ConceptSetMembers
		{
			get
			{
				return this._ConceptSetMembers;
			}
			set
			{
				this._ConceptSetMembers.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Concept_ConceptVersion", Storage="_ConceptVersions", ThisKey="ConceptId", OtherKey="ConceptId")]
		public EntitySet<ConceptVersion> ConceptVersions
		{
			get
			{
				return this._ConceptVersions;
			}
			set
			{
				this._ConceptVersions.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Concept_ConceptVersion1", Storage="_ConceptVersionsStatusConceptId", ThisKey="ConceptId", OtherKey="StatusConceptId")]
		public EntitySet<ConceptVersion> ConceptVersionsStatusConceptId
		{
			get
			{
				return this._ConceptVersionsStatusConceptId;
			}
			set
			{
				this._ConceptVersionsStatusConceptId.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Concept_Entity", Storage="_EntitiesClassConceptId", ThisKey="ConceptId", OtherKey="ClassConceptId")]
		public EntitySet<Entity> EntitiesClassConceptId
		{
			get
			{
				return this._EntitiesClassConceptId;
			}
			set
			{
				this._EntitiesClassConceptId.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Concept_Entity1", Storage="_EntitiesDeterminerConceptId", ThisKey="ConceptId", OtherKey="DeterminerConceptId")]
		public EntitySet<Entity> EntitiesDeterminerConceptId
		{
			get
			{
				return this._EntitiesDeterminerConceptId;
			}
			set
			{
				this._EntitiesDeterminerConceptId.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Concept_EntityAddress", Storage="_EntityAddressesAddressUseConceptId", ThisKey="ConceptId", OtherKey="AddressUseConceptId")]
		public EntitySet<EntityAddress> EntityAddressesAddressUseConceptId
		{
			get
			{
				return this._EntityAddressesAddressUseConceptId;
			}
			set
			{
				this._EntityAddressesAddressUseConceptId.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Concept_EntityAddressComponent", Storage="_EntityAddressComponentsComponentTypeConceptId", ThisKey="ConceptId", OtherKey="ComponentTypeConceptId")]
		public EntitySet<EntityAddressComponent> EntityAddressComponentsComponentTypeConceptId
		{
			get
			{
				return this._EntityAddressComponentsComponentTypeConceptId;
			}
			set
			{
				this._EntityAddressComponentsComponentTypeConceptId.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Concept_EntityAssociation", Storage="_EntityAssociationsAssociationTypeConceptId", ThisKey="ConceptId", OtherKey="AssociationTypeConceptId")]
		public EntitySet<EntityAssociation> EntityAssociationsAssociationTypeConceptId
		{
			get
			{
				return this._EntityAssociationsAssociationTypeConceptId;
			}
			set
			{
				this._EntityAssociationsAssociationTypeConceptId.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Concept_EntityName", Storage="_EntityNamesNameUseConceptId", ThisKey="ConceptId", OtherKey="NameUseConceptId")]
		public EntitySet<EntityName> EntityNamesNameUseConceptId
		{
			get
			{
				return this._EntityNamesNameUseConceptId;
			}
			set
			{
				this._EntityNamesNameUseConceptId.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Concept_EntityNameComponent", Storage="_EntityNameComponentsComponentTypeConceptId", ThisKey="ConceptId", OtherKey="ComponentTypeConceptId")]
		public EntitySet<EntityNameComponent> EntityNameComponentsComponentTypeConceptId
		{
			get
			{
				return this._EntityNameComponentsComponentTypeConceptId;
			}
			set
			{
				this._EntityNameComponentsComponentTypeConceptId.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Concept_EntityTelecomAddress", Storage="_EntityTelecomAddressesTelecomAddressTypeConceptId", ThisKey="ConceptId", OtherKey="TelecomAddressTypeConceptId")]
		public EntitySet<EntityTelecomAddress> EntityTelecomAddressesTelecomAddressTypeConceptId
		{
			get
			{
				return this._EntityTelecomAddressesTelecomAddressTypeConceptId;
			}
			set
			{
				this._EntityTelecomAddressesTelecomAddressTypeConceptId.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Concept_EntityTelecomAddress1", Storage="_EntityTelecomAddressesTelecomUseConceptId", ThisKey="ConceptId", OtherKey="TelecomUseConceptId")]
		public EntitySet<EntityTelecomAddress> EntityTelecomAddressesTelecomUseConceptId
		{
			get
			{
				return this._EntityTelecomAddressesTelecomUseConceptId;
			}
			set
			{
				this._EntityTelecomAddressesTelecomUseConceptId.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Concept_EntityVersion", Storage="_EntityVersionsStatusConceptId", ThisKey="ConceptId", OtherKey="StatusConceptId")]
		public EntitySet<EntityVersion> EntityVersionsStatusConceptId
		{
			get
			{
				return this._EntityVersionsStatusConceptId;
			}
			set
			{
				this._EntityVersionsStatusConceptId.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Concept_EntityVersion1", Storage="_EntityVersionsTypeConceptId", ThisKey="ConceptId", OtherKey="TypeConceptId")]
		public EntitySet<EntityVersion> EntityVersionsTypeConceptId
		{
			get
			{
				return this._EntityVersionsTypeConceptId;
			}
			set
			{
				this._EntityVersionsTypeConceptId.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Concept_IdentifierType", Storage="_IdentifierTypesEntityClassScopeConceptId", ThisKey="ConceptId", OtherKey="EntityClassScopeConceptId")]
		public EntitySet<IdentifierType> IdentifierTypesEntityClassScopeConceptId
		{
			get
			{
				return this._IdentifierTypesEntityClassScopeConceptId;
			}
			set
			{
				this._IdentifierTypesEntityClassScopeConceptId.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Concept_IdentifierType1", Storage="_IdentifierTypesIdentifierTypeConceptId", ThisKey="ConceptId", OtherKey="IdentifierTypeConceptId")]
		public EntitySet<IdentifierType> IdentifierTypesIdentifierTypeConceptId
		{
			get
			{
				return this._IdentifierTypesIdentifierTypeConceptId;
			}
			set
			{
				this._IdentifierTypesIdentifierTypeConceptId.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Concept_Material", Storage="_MaterialsFormConceptId", ThisKey="ConceptId", OtherKey="FormConceptId")]
		public EntitySet<Material> MaterialsFormConceptId
		{
			get
			{
				return this._MaterialsFormConceptId;
			}
			set
			{
				this._MaterialsFormConceptId.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Concept_Material1", Storage="_MaterialsQuantityConceptId", ThisKey="ConceptId", OtherKey="QuantityConceptId")]
		public EntitySet<Material> MaterialsQuantityConceptId
		{
			get
			{
				return this._MaterialsQuantityConceptId;
			}
			set
			{
				this._MaterialsQuantityConceptId.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Concept_Observation", Storage="_ObservationsInterpretationConceptId", ThisKey="ConceptId", OtherKey="InterpretationConceptId")]
		public EntitySet<Observation> ObservationsInterpretationConceptId
		{
			get
			{
				return this._ObservationsInterpretationConceptId;
			}
			set
			{
				this._ObservationsInterpretationConceptId.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Concept_Organization", Storage="_OrganizationsIndustryConceptId", ThisKey="ConceptId", OtherKey="IndustryConceptId")]
		public EntitySet<Organization> OrganizationsIndustryConceptId
		{
			get
			{
				return this._OrganizationsIndustryConceptId;
			}
			set
			{
				this._OrganizationsIndustryConceptId.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Concept_Patient", Storage="_PatientsGenderConceptId", ThisKey="ConceptId", OtherKey="GenderConceptId")]
		public EntitySet<Patient> PatientsGenderConceptId
		{
			get
			{
				return this._PatientsGenderConceptId;
			}
			set
			{
				this._PatientsGenderConceptId.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Concept_PatientEncounter", Storage="_PatientEncountersDischargeDispositionConceptId", ThisKey="ConceptId", OtherKey="DischargeDispositionConceptId")]
		public EntitySet<PatientEncounter> PatientEncountersDischargeDispositionConceptId
		{
			get
			{
				return this._PatientEncountersDischargeDispositionConceptId;
			}
			set
			{
				this._PatientEncountersDischargeDispositionConceptId.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Concept_PlaceService", Storage="_PlaceServicesServiceConceptId", ThisKey="ConceptId", OtherKey="ServiceConceptId")]
		public EntitySet<PlaceService> PlaceServicesServiceConceptId
		{
			get
			{
				return this._PlaceServicesServiceConceptId;
			}
			set
			{
				this._PlaceServicesServiceConceptId.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Concept_Provider", Storage="_ProvidersProviderSpecialtyConceptId", ThisKey="ConceptId", OtherKey="ProviderSpecialtyConceptId")]
		public EntitySet<Provider> ProvidersProviderSpecialtyConceptId
		{
			get
			{
				return this._ProvidersProviderSpecialtyConceptId;
			}
			set
			{
				this._ProvidersProviderSpecialtyConceptId.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Concept_QuantityObservation", Storage="_QuantityObservationsUnitOfMeasureConceptId", ThisKey="ConceptId", OtherKey="UnitOfMeasureConceptId")]
		public EntitySet<QuantityObservation> QuantityObservationsUnitOfMeasureConceptId
		{
			get
			{
				return this._QuantityObservationsUnitOfMeasureConceptId;
			}
			set
			{
				this._QuantityObservationsUnitOfMeasureConceptId.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Concept_SubstanceAdministration", Storage="_SubstanceAdministrationsDoseUnitConceptId", ThisKey="ConceptId", OtherKey="DoseUnitConceptId")]
		public EntitySet<SubstanceAdministration> SubstanceAdministrationsDoseUnitConceptId
		{
			get
			{
				return this._SubstanceAdministrationsDoseUnitConceptId;
			}
			set
			{
				this._SubstanceAdministrationsDoseUnitConceptId.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Concept_SubstanceAdministration1", Storage="_SubstanceAdministrationsRouteConceptId", ThisKey="ConceptId", OtherKey="RouteConceptId")]
		public EntitySet<SubstanceAdministration> SubstanceAdministrationsRouteConceptId
		{
			get
			{
				return this._SubstanceAdministrationsRouteConceptId;
			}
			set
			{
				this._SubstanceAdministrationsRouteConceptId.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_ActsClassConceptId(Act entity)
		{
			this.SendPropertyChanging();
			entity.ClassConcept = this;
		}
		
		private void detach_ActsClassConceptId(Act entity)
		{
			this.SendPropertyChanging();
			entity.ClassConcept = null;
		}
		
		private void attach_ActsMoodConceptId(Act entity)
		{
			this.SendPropertyChanging();
			entity.MoodConcept = this;
		}
		
		private void detach_ActsMoodConceptId(Act entity)
		{
			this.SendPropertyChanging();
			entity.MoodConcept = null;
		}
		
		private void attach_ActParticipationsParticipationRoleConceptId(ActParticipation entity)
		{
			this.SendPropertyChanging();
			entity.ParticipationRoleConcept = this;
		}
		
		private void detach_ActParticipationsParticipationRoleConceptId(ActParticipation entity)
		{
			this.SendPropertyChanging();
			entity.ParticipationRoleConcept = null;
		}
		
		private void attach_ActRelationshipsRelationshipTypeConceptId(ActRelationship entity)
		{
			this.SendPropertyChanging();
			entity.RelationshipTypeConcept = this;
		}
		
		private void detach_ActRelationshipsRelationshipTypeConceptId(ActRelationship entity)
		{
			this.SendPropertyChanging();
			entity.RelationshipTypeConcept = null;
		}
		
		private void attach_ActVersionsStatusConceptId(ActVersion entity)
		{
			this.SendPropertyChanging();
			entity.StatusConcept = this;
		}
		
		private void detach_ActVersionsStatusConceptId(ActVersion entity)
		{
			this.SendPropertyChanging();
			entity.StatusConcept = null;
		}
		
		private void attach_ActVersionsTypeConceptId(ActVersion entity)
		{
			this.SendPropertyChanging();
			entity.TypeConcept = this;
		}
		
		private void detach_ActVersionsTypeConceptId(ActVersion entity)
		{
			this.SendPropertyChanging();
			entity.TypeConcept = null;
		}
		
		private void attach_CodedObservationsValueConceptId(CodedObservation entity)
		{
			this.SendPropertyChanging();
			entity.ValueConcept = this;
		}
		
		private void detach_CodedObservationsValueConceptId(CodedObservation entity)
		{
			this.SendPropertyChanging();
			entity.ValueConcept = null;
		}
		
		private void attach_ConceptNames(ConceptName entity)
		{
			this.SendPropertyChanging();
			entity.Concept = this;
		}
		
		private void detach_ConceptNames(ConceptName entity)
		{
			this.SendPropertyChanging();
			entity.Concept = null;
		}
		
		private void attach_ConceptReferenceTerms(ConceptReferenceTerm entity)
		{
			this.SendPropertyChanging();
			entity.Concept = this;
		}
		
		private void detach_ConceptReferenceTerms(ConceptReferenceTerm entity)
		{
			this.SendPropertyChanging();
			entity.Concept = null;
		}
		
		private void attach_ConceptRelationshipsSourceConceptId(ConceptRelationship entity)
		{
			this.SendPropertyChanging();
			entity.SourceConcept = this;
		}
		
		private void detach_ConceptRelationshipsSourceConceptId(ConceptRelationship entity)
		{
			this.SendPropertyChanging();
			entity.SourceConcept = null;
		}
		
		private void attach_ConceptRelationshipsTargetConceptId(ConceptRelationship entity)
		{
			this.SendPropertyChanging();
			entity.TargetConcept = this;
		}
		
		private void detach_ConceptRelationshipsTargetConceptId(ConceptRelationship entity)
		{
			this.SendPropertyChanging();
			entity.TargetConcept = null;
		}
		
		private void attach_ConceptSetMembers(ConceptSetMember entity)
		{
			this.SendPropertyChanging();
			entity.Concept = this;
		}
		
		private void detach_ConceptSetMembers(ConceptSetMember entity)
		{
			this.SendPropertyChanging();
			entity.Concept = null;
		}
		
		private void attach_ConceptVersions(ConceptVersion entity)
		{
			this.SendPropertyChanging();
			entity.Concept = this;
		}
		
		private void detach_ConceptVersions(ConceptVersion entity)
		{
			this.SendPropertyChanging();
			entity.Concept = null;
		}
		
		private void attach_ConceptVersionsStatusConceptId(ConceptVersion entity)
		{
			this.SendPropertyChanging();
			entity.StatusConcept = this;
		}
		
		private void detach_ConceptVersionsStatusConceptId(ConceptVersion entity)
		{
			this.SendPropertyChanging();
			entity.StatusConcept = null;
		}
		
		private void attach_EntitiesClassConceptId(Entity entity)
		{
			this.SendPropertyChanging();
			entity.ClassConcept = this;
		}
		
		private void detach_EntitiesClassConceptId(Entity entity)
		{
			this.SendPropertyChanging();
			entity.ClassConcept = null;
		}
		
		private void attach_EntitiesDeterminerConceptId(Entity entity)
		{
			this.SendPropertyChanging();
			entity.DeterminerConcept = this;
		}
		
		private void detach_EntitiesDeterminerConceptId(Entity entity)
		{
			this.SendPropertyChanging();
			entity.DeterminerConcept = null;
		}
		
		private void attach_EntityAddressesAddressUseConceptId(EntityAddress entity)
		{
			this.SendPropertyChanging();
			entity.AddressUseConcept = this;
		}
		
		private void detach_EntityAddressesAddressUseConceptId(EntityAddress entity)
		{
			this.SendPropertyChanging();
			entity.AddressUseConcept = null;
		}
		
		private void attach_EntityAddressComponentsComponentTypeConceptId(EntityAddressComponent entity)
		{
			this.SendPropertyChanging();
			entity.ComponentTypeConcept = this;
		}
		
		private void detach_EntityAddressComponentsComponentTypeConceptId(EntityAddressComponent entity)
		{
			this.SendPropertyChanging();
			entity.ComponentTypeConcept = null;
		}
		
		private void attach_EntityAssociationsAssociationTypeConceptId(EntityAssociation entity)
		{
			this.SendPropertyChanging();
			entity.AssociationTypeConcept = this;
		}
		
		private void detach_EntityAssociationsAssociationTypeConceptId(EntityAssociation entity)
		{
			this.SendPropertyChanging();
			entity.AssociationTypeConcept = null;
		}
		
		private void attach_EntityNamesNameUseConceptId(EntityName entity)
		{
			this.SendPropertyChanging();
			entity.NameUseConcept = this;
		}
		
		private void detach_EntityNamesNameUseConceptId(EntityName entity)
		{
			this.SendPropertyChanging();
			entity.NameUseConcept = null;
		}
		
		private void attach_EntityNameComponentsComponentTypeConceptId(EntityNameComponent entity)
		{
			this.SendPropertyChanging();
			entity.ComponentTypeConcept = this;
		}
		
		private void detach_EntityNameComponentsComponentTypeConceptId(EntityNameComponent entity)
		{
			this.SendPropertyChanging();
			entity.ComponentTypeConcept = null;
		}
		
		private void attach_EntityTelecomAddressesTelecomAddressTypeConceptId(EntityTelecomAddress entity)
		{
			this.SendPropertyChanging();
			entity.TelecomAddressTypeConcept = this;
		}
		
		private void detach_EntityTelecomAddressesTelecomAddressTypeConceptId(EntityTelecomAddress entity)
		{
			this.SendPropertyChanging();
			entity.TelecomAddressTypeConcept = null;
		}
		
		private void attach_EntityTelecomAddressesTelecomUseConceptId(EntityTelecomAddress entity)
		{
			this.SendPropertyChanging();
			entity.TelecomUseConcept = this;
		}
		
		private void detach_EntityTelecomAddressesTelecomUseConceptId(EntityTelecomAddress entity)
		{
			this.SendPropertyChanging();
			entity.TelecomUseConcept = null;
		}
		
		private void attach_EntityVersionsStatusConceptId(EntityVersion entity)
		{
			this.SendPropertyChanging();
			entity.StatusConcept = this;
		}
		
		private void detach_EntityVersionsStatusConceptId(EntityVersion entity)
		{
			this.SendPropertyChanging();
			entity.StatusConcept = null;
		}
		
		private void attach_EntityVersionsTypeConceptId(EntityVersion entity)
		{
			this.SendPropertyChanging();
			entity.TypeConcept = this;
		}
		
		private void detach_EntityVersionsTypeConceptId(EntityVersion entity)
		{
			this.SendPropertyChanging();
			entity.TypeConcept = null;
		}
		
		private void attach_IdentifierTypesEntityClassScopeConceptId(IdentifierType entity)
		{
			this.SendPropertyChanging();
			entity.EntityClassScopeConcept = this;
		}
		
		private void detach_IdentifierTypesEntityClassScopeConceptId(IdentifierType entity)
		{
			this.SendPropertyChanging();
			entity.EntityClassScopeConcept = null;
		}
		
		private void attach_IdentifierTypesIdentifierTypeConceptId(IdentifierType entity)
		{
			this.SendPropertyChanging();
			entity.IdentifierTypeConcept = this;
		}
		
		private void detach_IdentifierTypesIdentifierTypeConceptId(IdentifierType entity)
		{
			this.SendPropertyChanging();
			entity.IdentifierTypeConcept = null;
		}
		
		private void attach_MaterialsFormConceptId(Material entity)
		{
			this.SendPropertyChanging();
			entity.FormConcept = this;
		}
		
		private void detach_MaterialsFormConceptId(Material entity)
		{
			this.SendPropertyChanging();
			entity.FormConcept = null;
		}
		
		private void attach_MaterialsQuantityConceptId(Material entity)
		{
			this.SendPropertyChanging();
			entity.QuantityConcept = this;
		}
		
		private void detach_MaterialsQuantityConceptId(Material entity)
		{
			this.SendPropertyChanging();
			entity.QuantityConcept = null;
		}
		
		private void attach_ObservationsInterpretationConceptId(Observation entity)
		{
			this.SendPropertyChanging();
			entity.InterpretationConcept = this;
		}
		
		private void detach_ObservationsInterpretationConceptId(Observation entity)
		{
			this.SendPropertyChanging();
			entity.InterpretationConcept = null;
		}
		
		private void attach_OrganizationsIndustryConceptId(Organization entity)
		{
			this.SendPropertyChanging();
			entity.IndustryConcept = this;
		}
		
		private void detach_OrganizationsIndustryConceptId(Organization entity)
		{
			this.SendPropertyChanging();
			entity.IndustryConcept = null;
		}
		
		private void attach_PatientsGenderConceptId(Patient entity)
		{
			this.SendPropertyChanging();
			entity.GenderConcept = this;
		}
		
		private void detach_PatientsGenderConceptId(Patient entity)
		{
			this.SendPropertyChanging();
			entity.GenderConcept = null;
		}
		
		private void attach_PatientEncountersDischargeDispositionConceptId(PatientEncounter entity)
		{
			this.SendPropertyChanging();
			entity.DischargeDispositionConcept = this;
		}
		
		private void detach_PatientEncountersDischargeDispositionConceptId(PatientEncounter entity)
		{
			this.SendPropertyChanging();
			entity.DischargeDispositionConcept = null;
		}
		
		private void attach_PlaceServicesServiceConceptId(PlaceService entity)
		{
			this.SendPropertyChanging();
			entity.ServiceConcept = this;
		}
		
		private void detach_PlaceServicesServiceConceptId(PlaceService entity)
		{
			this.SendPropertyChanging();
			entity.ServiceConcept = null;
		}
		
		private void attach_ProvidersProviderSpecialtyConceptId(Provider entity)
		{
			this.SendPropertyChanging();
			entity.ProviderSpecialtyConcept = this;
		}
		
		private void detach_ProvidersProviderSpecialtyConceptId(Provider entity)
		{
			this.SendPropertyChanging();
			entity.ProviderSpecialtyConcept = null;
		}
		
		private void attach_QuantityObservationsUnitOfMeasureConceptId(QuantityObservation entity)
		{
			this.SendPropertyChanging();
			entity.UnitOfMeasureConcept = this;
		}
		
		private void detach_QuantityObservationsUnitOfMeasureConceptId(QuantityObservation entity)
		{
			this.SendPropertyChanging();
			entity.UnitOfMeasureConcept = null;
		}
		
		private void attach_SubstanceAdministrationsDoseUnitConceptId(SubstanceAdministration entity)
		{
			this.SendPropertyChanging();
			entity.DoseUnitConcept = this;
		}
		
		private void detach_SubstanceAdministrationsDoseUnitConceptId(SubstanceAdministration entity)
		{
			this.SendPropertyChanging();
			entity.DoseUnitConcept = null;
		}
		
		private void attach_SubstanceAdministrationsRouteConceptId(SubstanceAdministration entity)
		{
			this.SendPropertyChanging();
			entity.RouteConcept = this;
		}
		
		private void detach_SubstanceAdministrationsRouteConceptId(SubstanceAdministration entity)
		{
			this.SendPropertyChanging();
			entity.RouteConcept = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ConceptClass")]
	public partial class ConceptClass : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _ConceptClassId;
		
		private string _Name;
		
		private string _Mnemonic;
		
		private System.DateTimeOffset _CreationTime;
		
		private System.Guid _CreatedBy;
		
		private System.Nullable<System.DateTimeOffset> _UpdatedTime;
		
		private System.Nullable<System.Guid> _UpdatedBy;
		
		private System.Nullable<System.DateTimeOffset> _ObsoletionTime;
		
		private System.Nullable<System.Guid> _ObsoletedBy;
		
		private EntitySet<ConceptVersion> _ConceptVersions;
		
		private EntityRef<SecurityUser> _CreatedByEntity;
		
		private EntityRef<SecurityUser> _ObsoletedByEntity;
		
		private EntityRef<SecurityUser> _UpdatedByEntity;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnConceptClassIdChanging(System.Guid value);
    partial void OnConceptClassIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnMnemonicChanging(string value);
    partial void OnMnemonicChanged();
    partial void OnCreationTimeChanging(System.DateTimeOffset value);
    partial void OnCreationTimeChanged();
    partial void OnCreatedByChanging(System.Guid value);
    partial void OnCreatedByChanged();
    partial void OnUpdatedTimeChanging(System.Nullable<System.DateTimeOffset> value);
    partial void OnUpdatedTimeChanged();
    partial void OnUpdatedByChanging(System.Nullable<System.Guid> value);
    partial void OnUpdatedByChanged();
    partial void OnObsoletionTimeChanging(System.Nullable<System.DateTimeOffset> value);
    partial void OnObsoletionTimeChanged();
    partial void OnObsoletedByChanging(System.Nullable<System.Guid> value);
    partial void OnObsoletedByChanged();
    #endregion
		
		public ConceptClass()
		{
			this._ConceptVersions = new EntitySet<ConceptVersion>(new Action<ConceptVersion>(this.attach_ConceptVersions), new Action<ConceptVersion>(this.detach_ConceptVersions));
			this._CreatedByEntity = default(EntityRef<SecurityUser>);
			this._ObsoletedByEntity = default(EntityRef<SecurityUser>);
			this._UpdatedByEntity = default(EntityRef<SecurityUser>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ConceptClassId", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid ConceptClassId
		{
			get
			{
				return this._ConceptClassId;
			}
			set
			{
				if ((this._ConceptClassId != value))
				{
					this.OnConceptClassIdChanging(value);
					this.SendPropertyChanging();
					this._ConceptClassId = value;
					this.SendPropertyChanged("ConceptClassId");
					this.OnConceptClassIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Mnemonic", DbType="NVarChar(16) NOT NULL", CanBeNull=false)]
		public string Mnemonic
		{
			get
			{
				return this._Mnemonic;
			}
			set
			{
				if ((this._Mnemonic != value))
				{
					this.OnMnemonicChanging(value);
					this.SendPropertyChanging();
					this._Mnemonic = value;
					this.SendPropertyChanged("Mnemonic");
					this.OnMnemonicChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CreationTime", AutoSync=AutoSync.Always, DbType="DateTimeOffset NOT NULL", IsDbGenerated=true)]
		public System.DateTimeOffset CreationTime
		{
			get
			{
				return this._CreationTime;
			}
			set
			{
				if ((this._CreationTime != value))
				{
					this.OnCreationTimeChanging(value);
					this.SendPropertyChanging();
					this._CreationTime = value;
					this.SendPropertyChanged("CreationTime");
					this.OnCreationTimeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CreatedBy", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid CreatedBy
		{
			get
			{
				return this._CreatedBy;
			}
			set
			{
				if ((this._CreatedBy != value))
				{
					if (this._CreatedByEntity.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCreatedByChanging(value);
					this.SendPropertyChanging();
					this._CreatedBy = value;
					this.SendPropertyChanged("CreatedBy");
					this.OnCreatedByChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UpdatedTime", DbType="DateTimeOffset")]
		public System.Nullable<System.DateTimeOffset> UpdatedTime
		{
			get
			{
				return this._UpdatedTime;
			}
			set
			{
				if ((this._UpdatedTime != value))
				{
					this.OnUpdatedTimeChanging(value);
					this.SendPropertyChanging();
					this._UpdatedTime = value;
					this.SendPropertyChanged("UpdatedTime");
					this.OnUpdatedTimeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UpdatedBy", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> UpdatedBy
		{
			get
			{
				return this._UpdatedBy;
			}
			set
			{
				if ((this._UpdatedBy != value))
				{
					if (this._UpdatedByEntity.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUpdatedByChanging(value);
					this.SendPropertyChanging();
					this._UpdatedBy = value;
					this.SendPropertyChanged("UpdatedBy");
					this.OnUpdatedByChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ObsoletionTime", DbType="DateTimeOffset")]
		public System.Nullable<System.DateTimeOffset> ObsoletionTime
		{
			get
			{
				return this._ObsoletionTime;
			}
			set
			{
				if ((this._ObsoletionTime != value))
				{
					this.OnObsoletionTimeChanging(value);
					this.SendPropertyChanging();
					this._ObsoletionTime = value;
					this.SendPropertyChanged("ObsoletionTime");
					this.OnObsoletionTimeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ObsoletedBy", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> ObsoletedBy
		{
			get
			{
				return this._ObsoletedBy;
			}
			set
			{
				if ((this._ObsoletedBy != value))
				{
					if (this._ObsoletedByEntity.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnObsoletedByChanging(value);
					this.SendPropertyChanging();
					this._ObsoletedBy = value;
					this.SendPropertyChanged("ObsoletedBy");
					this.OnObsoletedByChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ConceptClass_ConceptVersion", Storage="_ConceptVersions", ThisKey="ConceptClassId", OtherKey="ConceptClassId")]
		public EntitySet<ConceptVersion> ConceptVersions
		{
			get
			{
				return this._ConceptVersions;
			}
			set
			{
				this._ConceptVersions.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="SecurityUser_ConceptClass", Storage="_CreatedByEntity", ThisKey="CreatedBy", OtherKey="UserId", IsForeignKey=true)]
		public SecurityUser CreatedByEntity
		{
			get
			{
				return this._CreatedByEntity.Entity;
			}
			set
			{
				SecurityUser previousValue = this._CreatedByEntity.Entity;
				if (((previousValue != value) 
							|| (this._CreatedByEntity.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._CreatedByEntity.Entity = null;
						previousValue.ConceptClassesCreatedBy.Remove(this);
					}
					this._CreatedByEntity.Entity = value;
					if ((value != null))
					{
						value.ConceptClassesCreatedBy.Add(this);
						this._CreatedBy = value.UserId;
					}
					else
					{
						this._CreatedBy = default(System.Guid);
					}
					this.SendPropertyChanged("CreatedByEntity");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="SecurityUser_ConceptClass1", Storage="_ObsoletedByEntity", ThisKey="ObsoletedBy", OtherKey="UserId", IsForeignKey=true)]
		public SecurityUser ObsoletedByEntity
		{
			get
			{
				return this._ObsoletedByEntity.Entity;
			}
			set
			{
				SecurityUser previousValue = this._ObsoletedByEntity.Entity;
				if (((previousValue != value) 
							|| (this._ObsoletedByEntity.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ObsoletedByEntity.Entity = null;
						previousValue.ConceptClassesObsoletedBy.Remove(this);
					}
					this._ObsoletedByEntity.Entity = value;
					if ((value != null))
					{
						value.ConceptClassesObsoletedBy.Add(this);
						this._ObsoletedBy = value.UserId;
					}
					else
					{
						this._ObsoletedBy = default(Nullable<System.Guid>);
					}
					this.SendPropertyChanged("ObsoletedByEntity");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="SecurityUser_ConceptClass2", Storage="_UpdatedByEntity", ThisKey="UpdatedBy", OtherKey="UserId", IsForeignKey=true)]
		public SecurityUser UpdatedByEntity
		{
			get
			{
				return this._UpdatedByEntity.Entity;
			}
			set
			{
				SecurityUser previousValue = this._UpdatedByEntity.Entity;
				if (((previousValue != value) 
							|| (this._UpdatedByEntity.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._UpdatedByEntity.Entity = null;
						previousValue.ConceptClassesUpdatedBy.Remove(this);
					}
					this._UpdatedByEntity.Entity = value;
					if ((value != null))
					{
						value.ConceptClassesUpdatedBy.Add(this);
						this._UpdatedBy = value.UserId;
					}
					else
					{
						this._UpdatedBy = default(Nullable<System.Guid>);
					}
					this.SendPropertyChanged("UpdatedByEntity");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_ConceptVersions(ConceptVersion entity)
		{
			this.SendPropertyChanging();
			entity.ConceptClass = this;
		}
		
		private void detach_ConceptVersions(ConceptVersion entity)
		{
			this.SendPropertyChanging();
			entity.ConceptClass = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ConceptName")]
	public partial class ConceptName : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _ConceptNameId;
		
		private System.Guid _ConceptId;
		
		private decimal _EffectiveVersionSequenceId;
		
		private System.Nullable<decimal> _ObsoleteVersionSequenceId;
		
		private string _LanguageCode;
		
		private string _Name;
		
		private string _PhoneticCode;
		
		private System.Guid _PhoneticAlgorithmId;
		
		private EntityRef<Concept> _Concept;
		
		private EntityRef<PhoneticAlgorithm> _PhoneticAlgorithm;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnConceptNameIdChanging(System.Guid value);
    partial void OnConceptNameIdChanged();
    partial void OnConceptIdChanging(System.Guid value);
    partial void OnConceptIdChanged();
    partial void OnEffectiveVersionSequenceIdChanging(decimal value);
    partial void OnEffectiveVersionSequenceIdChanged();
    partial void OnObsoleteVersionSequenceIdChanging(System.Nullable<decimal> value);
    partial void OnObsoleteVersionSequenceIdChanged();
    partial void OnLanguageCodeChanging(string value);
    partial void OnLanguageCodeChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnPhoneticCodeChanging(string value);
    partial void OnPhoneticCodeChanged();
    partial void OnPhoneticAlgorithmIdChanging(System.Guid value);
    partial void OnPhoneticAlgorithmIdChanged();
    #endregion
		
		public ConceptName()
		{
			this._Concept = default(EntityRef<Concept>);
			this._PhoneticAlgorithm = default(EntityRef<PhoneticAlgorithm>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ConceptNameId", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid ConceptNameId
		{
			get
			{
				return this._ConceptNameId;
			}
			set
			{
				if ((this._ConceptNameId != value))
				{
					this.OnConceptNameIdChanging(value);
					this.SendPropertyChanging();
					this._ConceptNameId = value;
					this.SendPropertyChanged("ConceptNameId");
					this.OnConceptNameIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ConceptId", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid ConceptId
		{
			get
			{
				return this._ConceptId;
			}
			set
			{
				if ((this._ConceptId != value))
				{
					if (this._Concept.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnConceptIdChanging(value);
					this.SendPropertyChanging();
					this._ConceptId = value;
					this.SendPropertyChanged("ConceptId");
					this.OnConceptIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EffectiveVersionSequenceId", DbType="Decimal(20,0) NOT NULL")]
		public decimal EffectiveVersionSequenceId
		{
			get
			{
				return this._EffectiveVersionSequenceId;
			}
			set
			{
				if ((this._EffectiveVersionSequenceId != value))
				{
					this.OnEffectiveVersionSequenceIdChanging(value);
					this.SendPropertyChanging();
					this._EffectiveVersionSequenceId = value;
					this.SendPropertyChanged("EffectiveVersionSequenceId");
					this.OnEffectiveVersionSequenceIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ObsoleteVersionSequenceId", DbType="Decimal(20,0)")]
		public System.Nullable<decimal> ObsoleteVersionSequenceId
		{
			get
			{
				return this._ObsoleteVersionSequenceId;
			}
			set
			{
				if ((this._ObsoleteVersionSequenceId != value))
				{
					this.OnObsoleteVersionSequenceIdChanging(value);
					this.SendPropertyChanging();
					this._ObsoleteVersionSequenceId = value;
					this.SendPropertyChanged("ObsoleteVersionSequenceId");
					this.OnObsoleteVersionSequenceIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LanguageCode", DbType="NVarChar(2) NOT NULL", CanBeNull=false)]
		public string LanguageCode
		{
			get
			{
				return this._LanguageCode;
			}
			set
			{
				if ((this._LanguageCode != value))
				{
					this.OnLanguageCodeChanging(value);
					this.SendPropertyChanging();
					this._LanguageCode = value;
					this.SendPropertyChanged("LanguageCode");
					this.OnLanguageCodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(256) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PhoneticCode", DbType="NVarChar(32)")]
		public string PhoneticCode
		{
			get
			{
				return this._PhoneticCode;
			}
			set
			{
				if ((this._PhoneticCode != value))
				{
					this.OnPhoneticCodeChanging(value);
					this.SendPropertyChanging();
					this._PhoneticCode = value;
					this.SendPropertyChanged("PhoneticCode");
					this.OnPhoneticCodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PhoneticAlgorithmId", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid PhoneticAlgorithmId
		{
			get
			{
				return this._PhoneticAlgorithmId;
			}
			set
			{
				if ((this._PhoneticAlgorithmId != value))
				{
					if (this._PhoneticAlgorithm.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPhoneticAlgorithmIdChanging(value);
					this.SendPropertyChanging();
					this._PhoneticAlgorithmId = value;
					this.SendPropertyChanged("PhoneticAlgorithmId");
					this.OnPhoneticAlgorithmIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Concept_ConceptName", Storage="_Concept", ThisKey="ConceptId", OtherKey="ConceptId", IsForeignKey=true)]
		public Concept Concept
		{
			get
			{
				return this._Concept.Entity;
			}
			set
			{
				Concept previousValue = this._Concept.Entity;
				if (((previousValue != value) 
							|| (this._Concept.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Concept.Entity = null;
						previousValue.ConceptNames.Remove(this);
					}
					this._Concept.Entity = value;
					if ((value != null))
					{
						value.ConceptNames.Add(this);
						this._ConceptId = value.ConceptId;
					}
					else
					{
						this._ConceptId = default(System.Guid);
					}
					this.SendPropertyChanged("Concept");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="PhoneticAlgorithm_ConceptName", Storage="_PhoneticAlgorithm", ThisKey="PhoneticAlgorithmId", OtherKey="PhoneticAlgorithmId", IsForeignKey=true)]
		public PhoneticAlgorithm PhoneticAlgorithm
		{
			get
			{
				return this._PhoneticAlgorithm.Entity;
			}
			set
			{
				PhoneticAlgorithm previousValue = this._PhoneticAlgorithm.Entity;
				if (((previousValue != value) 
							|| (this._PhoneticAlgorithm.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._PhoneticAlgorithm.Entity = null;
						previousValue.ConceptNames.Remove(this);
					}
					this._PhoneticAlgorithm.Entity = value;
					if ((value != null))
					{
						value.ConceptNames.Add(this);
						this._PhoneticAlgorithmId = value.PhoneticAlgorithmId;
					}
					else
					{
						this._PhoneticAlgorithmId = default(System.Guid);
					}
					this.SendPropertyChanged("PhoneticAlgorithm");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ConceptReferenceTerm")]
	public partial class ConceptReferenceTerm : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _ConceptReferenceTermId;
		
		private System.Guid _ReferenceTermId;
		
		private System.Guid _ConceptId;
		
		private decimal _EffectiveVersionSequenceId;
		
		private System.Nullable<decimal> _ObsoleteVersionSequenceId;
		
		private System.Guid _ConceptRelationshipTypeId;
		
		private EntityRef<Concept> _Concept;
		
		private EntityRef<ConceptRelationshipType> _ConceptRelationshipType;
		
		private EntityRef<ReferenceTerm> _ReferenceTerm;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnConceptReferenceTermIdChanging(System.Guid value);
    partial void OnConceptReferenceTermIdChanged();
    partial void OnReferenceTermIdChanging(System.Guid value);
    partial void OnReferenceTermIdChanged();
    partial void OnConceptIdChanging(System.Guid value);
    partial void OnConceptIdChanged();
    partial void OnEffectiveVersionSequenceIdChanging(decimal value);
    partial void OnEffectiveVersionSequenceIdChanged();
    partial void OnObsoleteVersionSequenceIdChanging(System.Nullable<decimal> value);
    partial void OnObsoleteVersionSequenceIdChanged();
    partial void OnConceptRelationshipTypeIdChanging(System.Guid value);
    partial void OnConceptRelationshipTypeIdChanged();
    #endregion
		
		public ConceptReferenceTerm()
		{
			this._Concept = default(EntityRef<Concept>);
			this._ConceptRelationshipType = default(EntityRef<ConceptRelationshipType>);
			this._ReferenceTerm = default(EntityRef<ReferenceTerm>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ConceptReferenceTermId", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid ConceptReferenceTermId
		{
			get
			{
				return this._ConceptReferenceTermId;
			}
			set
			{
				if ((this._ConceptReferenceTermId != value))
				{
					this.OnConceptReferenceTermIdChanging(value);
					this.SendPropertyChanging();
					this._ConceptReferenceTermId = value;
					this.SendPropertyChanged("ConceptReferenceTermId");
					this.OnConceptReferenceTermIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ReferenceTermId", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid ReferenceTermId
		{
			get
			{
				return this._ReferenceTermId;
			}
			set
			{
				if ((this._ReferenceTermId != value))
				{
					if (this._ReferenceTerm.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnReferenceTermIdChanging(value);
					this.SendPropertyChanging();
					this._ReferenceTermId = value;
					this.SendPropertyChanged("ReferenceTermId");
					this.OnReferenceTermIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ConceptId", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid ConceptId
		{
			get
			{
				return this._ConceptId;
			}
			set
			{
				if ((this._ConceptId != value))
				{
					if (this._Concept.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnConceptIdChanging(value);
					this.SendPropertyChanging();
					this._ConceptId = value;
					this.SendPropertyChanged("ConceptId");
					this.OnConceptIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EffectiveVersionSequenceId", DbType="Decimal(20,0) NOT NULL")]
		public decimal EffectiveVersionSequenceId
		{
			get
			{
				return this._EffectiveVersionSequenceId;
			}
			set
			{
				if ((this._EffectiveVersionSequenceId != value))
				{
					this.OnEffectiveVersionSequenceIdChanging(value);
					this.SendPropertyChanging();
					this._EffectiveVersionSequenceId = value;
					this.SendPropertyChanged("EffectiveVersionSequenceId");
					this.OnEffectiveVersionSequenceIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ObsoleteVersionSequenceId", DbType="Decimal(20,0)")]
		public System.Nullable<decimal> ObsoleteVersionSequenceId
		{
			get
			{
				return this._ObsoleteVersionSequenceId;
			}
			set
			{
				if ((this._ObsoleteVersionSequenceId != value))
				{
					this.OnObsoleteVersionSequenceIdChanging(value);
					this.SendPropertyChanging();
					this._ObsoleteVersionSequenceId = value;
					this.SendPropertyChanged("ObsoleteVersionSequenceId");
					this.OnObsoleteVersionSequenceIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ConceptRelationshipTypeId", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid ConceptRelationshipTypeId
		{
			get
			{
				return this._ConceptRelationshipTypeId;
			}
			set
			{
				if ((this._ConceptRelationshipTypeId != value))
				{
					if (this._ConceptRelationshipType.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnConceptRelationshipTypeIdChanging(value);
					this.SendPropertyChanging();
					this._ConceptRelationshipTypeId = value;
					this.SendPropertyChanged("ConceptRelationshipTypeId");
					this.OnConceptRelationshipTypeIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Concept_ConceptReferenceTerm", Storage="_Concept", ThisKey="ConceptId", OtherKey="ConceptId", IsForeignKey=true)]
		public Concept Concept
		{
			get
			{
				return this._Concept.Entity;
			}
			set
			{
				Concept previousValue = this._Concept.Entity;
				if (((previousValue != value) 
							|| (this._Concept.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Concept.Entity = null;
						previousValue.ConceptReferenceTerms.Remove(this);
					}
					this._Concept.Entity = value;
					if ((value != null))
					{
						value.ConceptReferenceTerms.Add(this);
						this._ConceptId = value.ConceptId;
					}
					else
					{
						this._ConceptId = default(System.Guid);
					}
					this.SendPropertyChanged("Concept");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ConceptRelationshipType_ConceptReferenceTerm", Storage="_ConceptRelationshipType", ThisKey="ConceptRelationshipTypeId", OtherKey="ConceptRelationshipTypeId", IsForeignKey=true)]
		public ConceptRelationshipType ConceptRelationshipType
		{
			get
			{
				return this._ConceptRelationshipType.Entity;
			}
			set
			{
				ConceptRelationshipType previousValue = this._ConceptRelationshipType.Entity;
				if (((previousValue != value) 
							|| (this._ConceptRelationshipType.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ConceptRelationshipType.Entity = null;
						previousValue.ConceptReferenceTerms.Remove(this);
					}
					this._ConceptRelationshipType.Entity = value;
					if ((value != null))
					{
						value.ConceptReferenceTerms.Add(this);
						this._ConceptRelationshipTypeId = value.ConceptRelationshipTypeId;
					}
					else
					{
						this._ConceptRelationshipTypeId = default(System.Guid);
					}
					this.SendPropertyChanged("ConceptRelationshipType");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ReferenceTerm_ConceptReferenceTerm", Storage="_ReferenceTerm", ThisKey="ReferenceTermId", OtherKey="ReferenceTermId", IsForeignKey=true)]
		public ReferenceTerm ReferenceTerm
		{
			get
			{
				return this._ReferenceTerm.Entity;
			}
			set
			{
				ReferenceTerm previousValue = this._ReferenceTerm.Entity;
				if (((previousValue != value) 
							|| (this._ReferenceTerm.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ReferenceTerm.Entity = null;
						previousValue.ConceptReferenceTerms.Remove(this);
					}
					this._ReferenceTerm.Entity = value;
					if ((value != null))
					{
						value.ConceptReferenceTerms.Add(this);
						this._ReferenceTermId = value.ReferenceTermId;
					}
					else
					{
						this._ReferenceTermId = default(System.Guid);
					}
					this.SendPropertyChanged("ReferenceTerm");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ConceptRelationship")]
	public partial class ConceptRelationship : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _ConceptRelationshipId;
		
		private System.Guid _SourceConceptId;
		
		private System.Guid _TargetConceptId;
		
		private System.Guid _ConceptRelationshipTypeId;
		
		private decimal _EffectiveVersionSequenceId;
		
		private System.Nullable<decimal> _ObsoleteVersionSequenceId;
		
		private EntityRef<Concept> _SourceConcept;
		
		private EntityRef<Concept> _TargetConcept;
		
		private EntityRef<ConceptRelationshipType> _ConceptRelationshipType;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnConceptRelationshipIdChanging(System.Guid value);
    partial void OnConceptRelationshipIdChanged();
    partial void OnSourceConceptIdChanging(System.Guid value);
    partial void OnSourceConceptIdChanged();
    partial void OnTargetConceptIdChanging(System.Guid value);
    partial void OnTargetConceptIdChanged();
    partial void OnConceptRelationshipTypeIdChanging(System.Guid value);
    partial void OnConceptRelationshipTypeIdChanged();
    partial void OnEffectiveVersionSequenceIdChanging(decimal value);
    partial void OnEffectiveVersionSequenceIdChanged();
    partial void OnObsoleteVersionSequenceIdChanging(System.Nullable<decimal> value);
    partial void OnObsoleteVersionSequenceIdChanged();
    #endregion
		
		public ConceptRelationship()
		{
			this._SourceConcept = default(EntityRef<Concept>);
			this._TargetConcept = default(EntityRef<Concept>);
			this._ConceptRelationshipType = default(EntityRef<ConceptRelationshipType>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ConceptRelationshipId", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid ConceptRelationshipId
		{
			get
			{
				return this._ConceptRelationshipId;
			}
			set
			{
				if ((this._ConceptRelationshipId != value))
				{
					this.OnConceptRelationshipIdChanging(value);
					this.SendPropertyChanging();
					this._ConceptRelationshipId = value;
					this.SendPropertyChanged("ConceptRelationshipId");
					this.OnConceptRelationshipIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SourceConceptId", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid SourceConceptId
		{
			get
			{
				return this._SourceConceptId;
			}
			set
			{
				if ((this._SourceConceptId != value))
				{
					if (this._SourceConcept.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSourceConceptIdChanging(value);
					this.SendPropertyChanging();
					this._SourceConceptId = value;
					this.SendPropertyChanged("SourceConceptId");
					this.OnSourceConceptIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TargetConceptId", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid TargetConceptId
		{
			get
			{
				return this._TargetConceptId;
			}
			set
			{
				if ((this._TargetConceptId != value))
				{
					if (this._TargetConcept.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnTargetConceptIdChanging(value);
					this.SendPropertyChanging();
					this._TargetConceptId = value;
					this.SendPropertyChanged("TargetConceptId");
					this.OnTargetConceptIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ConceptRelationshipTypeId", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid ConceptRelationshipTypeId
		{
			get
			{
				return this._ConceptRelationshipTypeId;
			}
			set
			{
				if ((this._ConceptRelationshipTypeId != value))
				{
					if (this._ConceptRelationshipType.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnConceptRelationshipTypeIdChanging(value);
					this.SendPropertyChanging();
					this._ConceptRelationshipTypeId = value;
					this.SendPropertyChanged("ConceptRelationshipTypeId");
					this.OnConceptRelationshipTypeIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EffectiveVersionSequenceId", DbType="Decimal(20,0) NOT NULL")]
		public decimal EffectiveVersionSequenceId
		{
			get
			{
				return this._EffectiveVersionSequenceId;
			}
			set
			{
				if ((this._EffectiveVersionSequenceId != value))
				{
					this.OnEffectiveVersionSequenceIdChanging(value);
					this.SendPropertyChanging();
					this._EffectiveVersionSequenceId = value;
					this.SendPropertyChanged("EffectiveVersionSequenceId");
					this.OnEffectiveVersionSequenceIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ObsoleteVersionSequenceId", DbType="Decimal(20,0)")]
		public System.Nullable<decimal> ObsoleteVersionSequenceId
		{
			get
			{
				return this._ObsoleteVersionSequenceId;
			}
			set
			{
				if ((this._ObsoleteVersionSequenceId != value))
				{
					this.OnObsoleteVersionSequenceIdChanging(value);
					this.SendPropertyChanging();
					this._ObsoleteVersionSequenceId = value;
					this.SendPropertyChanged("ObsoleteVersionSequenceId");
					this.OnObsoleteVersionSequenceIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Concept_ConceptRelationship", Storage="_SourceConcept", ThisKey="SourceConceptId", OtherKey="ConceptId", IsForeignKey=true)]
		public Concept SourceConcept
		{
			get
			{
				return this._SourceConcept.Entity;
			}
			set
			{
				Concept previousValue = this._SourceConcept.Entity;
				if (((previousValue != value) 
							|| (this._SourceConcept.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._SourceConcept.Entity = null;
						previousValue.ConceptRelationshipsSourceConceptId.Remove(this);
					}
					this._SourceConcept.Entity = value;
					if ((value != null))
					{
						value.ConceptRelationshipsSourceConceptId.Add(this);
						this._SourceConceptId = value.ConceptId;
					}
					else
					{
						this._SourceConceptId = default(System.Guid);
					}
					this.SendPropertyChanged("SourceConcept");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Concept_ConceptRelationship1", Storage="_TargetConcept", ThisKey="TargetConceptId", OtherKey="ConceptId", IsForeignKey=true)]
		public Concept TargetConcept
		{
			get
			{
				return this._TargetConcept.Entity;
			}
			set
			{
				Concept previousValue = this._TargetConcept.Entity;
				if (((previousValue != value) 
							|| (this._TargetConcept.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._TargetConcept.Entity = null;
						previousValue.ConceptRelationshipsTargetConceptId.Remove(this);
					}
					this._TargetConcept.Entity = value;
					if ((value != null))
					{
						value.ConceptRelationshipsTargetConceptId.Add(this);
						this._TargetConceptId = value.ConceptId;
					}
					else
					{
						this._TargetConceptId = default(System.Guid);
					}
					this.SendPropertyChanged("TargetConcept");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ConceptRelationshipType_ConceptRelationship", Storage="_ConceptRelationshipType", ThisKey="ConceptRelationshipTypeId", OtherKey="ConceptRelationshipTypeId", IsForeignKey=true)]
		public ConceptRelationshipType ConceptRelationshipType
		{
			get
			{
				return this._ConceptRelationshipType.Entity;
			}
			set
			{
				ConceptRelationshipType previousValue = this._ConceptRelationshipType.Entity;
				if (((previousValue != value) 
							|| (this._ConceptRelationshipType.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ConceptRelationshipType.Entity = null;
						previousValue.ConceptRelationships.Remove(this);
					}
					this._ConceptRelationshipType.Entity = value;
					if ((value != null))
					{
						value.ConceptRelationships.Add(this);
						this._ConceptRelationshipTypeId = value.ConceptRelationshipTypeId;
					}
					else
					{
						this._ConceptRelationshipTypeId = default(System.Guid);
					}
					this.SendPropertyChanged("ConceptRelationshipType");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ConceptRelationshipType")]
	public partial class ConceptRelationshipType : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _ConceptRelationshipTypeId;
		
		private string _Name;
		
		private string _Mnemonic;
		
		private System.DateTimeOffset _CreationTime;
		
		private System.Guid _CreatedBy;
		
		private System.Nullable<System.DateTimeOffset> _UpdatedTime;
		
		private System.Nullable<System.Guid> _UpdatedBy;
		
		private System.Nullable<System.DateTimeOffset> _ObsoletionTime;
		
		private System.Nullable<System.Guid> _ObsoletedBy;
		
		private EntitySet<ConceptReferenceTerm> _ConceptReferenceTerms;
		
		private EntitySet<ConceptRelationship> _ConceptRelationships;
		
		private EntityRef<SecurityUser> _CreatedByEntity;
		
		private EntityRef<SecurityUser> _ObsoletedByEntity;
		
		private EntityRef<SecurityUser> _UpdatedByEntity;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnConceptRelationshipTypeIdChanging(System.Guid value);
    partial void OnConceptRelationshipTypeIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnMnemonicChanging(string value);
    partial void OnMnemonicChanged();
    partial void OnCreationTimeChanging(System.DateTimeOffset value);
    partial void OnCreationTimeChanged();
    partial void OnCreatedByChanging(System.Guid value);
    partial void OnCreatedByChanged();
    partial void OnUpdatedTimeChanging(System.Nullable<System.DateTimeOffset> value);
    partial void OnUpdatedTimeChanged();
    partial void OnUpdatedByChanging(System.Nullable<System.Guid> value);
    partial void OnUpdatedByChanged();
    partial void OnObsoletionTimeChanging(System.Nullable<System.DateTimeOffset> value);
    partial void OnObsoletionTimeChanged();
    partial void OnObsoletedByChanging(System.Nullable<System.Guid> value);
    partial void OnObsoletedByChanged();
    #endregion
		
		public ConceptRelationshipType()
		{
			this._ConceptReferenceTerms = new EntitySet<ConceptReferenceTerm>(new Action<ConceptReferenceTerm>(this.attach_ConceptReferenceTerms), new Action<ConceptReferenceTerm>(this.detach_ConceptReferenceTerms));
			this._ConceptRelationships = new EntitySet<ConceptRelationship>(new Action<ConceptRelationship>(this.attach_ConceptRelationships), new Action<ConceptRelationship>(this.detach_ConceptRelationships));
			this._CreatedByEntity = default(EntityRef<SecurityUser>);
			this._ObsoletedByEntity = default(EntityRef<SecurityUser>);
			this._UpdatedByEntity = default(EntityRef<SecurityUser>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ConceptRelationshipTypeId", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid ConceptRelationshipTypeId
		{
			get
			{
				return this._ConceptRelationshipTypeId;
			}
			set
			{
				if ((this._ConceptRelationshipTypeId != value))
				{
					this.OnConceptRelationshipTypeIdChanging(value);
					this.SendPropertyChanging();
					this._ConceptRelationshipTypeId = value;
					this.SendPropertyChanged("ConceptRelationshipTypeId");
					this.OnConceptRelationshipTypeIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Mnemonic", DbType="NVarChar(20) NOT NULL", CanBeNull=false)]
		public string Mnemonic
		{
			get
			{
				return this._Mnemonic;
			}
			set
			{
				if ((this._Mnemonic != value))
				{
					this.OnMnemonicChanging(value);
					this.SendPropertyChanging();
					this._Mnemonic = value;
					this.SendPropertyChanged("Mnemonic");
					this.OnMnemonicChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CreationTime", AutoSync=AutoSync.Always, DbType="DateTimeOffset NOT NULL", IsDbGenerated=true)]
		public System.DateTimeOffset CreationTime
		{
			get
			{
				return this._CreationTime;
			}
			set
			{
				if ((this._CreationTime != value))
				{
					this.OnCreationTimeChanging(value);
					this.SendPropertyChanging();
					this._CreationTime = value;
					this.SendPropertyChanged("CreationTime");
					this.OnCreationTimeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CreatedBy", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid CreatedBy
		{
			get
			{
				return this._CreatedBy;
			}
			set
			{
				if ((this._CreatedBy != value))
				{
					if (this._CreatedByEntity.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCreatedByChanging(value);
					this.SendPropertyChanging();
					this._CreatedBy = value;
					this.SendPropertyChanged("CreatedBy");
					this.OnCreatedByChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UpdatedTime", DbType="DateTimeOffset")]
		public System.Nullable<System.DateTimeOffset> UpdatedTime
		{
			get
			{
				return this._UpdatedTime;
			}
			set
			{
				if ((this._UpdatedTime != value))
				{
					this.OnUpdatedTimeChanging(value);
					this.SendPropertyChanging();
					this._UpdatedTime = value;
					this.SendPropertyChanged("UpdatedTime");
					this.OnUpdatedTimeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UpdatedBy", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> UpdatedBy
		{
			get
			{
				return this._UpdatedBy;
			}
			set
			{
				if ((this._UpdatedBy != value))
				{
					if (this._UpdatedByEntity.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUpdatedByChanging(value);
					this.SendPropertyChanging();
					this._UpdatedBy = value;
					this.SendPropertyChanged("UpdatedBy");
					this.OnUpdatedByChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ObsoletionTime", DbType="DateTimeOffset")]
		public System.Nullable<System.DateTimeOffset> ObsoletionTime
		{
			get
			{
				return this._ObsoletionTime;
			}
			set
			{
				if ((this._ObsoletionTime != value))
				{
					this.OnObsoletionTimeChanging(value);
					this.SendPropertyChanging();
					this._ObsoletionTime = value;
					this.SendPropertyChanged("ObsoletionTime");
					this.OnObsoletionTimeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ObsoletedBy", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> ObsoletedBy
		{
			get
			{
				return this._ObsoletedBy;
			}
			set
			{
				if ((this._ObsoletedBy != value))
				{
					if (this._ObsoletedByEntity.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnObsoletedByChanging(value);
					this.SendPropertyChanging();
					this._ObsoletedBy = value;
					this.SendPropertyChanged("ObsoletedBy");
					this.OnObsoletedByChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ConceptRelationshipType_ConceptReferenceTerm", Storage="_ConceptReferenceTerms", ThisKey="ConceptRelationshipTypeId", OtherKey="ConceptRelationshipTypeId")]
		public EntitySet<ConceptReferenceTerm> ConceptReferenceTerms
		{
			get
			{
				return this._ConceptReferenceTerms;
			}
			set
			{
				this._ConceptReferenceTerms.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ConceptRelationshipType_ConceptRelationship", Storage="_ConceptRelationships", ThisKey="ConceptRelationshipTypeId", OtherKey="ConceptRelationshipTypeId")]
		public EntitySet<ConceptRelationship> ConceptRelationships
		{
			get
			{
				return this._ConceptRelationships;
			}
			set
			{
				this._ConceptRelationships.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="SecurityUser_ConceptRelationshipType", Storage="_CreatedByEntity", ThisKey="CreatedBy", OtherKey="UserId", IsForeignKey=true)]
		public SecurityUser CreatedByEntity
		{
			get
			{
				return this._CreatedByEntity.Entity;
			}
			set
			{
				SecurityUser previousValue = this._CreatedByEntity.Entity;
				if (((previousValue != value) 
							|| (this._CreatedByEntity.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._CreatedByEntity.Entity = null;
						previousValue.ConceptRelationshipTypesCreatedBy.Remove(this);
					}
					this._CreatedByEntity.Entity = value;
					if ((value != null))
					{
						value.ConceptRelationshipTypesCreatedBy.Add(this);
						this._CreatedBy = value.UserId;
					}
					else
					{
						this._CreatedBy = default(System.Guid);
					}
					this.SendPropertyChanged("CreatedByEntity");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="SecurityUser_ConceptRelationshipType1", Storage="_ObsoletedByEntity", ThisKey="ObsoletedBy", OtherKey="UserId", IsForeignKey=true)]
		public SecurityUser ObsoletedByEntity
		{
			get
			{
				return this._ObsoletedByEntity.Entity;
			}
			set
			{
				SecurityUser previousValue = this._ObsoletedByEntity.Entity;
				if (((previousValue != value) 
							|| (this._ObsoletedByEntity.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ObsoletedByEntity.Entity = null;
						previousValue.ConceptRelationshipTypesObsoletedBy.Remove(this);
					}
					this._ObsoletedByEntity.Entity = value;
					if ((value != null))
					{
						value.ConceptRelationshipTypesObsoletedBy.Add(this);
						this._ObsoletedBy = value.UserId;
					}
					else
					{
						this._ObsoletedBy = default(Nullable<System.Guid>);
					}
					this.SendPropertyChanged("ObsoletedByEntity");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="SecurityUser_ConceptRelationshipType2", Storage="_UpdatedByEntity", ThisKey="UpdatedBy", OtherKey="UserId", IsForeignKey=true)]
		public SecurityUser UpdatedByEntity
		{
			get
			{
				return this._UpdatedByEntity.Entity;
			}
			set
			{
				SecurityUser previousValue = this._UpdatedByEntity.Entity;
				if (((previousValue != value) 
							|| (this._UpdatedByEntity.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._UpdatedByEntity.Entity = null;
						previousValue.ConceptRelationshipTypesUpdatedBy.Remove(this);
					}
					this._UpdatedByEntity.Entity = value;
					if ((value != null))
					{
						value.ConceptRelationshipTypesUpdatedBy.Add(this);
						this._UpdatedBy = value.UserId;
					}
					else
					{
						this._UpdatedBy = default(Nullable<System.Guid>);
					}
					this.SendPropertyChanged("UpdatedByEntity");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_ConceptReferenceTerms(ConceptReferenceTerm entity)
		{
			this.SendPropertyChanging();
			entity.ConceptRelationshipType = this;
		}
		
		private void detach_ConceptReferenceTerms(ConceptReferenceTerm entity)
		{
			this.SendPropertyChanging();
			entity.ConceptRelationshipType = null;
		}
		
		private void attach_ConceptRelationships(ConceptRelationship entity)
		{
			this.SendPropertyChanging();
			entity.ConceptRelationshipType = this;
		}
		
		private void detach_ConceptRelationships(ConceptRelationship entity)
		{
			this.SendPropertyChanging();
			entity.ConceptRelationshipType = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ConceptSet")]
	public partial class ConceptSet : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _ConceptSetId;
		
		private string _Name;
		
		private string _Mnemonic;
		
		private string _Oid;
		
		private string _Url;
		
		private System.DateTimeOffset _CreationTime;
		
		private System.Guid _CreatedBy;
		
		private System.Nullable<System.DateTimeOffset> _ObsoletionTime;
		
		private System.Nullable<System.Guid> _ObsoletedBy;
		
		private string _ObsoletionReason;
		
		private System.Nullable<System.DateTimeOffset> _UpdatedTime;
		
		private System.Nullable<System.Guid> _UpdatedBy;
		
		private EntitySet<ConceptSetMember> _ConceptSetMembers;
		
		private EntityRef<SecurityUser> _CreatedByEntity;
		
		private EntityRef<SecurityUser> _ObsoletedByEntity;
		
		private EntityRef<SecurityUser> _UpdatedByEntity;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnConceptSetIdChanging(System.Guid value);
    partial void OnConceptSetIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnMnemonicChanging(string value);
    partial void OnMnemonicChanged();
    partial void OnOidChanging(string value);
    partial void OnOidChanged();
    partial void OnUrlChanging(string value);
    partial void OnUrlChanged();
    partial void OnCreationTimeChanging(System.DateTimeOffset value);
    partial void OnCreationTimeChanged();
    partial void OnCreatedByChanging(System.Guid value);
    partial void OnCreatedByChanged();
    partial void OnObsoletionTimeChanging(System.Nullable<System.DateTimeOffset> value);
    partial void OnObsoletionTimeChanged();
    partial void OnObsoletedByChanging(System.Nullable<System.Guid> value);
    partial void OnObsoletedByChanged();
    partial void OnObsoletionReasonChanging(string value);
    partial void OnObsoletionReasonChanged();
    partial void OnUpdatedTimeChanging(System.Nullable<System.DateTimeOffset> value);
    partial void OnUpdatedTimeChanged();
    partial void OnUpdatedByChanging(System.Nullable<System.Guid> value);
    partial void OnUpdatedByChanged();
    #endregion
		
		public ConceptSet()
		{
			this._ConceptSetMembers = new EntitySet<ConceptSetMember>(new Action<ConceptSetMember>(this.attach_ConceptSetMembers), new Action<ConceptSetMember>(this.detach_ConceptSetMembers));
			this._CreatedByEntity = default(EntityRef<SecurityUser>);
			this._ObsoletedByEntity = default(EntityRef<SecurityUser>);
			this._UpdatedByEntity = default(EntityRef<SecurityUser>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ConceptSetId", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid ConceptSetId
		{
			get
			{
				return this._ConceptSetId;
			}
			set
			{
				if ((this._ConceptSetId != value))
				{
					this.OnConceptSetIdChanging(value);
					this.SendPropertyChanging();
					this._ConceptSetId = value;
					this.SendPropertyChanged("ConceptSetId");
					this.OnConceptSetIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(128) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Mnemonic", DbType="NVarChar(64) NOT NULL", CanBeNull=false)]
		public string Mnemonic
		{
			get
			{
				return this._Mnemonic;
			}
			set
			{
				if ((this._Mnemonic != value))
				{
					this.OnMnemonicChanging(value);
					this.SendPropertyChanging();
					this._Mnemonic = value;
					this.SendPropertyChanged("Mnemonic");
					this.OnMnemonicChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Oid", DbType="NVarChar(64) NOT NULL", CanBeNull=false)]
		public string Oid
		{
			get
			{
				return this._Oid;
			}
			set
			{
				if ((this._Oid != value))
				{
					this.OnOidChanging(value);
					this.SendPropertyChanging();
					this._Oid = value;
					this.SendPropertyChanged("Oid");
					this.OnOidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Url", DbType="NVarChar(256) NOT NULL", CanBeNull=false)]
		public string Url
		{
			get
			{
				return this._Url;
			}
			set
			{
				if ((this._Url != value))
				{
					this.OnUrlChanging(value);
					this.SendPropertyChanging();
					this._Url = value;
					this.SendPropertyChanged("Url");
					this.OnUrlChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CreationTime", AutoSync=AutoSync.Always, DbType="DateTimeOffset NOT NULL", IsDbGenerated=true)]
		public System.DateTimeOffset CreationTime
		{
			get
			{
				return this._CreationTime;
			}
			set
			{
				if ((this._CreationTime != value))
				{
					this.OnCreationTimeChanging(value);
					this.SendPropertyChanging();
					this._CreationTime = value;
					this.SendPropertyChanged("CreationTime");
					this.OnCreationTimeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CreatedBy", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid CreatedBy
		{
			get
			{
				return this._CreatedBy;
			}
			set
			{
				if ((this._CreatedBy != value))
				{
					if (this._CreatedByEntity.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCreatedByChanging(value);
					this.SendPropertyChanging();
					this._CreatedBy = value;
					this.SendPropertyChanged("CreatedBy");
					this.OnCreatedByChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ObsoletionTime", DbType="DateTimeOffset")]
		public System.Nullable<System.DateTimeOffset> ObsoletionTime
		{
			get
			{
				return this._ObsoletionTime;
			}
			set
			{
				if ((this._ObsoletionTime != value))
				{
					this.OnObsoletionTimeChanging(value);
					this.SendPropertyChanging();
					this._ObsoletionTime = value;
					this.SendPropertyChanged("ObsoletionTime");
					this.OnObsoletionTimeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ObsoletedBy", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> ObsoletedBy
		{
			get
			{
				return this._ObsoletedBy;
			}
			set
			{
				if ((this._ObsoletedBy != value))
				{
					if (this._ObsoletedByEntity.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnObsoletedByChanging(value);
					this.SendPropertyChanging();
					this._ObsoletedBy = value;
					this.SendPropertyChanged("ObsoletedBy");
					this.OnObsoletedByChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ObsoletionReason", DbType="NVarChar(MAX)")]
		public string ObsoletionReason
		{
			get
			{
				return this._ObsoletionReason;
			}
			set
			{
				if ((this._ObsoletionReason != value))
				{
					this.OnObsoletionReasonChanging(value);
					this.SendPropertyChanging();
					this._ObsoletionReason = value;
					this.SendPropertyChanged("ObsoletionReason");
					this.OnObsoletionReasonChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UpdatedTime", DbType="DateTimeOffset")]
		public System.Nullable<System.DateTimeOffset> UpdatedTime
		{
			get
			{
				return this._UpdatedTime;
			}
			set
			{
				if ((this._UpdatedTime != value))
				{
					this.OnUpdatedTimeChanging(value);
					this.SendPropertyChanging();
					this._UpdatedTime = value;
					this.SendPropertyChanged("UpdatedTime");
					this.OnUpdatedTimeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UpdatedBy", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> UpdatedBy
		{
			get
			{
				return this._UpdatedBy;
			}
			set
			{
				if ((this._UpdatedBy != value))
				{
					if (this._UpdatedByEntity.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUpdatedByChanging(value);
					this.SendPropertyChanging();
					this._UpdatedBy = value;
					this.SendPropertyChanged("UpdatedBy");
					this.OnUpdatedByChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ConceptSet_ConceptSetMember", Storage="_ConceptSetMembers", ThisKey="ConceptSetId", OtherKey="ConceptSetId")]
		public EntitySet<ConceptSetMember> ConceptSetMembers
		{
			get
			{
				return this._ConceptSetMembers;
			}
			set
			{
				this._ConceptSetMembers.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="SecurityUser_ConceptSet", Storage="_CreatedByEntity", ThisKey="CreatedBy", OtherKey="UserId", IsForeignKey=true)]
		public SecurityUser CreatedByEntity
		{
			get
			{
				return this._CreatedByEntity.Entity;
			}
			set
			{
				SecurityUser previousValue = this._CreatedByEntity.Entity;
				if (((previousValue != value) 
							|| (this._CreatedByEntity.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._CreatedByEntity.Entity = null;
						previousValue.ConceptSetsCreatedBy.Remove(this);
					}
					this._CreatedByEntity.Entity = value;
					if ((value != null))
					{
						value.ConceptSetsCreatedBy.Add(this);
						this._CreatedBy = value.UserId;
					}
					else
					{
						this._CreatedBy = default(System.Guid);
					}
					this.SendPropertyChanged("CreatedByEntity");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="SecurityUser_ConceptSet1", Storage="_ObsoletedByEntity", ThisKey="ObsoletedBy", OtherKey="UserId", IsForeignKey=true)]
		public SecurityUser ObsoletedByEntity
		{
			get
			{
				return this._ObsoletedByEntity.Entity;
			}
			set
			{
				SecurityUser previousValue = this._ObsoletedByEntity.Entity;
				if (((previousValue != value) 
							|| (this._ObsoletedByEntity.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ObsoletedByEntity.Entity = null;
						previousValue.ConceptSetsObsoletedBy.Remove(this);
					}
					this._ObsoletedByEntity.Entity = value;
					if ((value != null))
					{
						value.ConceptSetsObsoletedBy.Add(this);
						this._ObsoletedBy = value.UserId;
					}
					else
					{
						this._ObsoletedBy = default(Nullable<System.Guid>);
					}
					this.SendPropertyChanged("ObsoletedByEntity");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="SecurityUser_ConceptSet2", Storage="_UpdatedByEntity", ThisKey="UpdatedBy", OtherKey="UserId", IsForeignKey=true)]
		public SecurityUser UpdatedByEntity
		{
			get
			{
				return this._UpdatedByEntity.Entity;
			}
			set
			{
				SecurityUser previousValue = this._UpdatedByEntity.Entity;
				if (((previousValue != value) 
							|| (this._UpdatedByEntity.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._UpdatedByEntity.Entity = null;
						previousValue.ConceptSetsUpdatedBy.Remove(this);
					}
					this._UpdatedByEntity.Entity = value;
					if ((value != null))
					{
						value.ConceptSetsUpdatedBy.Add(this);
						this._UpdatedBy = value.UserId;
					}
					else
					{
						this._UpdatedBy = default(Nullable<System.Guid>);
					}
					this.SendPropertyChanged("UpdatedByEntity");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_ConceptSetMembers(ConceptSetMember entity)
		{
			this.SendPropertyChanging();
			entity.ConceptSet = this;
		}
		
		private void detach_ConceptSetMembers(ConceptSetMember entity)
		{
			this.SendPropertyChanging();
			entity.ConceptSet = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ConceptSetMember")]
	public partial class ConceptSetMember : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _ConceptSetId;
		
		private System.Guid _ConceptId;
		
		private EntityRef<Concept> _Concept;
		
		private EntityRef<ConceptSet> _ConceptSet;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnConceptSetIdChanging(System.Guid value);
    partial void OnConceptSetIdChanged();
    partial void OnConceptIdChanging(System.Guid value);
    partial void OnConceptIdChanged();
    #endregion
		
		public ConceptSetMember()
		{
			this._Concept = default(EntityRef<Concept>);
			this._ConceptSet = default(EntityRef<ConceptSet>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ConceptSetId", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid ConceptSetId
		{
			get
			{
				return this._ConceptSetId;
			}
			set
			{
				if ((this._ConceptSetId != value))
				{
					if (this._ConceptSet.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnConceptSetIdChanging(value);
					this.SendPropertyChanging();
					this._ConceptSetId = value;
					this.SendPropertyChanged("ConceptSetId");
					this.OnConceptSetIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ConceptId", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid ConceptId
		{
			get
			{
				return this._ConceptId;
			}
			set
			{
				if ((this._ConceptId != value))
				{
					if (this._Concept.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnConceptIdChanging(value);
					this.SendPropertyChanging();
					this._ConceptId = value;
					this.SendPropertyChanged("ConceptId");
					this.OnConceptIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Concept_ConceptSetMember", Storage="_Concept", ThisKey="ConceptId", OtherKey="ConceptId", IsForeignKey=true)]
		public Concept Concept
		{
			get
			{
				return this._Concept.Entity;
			}
			set
			{
				Concept previousValue = this._Concept.Entity;
				if (((previousValue != value) 
							|| (this._Concept.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Concept.Entity = null;
						previousValue.ConceptSetMembers.Remove(this);
					}
					this._Concept.Entity = value;
					if ((value != null))
					{
						value.ConceptSetMembers.Add(this);
						this._ConceptId = value.ConceptId;
					}
					else
					{
						this._ConceptId = default(System.Guid);
					}
					this.SendPropertyChanged("Concept");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ConceptSet_ConceptSetMember", Storage="_ConceptSet", ThisKey="ConceptSetId", OtherKey="ConceptSetId", IsForeignKey=true)]
		public ConceptSet ConceptSet
		{
			get
			{
				return this._ConceptSet.Entity;
			}
			set
			{
				ConceptSet previousValue = this._ConceptSet.Entity;
				if (((previousValue != value) 
							|| (this._ConceptSet.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ConceptSet.Entity = null;
						previousValue.ConceptSetMembers.Remove(this);
					}
					this._ConceptSet.Entity = value;
					if ((value != null))
					{
						value.ConceptSetMembers.Add(this);
						this._ConceptSetId = value.ConceptSetId;
					}
					else
					{
						this._ConceptSetId = default(System.Guid);
					}
					this.SendPropertyChanged("ConceptSet");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ConceptVersion")]
	public partial class ConceptVersion : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _ConceptVersionId;
		
		private decimal _VersionSequenceId;
		
		private System.Guid _ConceptId;
		
		private System.DateTimeOffset _CreationTime;
		
		private System.Guid _StatusConceptId;
		
		private System.Guid _CreatedBy;
		
		private System.Nullable<System.DateTimeOffset> _ObsoletionTime;
		
		private System.Nullable<System.Guid> _ObsoletedBy;
		
		private System.Nullable<System.Guid> _ReplacesVersionId;
		
		private System.Nullable<System.Guid> _ConceptClassId;
		
		private string _Mnemonic;
		
		private EntitySet<ConceptVersion> _ConceptVersionsReplacesVersionId;
		
		private EntityRef<Concept> _Concept;
		
		private EntityRef<ConceptClass> _ConceptClass;
		
		private EntityRef<ConceptVersion> _ReplacesVersion;
		
		private EntityRef<Concept> _StatusConcept;
		
		private EntityRef<SecurityUser> _CreatedByEntity;
		
		private EntityRef<SecurityUser> _ObsoletedByEntity;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnConceptVersionIdChanging(System.Guid value);
    partial void OnConceptVersionIdChanged();
    partial void OnVersionSequenceIdChanging(decimal value);
    partial void OnVersionSequenceIdChanged();
    partial void OnConceptIdChanging(System.Guid value);
    partial void OnConceptIdChanged();
    partial void OnCreationTimeChanging(System.DateTimeOffset value);
    partial void OnCreationTimeChanged();
    partial void OnStatusConceptIdChanging(System.Guid value);
    partial void OnStatusConceptIdChanged();
    partial void OnCreatedByChanging(System.Guid value);
    partial void OnCreatedByChanged();
    partial void OnObsoletionTimeChanging(System.Nullable<System.DateTimeOffset> value);
    partial void OnObsoletionTimeChanged();
    partial void OnObsoletedByChanging(System.Nullable<System.Guid> value);
    partial void OnObsoletedByChanged();
    partial void OnReplacesVersionIdChanging(System.Nullable<System.Guid> value);
    partial void OnReplacesVersionIdChanged();
    partial void OnConceptClassIdChanging(System.Nullable<System.Guid> value);
    partial void OnConceptClassIdChanged();
    partial void OnMnemonicChanging(string value);
    partial void OnMnemonicChanged();
    #endregion
		
		public ConceptVersion()
		{
			this._ConceptVersionsReplacesVersionId = new EntitySet<ConceptVersion>(new Action<ConceptVersion>(this.attach_ConceptVersionsReplacesVersionId), new Action<ConceptVersion>(this.detach_ConceptVersionsReplacesVersionId));
			this._Concept = default(EntityRef<Concept>);
			this._ConceptClass = default(EntityRef<ConceptClass>);
			this._ReplacesVersion = default(EntityRef<ConceptVersion>);
			this._StatusConcept = default(EntityRef<Concept>);
			this._CreatedByEntity = default(EntityRef<SecurityUser>);
			this._ObsoletedByEntity = default(EntityRef<SecurityUser>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ConceptVersionId", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid ConceptVersionId
		{
			get
			{
				return this._ConceptVersionId;
			}
			set
			{
				if ((this._ConceptVersionId != value))
				{
					this.OnConceptVersionIdChanging(value);
					this.SendPropertyChanging();
					this._ConceptVersionId = value;
					this.SendPropertyChanged("ConceptVersionId");
					this.OnConceptVersionIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_VersionSequenceId", AutoSync=AutoSync.Always, DbType="Decimal(20,0) NOT NULL", IsDbGenerated=true)]
		public decimal VersionSequenceId
		{
			get
			{
				return this._VersionSequenceId;
			}
			set
			{
				if ((this._VersionSequenceId != value))
				{
					this.OnVersionSequenceIdChanging(value);
					this.SendPropertyChanging();
					this._VersionSequenceId = value;
					this.SendPropertyChanged("VersionSequenceId");
					this.OnVersionSequenceIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ConceptId", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid ConceptId
		{
			get
			{
				return this._ConceptId;
			}
			set
			{
				if ((this._ConceptId != value))
				{
					if (this._Concept.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnConceptIdChanging(value);
					this.SendPropertyChanging();
					this._ConceptId = value;
					this.SendPropertyChanged("ConceptId");
					this.OnConceptIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CreationTime", AutoSync=AutoSync.Always, DbType="DateTimeOffset NOT NULL", IsDbGenerated=true)]
		public System.DateTimeOffset CreationTime
		{
			get
			{
				return this._CreationTime;
			}
			set
			{
				if ((this._CreationTime != value))
				{
					this.OnCreationTimeChanging(value);
					this.SendPropertyChanging();
					this._CreationTime = value;
					this.SendPropertyChanged("CreationTime");
					this.OnCreationTimeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StatusConceptId", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid StatusConceptId
		{
			get
			{
				return this._StatusConceptId;
			}
			set
			{
				if ((this._StatusConceptId != value))
				{
					if (this._StatusConcept.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnStatusConceptIdChanging(value);
					this.SendPropertyChanging();
					this._StatusConceptId = value;
					this.SendPropertyChanged("StatusConceptId");
					this.OnStatusConceptIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CreatedBy", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid CreatedBy
		{
			get
			{
				return this._CreatedBy;
			}
			set
			{
				if ((this._CreatedBy != value))
				{
					if (this._CreatedByEntity.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCreatedByChanging(value);
					this.SendPropertyChanging();
					this._CreatedBy = value;
					this.SendPropertyChanged("CreatedBy");
					this.OnCreatedByChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ObsoletionTime", DbType="DateTimeOffset")]
		public System.Nullable<System.DateTimeOffset> ObsoletionTime
		{
			get
			{
				return this._ObsoletionTime;
			}
			set
			{
				if ((this._ObsoletionTime != value))
				{
					this.OnObsoletionTimeChanging(value);
					this.SendPropertyChanging();
					this._ObsoletionTime = value;
					this.SendPropertyChanged("ObsoletionTime");
					this.OnObsoletionTimeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ObsoletedBy", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> ObsoletedBy
		{
			get
			{
				return this._ObsoletedBy;
			}
			set
			{
				if ((this._ObsoletedBy != value))
				{
					if (this._ObsoletedByEntity.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnObsoletedByChanging(value);
					this.SendPropertyChanging();
					this._ObsoletedBy = value;
					this.SendPropertyChanged("ObsoletedBy");
					this.OnObsoletedByChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ReplacesVersionId", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> ReplacesVersionId
		{
			get
			{
				return this._ReplacesVersionId;
			}
			set
			{
				if ((this._ReplacesVersionId != value))
				{
					if (this._ReplacesVersion.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnReplacesVersionIdChanging(value);
					this.SendPropertyChanging();
					this._ReplacesVersionId = value;
					this.SendPropertyChanged("ReplacesVersionId");
					this.OnReplacesVersionIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ConceptClassId", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> ConceptClassId
		{
			get
			{
				return this._ConceptClassId;
			}
			set
			{
				if ((this._ConceptClassId != value))
				{
					if (this._ConceptClass.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnConceptClassIdChanging(value);
					this.SendPropertyChanging();
					this._ConceptClassId = value;
					this.SendPropertyChanged("ConceptClassId");
					this.OnConceptClassIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Mnemonic", DbType="NVarChar(64) NOT NULL", CanBeNull=false)]
		public string Mnemonic
		{
			get
			{
				return this._Mnemonic;
			}
			set
			{
				if ((this._Mnemonic != value))
				{
					this.OnMnemonicChanging(value);
					this.SendPropertyChanging();
					this._Mnemonic = value;
					this.SendPropertyChanged("Mnemonic");
					this.OnMnemonicChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ConceptVersion_ConceptVersion", Storage="_ConceptVersionsReplacesVersionId", ThisKey="ConceptVersionId", OtherKey="ReplacesVersionId")]
		public EntitySet<ConceptVersion> ConceptVersionsReplacesVersionId
		{
			get
			{
				return this._ConceptVersionsReplacesVersionId;
			}
			set
			{
				this._ConceptVersionsReplacesVersionId.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Concept_ConceptVersion", Storage="_Concept", ThisKey="ConceptId", OtherKey="ConceptId", IsForeignKey=true)]
		public Concept Concept
		{
			get
			{
				return this._Concept.Entity;
			}
			set
			{
				Concept previousValue = this._Concept.Entity;
				if (((previousValue != value) 
							|| (this._Concept.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Concept.Entity = null;
						previousValue.ConceptVersions.Remove(this);
					}
					this._Concept.Entity = value;
					if ((value != null))
					{
						value.ConceptVersions.Add(this);
						this._ConceptId = value.ConceptId;
					}
					else
					{
						this._ConceptId = default(System.Guid);
					}
					this.SendPropertyChanged("Concept");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ConceptClass_ConceptVersion", Storage="_ConceptClass", ThisKey="ConceptClassId", OtherKey="ConceptClassId", IsForeignKey=true)]
		public ConceptClass ConceptClass
		{
			get
			{
				return this._ConceptClass.Entity;
			}
			set
			{
				ConceptClass previousValue = this._ConceptClass.Entity;
				if (((previousValue != value) 
							|| (this._ConceptClass.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ConceptClass.Entity = null;
						previousValue.ConceptVersions.Remove(this);
					}
					this._ConceptClass.Entity = value;
					if ((value != null))
					{
						value.ConceptVersions.Add(this);
						this._ConceptClassId = value.ConceptClassId;
					}
					else
					{
						this._ConceptClassId = default(Nullable<System.Guid>);
					}
					this.SendPropertyChanged("ConceptClass");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ConceptVersion_ConceptVersion", Storage="_ReplacesVersion", ThisKey="ReplacesVersionId", OtherKey="ConceptVersionId", IsForeignKey=true)]
		public ConceptVersion ReplacesVersion
		{
			get
			{
				return this._ReplacesVersion.Entity;
			}
			set
			{
				ConceptVersion previousValue = this._ReplacesVersion.Entity;
				if (((previousValue != value) 
							|| (this._ReplacesVersion.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ReplacesVersion.Entity = null;
						previousValue.ConceptVersionsReplacesVersionId.Remove(this);
					}
					this._ReplacesVersion.Entity = value;
					if ((value != null))
					{
						value.ConceptVersionsReplacesVersionId.Add(this);
						this._ReplacesVersionId = value.ConceptVersionId;
					}
					else
					{
						this._ReplacesVersionId = default(Nullable<System.Guid>);
					}
					this.SendPropertyChanged("ReplacesVersion");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Concept_ConceptVersion1", Storage="_StatusConcept", ThisKey="StatusConceptId", OtherKey="ConceptId", IsForeignKey=true)]
		public Concept StatusConcept
		{
			get
			{
				return this._StatusConcept.Entity;
			}
			set
			{
				Concept previousValue = this._StatusConcept.Entity;
				if (((previousValue != value) 
							|| (this._StatusConcept.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._StatusConcept.Entity = null;
						previousValue.ConceptVersionsStatusConceptId.Remove(this);
					}
					this._StatusConcept.Entity = value;
					if ((value != null))
					{
						value.ConceptVersionsStatusConceptId.Add(this);
						this._StatusConceptId = value.ConceptId;
					}
					else
					{
						this._StatusConceptId = default(System.Guid);
					}
					this.SendPropertyChanged("StatusConcept");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="SecurityUser_ConceptVersion", Storage="_CreatedByEntity", ThisKey="CreatedBy", OtherKey="UserId", IsForeignKey=true)]
		public SecurityUser CreatedByEntity
		{
			get
			{
				return this._CreatedByEntity.Entity;
			}
			set
			{
				SecurityUser previousValue = this._CreatedByEntity.Entity;
				if (((previousValue != value) 
							|| (this._CreatedByEntity.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._CreatedByEntity.Entity = null;
						previousValue.ConceptVersionsCreatedBy.Remove(this);
					}
					this._CreatedByEntity.Entity = value;
					if ((value != null))
					{
						value.ConceptVersionsCreatedBy.Add(this);
						this._CreatedBy = value.UserId;
					}
					else
					{
						this._CreatedBy = default(System.Guid);
					}
					this.SendPropertyChanged("CreatedByEntity");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="SecurityUser_ConceptVersion1", Storage="_ObsoletedByEntity", ThisKey="ObsoletedBy", OtherKey="UserId", IsForeignKey=true)]
		public SecurityUser ObsoletedByEntity
		{
			get
			{
				return this._ObsoletedByEntity.Entity;
			}
			set
			{
				SecurityUser previousValue = this._ObsoletedByEntity.Entity;
				if (((previousValue != value) 
							|| (this._ObsoletedByEntity.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ObsoletedByEntity.Entity = null;
						previousValue.ConceptVersionsObsoletedBy.Remove(this);
					}
					this._ObsoletedByEntity.Entity = value;
					if ((value != null))
					{
						value.ConceptVersionsObsoletedBy.Add(this);
						this._ObsoletedBy = value.UserId;
					}
					else
					{
						this._ObsoletedBy = default(Nullable<System.Guid>);
					}
					this.SendPropertyChanged("ObsoletedByEntity");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_ConceptVersionsReplacesVersionId(ConceptVersion entity)
		{
			this.SendPropertyChanging();
			entity.ReplacesVersion = this;
		}
		
		private void detach_ConceptVersionsReplacesVersionId(ConceptVersion entity)
		{
			this.SendPropertyChanging();
			entity.ReplacesVersion = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.DeviceEntity")]
	public partial class DeviceEntity : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _EntityVersionId;
		
		private System.Guid _DeviceId;
		
		private string _ManufacturedModelName;
		
		private string _OperatingSystemName;
		
		private EntityRef<EntityVersion> _EntityVersion;
		
		private EntityRef<SecurityDevice> _SecurityDevice;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnEntityVersionIdChanging(System.Guid value);
    partial void OnEntityVersionIdChanged();
    partial void OnDeviceIdChanging(System.Guid value);
    partial void OnDeviceIdChanged();
    partial void OnManufacturedModelNameChanging(string value);
    partial void OnManufacturedModelNameChanged();
    partial void OnOperatingSystemNameChanging(string value);
    partial void OnOperatingSystemNameChanged();
    #endregion
		
		public DeviceEntity()
		{
			this._EntityVersion = default(EntityRef<EntityVersion>);
			this._SecurityDevice = default(EntityRef<SecurityDevice>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EntityVersionId", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid EntityVersionId
		{
			get
			{
				return this._EntityVersionId;
			}
			set
			{
				if ((this._EntityVersionId != value))
				{
					if (this._EntityVersion.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnEntityVersionIdChanging(value);
					this.SendPropertyChanging();
					this._EntityVersionId = value;
					this.SendPropertyChanged("EntityVersionId");
					this.OnEntityVersionIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DeviceId", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid DeviceId
		{
			get
			{
				return this._DeviceId;
			}
			set
			{
				if ((this._DeviceId != value))
				{
					if (this._SecurityDevice.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnDeviceIdChanging(value);
					this.SendPropertyChanging();
					this._DeviceId = value;
					this.SendPropertyChanged("DeviceId");
					this.OnDeviceIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ManufacturedModelName", DbType="NVarChar(64) NOT NULL", CanBeNull=false)]
		public string ManufacturedModelName
		{
			get
			{
				return this._ManufacturedModelName;
			}
			set
			{
				if ((this._ManufacturedModelName != value))
				{
					this.OnManufacturedModelNameChanging(value);
					this.SendPropertyChanging();
					this._ManufacturedModelName = value;
					this.SendPropertyChanged("ManufacturedModelName");
					this.OnManufacturedModelNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OperatingSystemName", DbType="NVarChar(64)")]
		public string OperatingSystemName
		{
			get
			{
				return this._OperatingSystemName;
			}
			set
			{
				if ((this._OperatingSystemName != value))
				{
					this.OnOperatingSystemNameChanging(value);
					this.SendPropertyChanging();
					this._OperatingSystemName = value;
					this.SendPropertyChanged("OperatingSystemName");
					this.OnOperatingSystemNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="EntityVersion_DeviceEntity", Storage="_EntityVersion", ThisKey="EntityVersionId", OtherKey="EntityVersionId", IsForeignKey=true)]
		public EntityVersion EntityVersion
		{
			get
			{
				return this._EntityVersion.Entity;
			}
			set
			{
				EntityVersion previousValue = this._EntityVersion.Entity;
				if (((previousValue != value) 
							|| (this._EntityVersion.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._EntityVersion.Entity = null;
						previousValue.DeviceEntity = null;
					}
					this._EntityVersion.Entity = value;
					if ((value != null))
					{
						value.DeviceEntity = this;
						this._EntityVersionId = value.EntityVersionId;
					}
					else
					{
						this._EntityVersionId = default(System.Guid);
					}
					this.SendPropertyChanged("EntityVersion");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="SecurityDevice_DeviceEntity", Storage="_SecurityDevice", ThisKey="DeviceId", OtherKey="DeviceId", IsForeignKey=true)]
		public SecurityDevice SecurityDevice
		{
			get
			{
				return this._SecurityDevice.Entity;
			}
			set
			{
				SecurityDevice previousValue = this._SecurityDevice.Entity;
				if (((previousValue != value) 
							|| (this._SecurityDevice.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._SecurityDevice.Entity = null;
						previousValue.DeviceEntities.Remove(this);
					}
					this._SecurityDevice.Entity = value;
					if ((value != null))
					{
						value.DeviceEntities.Add(this);
						this._DeviceId = value.DeviceId;
					}
					else
					{
						this._DeviceId = default(System.Guid);
					}
					this.SendPropertyChanged("SecurityDevice");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Entity")]
	public partial class Entity : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _EntityId;
		
		private System.Guid _ClassConceptId;
		
		private System.Guid _DeterminerConceptId;
		
		private EntitySet<ActNote> _ActNotesAuthorEntityId;
		
		private EntitySet<ActParticipation> _ActParticipations;
		
		private EntitySet<EntityAddress> _EntityAddresses;
		
		private EntitySet<EntityAssociation> _EntityAssociationsSourceEntityId;
		
		private EntitySet<EntityAssociation> _EntityAssociationsTargetEntityId;
		
		private EntitySet<EntityExtension> _EntityExtensions;
		
		private EntitySet<EntityIdentifier> _EntityIdentifiers;
		
		private EntitySet<EntityName> _EntityNames;
		
		private EntitySet<EntityNote> _EntityNotesAuthorEntityId;
		
		private EntitySet<EntityNote> _EntityNotes;
		
		private EntitySet<EntityTag> _EntityTags;
		
		private EntitySet<EntityTelecomAddress> _EntityTelecomAddresses;
		
		private EntitySet<EntityVersion> _EntityVersions;
		
		private EntitySet<PersonLanguageCommunication> _PersonLanguageCommunicationsPersonEntityId;
		
		private EntitySet<PlaceService> _PlaceServicesPlaceEntityId;
		
		private EntityRef<Concept> _ClassConcept;
		
		private EntityRef<Concept> _DeterminerConcept;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnEntityIdChanging(System.Guid value);
    partial void OnEntityIdChanged();
    partial void OnClassConceptIdChanging(System.Guid value);
    partial void OnClassConceptIdChanged();
    partial void OnDeterminerConceptIdChanging(System.Guid value);
    partial void OnDeterminerConceptIdChanged();
    #endregion
		
		public Entity()
		{
			this._ActNotesAuthorEntityId = new EntitySet<ActNote>(new Action<ActNote>(this.attach_ActNotesAuthorEntityId), new Action<ActNote>(this.detach_ActNotesAuthorEntityId));
			this._ActParticipations = new EntitySet<ActParticipation>(new Action<ActParticipation>(this.attach_ActParticipations), new Action<ActParticipation>(this.detach_ActParticipations));
			this._EntityAddresses = new EntitySet<EntityAddress>(new Action<EntityAddress>(this.attach_EntityAddresses), new Action<EntityAddress>(this.detach_EntityAddresses));
			this._EntityAssociationsSourceEntityId = new EntitySet<EntityAssociation>(new Action<EntityAssociation>(this.attach_EntityAssociationsSourceEntityId), new Action<EntityAssociation>(this.detach_EntityAssociationsSourceEntityId));
			this._EntityAssociationsTargetEntityId = new EntitySet<EntityAssociation>(new Action<EntityAssociation>(this.attach_EntityAssociationsTargetEntityId), new Action<EntityAssociation>(this.detach_EntityAssociationsTargetEntityId));
			this._EntityExtensions = new EntitySet<EntityExtension>(new Action<EntityExtension>(this.attach_EntityExtensions), new Action<EntityExtension>(this.detach_EntityExtensions));
			this._EntityIdentifiers = new EntitySet<EntityIdentifier>(new Action<EntityIdentifier>(this.attach_EntityIdentifiers), new Action<EntityIdentifier>(this.detach_EntityIdentifiers));
			this._EntityNames = new EntitySet<EntityName>(new Action<EntityName>(this.attach_EntityNames), new Action<EntityName>(this.detach_EntityNames));
			this._EntityNotesAuthorEntityId = new EntitySet<EntityNote>(new Action<EntityNote>(this.attach_EntityNotesAuthorEntityId), new Action<EntityNote>(this.detach_EntityNotesAuthorEntityId));
			this._EntityNotes = new EntitySet<EntityNote>(new Action<EntityNote>(this.attach_EntityNotes), new Action<EntityNote>(this.detach_EntityNotes));
			this._EntityTags = new EntitySet<EntityTag>(new Action<EntityTag>(this.attach_EntityTags), new Action<EntityTag>(this.detach_EntityTags));
			this._EntityTelecomAddresses = new EntitySet<EntityTelecomAddress>(new Action<EntityTelecomAddress>(this.attach_EntityTelecomAddresses), new Action<EntityTelecomAddress>(this.detach_EntityTelecomAddresses));
			this._EntityVersions = new EntitySet<EntityVersion>(new Action<EntityVersion>(this.attach_EntityVersions), new Action<EntityVersion>(this.detach_EntityVersions));
			this._PersonLanguageCommunicationsPersonEntityId = new EntitySet<PersonLanguageCommunication>(new Action<PersonLanguageCommunication>(this.attach_PersonLanguageCommunicationsPersonEntityId), new Action<PersonLanguageCommunication>(this.detach_PersonLanguageCommunicationsPersonEntityId));
			this._PlaceServicesPlaceEntityId = new EntitySet<PlaceService>(new Action<PlaceService>(this.attach_PlaceServicesPlaceEntityId), new Action<PlaceService>(this.detach_PlaceServicesPlaceEntityId));
			this._ClassConcept = default(EntityRef<Concept>);
			this._DeterminerConcept = default(EntityRef<Concept>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EntityId", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid EntityId
		{
			get
			{
				return this._EntityId;
			}
			set
			{
				if ((this._EntityId != value))
				{
					this.OnEntityIdChanging(value);
					this.SendPropertyChanging();
					this._EntityId = value;
					this.SendPropertyChanged("EntityId");
					this.OnEntityIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ClassConceptId", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid ClassConceptId
		{
			get
			{
				return this._ClassConceptId;
			}
			set
			{
				if ((this._ClassConceptId != value))
				{
					if (this._ClassConcept.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnClassConceptIdChanging(value);
					this.SendPropertyChanging();
					this._ClassConceptId = value;
					this.SendPropertyChanged("ClassConceptId");
					this.OnClassConceptIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DeterminerConceptId", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid DeterminerConceptId
		{
			get
			{
				return this._DeterminerConceptId;
			}
			set
			{
				if ((this._DeterminerConceptId != value))
				{
					if (this._DeterminerConcept.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnDeterminerConceptIdChanging(value);
					this.SendPropertyChanging();
					this._DeterminerConceptId = value;
					this.SendPropertyChanged("DeterminerConceptId");
					this.OnDeterminerConceptIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Entity_ActNote", Storage="_ActNotesAuthorEntityId", ThisKey="EntityId", OtherKey="AuthorEntityId")]
		public EntitySet<ActNote> ActNotesAuthorEntityId
		{
			get
			{
				return this._ActNotesAuthorEntityId;
			}
			set
			{
				this._ActNotesAuthorEntityId.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Entity_ActParticipation", Storage="_ActParticipations", ThisKey="EntityId", OtherKey="EntityId")]
		public EntitySet<ActParticipation> ActParticipations
		{
			get
			{
				return this._ActParticipations;
			}
			set
			{
				this._ActParticipations.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Entity_EntityAddress", Storage="_EntityAddresses", ThisKey="EntityId", OtherKey="EntityId")]
		public EntitySet<EntityAddress> EntityAddresses
		{
			get
			{
				return this._EntityAddresses;
			}
			set
			{
				this._EntityAddresses.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Entity_EntityAssociation", Storage="_EntityAssociationsSourceEntityId", ThisKey="EntityId", OtherKey="SourceEntityId")]
		public EntitySet<EntityAssociation> EntityAssociationsSourceEntityId
		{
			get
			{
				return this._EntityAssociationsSourceEntityId;
			}
			set
			{
				this._EntityAssociationsSourceEntityId.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Entity_EntityAssociation1", Storage="_EntityAssociationsTargetEntityId", ThisKey="EntityId", OtherKey="TargetEntityId")]
		public EntitySet<EntityAssociation> EntityAssociationsTargetEntityId
		{
			get
			{
				return this._EntityAssociationsTargetEntityId;
			}
			set
			{
				this._EntityAssociationsTargetEntityId.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Entity_EntityExtension", Storage="_EntityExtensions", ThisKey="EntityId", OtherKey="EntityId")]
		public EntitySet<EntityExtension> EntityExtensions
		{
			get
			{
				return this._EntityExtensions;
			}
			set
			{
				this._EntityExtensions.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Entity_EntityIdentifier", Storage="_EntityIdentifiers", ThisKey="EntityId", OtherKey="EntityId")]
		public EntitySet<EntityIdentifier> EntityIdentifiers
		{
			get
			{
				return this._EntityIdentifiers;
			}
			set
			{
				this._EntityIdentifiers.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Entity_EntityName", Storage="_EntityNames", ThisKey="EntityId", OtherKey="EntityId")]
		public EntitySet<EntityName> EntityNames
		{
			get
			{
				return this._EntityNames;
			}
			set
			{
				this._EntityNames.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Entity_EntityNote", Storage="_EntityNotesAuthorEntityId", ThisKey="EntityId", OtherKey="AuthorEntityId")]
		public EntitySet<EntityNote> EntityNotesAuthorEntityId
		{
			get
			{
				return this._EntityNotesAuthorEntityId;
			}
			set
			{
				this._EntityNotesAuthorEntityId.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Entity_EntityNote1", Storage="_EntityNotes", ThisKey="EntityId", OtherKey="EntityId")]
		public EntitySet<EntityNote> EntityNotes
		{
			get
			{
				return this._EntityNotes;
			}
			set
			{
				this._EntityNotes.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Entity_EntityTag", Storage="_EntityTags", ThisKey="EntityId", OtherKey="EntityId")]
		public EntitySet<EntityTag> EntityTags
		{
			get
			{
				return this._EntityTags;
			}
			set
			{
				this._EntityTags.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Entity_EntityTelecomAddress", Storage="_EntityTelecomAddresses", ThisKey="EntityId", OtherKey="EntityId")]
		public EntitySet<EntityTelecomAddress> EntityTelecomAddresses
		{
			get
			{
				return this._EntityTelecomAddresses;
			}
			set
			{
				this._EntityTelecomAddresses.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Entity_EntityVersion", Storage="_EntityVersions", ThisKey="EntityId", OtherKey="EntityId")]
		public EntitySet<EntityVersion> EntityVersions
		{
			get
			{
				return this._EntityVersions;
			}
			set
			{
				this._EntityVersions.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Entity_PersonLanguageCommunication", Storage="_PersonLanguageCommunicationsPersonEntityId", ThisKey="EntityId", OtherKey="PersonEntityId")]
		public EntitySet<PersonLanguageCommunication> PersonLanguageCommunicationsPersonEntityId
		{
			get
			{
				return this._PersonLanguageCommunicationsPersonEntityId;
			}
			set
			{
				this._PersonLanguageCommunicationsPersonEntityId.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Entity_PlaceService", Storage="_PlaceServicesPlaceEntityId", ThisKey="EntityId", OtherKey="PlaceEntityId")]
		public EntitySet<PlaceService> PlaceServicesPlaceEntityId
		{
			get
			{
				return this._PlaceServicesPlaceEntityId;
			}
			set
			{
				this._PlaceServicesPlaceEntityId.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Concept_Entity", Storage="_ClassConcept", ThisKey="ClassConceptId", OtherKey="ConceptId", IsForeignKey=true)]
		public Concept ClassConcept
		{
			get
			{
				return this._ClassConcept.Entity;
			}
			set
			{
				Concept previousValue = this._ClassConcept.Entity;
				if (((previousValue != value) 
							|| (this._ClassConcept.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ClassConcept.Entity = null;
						previousValue.EntitiesClassConceptId.Remove(this);
					}
					this._ClassConcept.Entity = value;
					if ((value != null))
					{
						value.EntitiesClassConceptId.Add(this);
						this._ClassConceptId = value.ConceptId;
					}
					else
					{
						this._ClassConceptId = default(System.Guid);
					}
					this.SendPropertyChanged("ClassConcept");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Concept_Entity1", Storage="_DeterminerConcept", ThisKey="DeterminerConceptId", OtherKey="ConceptId", IsForeignKey=true)]
		public Concept DeterminerConcept
		{
			get
			{
				return this._DeterminerConcept.Entity;
			}
			set
			{
				Concept previousValue = this._DeterminerConcept.Entity;
				if (((previousValue != value) 
							|| (this._DeterminerConcept.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._DeterminerConcept.Entity = null;
						previousValue.EntitiesDeterminerConceptId.Remove(this);
					}
					this._DeterminerConcept.Entity = value;
					if ((value != null))
					{
						value.EntitiesDeterminerConceptId.Add(this);
						this._DeterminerConceptId = value.ConceptId;
					}
					else
					{
						this._DeterminerConceptId = default(System.Guid);
					}
					this.SendPropertyChanged("DeterminerConcept");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_ActNotesAuthorEntityId(ActNote entity)
		{
			this.SendPropertyChanging();
			entity.AuthorEntity = this;
		}
		
		private void detach_ActNotesAuthorEntityId(ActNote entity)
		{
			this.SendPropertyChanging();
			entity.AuthorEntity = null;
		}
		
		private void attach_ActParticipations(ActParticipation entity)
		{
			this.SendPropertyChanging();
			entity.Entity = this;
		}
		
		private void detach_ActParticipations(ActParticipation entity)
		{
			this.SendPropertyChanging();
			entity.Entity = null;
		}
		
		private void attach_EntityAddresses(EntityAddress entity)
		{
			this.SendPropertyChanging();
			entity.Entity = this;
		}
		
		private void detach_EntityAddresses(EntityAddress entity)
		{
			this.SendPropertyChanging();
			entity.Entity = null;
		}
		
		private void attach_EntityAssociationsSourceEntityId(EntityAssociation entity)
		{
			this.SendPropertyChanging();
			entity.SourceEntity = this;
		}
		
		private void detach_EntityAssociationsSourceEntityId(EntityAssociation entity)
		{
			this.SendPropertyChanging();
			entity.SourceEntity = null;
		}
		
		private void attach_EntityAssociationsTargetEntityId(EntityAssociation entity)
		{
			this.SendPropertyChanging();
			entity.TargetEntity = this;
		}
		
		private void detach_EntityAssociationsTargetEntityId(EntityAssociation entity)
		{
			this.SendPropertyChanging();
			entity.TargetEntity = null;
		}
		
		private void attach_EntityExtensions(EntityExtension entity)
		{
			this.SendPropertyChanging();
			entity.Entity = this;
		}
		
		private void detach_EntityExtensions(EntityExtension entity)
		{
			this.SendPropertyChanging();
			entity.Entity = null;
		}
		
		private void attach_EntityIdentifiers(EntityIdentifier entity)
		{
			this.SendPropertyChanging();
			entity.Entity = this;
		}
		
		private void detach_EntityIdentifiers(EntityIdentifier entity)
		{
			this.SendPropertyChanging();
			entity.Entity = null;
		}
		
		private void attach_EntityNames(EntityName entity)
		{
			this.SendPropertyChanging();
			entity.Entity = this;
		}
		
		private void detach_EntityNames(EntityName entity)
		{
			this.SendPropertyChanging();
			entity.Entity = null;
		}
		
		private void attach_EntityNotesAuthorEntityId(EntityNote entity)
		{
			this.SendPropertyChanging();
			entity.AuthorEntity = this;
		}
		
		private void detach_EntityNotesAuthorEntityId(EntityNote entity)
		{
			this.SendPropertyChanging();
			entity.AuthorEntity = null;
		}
		
		private void attach_EntityNotes(EntityNote entity)
		{
			this.SendPropertyChanging();
			entity.Entity = this;
		}
		
		private void detach_EntityNotes(EntityNote entity)
		{
			this.SendPropertyChanging();
			entity.Entity = null;
		}
		
		private void attach_EntityTags(EntityTag entity)
		{
			this.SendPropertyChanging();
			entity.Entity = this;
		}
		
		private void detach_EntityTags(EntityTag entity)
		{
			this.SendPropertyChanging();
			entity.Entity = null;
		}
		
		private void attach_EntityTelecomAddresses(EntityTelecomAddress entity)
		{
			this.SendPropertyChanging();
			entity.Entity = this;
		}
		
		private void detach_EntityTelecomAddresses(EntityTelecomAddress entity)
		{
			this.SendPropertyChanging();
			entity.Entity = null;
		}
		
		private void attach_EntityVersions(EntityVersion entity)
		{
			this.SendPropertyChanging();
			entity.Entity = this;
		}
		
		private void detach_EntityVersions(EntityVersion entity)
		{
			this.SendPropertyChanging();
			entity.Entity = null;
		}
		
		private void attach_PersonLanguageCommunicationsPersonEntityId(PersonLanguageCommunication entity)
		{
			this.SendPropertyChanging();
			entity.PersonEntity = this;
		}
		
		private void detach_PersonLanguageCommunicationsPersonEntityId(PersonLanguageCommunication entity)
		{
			this.SendPropertyChanging();
			entity.PersonEntity = null;
		}
		
		private void attach_PlaceServicesPlaceEntityId(PlaceService entity)
		{
			this.SendPropertyChanging();
			entity.PlaceEntity = this;
		}
		
		private void detach_PlaceServicesPlaceEntityId(PlaceService entity)
		{
			this.SendPropertyChanging();
			entity.PlaceEntity = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.EntityAddress")]
	public partial class EntityAddress : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _EntityAddressId;
		
		private System.Guid _EntityId;
		
		private decimal _EffectiveVersionSequenceId;
		
		private System.Nullable<decimal> _ObsoleteVersionSequenceId;
		
		private System.Guid _AddressUseConceptId;
		
		private EntitySet<EntityAddressComponent> _EntityAddressComponents;
		
		private EntityRef<Concept> _AddressUseConcept;
		
		private EntityRef<Entity> _Entity;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnEntityAddressIdChanging(System.Guid value);
    partial void OnEntityAddressIdChanged();
    partial void OnEntityIdChanging(System.Guid value);
    partial void OnEntityIdChanged();
    partial void OnEffectiveVersionSequenceIdChanging(decimal value);
    partial void OnEffectiveVersionSequenceIdChanged();
    partial void OnObsoleteVersionSequenceIdChanging(System.Nullable<decimal> value);
    partial void OnObsoleteVersionSequenceIdChanged();
    partial void OnAddressUseConceptIdChanging(System.Guid value);
    partial void OnAddressUseConceptIdChanged();
    #endregion
		
		public EntityAddress()
		{
			this._EntityAddressComponents = new EntitySet<EntityAddressComponent>(new Action<EntityAddressComponent>(this.attach_EntityAddressComponents), new Action<EntityAddressComponent>(this.detach_EntityAddressComponents));
			this._AddressUseConcept = default(EntityRef<Concept>);
			this._Entity = default(EntityRef<Entity>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EntityAddressId", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid EntityAddressId
		{
			get
			{
				return this._EntityAddressId;
			}
			set
			{
				if ((this._EntityAddressId != value))
				{
					this.OnEntityAddressIdChanging(value);
					this.SendPropertyChanging();
					this._EntityAddressId = value;
					this.SendPropertyChanged("EntityAddressId");
					this.OnEntityAddressIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EntityId", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid EntityId
		{
			get
			{
				return this._EntityId;
			}
			set
			{
				if ((this._EntityId != value))
				{
					if (this._Entity.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnEntityIdChanging(value);
					this.SendPropertyChanging();
					this._EntityId = value;
					this.SendPropertyChanged("EntityId");
					this.OnEntityIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EffectiveVersionSequenceId", DbType="Decimal(20,0) NOT NULL")]
		public decimal EffectiveVersionSequenceId
		{
			get
			{
				return this._EffectiveVersionSequenceId;
			}
			set
			{
				if ((this._EffectiveVersionSequenceId != value))
				{
					this.OnEffectiveVersionSequenceIdChanging(value);
					this.SendPropertyChanging();
					this._EffectiveVersionSequenceId = value;
					this.SendPropertyChanged("EffectiveVersionSequenceId");
					this.OnEffectiveVersionSequenceIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ObsoleteVersionSequenceId", DbType="Decimal(20,0)")]
		public System.Nullable<decimal> ObsoleteVersionSequenceId
		{
			get
			{
				return this._ObsoleteVersionSequenceId;
			}
			set
			{
				if ((this._ObsoleteVersionSequenceId != value))
				{
					this.OnObsoleteVersionSequenceIdChanging(value);
					this.SendPropertyChanging();
					this._ObsoleteVersionSequenceId = value;
					this.SendPropertyChanged("ObsoleteVersionSequenceId");
					this.OnObsoleteVersionSequenceIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AddressUseConceptId", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid AddressUseConceptId
		{
			get
			{
				return this._AddressUseConceptId;
			}
			set
			{
				if ((this._AddressUseConceptId != value))
				{
					if (this._AddressUseConcept.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnAddressUseConceptIdChanging(value);
					this.SendPropertyChanging();
					this._AddressUseConceptId = value;
					this.SendPropertyChanged("AddressUseConceptId");
					this.OnAddressUseConceptIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="EntityAddress_EntityAddressComponent", Storage="_EntityAddressComponents", ThisKey="EntityAddressId", OtherKey="EntityAddressId")]
		public EntitySet<EntityAddressComponent> EntityAddressComponents
		{
			get
			{
				return this._EntityAddressComponents;
			}
			set
			{
				this._EntityAddressComponents.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Concept_EntityAddress", Storage="_AddressUseConcept", ThisKey="AddressUseConceptId", OtherKey="ConceptId", IsForeignKey=true)]
		public Concept AddressUseConcept
		{
			get
			{
				return this._AddressUseConcept.Entity;
			}
			set
			{
				Concept previousValue = this._AddressUseConcept.Entity;
				if (((previousValue != value) 
							|| (this._AddressUseConcept.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._AddressUseConcept.Entity = null;
						previousValue.EntityAddressesAddressUseConceptId.Remove(this);
					}
					this._AddressUseConcept.Entity = value;
					if ((value != null))
					{
						value.EntityAddressesAddressUseConceptId.Add(this);
						this._AddressUseConceptId = value.ConceptId;
					}
					else
					{
						this._AddressUseConceptId = default(System.Guid);
					}
					this.SendPropertyChanged("AddressUseConcept");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Entity_EntityAddress", Storage="_Entity", ThisKey="EntityId", OtherKey="EntityId", IsForeignKey=true)]
		public Entity Entity
		{
			get
			{
				return this._Entity.Entity;
			}
			set
			{
				Entity previousValue = this._Entity.Entity;
				if (((previousValue != value) 
							|| (this._Entity.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Entity.Entity = null;
						previousValue.EntityAddresses.Remove(this);
					}
					this._Entity.Entity = value;
					if ((value != null))
					{
						value.EntityAddresses.Add(this);
						this._EntityId = value.EntityId;
					}
					else
					{
						this._EntityId = default(System.Guid);
					}
					this.SendPropertyChanged("Entity");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_EntityAddressComponents(EntityAddressComponent entity)
		{
			this.SendPropertyChanging();
			entity.EntityAddress = this;
		}
		
		private void detach_EntityAddressComponents(EntityAddressComponent entity)
		{
			this.SendPropertyChanging();
			entity.EntityAddress = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.EntityAddressComponent")]
	public partial class EntityAddressComponent : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _EntityAddressComponentId;
		
		private System.Nullable<System.Guid> _ComponentTypeConceptId;
		
		private System.Guid _ValueId;
		
		private System.Guid _EntityAddressId;
		
		private EntityRef<EntityAddress> _EntityAddress;
		
		private EntityRef<Concept> _ComponentTypeConcept;
		
		private EntityRef<EntityAddressComponentValue> _EntityAddressComponentValue;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnEntityAddressComponentIdChanging(System.Guid value);
    partial void OnEntityAddressComponentIdChanged();
    partial void OnComponentTypeConceptIdChanging(System.Nullable<System.Guid> value);
    partial void OnComponentTypeConceptIdChanged();
    partial void OnValueIdChanging(System.Guid value);
    partial void OnValueIdChanged();
    partial void OnEntityAddressIdChanging(System.Guid value);
    partial void OnEntityAddressIdChanged();
    #endregion
		
		public EntityAddressComponent()
		{
			this._EntityAddress = default(EntityRef<EntityAddress>);
			this._ComponentTypeConcept = default(EntityRef<Concept>);
			this._EntityAddressComponentValue = default(EntityRef<EntityAddressComponentValue>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EntityAddressComponentId", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid EntityAddressComponentId
		{
			get
			{
				return this._EntityAddressComponentId;
			}
			set
			{
				if ((this._EntityAddressComponentId != value))
				{
					this.OnEntityAddressComponentIdChanging(value);
					this.SendPropertyChanging();
					this._EntityAddressComponentId = value;
					this.SendPropertyChanged("EntityAddressComponentId");
					this.OnEntityAddressComponentIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ComponentTypeConceptId", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> ComponentTypeConceptId
		{
			get
			{
				return this._ComponentTypeConceptId;
			}
			set
			{
				if ((this._ComponentTypeConceptId != value))
				{
					if (this._ComponentTypeConcept.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnComponentTypeConceptIdChanging(value);
					this.SendPropertyChanging();
					this._ComponentTypeConceptId = value;
					this.SendPropertyChanged("ComponentTypeConceptId");
					this.OnComponentTypeConceptIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ValueId", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid ValueId
		{
			get
			{
				return this._ValueId;
			}
			set
			{
				if ((this._ValueId != value))
				{
					if (this._EntityAddressComponentValue.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnValueIdChanging(value);
					this.SendPropertyChanging();
					this._ValueId = value;
					this.SendPropertyChanged("ValueId");
					this.OnValueIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EntityAddressId", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid EntityAddressId
		{
			get
			{
				return this._EntityAddressId;
			}
			set
			{
				if ((this._EntityAddressId != value))
				{
					if (this._EntityAddress.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnEntityAddressIdChanging(value);
					this.SendPropertyChanging();
					this._EntityAddressId = value;
					this.SendPropertyChanged("EntityAddressId");
					this.OnEntityAddressIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="EntityAddress_EntityAddressComponent", Storage="_EntityAddress", ThisKey="EntityAddressId", OtherKey="EntityAddressId", IsForeignKey=true)]
		public EntityAddress EntityAddress
		{
			get
			{
				return this._EntityAddress.Entity;
			}
			set
			{
				EntityAddress previousValue = this._EntityAddress.Entity;
				if (((previousValue != value) 
							|| (this._EntityAddress.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._EntityAddress.Entity = null;
						previousValue.EntityAddressComponents.Remove(this);
					}
					this._EntityAddress.Entity = value;
					if ((value != null))
					{
						value.EntityAddressComponents.Add(this);
						this._EntityAddressId = value.EntityAddressId;
					}
					else
					{
						this._EntityAddressId = default(System.Guid);
					}
					this.SendPropertyChanged("EntityAddress");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Concept_EntityAddressComponent", Storage="_ComponentTypeConcept", ThisKey="ComponentTypeConceptId", OtherKey="ConceptId", IsForeignKey=true)]
		public Concept ComponentTypeConcept
		{
			get
			{
				return this._ComponentTypeConcept.Entity;
			}
			set
			{
				Concept previousValue = this._ComponentTypeConcept.Entity;
				if (((previousValue != value) 
							|| (this._ComponentTypeConcept.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ComponentTypeConcept.Entity = null;
						previousValue.EntityAddressComponentsComponentTypeConceptId.Remove(this);
					}
					this._ComponentTypeConcept.Entity = value;
					if ((value != null))
					{
						value.EntityAddressComponentsComponentTypeConceptId.Add(this);
						this._ComponentTypeConceptId = value.ConceptId;
					}
					else
					{
						this._ComponentTypeConceptId = default(Nullable<System.Guid>);
					}
					this.SendPropertyChanged("ComponentTypeConcept");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="EntityAddressComponentValue_EntityAddressComponent", Storage="_EntityAddressComponentValue", ThisKey="ValueId", OtherKey="ValueId", IsForeignKey=true)]
		public EntityAddressComponentValue EntityAddressComponentValue
		{
			get
			{
				return this._EntityAddressComponentValue.Entity;
			}
			set
			{
				EntityAddressComponentValue previousValue = this._EntityAddressComponentValue.Entity;
				if (((previousValue != value) 
							|| (this._EntityAddressComponentValue.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._EntityAddressComponentValue.Entity = null;
						previousValue.EntityAddressComponents.Remove(this);
					}
					this._EntityAddressComponentValue.Entity = value;
					if ((value != null))
					{
						value.EntityAddressComponents.Add(this);
						this._ValueId = value.ValueId;
					}
					else
					{
						this._ValueId = default(System.Guid);
					}
					this.SendPropertyChanged("EntityAddressComponentValue");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.EntityAddressComponentValue")]
	public partial class EntityAddressComponentValue : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _ValueId;
		
		private string _Value;
		
		private EntitySet<EntityAddressComponent> _EntityAddressComponents;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnValueIdChanging(System.Guid value);
    partial void OnValueIdChanged();
    partial void OnValueChanging(string value);
    partial void OnValueChanged();
    #endregion
		
		public EntityAddressComponentValue()
		{
			this._EntityAddressComponents = new EntitySet<EntityAddressComponent>(new Action<EntityAddressComponent>(this.attach_EntityAddressComponents), new Action<EntityAddressComponent>(this.detach_EntityAddressComponents));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ValueId", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid ValueId
		{
			get
			{
				return this._ValueId;
			}
			set
			{
				if ((this._ValueId != value))
				{
					this.OnValueIdChanging(value);
					this.SendPropertyChanging();
					this._ValueId = value;
					this.SendPropertyChanged("ValueId");
					this.OnValueIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Value", DbType="NVarChar(256) NOT NULL", CanBeNull=false)]
		public string Value
		{
			get
			{
				return this._Value;
			}
			set
			{
				if ((this._Value != value))
				{
					this.OnValueChanging(value);
					this.SendPropertyChanging();
					this._Value = value;
					this.SendPropertyChanged("Value");
					this.OnValueChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="EntityAddressComponentValue_EntityAddressComponent", Storage="_EntityAddressComponents", ThisKey="ValueId", OtherKey="ValueId")]
		public EntitySet<EntityAddressComponent> EntityAddressComponents
		{
			get
			{
				return this._EntityAddressComponents;
			}
			set
			{
				this._EntityAddressComponents.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_EntityAddressComponents(EntityAddressComponent entity)
		{
			this.SendPropertyChanging();
			entity.EntityAddressComponentValue = this;
		}
		
		private void detach_EntityAddressComponents(EntityAddressComponent entity)
		{
			this.SendPropertyChanging();
			entity.EntityAddressComponentValue = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.EntityAssociation")]
	public partial class EntityAssociation : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _EntityAssociationId;
		
		private System.Guid _SourceEntityId;
		
		private System.Guid _TargetEntityId;
		
		private decimal _EffectiveVersionSequenceId;
		
		private System.Nullable<decimal> _ObsoleteVersionSequenceId;
		
		private System.Nullable<System.Guid> _AssociationTypeConceptId;
		
		private EntityRef<QuantifiedEntityAssociation> _QuantifiedEntityAssociation;
		
		private EntityRef<Concept> _AssociationTypeConcept;
		
		private EntityRef<Entity> _SourceEntity;
		
		private EntityRef<Entity> _TargetEntity;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnEntityAssociationIdChanging(System.Guid value);
    partial void OnEntityAssociationIdChanged();
    partial void OnSourceEntityIdChanging(System.Guid value);
    partial void OnSourceEntityIdChanged();
    partial void OnTargetEntityIdChanging(System.Guid value);
    partial void OnTargetEntityIdChanged();
    partial void OnEffectiveVersionSequenceIdChanging(decimal value);
    partial void OnEffectiveVersionSequenceIdChanged();
    partial void OnObsoleteVersionSequenceIdChanging(System.Nullable<decimal> value);
    partial void OnObsoleteVersionSequenceIdChanged();
    partial void OnAssociationTypeConceptIdChanging(System.Nullable<System.Guid> value);
    partial void OnAssociationTypeConceptIdChanged();
    #endregion
		
		public EntityAssociation()
		{
			this._QuantifiedEntityAssociation = default(EntityRef<QuantifiedEntityAssociation>);
			this._AssociationTypeConcept = default(EntityRef<Concept>);
			this._SourceEntity = default(EntityRef<Entity>);
			this._TargetEntity = default(EntityRef<Entity>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EntityAssociationId", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid EntityAssociationId
		{
			get
			{
				return this._EntityAssociationId;
			}
			set
			{
				if ((this._EntityAssociationId != value))
				{
					this.OnEntityAssociationIdChanging(value);
					this.SendPropertyChanging();
					this._EntityAssociationId = value;
					this.SendPropertyChanged("EntityAssociationId");
					this.OnEntityAssociationIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SourceEntityId", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid SourceEntityId
		{
			get
			{
				return this._SourceEntityId;
			}
			set
			{
				if ((this._SourceEntityId != value))
				{
					if (this._SourceEntity.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSourceEntityIdChanging(value);
					this.SendPropertyChanging();
					this._SourceEntityId = value;
					this.SendPropertyChanged("SourceEntityId");
					this.OnSourceEntityIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TargetEntityId", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid TargetEntityId
		{
			get
			{
				return this._TargetEntityId;
			}
			set
			{
				if ((this._TargetEntityId != value))
				{
					if (this._TargetEntity.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnTargetEntityIdChanging(value);
					this.SendPropertyChanging();
					this._TargetEntityId = value;
					this.SendPropertyChanged("TargetEntityId");
					this.OnTargetEntityIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EffectiveVersionSequenceId", DbType="Decimal(20,0) NOT NULL")]
		public decimal EffectiveVersionSequenceId
		{
			get
			{
				return this._EffectiveVersionSequenceId;
			}
			set
			{
				if ((this._EffectiveVersionSequenceId != value))
				{
					this.OnEffectiveVersionSequenceIdChanging(value);
					this.SendPropertyChanging();
					this._EffectiveVersionSequenceId = value;
					this.SendPropertyChanged("EffectiveVersionSequenceId");
					this.OnEffectiveVersionSequenceIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ObsoleteVersionSequenceId", DbType="Decimal(20,0)")]
		public System.Nullable<decimal> ObsoleteVersionSequenceId
		{
			get
			{
				return this._ObsoleteVersionSequenceId;
			}
			set
			{
				if ((this._ObsoleteVersionSequenceId != value))
				{
					this.OnObsoleteVersionSequenceIdChanging(value);
					this.SendPropertyChanging();
					this._ObsoleteVersionSequenceId = value;
					this.SendPropertyChanged("ObsoleteVersionSequenceId");
					this.OnObsoleteVersionSequenceIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AssociationTypeConceptId", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> AssociationTypeConceptId
		{
			get
			{
				return this._AssociationTypeConceptId;
			}
			set
			{
				if ((this._AssociationTypeConceptId != value))
				{
					if (this._AssociationTypeConcept.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnAssociationTypeConceptIdChanging(value);
					this.SendPropertyChanging();
					this._AssociationTypeConceptId = value;
					this.SendPropertyChanged("AssociationTypeConceptId");
					this.OnAssociationTypeConceptIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="EntityAssociation_QuantifiedEntityAssociation", Storage="_QuantifiedEntityAssociation", ThisKey="EntityAssociationId", OtherKey="EntityAssociationId", IsUnique=true, IsForeignKey=false)]
		public QuantifiedEntityAssociation QuantifiedEntityAssociation
		{
			get
			{
				return this._QuantifiedEntityAssociation.Entity;
			}
			set
			{
				QuantifiedEntityAssociation previousValue = this._QuantifiedEntityAssociation.Entity;
				if (((previousValue != value) 
							|| (this._QuantifiedEntityAssociation.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._QuantifiedEntityAssociation.Entity = null;
						previousValue.EntityAssociation = null;
					}
					this._QuantifiedEntityAssociation.Entity = value;
					if ((value != null))
					{
						value.EntityAssociation = this;
					}
					this.SendPropertyChanged("QuantifiedEntityAssociation");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Concept_EntityAssociation", Storage="_AssociationTypeConcept", ThisKey="AssociationTypeConceptId", OtherKey="ConceptId", IsForeignKey=true)]
		public Concept AssociationTypeConcept
		{
			get
			{
				return this._AssociationTypeConcept.Entity;
			}
			set
			{
				Concept previousValue = this._AssociationTypeConcept.Entity;
				if (((previousValue != value) 
							|| (this._AssociationTypeConcept.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._AssociationTypeConcept.Entity = null;
						previousValue.EntityAssociationsAssociationTypeConceptId.Remove(this);
					}
					this._AssociationTypeConcept.Entity = value;
					if ((value != null))
					{
						value.EntityAssociationsAssociationTypeConceptId.Add(this);
						this._AssociationTypeConceptId = value.ConceptId;
					}
					else
					{
						this._AssociationTypeConceptId = default(Nullable<System.Guid>);
					}
					this.SendPropertyChanged("AssociationTypeConcept");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Entity_EntityAssociation", Storage="_SourceEntity", ThisKey="SourceEntityId", OtherKey="EntityId", IsForeignKey=true)]
		public Entity SourceEntity
		{
			get
			{
				return this._SourceEntity.Entity;
			}
			set
			{
				Entity previousValue = this._SourceEntity.Entity;
				if (((previousValue != value) 
							|| (this._SourceEntity.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._SourceEntity.Entity = null;
						previousValue.EntityAssociationsSourceEntityId.Remove(this);
					}
					this._SourceEntity.Entity = value;
					if ((value != null))
					{
						value.EntityAssociationsSourceEntityId.Add(this);
						this._SourceEntityId = value.EntityId;
					}
					else
					{
						this._SourceEntityId = default(System.Guid);
					}
					this.SendPropertyChanged("SourceEntity");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Entity_EntityAssociation1", Storage="_TargetEntity", ThisKey="TargetEntityId", OtherKey="EntityId", IsForeignKey=true)]
		public Entity TargetEntity
		{
			get
			{
				return this._TargetEntity.Entity;
			}
			set
			{
				Entity previousValue = this._TargetEntity.Entity;
				if (((previousValue != value) 
							|| (this._TargetEntity.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._TargetEntity.Entity = null;
						previousValue.EntityAssociationsTargetEntityId.Remove(this);
					}
					this._TargetEntity.Entity = value;
					if ((value != null))
					{
						value.EntityAssociationsTargetEntityId.Add(this);
						this._TargetEntityId = value.EntityId;
					}
					else
					{
						this._TargetEntityId = default(System.Guid);
					}
					this.SendPropertyChanged("TargetEntity");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.EntityExtension")]
	public partial class EntityExtension : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _EntityExtensionId;
		
		private System.Guid _ExtensionTypeId;
		
		private System.Data.Linq.Binary _ExtensionValue;
		
		private string _ExtensionDisplay;
		
		private System.Guid _EntityId;
		
		private decimal _EffectiveVersionSequenceId;
		
		private System.Nullable<decimal> _ObsoleteVersionSequenceId;
		
		private EntityRef<Entity> _Entity;
		
		private EntityRef<ExtensionType> _ExtensionType;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnEntityExtensionIdChanging(System.Guid value);
    partial void OnEntityExtensionIdChanged();
    partial void OnExtensionTypeIdChanging(System.Guid value);
    partial void OnExtensionTypeIdChanged();
    partial void OnExtensionValueChanging(System.Data.Linq.Binary value);
    partial void OnExtensionValueChanged();
    partial void OnExtensionDisplayChanging(string value);
    partial void OnExtensionDisplayChanged();
    partial void OnEntityIdChanging(System.Guid value);
    partial void OnEntityIdChanged();
    partial void OnEffectiveVersionSequenceIdChanging(decimal value);
    partial void OnEffectiveVersionSequenceIdChanged();
    partial void OnObsoleteVersionSequenceIdChanging(System.Nullable<decimal> value);
    partial void OnObsoleteVersionSequenceIdChanged();
    #endregion
		
		public EntityExtension()
		{
			this._Entity = default(EntityRef<Entity>);
			this._ExtensionType = default(EntityRef<ExtensionType>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EntityExtensionId", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid EntityExtensionId
		{
			get
			{
				return this._EntityExtensionId;
			}
			set
			{
				if ((this._EntityExtensionId != value))
				{
					this.OnEntityExtensionIdChanging(value);
					this.SendPropertyChanging();
					this._EntityExtensionId = value;
					this.SendPropertyChanged("EntityExtensionId");
					this.OnEntityExtensionIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ExtensionTypeId", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid ExtensionTypeId
		{
			get
			{
				return this._ExtensionTypeId;
			}
			set
			{
				if ((this._ExtensionTypeId != value))
				{
					if (this._ExtensionType.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnExtensionTypeIdChanging(value);
					this.SendPropertyChanging();
					this._ExtensionTypeId = value;
					this.SendPropertyChanged("ExtensionTypeId");
					this.OnExtensionTypeIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ExtensionValue", DbType="VarBinary(MAX)", UpdateCheck=UpdateCheck.Never)]
		public System.Data.Linq.Binary ExtensionValue
		{
			get
			{
				return this._ExtensionValue;
			}
			set
			{
				if ((this._ExtensionValue != value))
				{
					this.OnExtensionValueChanging(value);
					this.SendPropertyChanging();
					this._ExtensionValue = value;
					this.SendPropertyChanged("ExtensionValue");
					this.OnExtensionValueChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ExtensionDisplay", DbType="NVarChar(64)")]
		public string ExtensionDisplay
		{
			get
			{
				return this._ExtensionDisplay;
			}
			set
			{
				if ((this._ExtensionDisplay != value))
				{
					this.OnExtensionDisplayChanging(value);
					this.SendPropertyChanging();
					this._ExtensionDisplay = value;
					this.SendPropertyChanged("ExtensionDisplay");
					this.OnExtensionDisplayChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EntityId", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid EntityId
		{
			get
			{
				return this._EntityId;
			}
			set
			{
				if ((this._EntityId != value))
				{
					if (this._Entity.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnEntityIdChanging(value);
					this.SendPropertyChanging();
					this._EntityId = value;
					this.SendPropertyChanged("EntityId");
					this.OnEntityIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EffectiveVersionSequenceId", DbType="Decimal(20,0) NOT NULL")]
		public decimal EffectiveVersionSequenceId
		{
			get
			{
				return this._EffectiveVersionSequenceId;
			}
			set
			{
				if ((this._EffectiveVersionSequenceId != value))
				{
					this.OnEffectiveVersionSequenceIdChanging(value);
					this.SendPropertyChanging();
					this._EffectiveVersionSequenceId = value;
					this.SendPropertyChanged("EffectiveVersionSequenceId");
					this.OnEffectiveVersionSequenceIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ObsoleteVersionSequenceId", DbType="Decimal(20,0)")]
		public System.Nullable<decimal> ObsoleteVersionSequenceId
		{
			get
			{
				return this._ObsoleteVersionSequenceId;
			}
			set
			{
				if ((this._ObsoleteVersionSequenceId != value))
				{
					this.OnObsoleteVersionSequenceIdChanging(value);
					this.SendPropertyChanging();
					this._ObsoleteVersionSequenceId = value;
					this.SendPropertyChanged("ObsoleteVersionSequenceId");
					this.OnObsoleteVersionSequenceIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Entity_EntityExtension", Storage="_Entity", ThisKey="EntityId", OtherKey="EntityId", IsForeignKey=true)]
		public Entity Entity
		{
			get
			{
				return this._Entity.Entity;
			}
			set
			{
				Entity previousValue = this._Entity.Entity;
				if (((previousValue != value) 
							|| (this._Entity.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Entity.Entity = null;
						previousValue.EntityExtensions.Remove(this);
					}
					this._Entity.Entity = value;
					if ((value != null))
					{
						value.EntityExtensions.Add(this);
						this._EntityId = value.EntityId;
					}
					else
					{
						this._EntityId = default(System.Guid);
					}
					this.SendPropertyChanged("Entity");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ExtensionType_EntityExtension", Storage="_ExtensionType", ThisKey="ExtensionTypeId", OtherKey="ExtensionTypeId", IsForeignKey=true)]
		public ExtensionType ExtensionType
		{
			get
			{
				return this._ExtensionType.Entity;
			}
			set
			{
				ExtensionType previousValue = this._ExtensionType.Entity;
				if (((previousValue != value) 
							|| (this._ExtensionType.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ExtensionType.Entity = null;
						previousValue.EntityExtensions.Remove(this);
					}
					this._ExtensionType.Entity = value;
					if ((value != null))
					{
						value.EntityExtensions.Add(this);
						this._ExtensionTypeId = value.ExtensionTypeId;
					}
					else
					{
						this._ExtensionTypeId = default(System.Guid);
					}
					this.SendPropertyChanged("ExtensionType");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.EntityIdentifier")]
	public partial class EntityIdentifier : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _EntityIdentifierId;
		
		private System.Guid _EntityId;
		
		private System.Nullable<System.Guid> _IdentifierTypeId;
		
		private decimal _EffectiveVersionSequenceId;
		
		private System.Nullable<decimal> _ObsoleteVersionSequenceId;
		
		private System.Guid _AssigningAuthorityId;
		
		private string _IdentifierValue;
		
		private EntityRef<AssigningAuthority> _AssigningAuthority;
		
		private EntityRef<Entity> _Entity;
		
		private EntityRef<IdentifierType> _IdentifierType;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnEntityIdentifierIdChanging(System.Guid value);
    partial void OnEntityIdentifierIdChanged();
    partial void OnEntityIdChanging(System.Guid value);
    partial void OnEntityIdChanged();
    partial void OnIdentifierTypeIdChanging(System.Nullable<System.Guid> value);
    partial void OnIdentifierTypeIdChanged();
    partial void OnEffectiveVersionSequenceIdChanging(decimal value);
    partial void OnEffectiveVersionSequenceIdChanged();
    partial void OnObsoleteVersionSequenceIdChanging(System.Nullable<decimal> value);
    partial void OnObsoleteVersionSequenceIdChanged();
    partial void OnAssigningAuthorityIdChanging(System.Guid value);
    partial void OnAssigningAuthorityIdChanged();
    partial void OnIdentifierValueChanging(string value);
    partial void OnIdentifierValueChanged();
    #endregion
		
		public EntityIdentifier()
		{
			this._AssigningAuthority = default(EntityRef<AssigningAuthority>);
			this._Entity = default(EntityRef<Entity>);
			this._IdentifierType = default(EntityRef<IdentifierType>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EntityIdentifierId", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid EntityIdentifierId
		{
			get
			{
				return this._EntityIdentifierId;
			}
			set
			{
				if ((this._EntityIdentifierId != value))
				{
					this.OnEntityIdentifierIdChanging(value);
					this.SendPropertyChanging();
					this._EntityIdentifierId = value;
					this.SendPropertyChanged("EntityIdentifierId");
					this.OnEntityIdentifierIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EntityId", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid EntityId
		{
			get
			{
				return this._EntityId;
			}
			set
			{
				if ((this._EntityId != value))
				{
					if (this._Entity.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnEntityIdChanging(value);
					this.SendPropertyChanging();
					this._EntityId = value;
					this.SendPropertyChanged("EntityId");
					this.OnEntityIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IdentifierTypeId", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> IdentifierTypeId
		{
			get
			{
				return this._IdentifierTypeId;
			}
			set
			{
				if ((this._IdentifierTypeId != value))
				{
					if (this._IdentifierType.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIdentifierTypeIdChanging(value);
					this.SendPropertyChanging();
					this._IdentifierTypeId = value;
					this.SendPropertyChanged("IdentifierTypeId");
					this.OnIdentifierTypeIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EffectiveVersionSequenceId", DbType="Decimal(20,0) NOT NULL")]
		public decimal EffectiveVersionSequenceId
		{
			get
			{
				return this._EffectiveVersionSequenceId;
			}
			set
			{
				if ((this._EffectiveVersionSequenceId != value))
				{
					this.OnEffectiveVersionSequenceIdChanging(value);
					this.SendPropertyChanging();
					this._EffectiveVersionSequenceId = value;
					this.SendPropertyChanged("EffectiveVersionSequenceId");
					this.OnEffectiveVersionSequenceIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ObsoleteVersionSequenceId", DbType="Decimal(20,0)")]
		public System.Nullable<decimal> ObsoleteVersionSequenceId
		{
			get
			{
				return this._ObsoleteVersionSequenceId;
			}
			set
			{
				if ((this._ObsoleteVersionSequenceId != value))
				{
					this.OnObsoleteVersionSequenceIdChanging(value);
					this.SendPropertyChanging();
					this._ObsoleteVersionSequenceId = value;
					this.SendPropertyChanged("ObsoleteVersionSequenceId");
					this.OnObsoleteVersionSequenceIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AssigningAuthorityId", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid AssigningAuthorityId
		{
			get
			{
				return this._AssigningAuthorityId;
			}
			set
			{
				if ((this._AssigningAuthorityId != value))
				{
					if (this._AssigningAuthority.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnAssigningAuthorityIdChanging(value);
					this.SendPropertyChanging();
					this._AssigningAuthorityId = value;
					this.SendPropertyChanged("AssigningAuthorityId");
					this.OnAssigningAuthorityIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IdentifierValue", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string IdentifierValue
		{
			get
			{
				return this._IdentifierValue;
			}
			set
			{
				if ((this._IdentifierValue != value))
				{
					this.OnIdentifierValueChanging(value);
					this.SendPropertyChanging();
					this._IdentifierValue = value;
					this.SendPropertyChanged("IdentifierValue");
					this.OnIdentifierValueChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="AssigningAuthority_EntityIdentifier", Storage="_AssigningAuthority", ThisKey="AssigningAuthorityId", OtherKey="AssigningAuthorityId", IsForeignKey=true)]
		public AssigningAuthority AssigningAuthority
		{
			get
			{
				return this._AssigningAuthority.Entity;
			}
			set
			{
				AssigningAuthority previousValue = this._AssigningAuthority.Entity;
				if (((previousValue != value) 
							|| (this._AssigningAuthority.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._AssigningAuthority.Entity = null;
						previousValue.EntityIdentifiers.Remove(this);
					}
					this._AssigningAuthority.Entity = value;
					if ((value != null))
					{
						value.EntityIdentifiers.Add(this);
						this._AssigningAuthorityId = value.AssigningAuthorityId;
					}
					else
					{
						this._AssigningAuthorityId = default(System.Guid);
					}
					this.SendPropertyChanged("AssigningAuthority");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Entity_EntityIdentifier", Storage="_Entity", ThisKey="EntityId", OtherKey="EntityId", IsForeignKey=true)]
		public Entity Entity
		{
			get
			{
				return this._Entity.Entity;
			}
			set
			{
				Entity previousValue = this._Entity.Entity;
				if (((previousValue != value) 
							|| (this._Entity.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Entity.Entity = null;
						previousValue.EntityIdentifiers.Remove(this);
					}
					this._Entity.Entity = value;
					if ((value != null))
					{
						value.EntityIdentifiers.Add(this);
						this._EntityId = value.EntityId;
					}
					else
					{
						this._EntityId = default(System.Guid);
					}
					this.SendPropertyChanged("Entity");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="IdentifierType_EntityIdentifier", Storage="_IdentifierType", ThisKey="IdentifierTypeId", OtherKey="IdentifierTypeId", IsForeignKey=true)]
		public IdentifierType IdentifierType
		{
			get
			{
				return this._IdentifierType.Entity;
			}
			set
			{
				IdentifierType previousValue = this._IdentifierType.Entity;
				if (((previousValue != value) 
							|| (this._IdentifierType.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._IdentifierType.Entity = null;
						previousValue.EntityIdentifiers.Remove(this);
					}
					this._IdentifierType.Entity = value;
					if ((value != null))
					{
						value.EntityIdentifiers.Add(this);
						this._IdentifierTypeId = value.IdentifierTypeId;
					}
					else
					{
						this._IdentifierTypeId = default(Nullable<System.Guid>);
					}
					this.SendPropertyChanged("IdentifierType");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.EntityName")]
	public partial class EntityName : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _EntityNameId;
		
		private System.Guid _EntityId;
		
		private decimal _EffectiveVersionSequenceId;
		
		private System.Nullable<decimal> _ObsoleteVersionSequenceId;
		
		private System.Nullable<System.Guid> _NameUseConceptId;
		
		private EntitySet<EntityNameComponent> _EntityNameComponents;
		
		private EntityRef<Entity> _Entity;
		
		private EntityRef<Concept> _NameUseConcept;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnEntityNameIdChanging(System.Guid value);
    partial void OnEntityNameIdChanged();
    partial void OnEntityIdChanging(System.Guid value);
    partial void OnEntityIdChanged();
    partial void OnEffectiveVersionSequenceIdChanging(decimal value);
    partial void OnEffectiveVersionSequenceIdChanged();
    partial void OnObsoleteVersionSequenceIdChanging(System.Nullable<decimal> value);
    partial void OnObsoleteVersionSequenceIdChanged();
    partial void OnNameUseConceptIdChanging(System.Nullable<System.Guid> value);
    partial void OnNameUseConceptIdChanged();
    #endregion
		
		public EntityName()
		{
			this._EntityNameComponents = new EntitySet<EntityNameComponent>(new Action<EntityNameComponent>(this.attach_EntityNameComponents), new Action<EntityNameComponent>(this.detach_EntityNameComponents));
			this._Entity = default(EntityRef<Entity>);
			this._NameUseConcept = default(EntityRef<Concept>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EntityNameId", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid EntityNameId
		{
			get
			{
				return this._EntityNameId;
			}
			set
			{
				if ((this._EntityNameId != value))
				{
					this.OnEntityNameIdChanging(value);
					this.SendPropertyChanging();
					this._EntityNameId = value;
					this.SendPropertyChanged("EntityNameId");
					this.OnEntityNameIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EntityId", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid EntityId
		{
			get
			{
				return this._EntityId;
			}
			set
			{
				if ((this._EntityId != value))
				{
					if (this._Entity.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnEntityIdChanging(value);
					this.SendPropertyChanging();
					this._EntityId = value;
					this.SendPropertyChanged("EntityId");
					this.OnEntityIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EffectiveVersionSequenceId", DbType="Decimal(20,0) NOT NULL")]
		public decimal EffectiveVersionSequenceId
		{
			get
			{
				return this._EffectiveVersionSequenceId;
			}
			set
			{
				if ((this._EffectiveVersionSequenceId != value))
				{
					this.OnEffectiveVersionSequenceIdChanging(value);
					this.SendPropertyChanging();
					this._EffectiveVersionSequenceId = value;
					this.SendPropertyChanged("EffectiveVersionSequenceId");
					this.OnEffectiveVersionSequenceIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ObsoleteVersionSequenceId", DbType="Decimal(20,0)")]
		public System.Nullable<decimal> ObsoleteVersionSequenceId
		{
			get
			{
				return this._ObsoleteVersionSequenceId;
			}
			set
			{
				if ((this._ObsoleteVersionSequenceId != value))
				{
					this.OnObsoleteVersionSequenceIdChanging(value);
					this.SendPropertyChanging();
					this._ObsoleteVersionSequenceId = value;
					this.SendPropertyChanged("ObsoleteVersionSequenceId");
					this.OnObsoleteVersionSequenceIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NameUseConceptId", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> NameUseConceptId
		{
			get
			{
				return this._NameUseConceptId;
			}
			set
			{
				if ((this._NameUseConceptId != value))
				{
					if (this._NameUseConcept.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnNameUseConceptIdChanging(value);
					this.SendPropertyChanging();
					this._NameUseConceptId = value;
					this.SendPropertyChanged("NameUseConceptId");
					this.OnNameUseConceptIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="EntityName_EntityNameComponent", Storage="_EntityNameComponents", ThisKey="EntityNameId", OtherKey="EntityNameId")]
		public EntitySet<EntityNameComponent> EntityNameComponents
		{
			get
			{
				return this._EntityNameComponents;
			}
			set
			{
				this._EntityNameComponents.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Entity_EntityName", Storage="_Entity", ThisKey="EntityId", OtherKey="EntityId", IsForeignKey=true)]
		public Entity Entity
		{
			get
			{
				return this._Entity.Entity;
			}
			set
			{
				Entity previousValue = this._Entity.Entity;
				if (((previousValue != value) 
							|| (this._Entity.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Entity.Entity = null;
						previousValue.EntityNames.Remove(this);
					}
					this._Entity.Entity = value;
					if ((value != null))
					{
						value.EntityNames.Add(this);
						this._EntityId = value.EntityId;
					}
					else
					{
						this._EntityId = default(System.Guid);
					}
					this.SendPropertyChanged("Entity");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Concept_EntityName", Storage="_NameUseConcept", ThisKey="NameUseConceptId", OtherKey="ConceptId", IsForeignKey=true)]
		public Concept NameUseConcept
		{
			get
			{
				return this._NameUseConcept.Entity;
			}
			set
			{
				Concept previousValue = this._NameUseConcept.Entity;
				if (((previousValue != value) 
							|| (this._NameUseConcept.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._NameUseConcept.Entity = null;
						previousValue.EntityNamesNameUseConceptId.Remove(this);
					}
					this._NameUseConcept.Entity = value;
					if ((value != null))
					{
						value.EntityNamesNameUseConceptId.Add(this);
						this._NameUseConceptId = value.ConceptId;
					}
					else
					{
						this._NameUseConceptId = default(Nullable<System.Guid>);
					}
					this.SendPropertyChanged("NameUseConcept");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_EntityNameComponents(EntityNameComponent entity)
		{
			this.SendPropertyChanging();
			entity.EntityName = this;
		}
		
		private void detach_EntityNameComponents(EntityNameComponent entity)
		{
			this.SendPropertyChanging();
			entity.EntityName = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.EntityNameComponent")]
	public partial class EntityNameComponent : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _EntityNameComponentId;
		
		private System.Nullable<System.Guid> _ComponentTypeConceptId;
		
		private System.Guid _PhoneticValueId;
		
		private System.Guid _EntityNameId;
		
		private EntityRef<EntityName> _EntityName;
		
		private EntityRef<Concept> _ComponentTypeConcept;
		
		private EntityRef<PhoneticValue> _PhoneticValue;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnEntityNameComponentIdChanging(System.Guid value);
    partial void OnEntityNameComponentIdChanged();
    partial void OnComponentTypeConceptIdChanging(System.Nullable<System.Guid> value);
    partial void OnComponentTypeConceptIdChanged();
    partial void OnPhoneticValueIdChanging(System.Guid value);
    partial void OnPhoneticValueIdChanged();
    partial void OnEntityNameIdChanging(System.Guid value);
    partial void OnEntityNameIdChanged();
    #endregion
		
		public EntityNameComponent()
		{
			this._EntityName = default(EntityRef<EntityName>);
			this._ComponentTypeConcept = default(EntityRef<Concept>);
			this._PhoneticValue = default(EntityRef<PhoneticValue>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EntityNameComponentId", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid EntityNameComponentId
		{
			get
			{
				return this._EntityNameComponentId;
			}
			set
			{
				if ((this._EntityNameComponentId != value))
				{
					this.OnEntityNameComponentIdChanging(value);
					this.SendPropertyChanging();
					this._EntityNameComponentId = value;
					this.SendPropertyChanged("EntityNameComponentId");
					this.OnEntityNameComponentIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ComponentTypeConceptId", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> ComponentTypeConceptId
		{
			get
			{
				return this._ComponentTypeConceptId;
			}
			set
			{
				if ((this._ComponentTypeConceptId != value))
				{
					if (this._ComponentTypeConcept.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnComponentTypeConceptIdChanging(value);
					this.SendPropertyChanging();
					this._ComponentTypeConceptId = value;
					this.SendPropertyChanged("ComponentTypeConceptId");
					this.OnComponentTypeConceptIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PhoneticValueId", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid PhoneticValueId
		{
			get
			{
				return this._PhoneticValueId;
			}
			set
			{
				if ((this._PhoneticValueId != value))
				{
					if (this._PhoneticValue.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPhoneticValueIdChanging(value);
					this.SendPropertyChanging();
					this._PhoneticValueId = value;
					this.SendPropertyChanged("PhoneticValueId");
					this.OnPhoneticValueIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EntityNameId", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid EntityNameId
		{
			get
			{
				return this._EntityNameId;
			}
			set
			{
				if ((this._EntityNameId != value))
				{
					if (this._EntityName.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnEntityNameIdChanging(value);
					this.SendPropertyChanging();
					this._EntityNameId = value;
					this.SendPropertyChanged("EntityNameId");
					this.OnEntityNameIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="EntityName_EntityNameComponent", Storage="_EntityName", ThisKey="EntityNameId", OtherKey="EntityNameId", IsForeignKey=true)]
		public EntityName EntityName
		{
			get
			{
				return this._EntityName.Entity;
			}
			set
			{
				EntityName previousValue = this._EntityName.Entity;
				if (((previousValue != value) 
							|| (this._EntityName.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._EntityName.Entity = null;
						previousValue.EntityNameComponents.Remove(this);
					}
					this._EntityName.Entity = value;
					if ((value != null))
					{
						value.EntityNameComponents.Add(this);
						this._EntityNameId = value.EntityNameId;
					}
					else
					{
						this._EntityNameId = default(System.Guid);
					}
					this.SendPropertyChanged("EntityName");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Concept_EntityNameComponent", Storage="_ComponentTypeConcept", ThisKey="ComponentTypeConceptId", OtherKey="ConceptId", IsForeignKey=true)]
		public Concept ComponentTypeConcept
		{
			get
			{
				return this._ComponentTypeConcept.Entity;
			}
			set
			{
				Concept previousValue = this._ComponentTypeConcept.Entity;
				if (((previousValue != value) 
							|| (this._ComponentTypeConcept.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ComponentTypeConcept.Entity = null;
						previousValue.EntityNameComponentsComponentTypeConceptId.Remove(this);
					}
					this._ComponentTypeConcept.Entity = value;
					if ((value != null))
					{
						value.EntityNameComponentsComponentTypeConceptId.Add(this);
						this._ComponentTypeConceptId = value.ConceptId;
					}
					else
					{
						this._ComponentTypeConceptId = default(Nullable<System.Guid>);
					}
					this.SendPropertyChanged("ComponentTypeConcept");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="PhoneticValue_EntityNameComponent", Storage="_PhoneticValue", ThisKey="PhoneticValueId", OtherKey="PhoneticValueId", IsForeignKey=true)]
		public PhoneticValue PhoneticValue
		{
			get
			{
				return this._PhoneticValue.Entity;
			}
			set
			{
				PhoneticValue previousValue = this._PhoneticValue.Entity;
				if (((previousValue != value) 
							|| (this._PhoneticValue.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._PhoneticValue.Entity = null;
						previousValue.EntityNameComponents.Remove(this);
					}
					this._PhoneticValue.Entity = value;
					if ((value != null))
					{
						value.EntityNameComponents.Add(this);
						this._PhoneticValueId = value.PhoneticValueId;
					}
					else
					{
						this._PhoneticValueId = default(System.Guid);
					}
					this.SendPropertyChanged("PhoneticValue");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.EntityNote")]
	public partial class EntityNote : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _EntityNoteId;
		
		private System.Guid _EntityId;
		
		private decimal _EffectiveVersionSequenceId;
		
		private System.Nullable<decimal> _ObsoleteVersionSequenceId;
		
		private System.Guid _AuthorEntityId;
		
		private string _NoteText;
		
		private EntityRef<Entity> _AuthorEntity;
		
		private EntityRef<Entity> _Entity;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnEntityNoteIdChanging(System.Guid value);
    partial void OnEntityNoteIdChanged();
    partial void OnEntityIdChanging(System.Guid value);
    partial void OnEntityIdChanged();
    partial void OnEffectiveVersionSequenceIdChanging(decimal value);
    partial void OnEffectiveVersionSequenceIdChanged();
    partial void OnObsoleteVersionSequenceIdChanging(System.Nullable<decimal> value);
    partial void OnObsoleteVersionSequenceIdChanged();
    partial void OnAuthorEntityIdChanging(System.Guid value);
    partial void OnAuthorEntityIdChanged();
    partial void OnNoteTextChanging(string value);
    partial void OnNoteTextChanged();
    #endregion
		
		public EntityNote()
		{
			this._AuthorEntity = default(EntityRef<Entity>);
			this._Entity = default(EntityRef<Entity>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EntityNoteId", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid EntityNoteId
		{
			get
			{
				return this._EntityNoteId;
			}
			set
			{
				if ((this._EntityNoteId != value))
				{
					this.OnEntityNoteIdChanging(value);
					this.SendPropertyChanging();
					this._EntityNoteId = value;
					this.SendPropertyChanged("EntityNoteId");
					this.OnEntityNoteIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EntityId", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid EntityId
		{
			get
			{
				return this._EntityId;
			}
			set
			{
				if ((this._EntityId != value))
				{
					if (this._Entity.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnEntityIdChanging(value);
					this.SendPropertyChanging();
					this._EntityId = value;
					this.SendPropertyChanged("EntityId");
					this.OnEntityIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EffectiveVersionSequenceId", DbType="Decimal(20,0) NOT NULL")]
		public decimal EffectiveVersionSequenceId
		{
			get
			{
				return this._EffectiveVersionSequenceId;
			}
			set
			{
				if ((this._EffectiveVersionSequenceId != value))
				{
					this.OnEffectiveVersionSequenceIdChanging(value);
					this.SendPropertyChanging();
					this._EffectiveVersionSequenceId = value;
					this.SendPropertyChanged("EffectiveVersionSequenceId");
					this.OnEffectiveVersionSequenceIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ObsoleteVersionSequenceId", DbType="Decimal(20,0)")]
		public System.Nullable<decimal> ObsoleteVersionSequenceId
		{
			get
			{
				return this._ObsoleteVersionSequenceId;
			}
			set
			{
				if ((this._ObsoleteVersionSequenceId != value))
				{
					this.OnObsoleteVersionSequenceIdChanging(value);
					this.SendPropertyChanging();
					this._ObsoleteVersionSequenceId = value;
					this.SendPropertyChanged("ObsoleteVersionSequenceId");
					this.OnObsoleteVersionSequenceIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AuthorEntityId", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid AuthorEntityId
		{
			get
			{
				return this._AuthorEntityId;
			}
			set
			{
				if ((this._AuthorEntityId != value))
				{
					if (this._AuthorEntity.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnAuthorEntityIdChanging(value);
					this.SendPropertyChanging();
					this._AuthorEntityId = value;
					this.SendPropertyChanged("AuthorEntityId");
					this.OnAuthorEntityIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NoteText", DbType="Text NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string NoteText
		{
			get
			{
				return this._NoteText;
			}
			set
			{
				if ((this._NoteText != value))
				{
					this.OnNoteTextChanging(value);
					this.SendPropertyChanging();
					this._NoteText = value;
					this.SendPropertyChanged("NoteText");
					this.OnNoteTextChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Entity_EntityNote", Storage="_AuthorEntity", ThisKey="AuthorEntityId", OtherKey="EntityId", IsForeignKey=true)]
		public Entity AuthorEntity
		{
			get
			{
				return this._AuthorEntity.Entity;
			}
			set
			{
				Entity previousValue = this._AuthorEntity.Entity;
				if (((previousValue != value) 
							|| (this._AuthorEntity.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._AuthorEntity.Entity = null;
						previousValue.EntityNotesAuthorEntityId.Remove(this);
					}
					this._AuthorEntity.Entity = value;
					if ((value != null))
					{
						value.EntityNotesAuthorEntityId.Add(this);
						this._AuthorEntityId = value.EntityId;
					}
					else
					{
						this._AuthorEntityId = default(System.Guid);
					}
					this.SendPropertyChanged("AuthorEntity");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Entity_EntityNote1", Storage="_Entity", ThisKey="EntityId", OtherKey="EntityId", IsForeignKey=true)]
		public Entity Entity
		{
			get
			{
				return this._Entity.Entity;
			}
			set
			{
				Entity previousValue = this._Entity.Entity;
				if (((previousValue != value) 
							|| (this._Entity.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Entity.Entity = null;
						previousValue.EntityNotes.Remove(this);
					}
					this._Entity.Entity = value;
					if ((value != null))
					{
						value.EntityNotes.Add(this);
						this._EntityId = value.EntityId;
					}
					else
					{
						this._EntityId = default(System.Guid);
					}
					this.SendPropertyChanged("Entity");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.EntityTag")]
	public partial class EntityTag : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _EntityTagId;
		
		private System.Guid _EntityId;
		
		private string _Name;
		
		private string _Value;
		
		private System.DateTimeOffset _CreationTime;
		
		private System.Guid _CreatedBy;
		
		private System.Nullable<System.DateTimeOffset> _ObsoletionTime;
		
		private System.Nullable<System.Guid> _ObsoletedBy;
		
		private EntityRef<Entity> _Entity;
		
		private EntityRef<SecurityUser> _CreatedByEntity;
		
		private EntityRef<SecurityUser> _ObsoletedByEntity;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnEntityTagIdChanging(System.Guid value);
    partial void OnEntityTagIdChanged();
    partial void OnEntityIdChanging(System.Guid value);
    partial void OnEntityIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnValueChanging(string value);
    partial void OnValueChanged();
    partial void OnCreationTimeChanging(System.DateTimeOffset value);
    partial void OnCreationTimeChanged();
    partial void OnCreatedByChanging(System.Guid value);
    partial void OnCreatedByChanged();
    partial void OnObsoletionTimeChanging(System.Nullable<System.DateTimeOffset> value);
    partial void OnObsoletionTimeChanged();
    partial void OnObsoletedByChanging(System.Nullable<System.Guid> value);
    partial void OnObsoletedByChanged();
    #endregion
		
		public EntityTag()
		{
			this._Entity = default(EntityRef<Entity>);
			this._CreatedByEntity = default(EntityRef<SecurityUser>);
			this._ObsoletedByEntity = default(EntityRef<SecurityUser>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EntityTagId", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid EntityTagId
		{
			get
			{
				return this._EntityTagId;
			}
			set
			{
				if ((this._EntityTagId != value))
				{
					this.OnEntityTagIdChanging(value);
					this.SendPropertyChanging();
					this._EntityTagId = value;
					this.SendPropertyChanged("EntityTagId");
					this.OnEntityTagIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EntityId", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid EntityId
		{
			get
			{
				return this._EntityId;
			}
			set
			{
				if ((this._EntityId != value))
				{
					if (this._Entity.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnEntityIdChanging(value);
					this.SendPropertyChanging();
					this._EntityId = value;
					this.SendPropertyChanged("EntityId");
					this.OnEntityIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(64) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Value", DbType="NVarChar(MAX)")]
		public string Value
		{
			get
			{
				return this._Value;
			}
			set
			{
				if ((this._Value != value))
				{
					this.OnValueChanging(value);
					this.SendPropertyChanging();
					this._Value = value;
					this.SendPropertyChanged("Value");
					this.OnValueChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CreationTime", AutoSync=AutoSync.Always, DbType="DateTimeOffset NOT NULL", IsDbGenerated=true)]
		public System.DateTimeOffset CreationTime
		{
			get
			{
				return this._CreationTime;
			}
			set
			{
				if ((this._CreationTime != value))
				{
					this.OnCreationTimeChanging(value);
					this.SendPropertyChanging();
					this._CreationTime = value;
					this.SendPropertyChanged("CreationTime");
					this.OnCreationTimeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CreatedBy", DbType="UniqueIdentifier")]
		public System.Guid CreatedBy
		{
			get
			{
				return this._CreatedBy;
			}
			set
			{
				if ((this._CreatedBy != value))
				{
					if (this._CreatedByEntity.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCreatedByChanging(value);
					this.SendPropertyChanging();
					this._CreatedBy = value;
					this.SendPropertyChanged("CreatedBy");
					this.OnCreatedByChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ObsoletionTime", DbType="DateTimeOffset")]
		public System.Nullable<System.DateTimeOffset> ObsoletionTime
		{
			get
			{
				return this._ObsoletionTime;
			}
			set
			{
				if ((this._ObsoletionTime != value))
				{
					this.OnObsoletionTimeChanging(value);
					this.SendPropertyChanging();
					this._ObsoletionTime = value;
					this.SendPropertyChanged("ObsoletionTime");
					this.OnObsoletionTimeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ObsoletedBy", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> ObsoletedBy
		{
			get
			{
				return this._ObsoletedBy;
			}
			set
			{
				if ((this._ObsoletedBy != value))
				{
					if (this._ObsoletedByEntity.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnObsoletedByChanging(value);
					this.SendPropertyChanging();
					this._ObsoletedBy = value;
					this.SendPropertyChanged("ObsoletedBy");
					this.OnObsoletedByChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Entity_EntityTag", Storage="_Entity", ThisKey="EntityId", OtherKey="EntityId", IsForeignKey=true)]
		public Entity Entity
		{
			get
			{
				return this._Entity.Entity;
			}
			set
			{
				Entity previousValue = this._Entity.Entity;
				if (((previousValue != value) 
							|| (this._Entity.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Entity.Entity = null;
						previousValue.EntityTags.Remove(this);
					}
					this._Entity.Entity = value;
					if ((value != null))
					{
						value.EntityTags.Add(this);
						this._EntityId = value.EntityId;
					}
					else
					{
						this._EntityId = default(System.Guid);
					}
					this.SendPropertyChanged("Entity");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="SecurityUser_EntityTag", Storage="_CreatedByEntity", ThisKey="CreatedBy", OtherKey="UserId", IsForeignKey=true)]
		public SecurityUser CreatedByEntity
		{
			get
			{
				return this._CreatedByEntity.Entity;
			}
			set
			{
				SecurityUser previousValue = this._CreatedByEntity.Entity;
				if (((previousValue != value) 
							|| (this._CreatedByEntity.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._CreatedByEntity.Entity = null;
						previousValue.EntityTagsCreatedBy.Remove(this);
					}
					this._CreatedByEntity.Entity = value;
					if ((value != null))
					{
						value.EntityTagsCreatedBy.Add(this);
						this._CreatedBy = value.UserId;
					}
					else
					{
						this._CreatedBy = default(System.Guid);
					}
					this.SendPropertyChanged("CreatedByEntity");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="SecurityUser_EntityTag1", Storage="_ObsoletedByEntity", ThisKey="ObsoletedBy", OtherKey="UserId", IsForeignKey=true)]
		public SecurityUser ObsoletedByEntity
		{
			get
			{
				return this._ObsoletedByEntity.Entity;
			}
			set
			{
				SecurityUser previousValue = this._ObsoletedByEntity.Entity;
				if (((previousValue != value) 
							|| (this._ObsoletedByEntity.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ObsoletedByEntity.Entity = null;
						previousValue.EntityTagsObsoletedBy.Remove(this);
					}
					this._ObsoletedByEntity.Entity = value;
					if ((value != null))
					{
						value.EntityTagsObsoletedBy.Add(this);
						this._ObsoletedBy = value.UserId;
					}
					else
					{
						this._ObsoletedBy = default(Nullable<System.Guid>);
					}
					this.SendPropertyChanged("ObsoletedByEntity");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.EntityTelecomAddress")]
	public partial class EntityTelecomAddress : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _EntityTelecomAddressId;
		
		private System.Guid _EntityId;
		
		private System.Nullable<System.Guid> _TelecomAddressTypeConceptId;
		
		private string _TelecomAddress;
		
		private System.Nullable<System.Guid> _TelecomUseConceptId;
		
		private decimal _EffectiveVersionSequenceId;
		
		private System.Nullable<decimal> _ObsoleteVersionSequenceId;
		
		private EntityRef<Entity> _Entity;
		
		private EntityRef<Concept> _TelecomAddressTypeConcept;
		
		private EntityRef<Concept> _TelecomUseConcept;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnEntityTelecomAddressIdChanging(System.Guid value);
    partial void OnEntityTelecomAddressIdChanged();
    partial void OnEntityIdChanging(System.Guid value);
    partial void OnEntityIdChanged();
    partial void OnTelecomAddressTypeConceptIdChanging(System.Nullable<System.Guid> value);
    partial void OnTelecomAddressTypeConceptIdChanged();
    partial void OnTelecomAddressChanging(string value);
    partial void OnTelecomAddressChanged();
    partial void OnTelecomUseConceptIdChanging(System.Nullable<System.Guid> value);
    partial void OnTelecomUseConceptIdChanged();
    partial void OnEffectiveVersionSequenceIdChanging(decimal value);
    partial void OnEffectiveVersionSequenceIdChanged();
    partial void OnObsoleteVersionSequenceIdChanging(System.Nullable<decimal> value);
    partial void OnObsoleteVersionSequenceIdChanged();
    #endregion
		
		public EntityTelecomAddress()
		{
			this._Entity = default(EntityRef<Entity>);
			this._TelecomAddressTypeConcept = default(EntityRef<Concept>);
			this._TelecomUseConcept = default(EntityRef<Concept>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EntityTelecomAddressId", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid EntityTelecomAddressId
		{
			get
			{
				return this._EntityTelecomAddressId;
			}
			set
			{
				if ((this._EntityTelecomAddressId != value))
				{
					this.OnEntityTelecomAddressIdChanging(value);
					this.SendPropertyChanging();
					this._EntityTelecomAddressId = value;
					this.SendPropertyChanged("EntityTelecomAddressId");
					this.OnEntityTelecomAddressIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EntityId", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid EntityId
		{
			get
			{
				return this._EntityId;
			}
			set
			{
				if ((this._EntityId != value))
				{
					if (this._Entity.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnEntityIdChanging(value);
					this.SendPropertyChanging();
					this._EntityId = value;
					this.SendPropertyChanged("EntityId");
					this.OnEntityIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TelecomAddressTypeConceptId", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> TelecomAddressTypeConceptId
		{
			get
			{
				return this._TelecomAddressTypeConceptId;
			}
			set
			{
				if ((this._TelecomAddressTypeConceptId != value))
				{
					if (this._TelecomAddressTypeConcept.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnTelecomAddressTypeConceptIdChanging(value);
					this.SendPropertyChanging();
					this._TelecomAddressTypeConceptId = value;
					this.SendPropertyChanged("TelecomAddressTypeConceptId");
					this.OnTelecomAddressTypeConceptIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TelecomAddress", DbType="NVarChar(256) NOT NULL", CanBeNull=false)]
		public string TelecomAddress
		{
			get
			{
				return this._TelecomAddress;
			}
			set
			{
				if ((this._TelecomAddress != value))
				{
					this.OnTelecomAddressChanging(value);
					this.SendPropertyChanging();
					this._TelecomAddress = value;
					this.SendPropertyChanged("TelecomAddress");
					this.OnTelecomAddressChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TelecomUseConceptId", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> TelecomUseConceptId
		{
			get
			{
				return this._TelecomUseConceptId;
			}
			set
			{
				if ((this._TelecomUseConceptId != value))
				{
					if (this._TelecomUseConcept.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnTelecomUseConceptIdChanging(value);
					this.SendPropertyChanging();
					this._TelecomUseConceptId = value;
					this.SendPropertyChanged("TelecomUseConceptId");
					this.OnTelecomUseConceptIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EffectiveVersionSequenceId", DbType="Decimal(20,0) NOT NULL")]
		public decimal EffectiveVersionSequenceId
		{
			get
			{
				return this._EffectiveVersionSequenceId;
			}
			set
			{
				if ((this._EffectiveVersionSequenceId != value))
				{
					this.OnEffectiveVersionSequenceIdChanging(value);
					this.SendPropertyChanging();
					this._EffectiveVersionSequenceId = value;
					this.SendPropertyChanged("EffectiveVersionSequenceId");
					this.OnEffectiveVersionSequenceIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ObsoleteVersionSequenceId", DbType="Decimal(20,0)")]
		public System.Nullable<decimal> ObsoleteVersionSequenceId
		{
			get
			{
				return this._ObsoleteVersionSequenceId;
			}
			set
			{
				if ((this._ObsoleteVersionSequenceId != value))
				{
					this.OnObsoleteVersionSequenceIdChanging(value);
					this.SendPropertyChanging();
					this._ObsoleteVersionSequenceId = value;
					this.SendPropertyChanged("ObsoleteVersionSequenceId");
					this.OnObsoleteVersionSequenceIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Entity_EntityTelecomAddress", Storage="_Entity", ThisKey="EntityId", OtherKey="EntityId", IsForeignKey=true)]
		public Entity Entity
		{
			get
			{
				return this._Entity.Entity;
			}
			set
			{
				Entity previousValue = this._Entity.Entity;
				if (((previousValue != value) 
							|| (this._Entity.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Entity.Entity = null;
						previousValue.EntityTelecomAddresses.Remove(this);
					}
					this._Entity.Entity = value;
					if ((value != null))
					{
						value.EntityTelecomAddresses.Add(this);
						this._EntityId = value.EntityId;
					}
					else
					{
						this._EntityId = default(System.Guid);
					}
					this.SendPropertyChanged("Entity");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Concept_EntityTelecomAddress", Storage="_TelecomAddressTypeConcept", ThisKey="TelecomAddressTypeConceptId", OtherKey="ConceptId", IsForeignKey=true)]
		public Concept TelecomAddressTypeConcept
		{
			get
			{
				return this._TelecomAddressTypeConcept.Entity;
			}
			set
			{
				Concept previousValue = this._TelecomAddressTypeConcept.Entity;
				if (((previousValue != value) 
							|| (this._TelecomAddressTypeConcept.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._TelecomAddressTypeConcept.Entity = null;
						previousValue.EntityTelecomAddressesTelecomAddressTypeConceptId.Remove(this);
					}
					this._TelecomAddressTypeConcept.Entity = value;
					if ((value != null))
					{
						value.EntityTelecomAddressesTelecomAddressTypeConceptId.Add(this);
						this._TelecomAddressTypeConceptId = value.ConceptId;
					}
					else
					{
						this._TelecomAddressTypeConceptId = default(Nullable<System.Guid>);
					}
					this.SendPropertyChanged("TelecomAddressTypeConcept");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Concept_EntityTelecomAddress1", Storage="_TelecomUseConcept", ThisKey="TelecomUseConceptId", OtherKey="ConceptId", IsForeignKey=true)]
		public Concept TelecomUseConcept
		{
			get
			{
				return this._TelecomUseConcept.Entity;
			}
			set
			{
				Concept previousValue = this._TelecomUseConcept.Entity;
				if (((previousValue != value) 
							|| (this._TelecomUseConcept.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._TelecomUseConcept.Entity = null;
						previousValue.EntityTelecomAddressesTelecomUseConceptId.Remove(this);
					}
					this._TelecomUseConcept.Entity = value;
					if ((value != null))
					{
						value.EntityTelecomAddressesTelecomUseConceptId.Add(this);
						this._TelecomUseConceptId = value.ConceptId;
					}
					else
					{
						this._TelecomUseConceptId = default(Nullable<System.Guid>);
					}
					this.SendPropertyChanged("TelecomUseConcept");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.EntityVersion")]
	public partial class EntityVersion : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _EntityVersionId;
		
		private decimal _VersionSequenceId;
		
		private System.Guid _EntityId;
		
		private System.Nullable<System.Guid> _ReplacesVersionId;
		
		private System.Guid _StatusConceptId;
		
		private System.Guid _CreatedBy;
		
		private System.DateTimeOffset _CreationTime;
		
		private System.Nullable<System.DateTimeOffset> _ObsoletionTime;
		
		private System.Nullable<System.Guid> _ObsoletedBy;
		
		private System.Nullable<System.Guid> _TypeConceptId;
		
		private EntityRef<ApplicationEntity> _ApplicationEntity;
		
		private EntityRef<DeviceEntity> _DeviceEntity;
		
		private EntitySet<EntityVersion> _EntityVersionsReplacesVersionId;
		
		private EntityRef<Material> _Material;
		
		private EntityRef<Organization> _Organization;
		
		private EntityRef<Person> _Person;
		
		private EntityRef<Place> _Place;
		
		private EntityRef<Entity> _Entity;
		
		private EntityRef<EntityVersion> _ReplacesVersion;
		
		private EntityRef<Concept> _StatusConcept;
		
		private EntityRef<Concept> _TypeConcept;
		
		private EntityRef<SecurityUser> _CreatedByEntity;
		
		private EntityRef<SecurityUser> _ObsoletedByEntity;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnEntityVersionIdChanging(System.Guid value);
    partial void OnEntityVersionIdChanged();
    partial void OnVersionSequenceIdChanging(decimal value);
    partial void OnVersionSequenceIdChanged();
    partial void OnEntityIdChanging(System.Guid value);
    partial void OnEntityIdChanged();
    partial void OnReplacesVersionIdChanging(System.Nullable<System.Guid> value);
    partial void OnReplacesVersionIdChanged();
    partial void OnStatusConceptIdChanging(System.Guid value);
    partial void OnStatusConceptIdChanged();
    partial void OnCreatedByChanging(System.Guid value);
    partial void OnCreatedByChanged();
    partial void OnCreationTimeChanging(System.DateTimeOffset value);
    partial void OnCreationTimeChanged();
    partial void OnObsoletionTimeChanging(System.Nullable<System.DateTimeOffset> value);
    partial void OnObsoletionTimeChanged();
    partial void OnObsoletedByChanging(System.Nullable<System.Guid> value);
    partial void OnObsoletedByChanged();
    partial void OnTypeConceptIdChanging(System.Nullable<System.Guid> value);
    partial void OnTypeConceptIdChanged();
    #endregion
		
		public EntityVersion()
		{
			this._ApplicationEntity = default(EntityRef<ApplicationEntity>);
			this._DeviceEntity = default(EntityRef<DeviceEntity>);
			this._EntityVersionsReplacesVersionId = new EntitySet<EntityVersion>(new Action<EntityVersion>(this.attach_EntityVersionsReplacesVersionId), new Action<EntityVersion>(this.detach_EntityVersionsReplacesVersionId));
			this._Material = default(EntityRef<Material>);
			this._Organization = default(EntityRef<Organization>);
			this._Person = default(EntityRef<Person>);
			this._Place = default(EntityRef<Place>);
			this._Entity = default(EntityRef<Entity>);
			this._ReplacesVersion = default(EntityRef<EntityVersion>);
			this._StatusConcept = default(EntityRef<Concept>);
			this._TypeConcept = default(EntityRef<Concept>);
			this._CreatedByEntity = default(EntityRef<SecurityUser>);
			this._ObsoletedByEntity = default(EntityRef<SecurityUser>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EntityVersionId", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid EntityVersionId
		{
			get
			{
				return this._EntityVersionId;
			}
			set
			{
				if ((this._EntityVersionId != value))
				{
					this.OnEntityVersionIdChanging(value);
					this.SendPropertyChanging();
					this._EntityVersionId = value;
					this.SendPropertyChanged("EntityVersionId");
					this.OnEntityVersionIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_VersionSequenceId", AutoSync=AutoSync.Always, DbType="Decimal(20,0) NOT NULL", IsDbGenerated=true)]
		public decimal VersionSequenceId
		{
			get
			{
				return this._VersionSequenceId;
			}
			set
			{
				if ((this._VersionSequenceId != value))
				{
					this.OnVersionSequenceIdChanging(value);
					this.SendPropertyChanging();
					this._VersionSequenceId = value;
					this.SendPropertyChanged("VersionSequenceId");
					this.OnVersionSequenceIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EntityId", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid EntityId
		{
			get
			{
				return this._EntityId;
			}
			set
			{
				if ((this._EntityId != value))
				{
					if (this._Entity.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnEntityIdChanging(value);
					this.SendPropertyChanging();
					this._EntityId = value;
					this.SendPropertyChanged("EntityId");
					this.OnEntityIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ReplacesVersionId", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> ReplacesVersionId
		{
			get
			{
				return this._ReplacesVersionId;
			}
			set
			{
				if ((this._ReplacesVersionId != value))
				{
					if (this._ReplacesVersion.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnReplacesVersionIdChanging(value);
					this.SendPropertyChanging();
					this._ReplacesVersionId = value;
					this.SendPropertyChanged("ReplacesVersionId");
					this.OnReplacesVersionIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StatusConceptId", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid StatusConceptId
		{
			get
			{
				return this._StatusConceptId;
			}
			set
			{
				if ((this._StatusConceptId != value))
				{
					if (this._StatusConcept.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnStatusConceptIdChanging(value);
					this.SendPropertyChanging();
					this._StatusConceptId = value;
					this.SendPropertyChanged("StatusConceptId");
					this.OnStatusConceptIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CreatedBy", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid CreatedBy
		{
			get
			{
				return this._CreatedBy;
			}
			set
			{
				if ((this._CreatedBy != value))
				{
					if (this._CreatedByEntity.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCreatedByChanging(value);
					this.SendPropertyChanging();
					this._CreatedBy = value;
					this.SendPropertyChanged("CreatedBy");
					this.OnCreatedByChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CreationTime", AutoSync=AutoSync.Always, DbType="DateTimeOffset NOT NULL", IsDbGenerated=true)]
		public System.DateTimeOffset CreationTime
		{
			get
			{
				return this._CreationTime;
			}
			set
			{
				if ((this._CreationTime != value))
				{
					this.OnCreationTimeChanging(value);
					this.SendPropertyChanging();
					this._CreationTime = value;
					this.SendPropertyChanged("CreationTime");
					this.OnCreationTimeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ObsoletionTime", DbType="DateTimeOffset")]
		public System.Nullable<System.DateTimeOffset> ObsoletionTime
		{
			get
			{
				return this._ObsoletionTime;
			}
			set
			{
				if ((this._ObsoletionTime != value))
				{
					this.OnObsoletionTimeChanging(value);
					this.SendPropertyChanging();
					this._ObsoletionTime = value;
					this.SendPropertyChanged("ObsoletionTime");
					this.OnObsoletionTimeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ObsoletedBy", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> ObsoletedBy
		{
			get
			{
				return this._ObsoletedBy;
			}
			set
			{
				if ((this._ObsoletedBy != value))
				{
					if (this._ObsoletedByEntity.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnObsoletedByChanging(value);
					this.SendPropertyChanging();
					this._ObsoletedBy = value;
					this.SendPropertyChanged("ObsoletedBy");
					this.OnObsoletedByChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TypeConceptId", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> TypeConceptId
		{
			get
			{
				return this._TypeConceptId;
			}
			set
			{
				if ((this._TypeConceptId != value))
				{
					if (this._TypeConcept.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnTypeConceptIdChanging(value);
					this.SendPropertyChanging();
					this._TypeConceptId = value;
					this.SendPropertyChanged("TypeConceptId");
					this.OnTypeConceptIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="EntityVersion_ApplicationEntity", Storage="_ApplicationEntity", ThisKey="EntityVersionId", OtherKey="EntityVersionId", IsUnique=true, IsForeignKey=false)]
		public ApplicationEntity ApplicationEntity
		{
			get
			{
				return this._ApplicationEntity.Entity;
			}
			set
			{
				ApplicationEntity previousValue = this._ApplicationEntity.Entity;
				if (((previousValue != value) 
							|| (this._ApplicationEntity.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ApplicationEntity.Entity = null;
						previousValue.EntityVersion = null;
					}
					this._ApplicationEntity.Entity = value;
					if ((value != null))
					{
						value.EntityVersion = this;
					}
					this.SendPropertyChanged("ApplicationEntity");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="EntityVersion_DeviceEntity", Storage="_DeviceEntity", ThisKey="EntityVersionId", OtherKey="EntityVersionId", IsUnique=true, IsForeignKey=false)]
		public DeviceEntity DeviceEntity
		{
			get
			{
				return this._DeviceEntity.Entity;
			}
			set
			{
				DeviceEntity previousValue = this._DeviceEntity.Entity;
				if (((previousValue != value) 
							|| (this._DeviceEntity.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._DeviceEntity.Entity = null;
						previousValue.EntityVersion = null;
					}
					this._DeviceEntity.Entity = value;
					if ((value != null))
					{
						value.EntityVersion = this;
					}
					this.SendPropertyChanged("DeviceEntity");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="EntityVersion_EntityVersion", Storage="_EntityVersionsReplacesVersionId", ThisKey="EntityVersionId", OtherKey="ReplacesVersionId")]
		public EntitySet<EntityVersion> EntityVersionsReplacesVersionId
		{
			get
			{
				return this._EntityVersionsReplacesVersionId;
			}
			set
			{
				this._EntityVersionsReplacesVersionId.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="EntityVersion_Material", Storage="_Material", ThisKey="EntityVersionId", OtherKey="EntityVersionId", IsUnique=true, IsForeignKey=false)]
		public Material Material
		{
			get
			{
				return this._Material.Entity;
			}
			set
			{
				Material previousValue = this._Material.Entity;
				if (((previousValue != value) 
							|| (this._Material.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Material.Entity = null;
						previousValue.EntityVersion = null;
					}
					this._Material.Entity = value;
					if ((value != null))
					{
						value.EntityVersion = this;
					}
					this.SendPropertyChanged("Material");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="EntityVersion_Organization", Storage="_Organization", ThisKey="EntityVersionId", OtherKey="EntityVersionId", IsUnique=true, IsForeignKey=false)]
		public Organization Organization
		{
			get
			{
				return this._Organization.Entity;
			}
			set
			{
				Organization previousValue = this._Organization.Entity;
				if (((previousValue != value) 
							|| (this._Organization.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Organization.Entity = null;
						previousValue.EntityVersion = null;
					}
					this._Organization.Entity = value;
					if ((value != null))
					{
						value.EntityVersion = this;
					}
					this.SendPropertyChanged("Organization");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="EntityVersion_Person", Storage="_Person", ThisKey="EntityVersionId", OtherKey="EntityVersionId", IsUnique=true, IsForeignKey=false)]
		public Person Person
		{
			get
			{
				return this._Person.Entity;
			}
			set
			{
				Person previousValue = this._Person.Entity;
				if (((previousValue != value) 
							|| (this._Person.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Person.Entity = null;
						previousValue.EntityVersion = null;
					}
					this._Person.Entity = value;
					if ((value != null))
					{
						value.EntityVersion = this;
					}
					this.SendPropertyChanged("Person");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="EntityVersion_Place", Storage="_Place", ThisKey="EntityVersionId", OtherKey="EntityVersionId", IsUnique=true, IsForeignKey=false)]
		public Place Place
		{
			get
			{
				return this._Place.Entity;
			}
			set
			{
				Place previousValue = this._Place.Entity;
				if (((previousValue != value) 
							|| (this._Place.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Place.Entity = null;
						previousValue.EntityVersion = null;
					}
					this._Place.Entity = value;
					if ((value != null))
					{
						value.EntityVersion = this;
					}
					this.SendPropertyChanged("Place");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Entity_EntityVersion", Storage="_Entity", ThisKey="EntityId", OtherKey="EntityId", IsForeignKey=true)]
		public Entity Entity
		{
			get
			{
				return this._Entity.Entity;
			}
			set
			{
				Entity previousValue = this._Entity.Entity;
				if (((previousValue != value) 
							|| (this._Entity.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Entity.Entity = null;
						previousValue.EntityVersions.Remove(this);
					}
					this._Entity.Entity = value;
					if ((value != null))
					{
						value.EntityVersions.Add(this);
						this._EntityId = value.EntityId;
					}
					else
					{
						this._EntityId = default(System.Guid);
					}
					this.SendPropertyChanged("Entity");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="EntityVersion_EntityVersion", Storage="_ReplacesVersion", ThisKey="ReplacesVersionId", OtherKey="EntityVersionId", IsForeignKey=true)]
		public EntityVersion ReplacesVersion
		{
			get
			{
				return this._ReplacesVersion.Entity;
			}
			set
			{
				EntityVersion previousValue = this._ReplacesVersion.Entity;
				if (((previousValue != value) 
							|| (this._ReplacesVersion.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ReplacesVersion.Entity = null;
						previousValue.EntityVersionsReplacesVersionId.Remove(this);
					}
					this._ReplacesVersion.Entity = value;
					if ((value != null))
					{
						value.EntityVersionsReplacesVersionId.Add(this);
						this._ReplacesVersionId = value.EntityVersionId;
					}
					else
					{
						this._ReplacesVersionId = default(Nullable<System.Guid>);
					}
					this.SendPropertyChanged("ReplacesVersion");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Concept_EntityVersion", Storage="_StatusConcept", ThisKey="StatusConceptId", OtherKey="ConceptId", IsForeignKey=true)]
		public Concept StatusConcept
		{
			get
			{
				return this._StatusConcept.Entity;
			}
			set
			{
				Concept previousValue = this._StatusConcept.Entity;
				if (((previousValue != value) 
							|| (this._StatusConcept.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._StatusConcept.Entity = null;
						previousValue.EntityVersionsStatusConceptId.Remove(this);
					}
					this._StatusConcept.Entity = value;
					if ((value != null))
					{
						value.EntityVersionsStatusConceptId.Add(this);
						this._StatusConceptId = value.ConceptId;
					}
					else
					{
						this._StatusConceptId = default(System.Guid);
					}
					this.SendPropertyChanged("StatusConcept");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Concept_EntityVersion1", Storage="_TypeConcept", ThisKey="TypeConceptId", OtherKey="ConceptId", IsForeignKey=true)]
		public Concept TypeConcept
		{
			get
			{
				return this._TypeConcept.Entity;
			}
			set
			{
				Concept previousValue = this._TypeConcept.Entity;
				if (((previousValue != value) 
							|| (this._TypeConcept.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._TypeConcept.Entity = null;
						previousValue.EntityVersionsTypeConceptId.Remove(this);
					}
					this._TypeConcept.Entity = value;
					if ((value != null))
					{
						value.EntityVersionsTypeConceptId.Add(this);
						this._TypeConceptId = value.ConceptId;
					}
					else
					{
						this._TypeConceptId = default(Nullable<System.Guid>);
					}
					this.SendPropertyChanged("TypeConcept");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="SecurityUser_EntityVersion", Storage="_CreatedByEntity", ThisKey="CreatedBy", OtherKey="UserId", IsForeignKey=true)]
		public SecurityUser CreatedByEntity
		{
			get
			{
				return this._CreatedByEntity.Entity;
			}
			set
			{
				SecurityUser previousValue = this._CreatedByEntity.Entity;
				if (((previousValue != value) 
							|| (this._CreatedByEntity.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._CreatedByEntity.Entity = null;
						previousValue.EntityVersionsCreatedBy.Remove(this);
					}
					this._CreatedByEntity.Entity = value;
					if ((value != null))
					{
						value.EntityVersionsCreatedBy.Add(this);
						this._CreatedBy = value.UserId;
					}
					else
					{
						this._CreatedBy = default(System.Guid);
					}
					this.SendPropertyChanged("CreatedByEntity");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="SecurityUser_EntityVersion1", Storage="_ObsoletedByEntity", ThisKey="ObsoletedBy", OtherKey="UserId", IsForeignKey=true)]
		public SecurityUser ObsoletedByEntity
		{
			get
			{
				return this._ObsoletedByEntity.Entity;
			}
			set
			{
				SecurityUser previousValue = this._ObsoletedByEntity.Entity;
				if (((previousValue != value) 
							|| (this._ObsoletedByEntity.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ObsoletedByEntity.Entity = null;
						previousValue.EntityVersionsObsoletedBy.Remove(this);
					}
					this._ObsoletedByEntity.Entity = value;
					if ((value != null))
					{
						value.EntityVersionsObsoletedBy.Add(this);
						this._ObsoletedBy = value.UserId;
					}
					else
					{
						this._ObsoletedBy = default(Nullable<System.Guid>);
					}
					this.SendPropertyChanged("ObsoletedByEntity");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_EntityVersionsReplacesVersionId(EntityVersion entity)
		{
			this.SendPropertyChanging();
			entity.ReplacesVersion = this;
		}
		
		private void detach_EntityVersionsReplacesVersionId(EntityVersion entity)
		{
			this.SendPropertyChanging();
			entity.ReplacesVersion = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ExtensionType")]
	public partial class ExtensionType : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _ExtensionTypeId;
		
		private string _HandlerClass;
		
		private string _Name;
		
		private bool _IsEnabled;
		
		private System.DateTimeOffset _CreationTime;
		
		private System.Guid _CreatedBy;
		
		private System.Nullable<System.DateTimeOffset> _UpdatedTime;
		
		private System.Nullable<System.Guid> _UpdatedBy;
		
		private System.Nullable<System.DateTimeOffset> _ObsoletionTime;
		
		private System.Nullable<System.Guid> _ObsoletedBy;
		
		private EntitySet<ActExtension> _ActExtensions;
		
		private EntitySet<EntityExtension> _EntityExtensions;
		
		private EntityRef<SecurityUser> _CreatedByEntity;
		
		private EntityRef<SecurityUser> _ObsoletedByEntity;
		
		private EntityRef<SecurityUser> _UpdatedByEntity;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnExtensionTypeIdChanging(System.Guid value);
    partial void OnExtensionTypeIdChanged();
    partial void OnHandlerClassChanging(string value);
    partial void OnHandlerClassChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnIsEnabledChanging(bool value);
    partial void OnIsEnabledChanged();
    partial void OnCreationTimeChanging(System.DateTimeOffset value);
    partial void OnCreationTimeChanged();
    partial void OnCreatedByChanging(System.Guid value);
    partial void OnCreatedByChanged();
    partial void OnUpdatedTimeChanging(System.Nullable<System.DateTimeOffset> value);
    partial void OnUpdatedTimeChanged();
    partial void OnUpdatedByChanging(System.Nullable<System.Guid> value);
    partial void OnUpdatedByChanged();
    partial void OnObsoletionTimeChanging(System.Nullable<System.DateTimeOffset> value);
    partial void OnObsoletionTimeChanged();
    partial void OnObsoletedByChanging(System.Nullable<System.Guid> value);
    partial void OnObsoletedByChanged();
    #endregion
		
		public ExtensionType()
		{
			this._ActExtensions = new EntitySet<ActExtension>(new Action<ActExtension>(this.attach_ActExtensions), new Action<ActExtension>(this.detach_ActExtensions));
			this._EntityExtensions = new EntitySet<EntityExtension>(new Action<EntityExtension>(this.attach_EntityExtensions), new Action<EntityExtension>(this.detach_EntityExtensions));
			this._CreatedByEntity = default(EntityRef<SecurityUser>);
			this._ObsoletedByEntity = default(EntityRef<SecurityUser>);
			this._UpdatedByEntity = default(EntityRef<SecurityUser>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ExtensionTypeId", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid ExtensionTypeId
		{
			get
			{
				return this._ExtensionTypeId;
			}
			set
			{
				if ((this._ExtensionTypeId != value))
				{
					this.OnExtensionTypeIdChanging(value);
					this.SendPropertyChanging();
					this._ExtensionTypeId = value;
					this.SendPropertyChanged("ExtensionTypeId");
					this.OnExtensionTypeIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_HandlerClass", DbType="NVarChar(256) NOT NULL", CanBeNull=false)]
		public string HandlerClass
		{
			get
			{
				return this._HandlerClass;
			}
			set
			{
				if ((this._HandlerClass != value))
				{
					this.OnHandlerClassChanging(value);
					this.SendPropertyChanging();
					this._HandlerClass = value;
					this.SendPropertyChanged("HandlerClass");
					this.OnHandlerClassChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(64) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsEnabled", DbType="Bit NOT NULL")]
		public bool IsEnabled
		{
			get
			{
				return this._IsEnabled;
			}
			set
			{
				if ((this._IsEnabled != value))
				{
					this.OnIsEnabledChanging(value);
					this.SendPropertyChanging();
					this._IsEnabled = value;
					this.SendPropertyChanged("IsEnabled");
					this.OnIsEnabledChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CreationTime", AutoSync=AutoSync.Always, DbType="DateTimeOffset NOT NULL", IsDbGenerated=true)]
		public System.DateTimeOffset CreationTime
		{
			get
			{
				return this._CreationTime;
			}
			set
			{
				if ((this._CreationTime != value))
				{
					this.OnCreationTimeChanging(value);
					this.SendPropertyChanging();
					this._CreationTime = value;
					this.SendPropertyChanged("CreationTime");
					this.OnCreationTimeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CreatedBy", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid CreatedBy
		{
			get
			{
				return this._CreatedBy;
			}
			set
			{
				if ((this._CreatedBy != value))
				{
					if (this._CreatedByEntity.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCreatedByChanging(value);
					this.SendPropertyChanging();
					this._CreatedBy = value;
					this.SendPropertyChanged("CreatedBy");
					this.OnCreatedByChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UpdatedTime", DbType="DateTimeOffset")]
		public System.Nullable<System.DateTimeOffset> UpdatedTime
		{
			get
			{
				return this._UpdatedTime;
			}
			set
			{
				if ((this._UpdatedTime != value))
				{
					this.OnUpdatedTimeChanging(value);
					this.SendPropertyChanging();
					this._UpdatedTime = value;
					this.SendPropertyChanged("UpdatedTime");
					this.OnUpdatedTimeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UpdatedBy", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> UpdatedBy
		{
			get
			{
				return this._UpdatedBy;
			}
			set
			{
				if ((this._UpdatedBy != value))
				{
					if (this._UpdatedByEntity.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUpdatedByChanging(value);
					this.SendPropertyChanging();
					this._UpdatedBy = value;
					this.SendPropertyChanged("UpdatedBy");
					this.OnUpdatedByChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ObsoletionTime", DbType="DateTimeOffset")]
		public System.Nullable<System.DateTimeOffset> ObsoletionTime
		{
			get
			{
				return this._ObsoletionTime;
			}
			set
			{
				if ((this._ObsoletionTime != value))
				{
					this.OnObsoletionTimeChanging(value);
					this.SendPropertyChanging();
					this._ObsoletionTime = value;
					this.SendPropertyChanged("ObsoletionTime");
					this.OnObsoletionTimeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ObsoletedBy", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> ObsoletedBy
		{
			get
			{
				return this._ObsoletedBy;
			}
			set
			{
				if ((this._ObsoletedBy != value))
				{
					if (this._ObsoletedByEntity.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnObsoletedByChanging(value);
					this.SendPropertyChanging();
					this._ObsoletedBy = value;
					this.SendPropertyChanged("ObsoletedBy");
					this.OnObsoletedByChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ExtensionType_ActExtension", Storage="_ActExtensions", ThisKey="ExtensionTypeId", OtherKey="ExtensionTypeId")]
		public EntitySet<ActExtension> ActExtensions
		{
			get
			{
				return this._ActExtensions;
			}
			set
			{
				this._ActExtensions.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ExtensionType_EntityExtension", Storage="_EntityExtensions", ThisKey="ExtensionTypeId", OtherKey="ExtensionTypeId")]
		public EntitySet<EntityExtension> EntityExtensions
		{
			get
			{
				return this._EntityExtensions;
			}
			set
			{
				this._EntityExtensions.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="SecurityUser_ExtensionType", Storage="_CreatedByEntity", ThisKey="CreatedBy", OtherKey="UserId", IsForeignKey=true)]
		public SecurityUser CreatedByEntity
		{
			get
			{
				return this._CreatedByEntity.Entity;
			}
			set
			{
				SecurityUser previousValue = this._CreatedByEntity.Entity;
				if (((previousValue != value) 
							|| (this._CreatedByEntity.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._CreatedByEntity.Entity = null;
						previousValue.ExtensionTypesCreatedBy.Remove(this);
					}
					this._CreatedByEntity.Entity = value;
					if ((value != null))
					{
						value.ExtensionTypesCreatedBy.Add(this);
						this._CreatedBy = value.UserId;
					}
					else
					{
						this._CreatedBy = default(System.Guid);
					}
					this.SendPropertyChanged("CreatedByEntity");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="SecurityUser_ExtensionType1", Storage="_ObsoletedByEntity", ThisKey="ObsoletedBy", OtherKey="UserId", IsForeignKey=true)]
		public SecurityUser ObsoletedByEntity
		{
			get
			{
				return this._ObsoletedByEntity.Entity;
			}
			set
			{
				SecurityUser previousValue = this._ObsoletedByEntity.Entity;
				if (((previousValue != value) 
							|| (this._ObsoletedByEntity.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ObsoletedByEntity.Entity = null;
						previousValue.ExtensionTypesObsoletedBy.Remove(this);
					}
					this._ObsoletedByEntity.Entity = value;
					if ((value != null))
					{
						value.ExtensionTypesObsoletedBy.Add(this);
						this._ObsoletedBy = value.UserId;
					}
					else
					{
						this._ObsoletedBy = default(Nullable<System.Guid>);
					}
					this.SendPropertyChanged("ObsoletedByEntity");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="SecurityUser_ExtensionType2", Storage="_UpdatedByEntity", ThisKey="UpdatedBy", OtherKey="UserId", IsForeignKey=true)]
		public SecurityUser UpdatedByEntity
		{
			get
			{
				return this._UpdatedByEntity.Entity;
			}
			set
			{
				SecurityUser previousValue = this._UpdatedByEntity.Entity;
				if (((previousValue != value) 
							|| (this._UpdatedByEntity.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._UpdatedByEntity.Entity = null;
						previousValue.ExtensionTypesUpdatedBy.Remove(this);
					}
					this._UpdatedByEntity.Entity = value;
					if ((value != null))
					{
						value.ExtensionTypesUpdatedBy.Add(this);
						this._UpdatedBy = value.UserId;
					}
					else
					{
						this._UpdatedBy = default(Nullable<System.Guid>);
					}
					this.SendPropertyChanged("UpdatedByEntity");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_ActExtensions(ActExtension entity)
		{
			this.SendPropertyChanging();
			entity.ExtensionType = this;
		}
		
		private void detach_ActExtensions(ActExtension entity)
		{
			this.SendPropertyChanging();
			entity.ExtensionType = null;
		}
		
		private void attach_EntityExtensions(EntityExtension entity)
		{
			this.SendPropertyChanging();
			entity.ExtensionType = this;
		}
		
		private void detach_EntityExtensions(EntityExtension entity)
		{
			this.SendPropertyChanging();
			entity.ExtensionType = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.IdentifierType")]
	public partial class IdentifierType : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _IdentifierTypeId;
		
		private System.Guid _IdentifierTypeConceptId;
		
		private System.Guid _EntityClassScopeConceptId;
		
		private EntitySet<ActIdentifier> _ActIdentifiers;
		
		private EntitySet<EntityIdentifier> _EntityIdentifiers;
		
		private EntityRef<Concept> _EntityClassScopeConcept;
		
		private EntityRef<Concept> _IdentifierTypeConcept;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdentifierTypeIdChanging(System.Guid value);
    partial void OnIdentifierTypeIdChanged();
    partial void OnIdentifierTypeConceptIdChanging(System.Guid value);
    partial void OnIdentifierTypeConceptIdChanged();
    partial void OnEntityClassScopeConceptIdChanging(System.Guid value);
    partial void OnEntityClassScopeConceptIdChanged();
    #endregion
		
		public IdentifierType()
		{
			this._ActIdentifiers = new EntitySet<ActIdentifier>(new Action<ActIdentifier>(this.attach_ActIdentifiers), new Action<ActIdentifier>(this.detach_ActIdentifiers));
			this._EntityIdentifiers = new EntitySet<EntityIdentifier>(new Action<EntityIdentifier>(this.attach_EntityIdentifiers), new Action<EntityIdentifier>(this.detach_EntityIdentifiers));
			this._EntityClassScopeConcept = default(EntityRef<Concept>);
			this._IdentifierTypeConcept = default(EntityRef<Concept>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IdentifierTypeId", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid IdentifierTypeId
		{
			get
			{
				return this._IdentifierTypeId;
			}
			set
			{
				if ((this._IdentifierTypeId != value))
				{
					this.OnIdentifierTypeIdChanging(value);
					this.SendPropertyChanging();
					this._IdentifierTypeId = value;
					this.SendPropertyChanged("IdentifierTypeId");
					this.OnIdentifierTypeIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IdentifierTypeConceptId", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid IdentifierTypeConceptId
		{
			get
			{
				return this._IdentifierTypeConceptId;
			}
			set
			{
				if ((this._IdentifierTypeConceptId != value))
				{
					if (this._IdentifierTypeConcept.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIdentifierTypeConceptIdChanging(value);
					this.SendPropertyChanging();
					this._IdentifierTypeConceptId = value;
					this.SendPropertyChanged("IdentifierTypeConceptId");
					this.OnIdentifierTypeConceptIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EntityClassScopeConceptId", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid EntityClassScopeConceptId
		{
			get
			{
				return this._EntityClassScopeConceptId;
			}
			set
			{
				if ((this._EntityClassScopeConceptId != value))
				{
					if (this._EntityClassScopeConcept.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnEntityClassScopeConceptIdChanging(value);
					this.SendPropertyChanging();
					this._EntityClassScopeConceptId = value;
					this.SendPropertyChanged("EntityClassScopeConceptId");
					this.OnEntityClassScopeConceptIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="IdentifierType_ActIdentifier", Storage="_ActIdentifiers", ThisKey="IdentifierTypeId", OtherKey="IdentifierTypeId")]
		public EntitySet<ActIdentifier> ActIdentifiers
		{
			get
			{
				return this._ActIdentifiers;
			}
			set
			{
				this._ActIdentifiers.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="IdentifierType_EntityIdentifier", Storage="_EntityIdentifiers", ThisKey="IdentifierTypeId", OtherKey="IdentifierTypeId")]
		public EntitySet<EntityIdentifier> EntityIdentifiers
		{
			get
			{
				return this._EntityIdentifiers;
			}
			set
			{
				this._EntityIdentifiers.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Concept_IdentifierType", Storage="_EntityClassScopeConcept", ThisKey="EntityClassScopeConceptId", OtherKey="ConceptId", IsForeignKey=true)]
		public Concept EntityClassScopeConcept
		{
			get
			{
				return this._EntityClassScopeConcept.Entity;
			}
			set
			{
				Concept previousValue = this._EntityClassScopeConcept.Entity;
				if (((previousValue != value) 
							|| (this._EntityClassScopeConcept.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._EntityClassScopeConcept.Entity = null;
						previousValue.IdentifierTypesEntityClassScopeConceptId.Remove(this);
					}
					this._EntityClassScopeConcept.Entity = value;
					if ((value != null))
					{
						value.IdentifierTypesEntityClassScopeConceptId.Add(this);
						this._EntityClassScopeConceptId = value.ConceptId;
					}
					else
					{
						this._EntityClassScopeConceptId = default(System.Guid);
					}
					this.SendPropertyChanged("EntityClassScopeConcept");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Concept_IdentifierType1", Storage="_IdentifierTypeConcept", ThisKey="IdentifierTypeConceptId", OtherKey="ConceptId", IsForeignKey=true)]
		public Concept IdentifierTypeConcept
		{
			get
			{
				return this._IdentifierTypeConcept.Entity;
			}
			set
			{
				Concept previousValue = this._IdentifierTypeConcept.Entity;
				if (((previousValue != value) 
							|| (this._IdentifierTypeConcept.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._IdentifierTypeConcept.Entity = null;
						previousValue.IdentifierTypesIdentifierTypeConceptId.Remove(this);
					}
					this._IdentifierTypeConcept.Entity = value;
					if ((value != null))
					{
						value.IdentifierTypesIdentifierTypeConceptId.Add(this);
						this._IdentifierTypeConceptId = value.ConceptId;
					}
					else
					{
						this._IdentifierTypeConceptId = default(System.Guid);
					}
					this.SendPropertyChanged("IdentifierTypeConcept");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_ActIdentifiers(ActIdentifier entity)
		{
			this.SendPropertyChanging();
			entity.IdentifierType = this;
		}
		
		private void detach_ActIdentifiers(ActIdentifier entity)
		{
			this.SendPropertyChanging();
			entity.IdentifierType = null;
		}
		
		private void attach_EntityIdentifiers(EntityIdentifier entity)
		{
			this.SendPropertyChanging();
			entity.IdentifierType = this;
		}
		
		private void detach_EntityIdentifiers(EntityIdentifier entity)
		{
			this.SendPropertyChanging();
			entity.IdentifierType = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ManufacturedMaterial")]
	public partial class ManufacturedMaterial : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _EntityVersionId;
		
		private string _LotNumber;
		
		private EntityRef<Material> _Material;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnEntityVersionIdChanging(System.Guid value);
    partial void OnEntityVersionIdChanged();
    partial void OnLotNumberChanging(string value);
    partial void OnLotNumberChanged();
    #endregion
		
		public ManufacturedMaterial()
		{
			this._Material = default(EntityRef<Material>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EntityVersionId", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid EntityVersionId
		{
			get
			{
				return this._EntityVersionId;
			}
			set
			{
				if ((this._EntityVersionId != value))
				{
					if (this._Material.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnEntityVersionIdChanging(value);
					this.SendPropertyChanging();
					this._EntityVersionId = value;
					this.SendPropertyChanged("EntityVersionId");
					this.OnEntityVersionIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LotNumber", DbType="NVarChar(32)")]
		public string LotNumber
		{
			get
			{
				return this._LotNumber;
			}
			set
			{
				if ((this._LotNumber != value))
				{
					this.OnLotNumberChanging(value);
					this.SendPropertyChanging();
					this._LotNumber = value;
					this.SendPropertyChanged("LotNumber");
					this.OnLotNumberChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Material_ManufacturedMaterial", Storage="_Material", ThisKey="EntityVersionId", OtherKey="EntityVersionId", IsForeignKey=true)]
		public Material Material
		{
			get
			{
				return this._Material.Entity;
			}
			set
			{
				Material previousValue = this._Material.Entity;
				if (((previousValue != value) 
							|| (this._Material.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Material.Entity = null;
						previousValue.ManufacturedMaterial = null;
					}
					this._Material.Entity = value;
					if ((value != null))
					{
						value.ManufacturedMaterial = this;
						this._EntityVersionId = value.EntityVersionId;
					}
					else
					{
						this._EntityVersionId = default(System.Guid);
					}
					this.SendPropertyChanged("Material");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Material")]
	public partial class Material : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _EntityVersionId;
		
		private System.Nullable<System.DateTime> _ExpiryDate;
		
		private System.Nullable<System.Guid> _FormConceptId;
		
		private System.Nullable<decimal> _Quantity;
		
		private System.Nullable<System.Guid> _QuantityConceptId;
		
		private bool _IsAdministrative;
		
		private EntityRef<ManufacturedMaterial> _ManufacturedMaterial;
		
		private EntityRef<EntityVersion> _EntityVersion;
		
		private EntityRef<Concept> _FormConcept;
		
		private EntityRef<Concept> _QuantityConcept;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnEntityVersionIdChanging(System.Guid value);
    partial void OnEntityVersionIdChanged();
    partial void OnExpiryDateChanging(System.Nullable<System.DateTime> value);
    partial void OnExpiryDateChanged();
    partial void OnFormConceptIdChanging(System.Nullable<System.Guid> value);
    partial void OnFormConceptIdChanged();
    partial void OnQuantityChanging(System.Nullable<decimal> value);
    partial void OnQuantityChanged();
    partial void OnQuantityConceptIdChanging(System.Nullable<System.Guid> value);
    partial void OnQuantityConceptIdChanged();
    partial void OnIsAdministrativeChanging(bool value);
    partial void OnIsAdministrativeChanged();
    #endregion
		
		public Material()
		{
			this._ManufacturedMaterial = default(EntityRef<ManufacturedMaterial>);
			this._EntityVersion = default(EntityRef<EntityVersion>);
			this._FormConcept = default(EntityRef<Concept>);
			this._QuantityConcept = default(EntityRef<Concept>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EntityVersionId", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid EntityVersionId
		{
			get
			{
				return this._EntityVersionId;
			}
			set
			{
				if ((this._EntityVersionId != value))
				{
					if (this._EntityVersion.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnEntityVersionIdChanging(value);
					this.SendPropertyChanging();
					this._EntityVersionId = value;
					this.SendPropertyChanged("EntityVersionId");
					this.OnEntityVersionIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ExpiryDate", DbType="Date")]
		public System.Nullable<System.DateTime> ExpiryDate
		{
			get
			{
				return this._ExpiryDate;
			}
			set
			{
				if ((this._ExpiryDate != value))
				{
					this.OnExpiryDateChanging(value);
					this.SendPropertyChanging();
					this._ExpiryDate = value;
					this.SendPropertyChanged("ExpiryDate");
					this.OnExpiryDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FormConceptId", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> FormConceptId
		{
			get
			{
				return this._FormConceptId;
			}
			set
			{
				if ((this._FormConceptId != value))
				{
					if (this._FormConcept.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnFormConceptIdChanging(value);
					this.SendPropertyChanging();
					this._FormConceptId = value;
					this.SendPropertyChanged("FormConceptId");
					this.OnFormConceptIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Quantity", DbType="Decimal(20,10)")]
		public System.Nullable<decimal> Quantity
		{
			get
			{
				return this._Quantity;
			}
			set
			{
				if ((this._Quantity != value))
				{
					this.OnQuantityChanging(value);
					this.SendPropertyChanging();
					this._Quantity = value;
					this.SendPropertyChanged("Quantity");
					this.OnQuantityChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_QuantityConceptId", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> QuantityConceptId
		{
			get
			{
				return this._QuantityConceptId;
			}
			set
			{
				if ((this._QuantityConceptId != value))
				{
					if (this._QuantityConcept.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnQuantityConceptIdChanging(value);
					this.SendPropertyChanging();
					this._QuantityConceptId = value;
					this.SendPropertyChanged("QuantityConceptId");
					this.OnQuantityConceptIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsAdministrative", DbType="Bit NOT NULL")]
		public bool IsAdministrative
		{
			get
			{
				return this._IsAdministrative;
			}
			set
			{
				if ((this._IsAdministrative != value))
				{
					this.OnIsAdministrativeChanging(value);
					this.SendPropertyChanging();
					this._IsAdministrative = value;
					this.SendPropertyChanged("IsAdministrative");
					this.OnIsAdministrativeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Material_ManufacturedMaterial", Storage="_ManufacturedMaterial", ThisKey="EntityVersionId", OtherKey="EntityVersionId", IsUnique=true, IsForeignKey=false)]
		public ManufacturedMaterial ManufacturedMaterial
		{
			get
			{
				return this._ManufacturedMaterial.Entity;
			}
			set
			{
				ManufacturedMaterial previousValue = this._ManufacturedMaterial.Entity;
				if (((previousValue != value) 
							|| (this._ManufacturedMaterial.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ManufacturedMaterial.Entity = null;
						previousValue.Material = null;
					}
					this._ManufacturedMaterial.Entity = value;
					if ((value != null))
					{
						value.Material = this;
					}
					this.SendPropertyChanged("ManufacturedMaterial");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="EntityVersion_Material", Storage="_EntityVersion", ThisKey="EntityVersionId", OtherKey="EntityVersionId", IsForeignKey=true)]
		public EntityVersion EntityVersion
		{
			get
			{
				return this._EntityVersion.Entity;
			}
			set
			{
				EntityVersion previousValue = this._EntityVersion.Entity;
				if (((previousValue != value) 
							|| (this._EntityVersion.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._EntityVersion.Entity = null;
						previousValue.Material = null;
					}
					this._EntityVersion.Entity = value;
					if ((value != null))
					{
						value.Material = this;
						this._EntityVersionId = value.EntityVersionId;
					}
					else
					{
						this._EntityVersionId = default(System.Guid);
					}
					this.SendPropertyChanged("EntityVersion");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Concept_Material", Storage="_FormConcept", ThisKey="FormConceptId", OtherKey="ConceptId", IsForeignKey=true)]
		public Concept FormConcept
		{
			get
			{
				return this._FormConcept.Entity;
			}
			set
			{
				Concept previousValue = this._FormConcept.Entity;
				if (((previousValue != value) 
							|| (this._FormConcept.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._FormConcept.Entity = null;
						previousValue.MaterialsFormConceptId.Remove(this);
					}
					this._FormConcept.Entity = value;
					if ((value != null))
					{
						value.MaterialsFormConceptId.Add(this);
						this._FormConceptId = value.ConceptId;
					}
					else
					{
						this._FormConceptId = default(Nullable<System.Guid>);
					}
					this.SendPropertyChanged("FormConcept");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Concept_Material1", Storage="_QuantityConcept", ThisKey="QuantityConceptId", OtherKey="ConceptId", IsForeignKey=true)]
		public Concept QuantityConcept
		{
			get
			{
				return this._QuantityConcept.Entity;
			}
			set
			{
				Concept previousValue = this._QuantityConcept.Entity;
				if (((previousValue != value) 
							|| (this._QuantityConcept.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._QuantityConcept.Entity = null;
						previousValue.MaterialsQuantityConceptId.Remove(this);
					}
					this._QuantityConcept.Entity = value;
					if ((value != null))
					{
						value.MaterialsQuantityConceptId.Add(this);
						this._QuantityConceptId = value.ConceptId;
					}
					else
					{
						this._QuantityConceptId = default(Nullable<System.Guid>);
					}
					this.SendPropertyChanged("QuantityConcept");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Observation")]
	public partial class Observation : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _ActVersionId;
		
		private System.Nullable<System.Guid> _InterpretationConceptId;
		
		private string _ValueType;
		
		private EntityRef<CodedObservation> _CodedObservation;
		
		private EntityRef<QuantityObservation> _QuantityObservation;
		
		private EntityRef<TextObservation> _TextObservation;
		
		private EntityRef<ActVersion> _ActVersion;
		
		private EntityRef<Concept> _InterpretationConcept;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnActVersionIdChanging(System.Guid value);
    partial void OnActVersionIdChanged();
    partial void OnInterpretationConceptIdChanging(System.Nullable<System.Guid> value);
    partial void OnInterpretationConceptIdChanged();
    partial void OnValueTypeChanging(string value);
    partial void OnValueTypeChanged();
    #endregion
		
		public Observation()
		{
			this._CodedObservation = default(EntityRef<CodedObservation>);
			this._QuantityObservation = default(EntityRef<QuantityObservation>);
			this._TextObservation = default(EntityRef<TextObservation>);
			this._ActVersion = default(EntityRef<ActVersion>);
			this._InterpretationConcept = default(EntityRef<Concept>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ActVersionId", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid ActVersionId
		{
			get
			{
				return this._ActVersionId;
			}
			set
			{
				if ((this._ActVersionId != value))
				{
					if (this._ActVersion.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnActVersionIdChanging(value);
					this.SendPropertyChanging();
					this._ActVersionId = value;
					this.SendPropertyChanged("ActVersionId");
					this.OnActVersionIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_InterpretationConceptId", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> InterpretationConceptId
		{
			get
			{
				return this._InterpretationConceptId;
			}
			set
			{
				if ((this._InterpretationConceptId != value))
				{
					if (this._InterpretationConcept.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnInterpretationConceptIdChanging(value);
					this.SendPropertyChanging();
					this._InterpretationConceptId = value;
					this.SendPropertyChanged("InterpretationConceptId");
					this.OnInterpretationConceptIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ValueType", DbType="Char(2) NOT NULL", CanBeNull=false)]
		public string ValueType
		{
			get
			{
				return this._ValueType;
			}
			set
			{
				if ((this._ValueType != value))
				{
					this.OnValueTypeChanging(value);
					this.SendPropertyChanging();
					this._ValueType = value;
					this.SendPropertyChanged("ValueType");
					this.OnValueTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Observation_CodedObservation", Storage="_CodedObservation", ThisKey="ActVersionId", OtherKey="ActVersionId", IsUnique=true, IsForeignKey=false)]
		public CodedObservation CodedObservation
		{
			get
			{
				return this._CodedObservation.Entity;
			}
			set
			{
				CodedObservation previousValue = this._CodedObservation.Entity;
				if (((previousValue != value) 
							|| (this._CodedObservation.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._CodedObservation.Entity = null;
						previousValue.Observation = null;
					}
					this._CodedObservation.Entity = value;
					if ((value != null))
					{
						value.Observation = this;
					}
					this.SendPropertyChanged("CodedObservation");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Observation_QuantityObservation", Storage="_QuantityObservation", ThisKey="ActVersionId", OtherKey="ActVersionId", IsUnique=true, IsForeignKey=false)]
		public QuantityObservation QuantityObservation
		{
			get
			{
				return this._QuantityObservation.Entity;
			}
			set
			{
				QuantityObservation previousValue = this._QuantityObservation.Entity;
				if (((previousValue != value) 
							|| (this._QuantityObservation.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._QuantityObservation.Entity = null;
						previousValue.Observation = null;
					}
					this._QuantityObservation.Entity = value;
					if ((value != null))
					{
						value.Observation = this;
					}
					this.SendPropertyChanged("QuantityObservation");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Observation_TextObservation", Storage="_TextObservation", ThisKey="ActVersionId", OtherKey="ActVersionId", IsUnique=true, IsForeignKey=false)]
		public TextObservation TextObservation
		{
			get
			{
				return this._TextObservation.Entity;
			}
			set
			{
				TextObservation previousValue = this._TextObservation.Entity;
				if (((previousValue != value) 
							|| (this._TextObservation.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._TextObservation.Entity = null;
						previousValue.Observation = null;
					}
					this._TextObservation.Entity = value;
					if ((value != null))
					{
						value.Observation = this;
					}
					this.SendPropertyChanged("TextObservation");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ActVersion_Observation", Storage="_ActVersion", ThisKey="ActVersionId", OtherKey="ActVersionId", IsForeignKey=true)]
		public ActVersion ActVersion
		{
			get
			{
				return this._ActVersion.Entity;
			}
			set
			{
				ActVersion previousValue = this._ActVersion.Entity;
				if (((previousValue != value) 
							|| (this._ActVersion.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ActVersion.Entity = null;
						previousValue.Observation = null;
					}
					this._ActVersion.Entity = value;
					if ((value != null))
					{
						value.Observation = this;
						this._ActVersionId = value.ActVersionId;
					}
					else
					{
						this._ActVersionId = default(System.Guid);
					}
					this.SendPropertyChanged("ActVersion");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Concept_Observation", Storage="_InterpretationConcept", ThisKey="InterpretationConceptId", OtherKey="ConceptId", IsForeignKey=true)]
		public Concept InterpretationConcept
		{
			get
			{
				return this._InterpretationConcept.Entity;
			}
			set
			{
				Concept previousValue = this._InterpretationConcept.Entity;
				if (((previousValue != value) 
							|| (this._InterpretationConcept.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._InterpretationConcept.Entity = null;
						previousValue.ObservationsInterpretationConceptId.Remove(this);
					}
					this._InterpretationConcept.Entity = value;
					if ((value != null))
					{
						value.ObservationsInterpretationConceptId.Add(this);
						this._InterpretationConceptId = value.ConceptId;
					}
					else
					{
						this._InterpretationConceptId = default(Nullable<System.Guid>);
					}
					this.SendPropertyChanged("InterpretationConcept");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Organization")]
	public partial class Organization : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _EntityVersionId;
		
		private System.Guid _IndustryConceptId;
		
		private EntityRef<EntityVersion> _EntityVersion;
		
		private EntityRef<Concept> _IndustryConcept;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnEntityVersionIdChanging(System.Guid value);
    partial void OnEntityVersionIdChanged();
    partial void OnIndustryConceptIdChanging(System.Guid value);
    partial void OnIndustryConceptIdChanged();
    #endregion
		
		public Organization()
		{
			this._EntityVersion = default(EntityRef<EntityVersion>);
			this._IndustryConcept = default(EntityRef<Concept>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EntityVersionId", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid EntityVersionId
		{
			get
			{
				return this._EntityVersionId;
			}
			set
			{
				if ((this._EntityVersionId != value))
				{
					if (this._EntityVersion.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnEntityVersionIdChanging(value);
					this.SendPropertyChanging();
					this._EntityVersionId = value;
					this.SendPropertyChanged("EntityVersionId");
					this.OnEntityVersionIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IndustryConceptId", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid IndustryConceptId
		{
			get
			{
				return this._IndustryConceptId;
			}
			set
			{
				if ((this._IndustryConceptId != value))
				{
					if (this._IndustryConcept.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIndustryConceptIdChanging(value);
					this.SendPropertyChanging();
					this._IndustryConceptId = value;
					this.SendPropertyChanged("IndustryConceptId");
					this.OnIndustryConceptIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="EntityVersion_Organization", Storage="_EntityVersion", ThisKey="EntityVersionId", OtherKey="EntityVersionId", IsForeignKey=true)]
		public EntityVersion EntityVersion
		{
			get
			{
				return this._EntityVersion.Entity;
			}
			set
			{
				EntityVersion previousValue = this._EntityVersion.Entity;
				if (((previousValue != value) 
							|| (this._EntityVersion.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._EntityVersion.Entity = null;
						previousValue.Organization = null;
					}
					this._EntityVersion.Entity = value;
					if ((value != null))
					{
						value.Organization = this;
						this._EntityVersionId = value.EntityVersionId;
					}
					else
					{
						this._EntityVersionId = default(System.Guid);
					}
					this.SendPropertyChanged("EntityVersion");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Concept_Organization", Storage="_IndustryConcept", ThisKey="IndustryConceptId", OtherKey="ConceptId", IsForeignKey=true)]
		public Concept IndustryConcept
		{
			get
			{
				return this._IndustryConcept.Entity;
			}
			set
			{
				Concept previousValue = this._IndustryConcept.Entity;
				if (((previousValue != value) 
							|| (this._IndustryConcept.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._IndustryConcept.Entity = null;
						previousValue.OrganizationsIndustryConceptId.Remove(this);
					}
					this._IndustryConcept.Entity = value;
					if ((value != null))
					{
						value.OrganizationsIndustryConceptId.Add(this);
						this._IndustryConceptId = value.ConceptId;
					}
					else
					{
						this._IndustryConceptId = default(System.Guid);
					}
					this.SendPropertyChanged("IndustryConcept");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Patient")]
	public partial class Patient : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _EntityVersionId;
		
		private System.Guid _GenderConceptId;
		
		private System.Nullable<System.DateTime> _DeceasedDate;
		
		private System.Nullable<char> _DeceasedDatePrecision;
		
		private System.Nullable<decimal> _MultipleBirthOrder;
		
		private EntityRef<Concept> _GenderConcept;
		
		private EntityRef<Person> _Person;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnEntityVersionIdChanging(System.Guid value);
    partial void OnEntityVersionIdChanged();
    partial void OnGenderConceptIdChanging(System.Guid value);
    partial void OnGenderConceptIdChanged();
    partial void OnDeceasedDateChanging(System.Nullable<System.DateTime> value);
    partial void OnDeceasedDateChanged();
    partial void OnDeceasedDatePrecisionChanging(System.Nullable<char> value);
    partial void OnDeceasedDatePrecisionChanged();
    partial void OnMultipleBirthOrderChanging(System.Nullable<decimal> value);
    partial void OnMultipleBirthOrderChanged();
    #endregion
		
		public Patient()
		{
			this._GenderConcept = default(EntityRef<Concept>);
			this._Person = default(EntityRef<Person>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EntityVersionId", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid EntityVersionId
		{
			get
			{
				return this._EntityVersionId;
			}
			set
			{
				if ((this._EntityVersionId != value))
				{
					if (this._Person.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnEntityVersionIdChanging(value);
					this.SendPropertyChanging();
					this._EntityVersionId = value;
					this.SendPropertyChanged("EntityVersionId");
					this.OnEntityVersionIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_GenderConceptId", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid GenderConceptId
		{
			get
			{
				return this._GenderConceptId;
			}
			set
			{
				if ((this._GenderConceptId != value))
				{
					if (this._GenderConcept.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnGenderConceptIdChanging(value);
					this.SendPropertyChanging();
					this._GenderConceptId = value;
					this.SendPropertyChanged("GenderConceptId");
					this.OnGenderConceptIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DeceasedDate", DbType="Date")]
		public System.Nullable<System.DateTime> DeceasedDate
		{
			get
			{
				return this._DeceasedDate;
			}
			set
			{
				if ((this._DeceasedDate != value))
				{
					this.OnDeceasedDateChanging(value);
					this.SendPropertyChanging();
					this._DeceasedDate = value;
					this.SendPropertyChanged("DeceasedDate");
					this.OnDeceasedDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DeceasedDatePrecision", DbType="Char(1)")]
		public System.Nullable<char> DeceasedDatePrecision
		{
			get
			{
				return this._DeceasedDatePrecision;
			}
			set
			{
				if ((this._DeceasedDatePrecision != value))
				{
					this.OnDeceasedDatePrecisionChanging(value);
					this.SendPropertyChanging();
					this._DeceasedDatePrecision = value;
					this.SendPropertyChanged("DeceasedDatePrecision");
					this.OnDeceasedDatePrecisionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MultipleBirthOrder", DbType="Decimal(2,0)")]
		public System.Nullable<decimal> MultipleBirthOrder
		{
			get
			{
				return this._MultipleBirthOrder;
			}
			set
			{
				if ((this._MultipleBirthOrder != value))
				{
					this.OnMultipleBirthOrderChanging(value);
					this.SendPropertyChanging();
					this._MultipleBirthOrder = value;
					this.SendPropertyChanged("MultipleBirthOrder");
					this.OnMultipleBirthOrderChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Concept_Patient", Storage="_GenderConcept", ThisKey="GenderConceptId", OtherKey="ConceptId", IsForeignKey=true)]
		public Concept GenderConcept
		{
			get
			{
				return this._GenderConcept.Entity;
			}
			set
			{
				Concept previousValue = this._GenderConcept.Entity;
				if (((previousValue != value) 
							|| (this._GenderConcept.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._GenderConcept.Entity = null;
						previousValue.PatientsGenderConceptId.Remove(this);
					}
					this._GenderConcept.Entity = value;
					if ((value != null))
					{
						value.PatientsGenderConceptId.Add(this);
						this._GenderConceptId = value.ConceptId;
					}
					else
					{
						this._GenderConceptId = default(System.Guid);
					}
					this.SendPropertyChanged("GenderConcept");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Person_Patient", Storage="_Person", ThisKey="EntityVersionId", OtherKey="EntityVersionId", IsForeignKey=true)]
		public Person Person
		{
			get
			{
				return this._Person.Entity;
			}
			set
			{
				Person previousValue = this._Person.Entity;
				if (((previousValue != value) 
							|| (this._Person.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Person.Entity = null;
						previousValue.Patient = null;
					}
					this._Person.Entity = value;
					if ((value != null))
					{
						value.Patient = this;
						this._EntityVersionId = value.EntityVersionId;
					}
					else
					{
						this._EntityVersionId = default(System.Guid);
					}
					this.SendPropertyChanged("Person");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.PatientEncounter")]
	public partial class PatientEncounter : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _ActVersionId;
		
		private System.Nullable<System.Guid> _DischargeDispositionConceptId;
		
		private EntityRef<ActVersion> _ActVersion;
		
		private EntityRef<Concept> _DischargeDispositionConcept;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnActVersionIdChanging(System.Guid value);
    partial void OnActVersionIdChanged();
    partial void OnDischargeDispositionConceptIdChanging(System.Nullable<System.Guid> value);
    partial void OnDischargeDispositionConceptIdChanged();
    #endregion
		
		public PatientEncounter()
		{
			this._ActVersion = default(EntityRef<ActVersion>);
			this._DischargeDispositionConcept = default(EntityRef<Concept>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ActVersionId", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid ActVersionId
		{
			get
			{
				return this._ActVersionId;
			}
			set
			{
				if ((this._ActVersionId != value))
				{
					if (this._ActVersion.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnActVersionIdChanging(value);
					this.SendPropertyChanging();
					this._ActVersionId = value;
					this.SendPropertyChanged("ActVersionId");
					this.OnActVersionIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DischargeDispositionConceptId", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> DischargeDispositionConceptId
		{
			get
			{
				return this._DischargeDispositionConceptId;
			}
			set
			{
				if ((this._DischargeDispositionConceptId != value))
				{
					if (this._DischargeDispositionConcept.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnDischargeDispositionConceptIdChanging(value);
					this.SendPropertyChanging();
					this._DischargeDispositionConceptId = value;
					this.SendPropertyChanged("DischargeDispositionConceptId");
					this.OnDischargeDispositionConceptIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ActVersion_PatientEncounter", Storage="_ActVersion", ThisKey="ActVersionId", OtherKey="ActVersionId", IsForeignKey=true)]
		public ActVersion ActVersion
		{
			get
			{
				return this._ActVersion.Entity;
			}
			set
			{
				ActVersion previousValue = this._ActVersion.Entity;
				if (((previousValue != value) 
							|| (this._ActVersion.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ActVersion.Entity = null;
						previousValue.PatientEncounter = null;
					}
					this._ActVersion.Entity = value;
					if ((value != null))
					{
						value.PatientEncounter = this;
						this._ActVersionId = value.ActVersionId;
					}
					else
					{
						this._ActVersionId = default(System.Guid);
					}
					this.SendPropertyChanged("ActVersion");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Concept_PatientEncounter", Storage="_DischargeDispositionConcept", ThisKey="DischargeDispositionConceptId", OtherKey="ConceptId", IsForeignKey=true)]
		public Concept DischargeDispositionConcept
		{
			get
			{
				return this._DischargeDispositionConcept.Entity;
			}
			set
			{
				Concept previousValue = this._DischargeDispositionConcept.Entity;
				if (((previousValue != value) 
							|| (this._DischargeDispositionConcept.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._DischargeDispositionConcept.Entity = null;
						previousValue.PatientEncountersDischargeDispositionConceptId.Remove(this);
					}
					this._DischargeDispositionConcept.Entity = value;
					if ((value != null))
					{
						value.PatientEncountersDischargeDispositionConceptId.Add(this);
						this._DischargeDispositionConceptId = value.ConceptId;
					}
					else
					{
						this._DischargeDispositionConceptId = default(Nullable<System.Guid>);
					}
					this.SendPropertyChanged("DischargeDispositionConcept");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Person")]
	public partial class Person : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _EntityVersionId;
		
		private System.Nullable<System.DateTime> _DateOfBirth;
		
		private System.Nullable<char> _DateOfBirthPrecision;
		
		private EntityRef<UserEntity> _UserEntity;
		
		private EntityRef<Patient> _Patient;
		
		private EntityRef<Provider> _Provider;
		
		private EntityRef<EntityVersion> _EntityVersion;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnEntityVersionIdChanging(System.Guid value);
    partial void OnEntityVersionIdChanged();
    partial void OnDateOfBirthChanging(System.Nullable<System.DateTime> value);
    partial void OnDateOfBirthChanged();
    partial void OnDateOfBirthPrecisionChanging(System.Nullable<char> value);
    partial void OnDateOfBirthPrecisionChanged();
    #endregion
		
		public Person()
		{
			this._UserEntity = default(EntityRef<UserEntity>);
			this._Patient = default(EntityRef<Patient>);
			this._Provider = default(EntityRef<Provider>);
			this._EntityVersion = default(EntityRef<EntityVersion>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EntityVersionId", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid EntityVersionId
		{
			get
			{
				return this._EntityVersionId;
			}
			set
			{
				if ((this._EntityVersionId != value))
				{
					if (this._EntityVersion.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnEntityVersionIdChanging(value);
					this.SendPropertyChanging();
					this._EntityVersionId = value;
					this.SendPropertyChanged("EntityVersionId");
					this.OnEntityVersionIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateOfBirth", DbType="Date")]
		public System.Nullable<System.DateTime> DateOfBirth
		{
			get
			{
				return this._DateOfBirth;
			}
			set
			{
				if ((this._DateOfBirth != value))
				{
					this.OnDateOfBirthChanging(value);
					this.SendPropertyChanging();
					this._DateOfBirth = value;
					this.SendPropertyChanged("DateOfBirth");
					this.OnDateOfBirthChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateOfBirthPrecision", DbType="Char(1)")]
		public System.Nullable<char> DateOfBirthPrecision
		{
			get
			{
				return this._DateOfBirthPrecision;
			}
			set
			{
				if ((this._DateOfBirthPrecision != value))
				{
					this.OnDateOfBirthPrecisionChanging(value);
					this.SendPropertyChanging();
					this._DateOfBirthPrecision = value;
					this.SendPropertyChanged("DateOfBirthPrecision");
					this.OnDateOfBirthPrecisionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Person_UserEntity", Storage="_UserEntity", ThisKey="EntityVersionId", OtherKey="EntityVersionId", IsUnique=true, IsForeignKey=false)]
		public UserEntity UserEntity
		{
			get
			{
				return this._UserEntity.Entity;
			}
			set
			{
				UserEntity previousValue = this._UserEntity.Entity;
				if (((previousValue != value) 
							|| (this._UserEntity.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._UserEntity.Entity = null;
						previousValue.Person = null;
					}
					this._UserEntity.Entity = value;
					if ((value != null))
					{
						value.Person = this;
					}
					this.SendPropertyChanged("UserEntity");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Person_Patient", Storage="_Patient", ThisKey="EntityVersionId", OtherKey="EntityVersionId", IsUnique=true, IsForeignKey=false)]
		public Patient Patient
		{
			get
			{
				return this._Patient.Entity;
			}
			set
			{
				Patient previousValue = this._Patient.Entity;
				if (((previousValue != value) 
							|| (this._Patient.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Patient.Entity = null;
						previousValue.Person = null;
					}
					this._Patient.Entity = value;
					if ((value != null))
					{
						value.Person = this;
					}
					this.SendPropertyChanged("Patient");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Person_Provider", Storage="_Provider", ThisKey="EntityVersionId", OtherKey="EntityVersionId", IsUnique=true, IsForeignKey=false)]
		public Provider Provider
		{
			get
			{
				return this._Provider.Entity;
			}
			set
			{
				Provider previousValue = this._Provider.Entity;
				if (((previousValue != value) 
							|| (this._Provider.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Provider.Entity = null;
						previousValue.Person = null;
					}
					this._Provider.Entity = value;
					if ((value != null))
					{
						value.Person = this;
					}
					this.SendPropertyChanged("Provider");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="EntityVersion_Person", Storage="_EntityVersion", ThisKey="EntityVersionId", OtherKey="EntityVersionId", IsForeignKey=true)]
		public EntityVersion EntityVersion
		{
			get
			{
				return this._EntityVersion.Entity;
			}
			set
			{
				EntityVersion previousValue = this._EntityVersion.Entity;
				if (((previousValue != value) 
							|| (this._EntityVersion.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._EntityVersion.Entity = null;
						previousValue.Person = null;
					}
					this._EntityVersion.Entity = value;
					if ((value != null))
					{
						value.Person = this;
						this._EntityVersionId = value.EntityVersionId;
					}
					else
					{
						this._EntityVersionId = default(System.Guid);
					}
					this.SendPropertyChanged("EntityVersion");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.PersonLanguageCommunication")]
	public partial class PersonLanguageCommunication : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _PersonLanguageCommunicationId;
		
		private System.Guid _PersonEntityId;
		
		private decimal _EffectiveVersionSequenceId;
		
		private System.Nullable<decimal> _ObsoleteVersionSequenceId;
		
		private string _LanguageCommunication;
		
		private bool _PreferenceIndicator;
		
		private EntityRef<Entity> _PersonEntity;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnPersonLanguageCommunicationIdChanging(System.Guid value);
    partial void OnPersonLanguageCommunicationIdChanged();
    partial void OnPersonEntityIdChanging(System.Guid value);
    partial void OnPersonEntityIdChanged();
    partial void OnEffectiveVersionSequenceIdChanging(decimal value);
    partial void OnEffectiveVersionSequenceIdChanged();
    partial void OnObsoleteVersionSequenceIdChanging(System.Nullable<decimal> value);
    partial void OnObsoleteVersionSequenceIdChanged();
    partial void OnLanguageCommunicationChanging(string value);
    partial void OnLanguageCommunicationChanged();
    partial void OnPreferenceIndicatorChanging(bool value);
    partial void OnPreferenceIndicatorChanged();
    #endregion
		
		public PersonLanguageCommunication()
		{
			this._PersonEntity = default(EntityRef<Entity>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PersonLanguageCommunicationId", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid PersonLanguageCommunicationId
		{
			get
			{
				return this._PersonLanguageCommunicationId;
			}
			set
			{
				if ((this._PersonLanguageCommunicationId != value))
				{
					this.OnPersonLanguageCommunicationIdChanging(value);
					this.SendPropertyChanging();
					this._PersonLanguageCommunicationId = value;
					this.SendPropertyChanged("PersonLanguageCommunicationId");
					this.OnPersonLanguageCommunicationIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PersonEntityId", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid PersonEntityId
		{
			get
			{
				return this._PersonEntityId;
			}
			set
			{
				if ((this._PersonEntityId != value))
				{
					if (this._PersonEntity.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPersonEntityIdChanging(value);
					this.SendPropertyChanging();
					this._PersonEntityId = value;
					this.SendPropertyChanged("PersonEntityId");
					this.OnPersonEntityIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EffectiveVersionSequenceId", DbType="Decimal(20,0) NOT NULL")]
		public decimal EffectiveVersionSequenceId
		{
			get
			{
				return this._EffectiveVersionSequenceId;
			}
			set
			{
				if ((this._EffectiveVersionSequenceId != value))
				{
					this.OnEffectiveVersionSequenceIdChanging(value);
					this.SendPropertyChanging();
					this._EffectiveVersionSequenceId = value;
					this.SendPropertyChanged("EffectiveVersionSequenceId");
					this.OnEffectiveVersionSequenceIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ObsoleteVersionSequenceId", DbType="Decimal(20,0)")]
		public System.Nullable<decimal> ObsoleteVersionSequenceId
		{
			get
			{
				return this._ObsoleteVersionSequenceId;
			}
			set
			{
				if ((this._ObsoleteVersionSequenceId != value))
				{
					this.OnObsoleteVersionSequenceIdChanging(value);
					this.SendPropertyChanging();
					this._ObsoleteVersionSequenceId = value;
					this.SendPropertyChanged("ObsoleteVersionSequenceId");
					this.OnObsoleteVersionSequenceIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LanguageCommunication", DbType="Char(2)")]
		public string LanguageCommunication
		{
			get
			{
				return this._LanguageCommunication;
			}
			set
			{
				if ((this._LanguageCommunication != value))
				{
					this.OnLanguageCommunicationChanging(value);
					this.SendPropertyChanging();
					this._LanguageCommunication = value;
					this.SendPropertyChanged("LanguageCommunication");
					this.OnLanguageCommunicationChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PreferenceIndicator", DbType="Bit NOT NULL")]
		public bool PreferenceIndicator
		{
			get
			{
				return this._PreferenceIndicator;
			}
			set
			{
				if ((this._PreferenceIndicator != value))
				{
					this.OnPreferenceIndicatorChanging(value);
					this.SendPropertyChanging();
					this._PreferenceIndicator = value;
					this.SendPropertyChanged("PreferenceIndicator");
					this.OnPreferenceIndicatorChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Entity_PersonLanguageCommunication", Storage="_PersonEntity", ThisKey="PersonEntityId", OtherKey="EntityId", IsForeignKey=true)]
		public Entity PersonEntity
		{
			get
			{
				return this._PersonEntity.Entity;
			}
			set
			{
				Entity previousValue = this._PersonEntity.Entity;
				if (((previousValue != value) 
							|| (this._PersonEntity.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._PersonEntity.Entity = null;
						previousValue.PersonLanguageCommunicationsPersonEntityId.Remove(this);
					}
					this._PersonEntity.Entity = value;
					if ((value != null))
					{
						value.PersonLanguageCommunicationsPersonEntityId.Add(this);
						this._PersonEntityId = value.EntityId;
					}
					else
					{
						this._PersonEntityId = default(System.Guid);
					}
					this.SendPropertyChanged("PersonEntity");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.PhoneticAlgorithm")]
	public partial class PhoneticAlgorithm : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _PhoneticAlgorithmId;
		
		private string _Name;
		
		private string _HandlerClass;
		
		private System.DateTimeOffset _CreationTime;
		
		private System.Guid _CreatedBy;
		
		private System.Nullable<System.DateTimeOffset> _UpdatedTime;
		
		private System.Nullable<System.Guid> _UpdatedBy;
		
		private System.Nullable<System.DateTimeOffset> _ObsoletionTime;
		
		private System.Nullable<System.Guid> _ObsoletedBy;
		
		private EntitySet<ConceptName> _ConceptNames;
		
		private EntitySet<PhoneticValue> _PhoneticValues;
		
		private EntitySet<ReferenceTermDisplayName> _ReferenceTermDisplayNames;
		
		private EntityRef<SecurityUser> _CreatedByEntity;
		
		private EntityRef<SecurityUser> _ObsoletedByEntity;
		
		private EntityRef<SecurityUser> _UpdatedByEntity;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnPhoneticAlgorithmIdChanging(System.Guid value);
    partial void OnPhoneticAlgorithmIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnHandlerClassChanging(string value);
    partial void OnHandlerClassChanged();
    partial void OnCreationTimeChanging(System.DateTimeOffset value);
    partial void OnCreationTimeChanged();
    partial void OnCreatedByChanging(System.Guid value);
    partial void OnCreatedByChanged();
    partial void OnUpdatedTimeChanging(System.Nullable<System.DateTimeOffset> value);
    partial void OnUpdatedTimeChanged();
    partial void OnUpdatedByChanging(System.Nullable<System.Guid> value);
    partial void OnUpdatedByChanged();
    partial void OnObsoletionTimeChanging(System.Nullable<System.DateTimeOffset> value);
    partial void OnObsoletionTimeChanged();
    partial void OnObsoletedByChanging(System.Nullable<System.Guid> value);
    partial void OnObsoletedByChanged();
    #endregion
		
		public PhoneticAlgorithm()
		{
			this._ConceptNames = new EntitySet<ConceptName>(new Action<ConceptName>(this.attach_ConceptNames), new Action<ConceptName>(this.detach_ConceptNames));
			this._PhoneticValues = new EntitySet<PhoneticValue>(new Action<PhoneticValue>(this.attach_PhoneticValues), new Action<PhoneticValue>(this.detach_PhoneticValues));
			this._ReferenceTermDisplayNames = new EntitySet<ReferenceTermDisplayName>(new Action<ReferenceTermDisplayName>(this.attach_ReferenceTermDisplayNames), new Action<ReferenceTermDisplayName>(this.detach_ReferenceTermDisplayNames));
			this._CreatedByEntity = default(EntityRef<SecurityUser>);
			this._ObsoletedByEntity = default(EntityRef<SecurityUser>);
			this._UpdatedByEntity = default(EntityRef<SecurityUser>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PhoneticAlgorithmId", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid PhoneticAlgorithmId
		{
			get
			{
				return this._PhoneticAlgorithmId;
			}
			set
			{
				if ((this._PhoneticAlgorithmId != value))
				{
					this.OnPhoneticAlgorithmIdChanging(value);
					this.SendPropertyChanging();
					this._PhoneticAlgorithmId = value;
					this.SendPropertyChanged("PhoneticAlgorithmId");
					this.OnPhoneticAlgorithmIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(32) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_HandlerClass", DbType="NVarChar(MAX)")]
		public string HandlerClass
		{
			get
			{
				return this._HandlerClass;
			}
			set
			{
				if ((this._HandlerClass != value))
				{
					this.OnHandlerClassChanging(value);
					this.SendPropertyChanging();
					this._HandlerClass = value;
					this.SendPropertyChanged("HandlerClass");
					this.OnHandlerClassChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CreationTime", AutoSync=AutoSync.Always, DbType="DateTimeOffset NOT NULL", IsDbGenerated=true)]
		public System.DateTimeOffset CreationTime
		{
			get
			{
				return this._CreationTime;
			}
			set
			{
				if ((this._CreationTime != value))
				{
					this.OnCreationTimeChanging(value);
					this.SendPropertyChanging();
					this._CreationTime = value;
					this.SendPropertyChanged("CreationTime");
					this.OnCreationTimeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CreatedBy", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid CreatedBy
		{
			get
			{
				return this._CreatedBy;
			}
			set
			{
				if ((this._CreatedBy != value))
				{
					if (this._CreatedByEntity.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCreatedByChanging(value);
					this.SendPropertyChanging();
					this._CreatedBy = value;
					this.SendPropertyChanged("CreatedBy");
					this.OnCreatedByChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UpdatedTime", DbType="DateTimeOffset")]
		public System.Nullable<System.DateTimeOffset> UpdatedTime
		{
			get
			{
				return this._UpdatedTime;
			}
			set
			{
				if ((this._UpdatedTime != value))
				{
					this.OnUpdatedTimeChanging(value);
					this.SendPropertyChanging();
					this._UpdatedTime = value;
					this.SendPropertyChanged("UpdatedTime");
					this.OnUpdatedTimeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UpdatedBy", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> UpdatedBy
		{
			get
			{
				return this._UpdatedBy;
			}
			set
			{
				if ((this._UpdatedBy != value))
				{
					if (this._UpdatedByEntity.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUpdatedByChanging(value);
					this.SendPropertyChanging();
					this._UpdatedBy = value;
					this.SendPropertyChanged("UpdatedBy");
					this.OnUpdatedByChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ObsoletionTime", DbType="DateTimeOffset")]
		public System.Nullable<System.DateTimeOffset> ObsoletionTime
		{
			get
			{
				return this._ObsoletionTime;
			}
			set
			{
				if ((this._ObsoletionTime != value))
				{
					this.OnObsoletionTimeChanging(value);
					this.SendPropertyChanging();
					this._ObsoletionTime = value;
					this.SendPropertyChanged("ObsoletionTime");
					this.OnObsoletionTimeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ObsoletedBy", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> ObsoletedBy
		{
			get
			{
				return this._ObsoletedBy;
			}
			set
			{
				if ((this._ObsoletedBy != value))
				{
					if (this._ObsoletedByEntity.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnObsoletedByChanging(value);
					this.SendPropertyChanging();
					this._ObsoletedBy = value;
					this.SendPropertyChanged("ObsoletedBy");
					this.OnObsoletedByChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="PhoneticAlgorithm_ConceptName", Storage="_ConceptNames", ThisKey="PhoneticAlgorithmId", OtherKey="PhoneticAlgorithmId")]
		public EntitySet<ConceptName> ConceptNames
		{
			get
			{
				return this._ConceptNames;
			}
			set
			{
				this._ConceptNames.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="PhoneticAlgorithm_PhoneticValue", Storage="_PhoneticValues", ThisKey="PhoneticAlgorithmId", OtherKey="PhoneticAlgorithmId")]
		public EntitySet<PhoneticValue> PhoneticValues
		{
			get
			{
				return this._PhoneticValues;
			}
			set
			{
				this._PhoneticValues.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="PhoneticAlgorithm_ReferenceTermDisplayName", Storage="_ReferenceTermDisplayNames", ThisKey="PhoneticAlgorithmId", OtherKey="PhoneticAlgorithmId")]
		public EntitySet<ReferenceTermDisplayName> ReferenceTermDisplayNames
		{
			get
			{
				return this._ReferenceTermDisplayNames;
			}
			set
			{
				this._ReferenceTermDisplayNames.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="SecurityUser_PhoneticAlgorithm", Storage="_CreatedByEntity", ThisKey="CreatedBy", OtherKey="UserId", IsForeignKey=true)]
		public SecurityUser CreatedByEntity
		{
			get
			{
				return this._CreatedByEntity.Entity;
			}
			set
			{
				SecurityUser previousValue = this._CreatedByEntity.Entity;
				if (((previousValue != value) 
							|| (this._CreatedByEntity.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._CreatedByEntity.Entity = null;
						previousValue.PhoneticAlgorithmsCreatedBy.Remove(this);
					}
					this._CreatedByEntity.Entity = value;
					if ((value != null))
					{
						value.PhoneticAlgorithmsCreatedBy.Add(this);
						this._CreatedBy = value.UserId;
					}
					else
					{
						this._CreatedBy = default(System.Guid);
					}
					this.SendPropertyChanged("CreatedByEntity");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="SecurityUser_PhoneticAlgorithm1", Storage="_ObsoletedByEntity", ThisKey="ObsoletedBy", OtherKey="UserId", IsForeignKey=true)]
		public SecurityUser ObsoletedByEntity
		{
			get
			{
				return this._ObsoletedByEntity.Entity;
			}
			set
			{
				SecurityUser previousValue = this._ObsoletedByEntity.Entity;
				if (((previousValue != value) 
							|| (this._ObsoletedByEntity.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ObsoletedByEntity.Entity = null;
						previousValue.PhoneticAlgorithmsObsoletedBy.Remove(this);
					}
					this._ObsoletedByEntity.Entity = value;
					if ((value != null))
					{
						value.PhoneticAlgorithmsObsoletedBy.Add(this);
						this._ObsoletedBy = value.UserId;
					}
					else
					{
						this._ObsoletedBy = default(Nullable<System.Guid>);
					}
					this.SendPropertyChanged("ObsoletedByEntity");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="SecurityUser_PhoneticAlgorithm2", Storage="_UpdatedByEntity", ThisKey="UpdatedBy", OtherKey="UserId", IsForeignKey=true)]
		public SecurityUser UpdatedByEntity
		{
			get
			{
				return this._UpdatedByEntity.Entity;
			}
			set
			{
				SecurityUser previousValue = this._UpdatedByEntity.Entity;
				if (((previousValue != value) 
							|| (this._UpdatedByEntity.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._UpdatedByEntity.Entity = null;
						previousValue.PhoneticAlgorithmsUpdatedBy.Remove(this);
					}
					this._UpdatedByEntity.Entity = value;
					if ((value != null))
					{
						value.PhoneticAlgorithmsUpdatedBy.Add(this);
						this._UpdatedBy = value.UserId;
					}
					else
					{
						this._UpdatedBy = default(Nullable<System.Guid>);
					}
					this.SendPropertyChanged("UpdatedByEntity");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_ConceptNames(ConceptName entity)
		{
			this.SendPropertyChanging();
			entity.PhoneticAlgorithm = this;
		}
		
		private void detach_ConceptNames(ConceptName entity)
		{
			this.SendPropertyChanging();
			entity.PhoneticAlgorithm = null;
		}
		
		private void attach_PhoneticValues(PhoneticValue entity)
		{
			this.SendPropertyChanging();
			entity.PhoneticAlgorithm = this;
		}
		
		private void detach_PhoneticValues(PhoneticValue entity)
		{
			this.SendPropertyChanging();
			entity.PhoneticAlgorithm = null;
		}
		
		private void attach_ReferenceTermDisplayNames(ReferenceTermDisplayName entity)
		{
			this.SendPropertyChanging();
			entity.PhoneticAlgorithm = this;
		}
		
		private void detach_ReferenceTermDisplayNames(ReferenceTermDisplayName entity)
		{
			this.SendPropertyChanging();
			entity.PhoneticAlgorithm = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.PhoneticValues")]
	public partial class PhoneticValue : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _PhoneticValueId;
		
		private string _Value;
		
		private string _PhoneticCode;
		
		private System.Guid _PhoneticAlgorithmId;
		
		private EntitySet<EntityNameComponent> _EntityNameComponents;
		
		private EntityRef<PhoneticAlgorithm> _PhoneticAlgorithm;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnPhoneticValueIdChanging(System.Guid value);
    partial void OnPhoneticValueIdChanged();
    partial void OnValueChanging(string value);
    partial void OnValueChanged();
    partial void OnPhoneticCodeChanging(string value);
    partial void OnPhoneticCodeChanged();
    partial void OnPhoneticAlgorithmIdChanging(System.Guid value);
    partial void OnPhoneticAlgorithmIdChanged();
    #endregion
		
		public PhoneticValue()
		{
			this._EntityNameComponents = new EntitySet<EntityNameComponent>(new Action<EntityNameComponent>(this.attach_EntityNameComponents), new Action<EntityNameComponent>(this.detach_EntityNameComponents));
			this._PhoneticAlgorithm = default(EntityRef<PhoneticAlgorithm>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PhoneticValueId", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid PhoneticValueId
		{
			get
			{
				return this._PhoneticValueId;
			}
			set
			{
				if ((this._PhoneticValueId != value))
				{
					this.OnPhoneticValueIdChanging(value);
					this.SendPropertyChanging();
					this._PhoneticValueId = value;
					this.SendPropertyChanged("PhoneticValueId");
					this.OnPhoneticValueIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Value", DbType="NVarChar(64) NOT NULL", CanBeNull=false)]
		public string Value
		{
			get
			{
				return this._Value;
			}
			set
			{
				if ((this._Value != value))
				{
					this.OnValueChanging(value);
					this.SendPropertyChanging();
					this._Value = value;
					this.SendPropertyChanged("Value");
					this.OnValueChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PhoneticCode", DbType="NVarChar(32)")]
		public string PhoneticCode
		{
			get
			{
				return this._PhoneticCode;
			}
			set
			{
				if ((this._PhoneticCode != value))
				{
					this.OnPhoneticCodeChanging(value);
					this.SendPropertyChanging();
					this._PhoneticCode = value;
					this.SendPropertyChanged("PhoneticCode");
					this.OnPhoneticCodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PhoneticAlgorithmId", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid PhoneticAlgorithmId
		{
			get
			{
				return this._PhoneticAlgorithmId;
			}
			set
			{
				if ((this._PhoneticAlgorithmId != value))
				{
					if (this._PhoneticAlgorithm.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPhoneticAlgorithmIdChanging(value);
					this.SendPropertyChanging();
					this._PhoneticAlgorithmId = value;
					this.SendPropertyChanged("PhoneticAlgorithmId");
					this.OnPhoneticAlgorithmIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="PhoneticValue_EntityNameComponent", Storage="_EntityNameComponents", ThisKey="PhoneticValueId", OtherKey="PhoneticValueId")]
		public EntitySet<EntityNameComponent> EntityNameComponents
		{
			get
			{
				return this._EntityNameComponents;
			}
			set
			{
				this._EntityNameComponents.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="PhoneticAlgorithm_PhoneticValue", Storage="_PhoneticAlgorithm", ThisKey="PhoneticAlgorithmId", OtherKey="PhoneticAlgorithmId", IsForeignKey=true)]
		public PhoneticAlgorithm PhoneticAlgorithm
		{
			get
			{
				return this._PhoneticAlgorithm.Entity;
			}
			set
			{
				PhoneticAlgorithm previousValue = this._PhoneticAlgorithm.Entity;
				if (((previousValue != value) 
							|| (this._PhoneticAlgorithm.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._PhoneticAlgorithm.Entity = null;
						previousValue.PhoneticValues.Remove(this);
					}
					this._PhoneticAlgorithm.Entity = value;
					if ((value != null))
					{
						value.PhoneticValues.Add(this);
						this._PhoneticAlgorithmId = value.PhoneticAlgorithmId;
					}
					else
					{
						this._PhoneticAlgorithmId = default(System.Guid);
					}
					this.SendPropertyChanged("PhoneticAlgorithm");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_EntityNameComponents(EntityNameComponent entity)
		{
			this.SendPropertyChanging();
			entity.PhoneticValue = this;
		}
		
		private void detach_EntityNameComponents(EntityNameComponent entity)
		{
			this.SendPropertyChanging();
			entity.PhoneticValue = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Place")]
	public partial class Place : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _EntityVersionId;
		
		private bool _MobileInd;
		
		private System.Nullable<double> _Lat;
		
		private System.Nullable<double> _Lng;
		
		private EntityRef<EntityVersion> _EntityVersion;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnEntityVersionIdChanging(System.Guid value);
    partial void OnEntityVersionIdChanged();
    partial void OnMobileIndChanging(bool value);
    partial void OnMobileIndChanged();
    partial void OnLatChanging(System.Nullable<double> value);
    partial void OnLatChanged();
    partial void OnLngChanging(System.Nullable<double> value);
    partial void OnLngChanged();
    #endregion
		
		public Place()
		{
			this._EntityVersion = default(EntityRef<EntityVersion>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EntityVersionId", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid EntityVersionId
		{
			get
			{
				return this._EntityVersionId;
			}
			set
			{
				if ((this._EntityVersionId != value))
				{
					if (this._EntityVersion.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnEntityVersionIdChanging(value);
					this.SendPropertyChanging();
					this._EntityVersionId = value;
					this.SendPropertyChanged("EntityVersionId");
					this.OnEntityVersionIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MobileInd", DbType="Bit NOT NULL")]
		public bool MobileInd
		{
			get
			{
				return this._MobileInd;
			}
			set
			{
				if ((this._MobileInd != value))
				{
					this.OnMobileIndChanging(value);
					this.SendPropertyChanging();
					this._MobileInd = value;
					this.SendPropertyChanged("MobileInd");
					this.OnMobileIndChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Lat", DbType="Float")]
		public System.Nullable<double> Lat
		{
			get
			{
				return this._Lat;
			}
			set
			{
				if ((this._Lat != value))
				{
					this.OnLatChanging(value);
					this.SendPropertyChanging();
					this._Lat = value;
					this.SendPropertyChanged("Lat");
					this.OnLatChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Lng", DbType="Float")]
		public System.Nullable<double> Lng
		{
			get
			{
				return this._Lng;
			}
			set
			{
				if ((this._Lng != value))
				{
					this.OnLngChanging(value);
					this.SendPropertyChanging();
					this._Lng = value;
					this.SendPropertyChanged("Lng");
					this.OnLngChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="EntityVersion_Place", Storage="_EntityVersion", ThisKey="EntityVersionId", OtherKey="EntityVersionId", IsForeignKey=true)]
		public EntityVersion EntityVersion
		{
			get
			{
				return this._EntityVersion.Entity;
			}
			set
			{
				EntityVersion previousValue = this._EntityVersion.Entity;
				if (((previousValue != value) 
							|| (this._EntityVersion.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._EntityVersion.Entity = null;
						previousValue.Place = null;
					}
					this._EntityVersion.Entity = value;
					if ((value != null))
					{
						value.Place = this;
						this._EntityVersionId = value.EntityVersionId;
					}
					else
					{
						this._EntityVersionId = default(System.Guid);
					}
					this.SendPropertyChanged("EntityVersion");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.PlaceService")]
	public partial class PlaceService : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _PlaceServiceId;
		
		private System.Guid _PlaceEntityId;
		
		private decimal _EffectiveVersionSequenceId;
		
		private System.Nullable<decimal> _ObsoleteVersionSequenceId;
		
		private System.Guid _ServiceConceptId;
		
		private System.Xml.Linq.XElement _ServiceSchedule;
		
		private EntityRef<Entity> _PlaceEntity;
		
		private EntityRef<Concept> _ServiceConcept;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnPlaceServiceIdChanging(System.Guid value);
    partial void OnPlaceServiceIdChanged();
    partial void OnPlaceEntityIdChanging(System.Guid value);
    partial void OnPlaceEntityIdChanged();
    partial void OnEffectiveVersionSequenceIdChanging(decimal value);
    partial void OnEffectiveVersionSequenceIdChanged();
    partial void OnObsoleteVersionSequenceIdChanging(System.Nullable<decimal> value);
    partial void OnObsoleteVersionSequenceIdChanged();
    partial void OnServiceConceptIdChanging(System.Guid value);
    partial void OnServiceConceptIdChanged();
    partial void OnServiceScheduleChanging(System.Xml.Linq.XElement value);
    partial void OnServiceScheduleChanged();
    #endregion
		
		public PlaceService()
		{
			this._PlaceEntity = default(EntityRef<Entity>);
			this._ServiceConcept = default(EntityRef<Concept>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PlaceServiceId", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid PlaceServiceId
		{
			get
			{
				return this._PlaceServiceId;
			}
			set
			{
				if ((this._PlaceServiceId != value))
				{
					this.OnPlaceServiceIdChanging(value);
					this.SendPropertyChanging();
					this._PlaceServiceId = value;
					this.SendPropertyChanged("PlaceServiceId");
					this.OnPlaceServiceIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PlaceEntityId", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid PlaceEntityId
		{
			get
			{
				return this._PlaceEntityId;
			}
			set
			{
				if ((this._PlaceEntityId != value))
				{
					if (this._PlaceEntity.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPlaceEntityIdChanging(value);
					this.SendPropertyChanging();
					this._PlaceEntityId = value;
					this.SendPropertyChanged("PlaceEntityId");
					this.OnPlaceEntityIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EffectiveVersionSequenceId", DbType="Decimal(20,0) NOT NULL")]
		public decimal EffectiveVersionSequenceId
		{
			get
			{
				return this._EffectiveVersionSequenceId;
			}
			set
			{
				if ((this._EffectiveVersionSequenceId != value))
				{
					this.OnEffectiveVersionSequenceIdChanging(value);
					this.SendPropertyChanging();
					this._EffectiveVersionSequenceId = value;
					this.SendPropertyChanged("EffectiveVersionSequenceId");
					this.OnEffectiveVersionSequenceIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ObsoleteVersionSequenceId", DbType="Decimal(20,0)")]
		public System.Nullable<decimal> ObsoleteVersionSequenceId
		{
			get
			{
				return this._ObsoleteVersionSequenceId;
			}
			set
			{
				if ((this._ObsoleteVersionSequenceId != value))
				{
					this.OnObsoleteVersionSequenceIdChanging(value);
					this.SendPropertyChanging();
					this._ObsoleteVersionSequenceId = value;
					this.SendPropertyChanged("ObsoleteVersionSequenceId");
					this.OnObsoleteVersionSequenceIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ServiceConceptId", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid ServiceConceptId
		{
			get
			{
				return this._ServiceConceptId;
			}
			set
			{
				if ((this._ServiceConceptId != value))
				{
					if (this._ServiceConcept.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnServiceConceptIdChanging(value);
					this.SendPropertyChanging();
					this._ServiceConceptId = value;
					this.SendPropertyChanged("ServiceConceptId");
					this.OnServiceConceptIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ServiceSchedule", DbType="Xml NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public System.Xml.Linq.XElement ServiceSchedule
		{
			get
			{
				return this._ServiceSchedule;
			}
			set
			{
				if ((this._ServiceSchedule != value))
				{
					this.OnServiceScheduleChanging(value);
					this.SendPropertyChanging();
					this._ServiceSchedule = value;
					this.SendPropertyChanged("ServiceSchedule");
					this.OnServiceScheduleChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Entity_PlaceService", Storage="_PlaceEntity", ThisKey="PlaceEntityId", OtherKey="EntityId", IsForeignKey=true)]
		public Entity PlaceEntity
		{
			get
			{
				return this._PlaceEntity.Entity;
			}
			set
			{
				Entity previousValue = this._PlaceEntity.Entity;
				if (((previousValue != value) 
							|| (this._PlaceEntity.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._PlaceEntity.Entity = null;
						previousValue.PlaceServicesPlaceEntityId.Remove(this);
					}
					this._PlaceEntity.Entity = value;
					if ((value != null))
					{
						value.PlaceServicesPlaceEntityId.Add(this);
						this._PlaceEntityId = value.EntityId;
					}
					else
					{
						this._PlaceEntityId = default(System.Guid);
					}
					this.SendPropertyChanged("PlaceEntity");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Concept_PlaceService", Storage="_ServiceConcept", ThisKey="ServiceConceptId", OtherKey="ConceptId", IsForeignKey=true)]
		public Concept ServiceConcept
		{
			get
			{
				return this._ServiceConcept.Entity;
			}
			set
			{
				Concept previousValue = this._ServiceConcept.Entity;
				if (((previousValue != value) 
							|| (this._ServiceConcept.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ServiceConcept.Entity = null;
						previousValue.PlaceServicesServiceConceptId.Remove(this);
					}
					this._ServiceConcept.Entity = value;
					if ((value != null))
					{
						value.PlaceServicesServiceConceptId.Add(this);
						this._ServiceConceptId = value.ConceptId;
					}
					else
					{
						this._ServiceConceptId = default(System.Guid);
					}
					this.SendPropertyChanged("ServiceConcept");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Policy")]
	public partial class Policy : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _PolicyId;
		
		private string _PolicyOid;
		
		private string _Name;
		
		private string _HandlerClass;
		
		private bool _IsPublic;
		
		private bool _CanElevate;
		
		private System.DateTimeOffset _CreationTime;
		
		private System.Guid _CreatedBy;
		
		private System.Nullable<System.DateTimeOffset> _ObsoletionTime;
		
		private System.Nullable<System.Guid> _ObsoletedBy;
		
		private EntitySet<ActPolicy> _ActPolicies;
		
		private EntitySet<SecurityApplicationPolicy> _SecurityApplicationPolicies;
		
		private EntitySet<SecurityDevicePolicy> _SecurityDevicePolicies;
		
		private EntitySet<SecurityRolePolicy> _SecurityRolePolicies;
		
		private EntityRef<SecurityUser> _CreatedByEntity;
		
		private EntityRef<SecurityUser> _ObsoletedByEntity;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnPolicyIdChanging(System.Guid value);
    partial void OnPolicyIdChanged();
    partial void OnPolicyOidChanging(string value);
    partial void OnPolicyOidChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnHandlerClassChanging(string value);
    partial void OnHandlerClassChanged();
    partial void OnIsPublicChanging(bool value);
    partial void OnIsPublicChanged();
    partial void OnCanElevateChanging(bool value);
    partial void OnCanElevateChanged();
    partial void OnCreationTimeChanging(System.DateTimeOffset value);
    partial void OnCreationTimeChanged();
    partial void OnCreatedByChanging(System.Guid value);
    partial void OnCreatedByChanged();
    partial void OnObsoletionTimeChanging(System.Nullable<System.DateTimeOffset> value);
    partial void OnObsoletionTimeChanged();
    partial void OnObsoletedByChanging(System.Nullable<System.Guid> value);
    partial void OnObsoletedByChanged();
    #endregion
		
		public Policy()
		{
			this._ActPolicies = new EntitySet<ActPolicy>(new Action<ActPolicy>(this.attach_ActPolicies), new Action<ActPolicy>(this.detach_ActPolicies));
			this._SecurityApplicationPolicies = new EntitySet<SecurityApplicationPolicy>(new Action<SecurityApplicationPolicy>(this.attach_SecurityApplicationPolicies), new Action<SecurityApplicationPolicy>(this.detach_SecurityApplicationPolicies));
			this._SecurityDevicePolicies = new EntitySet<SecurityDevicePolicy>(new Action<SecurityDevicePolicy>(this.attach_SecurityDevicePolicies), new Action<SecurityDevicePolicy>(this.detach_SecurityDevicePolicies));
			this._SecurityRolePolicies = new EntitySet<SecurityRolePolicy>(new Action<SecurityRolePolicy>(this.attach_SecurityRolePolicies), new Action<SecurityRolePolicy>(this.detach_SecurityRolePolicies));
			this._CreatedByEntity = default(EntityRef<SecurityUser>);
			this._ObsoletedByEntity = default(EntityRef<SecurityUser>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PolicyId", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid PolicyId
		{
			get
			{
				return this._PolicyId;
			}
			set
			{
				if ((this._PolicyId != value))
				{
					this.OnPolicyIdChanging(value);
					this.SendPropertyChanging();
					this._PolicyId = value;
					this.SendPropertyChanged("PolicyId");
					this.OnPolicyIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PolicyOid", DbType="NVarChar(128) NOT NULL", CanBeNull=false)]
		public string PolicyOid
		{
			get
			{
				return this._PolicyOid;
			}
			set
			{
				if ((this._PolicyOid != value))
				{
					this.OnPolicyOidChanging(value);
					this.SendPropertyChanging();
					this._PolicyOid = value;
					this.SendPropertyChanged("PolicyOid");
					this.OnPolicyOidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(64) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_HandlerClass", DbType="NVarChar(256)")]
		public string HandlerClass
		{
			get
			{
				return this._HandlerClass;
			}
			set
			{
				if ((this._HandlerClass != value))
				{
					this.OnHandlerClassChanging(value);
					this.SendPropertyChanging();
					this._HandlerClass = value;
					this.SendPropertyChanged("HandlerClass");
					this.OnHandlerClassChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsPublic", DbType="Bit NOT NULL")]
		public bool IsPublic
		{
			get
			{
				return this._IsPublic;
			}
			set
			{
				if ((this._IsPublic != value))
				{
					this.OnIsPublicChanging(value);
					this.SendPropertyChanging();
					this._IsPublic = value;
					this.SendPropertyChanged("IsPublic");
					this.OnIsPublicChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CanElevate", DbType="Bit NOT NULL")]
		public bool CanElevate
		{
			get
			{
				return this._CanElevate;
			}
			set
			{
				if ((this._CanElevate != value))
				{
					this.OnCanElevateChanging(value);
					this.SendPropertyChanging();
					this._CanElevate = value;
					this.SendPropertyChanged("CanElevate");
					this.OnCanElevateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CreationTime", AutoSync=AutoSync.Always, DbType="DateTimeOffset NOT NULL", IsDbGenerated=true)]
		public System.DateTimeOffset CreationTime
		{
			get
			{
				return this._CreationTime;
			}
			set
			{
				if ((this._CreationTime != value))
				{
					this.OnCreationTimeChanging(value);
					this.SendPropertyChanging();
					this._CreationTime = value;
					this.SendPropertyChanged("CreationTime");
					this.OnCreationTimeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CreatedBy", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid CreatedBy
		{
			get
			{
				return this._CreatedBy;
			}
			set
			{
				if ((this._CreatedBy != value))
				{
					if (this._CreatedByEntity.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCreatedByChanging(value);
					this.SendPropertyChanging();
					this._CreatedBy = value;
					this.SendPropertyChanged("CreatedBy");
					this.OnCreatedByChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ObsoletionTime", DbType="DateTimeOffset")]
		public System.Nullable<System.DateTimeOffset> ObsoletionTime
		{
			get
			{
				return this._ObsoletionTime;
			}
			set
			{
				if ((this._ObsoletionTime != value))
				{
					this.OnObsoletionTimeChanging(value);
					this.SendPropertyChanging();
					this._ObsoletionTime = value;
					this.SendPropertyChanged("ObsoletionTime");
					this.OnObsoletionTimeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ObsoletedBy", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> ObsoletedBy
		{
			get
			{
				return this._ObsoletedBy;
			}
			set
			{
				if ((this._ObsoletedBy != value))
				{
					if (this._ObsoletedByEntity.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnObsoletedByChanging(value);
					this.SendPropertyChanging();
					this._ObsoletedBy = value;
					this.SendPropertyChanged("ObsoletedBy");
					this.OnObsoletedByChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Policy_ActPolicy", Storage="_ActPolicies", ThisKey="PolicyId", OtherKey="PolicyId")]
		public EntitySet<ActPolicy> ActPolicies
		{
			get
			{
				return this._ActPolicies;
			}
			set
			{
				this._ActPolicies.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Policy_SecurityApplicationPolicy", Storage="_SecurityApplicationPolicies", ThisKey="PolicyId", OtherKey="PolicyId")]
		public EntitySet<SecurityApplicationPolicy> SecurityApplicationPolicies
		{
			get
			{
				return this._SecurityApplicationPolicies;
			}
			set
			{
				this._SecurityApplicationPolicies.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Policy_SecurityDevicePolicy", Storage="_SecurityDevicePolicies", ThisKey="PolicyId", OtherKey="PolicyId")]
		public EntitySet<SecurityDevicePolicy> SecurityDevicePolicies
		{
			get
			{
				return this._SecurityDevicePolicies;
			}
			set
			{
				this._SecurityDevicePolicies.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Policy_SecurityRolePolicy", Storage="_SecurityRolePolicies", ThisKey="PolicyId", OtherKey="PolicyId")]
		public EntitySet<SecurityRolePolicy> SecurityRolePolicies
		{
			get
			{
				return this._SecurityRolePolicies;
			}
			set
			{
				this._SecurityRolePolicies.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="SecurityUser_Policy", Storage="_CreatedByEntity", ThisKey="CreatedBy", OtherKey="UserId", IsForeignKey=true)]
		public SecurityUser CreatedByEntity
		{
			get
			{
				return this._CreatedByEntity.Entity;
			}
			set
			{
				SecurityUser previousValue = this._CreatedByEntity.Entity;
				if (((previousValue != value) 
							|| (this._CreatedByEntity.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._CreatedByEntity.Entity = null;
						previousValue.PoliciesCreatedBy.Remove(this);
					}
					this._CreatedByEntity.Entity = value;
					if ((value != null))
					{
						value.PoliciesCreatedBy.Add(this);
						this._CreatedBy = value.UserId;
					}
					else
					{
						this._CreatedBy = default(System.Guid);
					}
					this.SendPropertyChanged("CreatedByEntity");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="SecurityUser_Policy1", Storage="_ObsoletedByEntity", ThisKey="ObsoletedBy", OtherKey="UserId", IsForeignKey=true)]
		public SecurityUser ObsoletedByEntity
		{
			get
			{
				return this._ObsoletedByEntity.Entity;
			}
			set
			{
				SecurityUser previousValue = this._ObsoletedByEntity.Entity;
				if (((previousValue != value) 
							|| (this._ObsoletedByEntity.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ObsoletedByEntity.Entity = null;
						previousValue.PoliciesObsoletedBy.Remove(this);
					}
					this._ObsoletedByEntity.Entity = value;
					if ((value != null))
					{
						value.PoliciesObsoletedBy.Add(this);
						this._ObsoletedBy = value.UserId;
					}
					else
					{
						this._ObsoletedBy = default(Nullable<System.Guid>);
					}
					this.SendPropertyChanged("ObsoletedByEntity");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_ActPolicies(ActPolicy entity)
		{
			this.SendPropertyChanging();
			entity.Policy = this;
		}
		
		private void detach_ActPolicies(ActPolicy entity)
		{
			this.SendPropertyChanging();
			entity.Policy = null;
		}
		
		private void attach_SecurityApplicationPolicies(SecurityApplicationPolicy entity)
		{
			this.SendPropertyChanging();
			entity.Policy = this;
		}
		
		private void detach_SecurityApplicationPolicies(SecurityApplicationPolicy entity)
		{
			this.SendPropertyChanging();
			entity.Policy = null;
		}
		
		private void attach_SecurityDevicePolicies(SecurityDevicePolicy entity)
		{
			this.SendPropertyChanging();
			entity.Policy = this;
		}
		
		private void detach_SecurityDevicePolicies(SecurityDevicePolicy entity)
		{
			this.SendPropertyChanging();
			entity.Policy = null;
		}
		
		private void attach_SecurityRolePolicies(SecurityRolePolicy entity)
		{
			this.SendPropertyChanging();
			entity.Policy = this;
		}
		
		private void detach_SecurityRolePolicies(SecurityRolePolicy entity)
		{
			this.SendPropertyChanging();
			entity.Policy = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Protocol")]
	public partial class Protocol : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _ProtocolId;
		
		private string _Name;
		
		private System.Guid _ProtocolHandlerId;
		
		private System.Xml.Linq.XElement _ProtocolDefinition;
		
		private System.DateTimeOffset _CreationTime;
		
		private System.Guid _CreatedBy;
		
		private System.Nullable<System.DateTimeOffset> _ObsoletionTime;
		
		private System.Nullable<System.Guid> _ObsoletedBy;
		
		private System.Nullable<System.Guid> _ReplacesProtocolId;
		
		private EntitySet<ActProtocol> _ActProtocols;
		
		private EntitySet<Protocol> _ProtocolsReplacesProtocolId;
		
		private EntityRef<Protocol> _ReplacesProtocol;
		
		private EntityRef<ProtocolHandler> _ProtocolHandler;
		
		private EntityRef<SecurityUser> _CreatedByEntity;
		
		private EntityRef<SecurityUser> _ObsoletedByEntity;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnProtocolIdChanging(System.Guid value);
    partial void OnProtocolIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnProtocolHandlerIdChanging(System.Guid value);
    partial void OnProtocolHandlerIdChanged();
    partial void OnProtocolDefinitionChanging(System.Xml.Linq.XElement value);
    partial void OnProtocolDefinitionChanged();
    partial void OnCreationTimeChanging(System.DateTimeOffset value);
    partial void OnCreationTimeChanged();
    partial void OnCreatedByChanging(System.Guid value);
    partial void OnCreatedByChanged();
    partial void OnObsoletionTimeChanging(System.Nullable<System.DateTimeOffset> value);
    partial void OnObsoletionTimeChanged();
    partial void OnObsoletedByChanging(System.Nullable<System.Guid> value);
    partial void OnObsoletedByChanged();
    partial void OnReplacesProtocolIdChanging(System.Nullable<System.Guid> value);
    partial void OnReplacesProtocolIdChanged();
    #endregion
		
		public Protocol()
		{
			this._ActProtocols = new EntitySet<ActProtocol>(new Action<ActProtocol>(this.attach_ActProtocols), new Action<ActProtocol>(this.detach_ActProtocols));
			this._ProtocolsReplacesProtocolId = new EntitySet<Protocol>(new Action<Protocol>(this.attach_ProtocolsReplacesProtocolId), new Action<Protocol>(this.detach_ProtocolsReplacesProtocolId));
			this._ReplacesProtocol = default(EntityRef<Protocol>);
			this._ProtocolHandler = default(EntityRef<ProtocolHandler>);
			this._CreatedByEntity = default(EntityRef<SecurityUser>);
			this._ObsoletedByEntity = default(EntityRef<SecurityUser>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProtocolId", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid ProtocolId
		{
			get
			{
				return this._ProtocolId;
			}
			set
			{
				if ((this._ProtocolId != value))
				{
					this.OnProtocolIdChanging(value);
					this.SendPropertyChanging();
					this._ProtocolId = value;
					this.SendPropertyChanged("ProtocolId");
					this.OnProtocolIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(64) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProtocolHandlerId", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid ProtocolHandlerId
		{
			get
			{
				return this._ProtocolHandlerId;
			}
			set
			{
				if ((this._ProtocolHandlerId != value))
				{
					if (this._ProtocolHandler.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnProtocolHandlerIdChanging(value);
					this.SendPropertyChanging();
					this._ProtocolHandlerId = value;
					this.SendPropertyChanged("ProtocolHandlerId");
					this.OnProtocolHandlerIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProtocolDefinition", DbType="Xml", UpdateCheck=UpdateCheck.Never)]
		public System.Xml.Linq.XElement ProtocolDefinition
		{
			get
			{
				return this._ProtocolDefinition;
			}
			set
			{
				if ((this._ProtocolDefinition != value))
				{
					this.OnProtocolDefinitionChanging(value);
					this.SendPropertyChanging();
					this._ProtocolDefinition = value;
					this.SendPropertyChanged("ProtocolDefinition");
					this.OnProtocolDefinitionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CreationTime", AutoSync=AutoSync.Always, DbType="DateTimeOffset NOT NULL", IsDbGenerated=true)]
		public System.DateTimeOffset CreationTime
		{
			get
			{
				return this._CreationTime;
			}
			set
			{
				if ((this._CreationTime != value))
				{
					this.OnCreationTimeChanging(value);
					this.SendPropertyChanging();
					this._CreationTime = value;
					this.SendPropertyChanged("CreationTime");
					this.OnCreationTimeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CreatedBy", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid CreatedBy
		{
			get
			{
				return this._CreatedBy;
			}
			set
			{
				if ((this._CreatedBy != value))
				{
					if (this._CreatedByEntity.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCreatedByChanging(value);
					this.SendPropertyChanging();
					this._CreatedBy = value;
					this.SendPropertyChanged("CreatedBy");
					this.OnCreatedByChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ObsoletionTime", DbType="DateTimeOffset")]
		public System.Nullable<System.DateTimeOffset> ObsoletionTime
		{
			get
			{
				return this._ObsoletionTime;
			}
			set
			{
				if ((this._ObsoletionTime != value))
				{
					this.OnObsoletionTimeChanging(value);
					this.SendPropertyChanging();
					this._ObsoletionTime = value;
					this.SendPropertyChanged("ObsoletionTime");
					this.OnObsoletionTimeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ObsoletedBy", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> ObsoletedBy
		{
			get
			{
				return this._ObsoletedBy;
			}
			set
			{
				if ((this._ObsoletedBy != value))
				{
					if (this._ObsoletedByEntity.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnObsoletedByChanging(value);
					this.SendPropertyChanging();
					this._ObsoletedBy = value;
					this.SendPropertyChanged("ObsoletedBy");
					this.OnObsoletedByChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ReplacesProtocolId", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> ReplacesProtocolId
		{
			get
			{
				return this._ReplacesProtocolId;
			}
			set
			{
				if ((this._ReplacesProtocolId != value))
				{
					if (this._ReplacesProtocol.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnReplacesProtocolIdChanging(value);
					this.SendPropertyChanging();
					this._ReplacesProtocolId = value;
					this.SendPropertyChanged("ReplacesProtocolId");
					this.OnReplacesProtocolIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Protocol_ActProtocol", Storage="_ActProtocols", ThisKey="ProtocolId", OtherKey="ProtocolId")]
		public EntitySet<ActProtocol> ActProtocols
		{
			get
			{
				return this._ActProtocols;
			}
			set
			{
				this._ActProtocols.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Protocol_Protocol", Storage="_ProtocolsReplacesProtocolId", ThisKey="ProtocolId", OtherKey="ReplacesProtocolId")]
		public EntitySet<Protocol> ProtocolsReplacesProtocolId
		{
			get
			{
				return this._ProtocolsReplacesProtocolId;
			}
			set
			{
				this._ProtocolsReplacesProtocolId.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Protocol_Protocol", Storage="_ReplacesProtocol", ThisKey="ReplacesProtocolId", OtherKey="ProtocolId", IsForeignKey=true)]
		public Protocol ReplacesProtocol
		{
			get
			{
				return this._ReplacesProtocol.Entity;
			}
			set
			{
				Protocol previousValue = this._ReplacesProtocol.Entity;
				if (((previousValue != value) 
							|| (this._ReplacesProtocol.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ReplacesProtocol.Entity = null;
						previousValue.ProtocolsReplacesProtocolId.Remove(this);
					}
					this._ReplacesProtocol.Entity = value;
					if ((value != null))
					{
						value.ProtocolsReplacesProtocolId.Add(this);
						this._ReplacesProtocolId = value.ProtocolId;
					}
					else
					{
						this._ReplacesProtocolId = default(Nullable<System.Guid>);
					}
					this.SendPropertyChanged("ReplacesProtocol");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ProtocolHandler_Protocol", Storage="_ProtocolHandler", ThisKey="ProtocolHandlerId", OtherKey="ProtocolHandlerId", IsForeignKey=true)]
		public ProtocolHandler ProtocolHandler
		{
			get
			{
				return this._ProtocolHandler.Entity;
			}
			set
			{
				ProtocolHandler previousValue = this._ProtocolHandler.Entity;
				if (((previousValue != value) 
							|| (this._ProtocolHandler.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ProtocolHandler.Entity = null;
						previousValue.Protocols.Remove(this);
					}
					this._ProtocolHandler.Entity = value;
					if ((value != null))
					{
						value.Protocols.Add(this);
						this._ProtocolHandlerId = value.ProtocolHandlerId;
					}
					else
					{
						this._ProtocolHandlerId = default(System.Guid);
					}
					this.SendPropertyChanged("ProtocolHandler");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="SecurityUser_Protocol", Storage="_CreatedByEntity", ThisKey="CreatedBy", OtherKey="UserId", IsForeignKey=true)]
		public SecurityUser CreatedByEntity
		{
			get
			{
				return this._CreatedByEntity.Entity;
			}
			set
			{
				SecurityUser previousValue = this._CreatedByEntity.Entity;
				if (((previousValue != value) 
							|| (this._CreatedByEntity.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._CreatedByEntity.Entity = null;
						previousValue.ProtocolsCreatedBy.Remove(this);
					}
					this._CreatedByEntity.Entity = value;
					if ((value != null))
					{
						value.ProtocolsCreatedBy.Add(this);
						this._CreatedBy = value.UserId;
					}
					else
					{
						this._CreatedBy = default(System.Guid);
					}
					this.SendPropertyChanged("CreatedByEntity");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="SecurityUser_Protocol1", Storage="_ObsoletedByEntity", ThisKey="ObsoletedBy", OtherKey="UserId", IsForeignKey=true)]
		public SecurityUser ObsoletedByEntity
		{
			get
			{
				return this._ObsoletedByEntity.Entity;
			}
			set
			{
				SecurityUser previousValue = this._ObsoletedByEntity.Entity;
				if (((previousValue != value) 
							|| (this._ObsoletedByEntity.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ObsoletedByEntity.Entity = null;
						previousValue.ProtocolsObsoletedBy.Remove(this);
					}
					this._ObsoletedByEntity.Entity = value;
					if ((value != null))
					{
						value.ProtocolsObsoletedBy.Add(this);
						this._ObsoletedBy = value.UserId;
					}
					else
					{
						this._ObsoletedBy = default(Nullable<System.Guid>);
					}
					this.SendPropertyChanged("ObsoletedByEntity");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_ActProtocols(ActProtocol entity)
		{
			this.SendPropertyChanging();
			entity.Protocol = this;
		}
		
		private void detach_ActProtocols(ActProtocol entity)
		{
			this.SendPropertyChanging();
			entity.Protocol = null;
		}
		
		private void attach_ProtocolsReplacesProtocolId(Protocol entity)
		{
			this.SendPropertyChanging();
			entity.ReplacesProtocol = this;
		}
		
		private void detach_ProtocolsReplacesProtocolId(Protocol entity)
		{
			this.SendPropertyChanging();
			entity.ReplacesProtocol = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ProtocolHandler")]
	public partial class ProtocolHandler : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _ProtocolHandlerId;
		
		private string _Name;
		
		private string _HandlerClass;
		
		private bool _IsActive;
		
		private System.DateTimeOffset _CreationTime;
		
		private System.Guid _CreatedBy;
		
		private System.Nullable<System.DateTimeOffset> _ObsoletionTime;
		
		private System.Nullable<System.Guid> _ObsoletedBy;
		
		private EntitySet<Protocol> _Protocols;
		
		private EntityRef<SecurityUser> _CreatedByEntity;
		
		private EntityRef<SecurityUser> _ObsoletedByEntity;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnProtocolHandlerIdChanging(System.Guid value);
    partial void OnProtocolHandlerIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnHandlerClassChanging(string value);
    partial void OnHandlerClassChanged();
    partial void OnIsActiveChanging(bool value);
    partial void OnIsActiveChanged();
    partial void OnCreationTimeChanging(System.DateTimeOffset value);
    partial void OnCreationTimeChanged();
    partial void OnCreatedByChanging(System.Guid value);
    partial void OnCreatedByChanged();
    partial void OnObsoletionTimeChanging(System.Nullable<System.DateTimeOffset> value);
    partial void OnObsoletionTimeChanged();
    partial void OnObsoletedByChanging(System.Nullable<System.Guid> value);
    partial void OnObsoletedByChanged();
    #endregion
		
		public ProtocolHandler()
		{
			this._Protocols = new EntitySet<Protocol>(new Action<Protocol>(this.attach_Protocols), new Action<Protocol>(this.detach_Protocols));
			this._CreatedByEntity = default(EntityRef<SecurityUser>);
			this._ObsoletedByEntity = default(EntityRef<SecurityUser>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProtocolHandlerId", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid ProtocolHandlerId
		{
			get
			{
				return this._ProtocolHandlerId;
			}
			set
			{
				if ((this._ProtocolHandlerId != value))
				{
					this.OnProtocolHandlerIdChanging(value);
					this.SendPropertyChanging();
					this._ProtocolHandlerId = value;
					this.SendPropertyChanged("ProtocolHandlerId");
					this.OnProtocolHandlerIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(64) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_HandlerClass", DbType="NVarChar(256) NOT NULL", CanBeNull=false)]
		public string HandlerClass
		{
			get
			{
				return this._HandlerClass;
			}
			set
			{
				if ((this._HandlerClass != value))
				{
					this.OnHandlerClassChanging(value);
					this.SendPropertyChanging();
					this._HandlerClass = value;
					this.SendPropertyChanged("HandlerClass");
					this.OnHandlerClassChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsActive", DbType="Bit NOT NULL")]
		public bool IsActive
		{
			get
			{
				return this._IsActive;
			}
			set
			{
				if ((this._IsActive != value))
				{
					this.OnIsActiveChanging(value);
					this.SendPropertyChanging();
					this._IsActive = value;
					this.SendPropertyChanged("IsActive");
					this.OnIsActiveChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CreationTime", AutoSync=AutoSync.Always, DbType="DateTimeOffset NOT NULL", IsDbGenerated=true)]
		public System.DateTimeOffset CreationTime
		{
			get
			{
				return this._CreationTime;
			}
			set
			{
				if ((this._CreationTime != value))
				{
					this.OnCreationTimeChanging(value);
					this.SendPropertyChanging();
					this._CreationTime = value;
					this.SendPropertyChanged("CreationTime");
					this.OnCreationTimeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CreatedBy", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid CreatedBy
		{
			get
			{
				return this._CreatedBy;
			}
			set
			{
				if ((this._CreatedBy != value))
				{
					if (this._CreatedByEntity.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCreatedByChanging(value);
					this.SendPropertyChanging();
					this._CreatedBy = value;
					this.SendPropertyChanged("CreatedBy");
					this.OnCreatedByChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ObsoletionTime", DbType="DateTimeOffset")]
		public System.Nullable<System.DateTimeOffset> ObsoletionTime
		{
			get
			{
				return this._ObsoletionTime;
			}
			set
			{
				if ((this._ObsoletionTime != value))
				{
					this.OnObsoletionTimeChanging(value);
					this.SendPropertyChanging();
					this._ObsoletionTime = value;
					this.SendPropertyChanged("ObsoletionTime");
					this.OnObsoletionTimeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ObsoletedBy", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> ObsoletedBy
		{
			get
			{
				return this._ObsoletedBy;
			}
			set
			{
				if ((this._ObsoletedBy != value))
				{
					if (this._ObsoletedByEntity.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnObsoletedByChanging(value);
					this.SendPropertyChanging();
					this._ObsoletedBy = value;
					this.SendPropertyChanged("ObsoletedBy");
					this.OnObsoletedByChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ProtocolHandler_Protocol", Storage="_Protocols", ThisKey="ProtocolHandlerId", OtherKey="ProtocolHandlerId")]
		public EntitySet<Protocol> Protocols
		{
			get
			{
				return this._Protocols;
			}
			set
			{
				this._Protocols.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="SecurityUser_ProtocolHandler", Storage="_CreatedByEntity", ThisKey="CreatedBy", OtherKey="UserId", IsForeignKey=true)]
		public SecurityUser CreatedByEntity
		{
			get
			{
				return this._CreatedByEntity.Entity;
			}
			set
			{
				SecurityUser previousValue = this._CreatedByEntity.Entity;
				if (((previousValue != value) 
							|| (this._CreatedByEntity.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._CreatedByEntity.Entity = null;
						previousValue.ProtocolHandlersCreatedBy.Remove(this);
					}
					this._CreatedByEntity.Entity = value;
					if ((value != null))
					{
						value.ProtocolHandlersCreatedBy.Add(this);
						this._CreatedBy = value.UserId;
					}
					else
					{
						this._CreatedBy = default(System.Guid);
					}
					this.SendPropertyChanged("CreatedByEntity");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="SecurityUser_ProtocolHandler1", Storage="_ObsoletedByEntity", ThisKey="ObsoletedBy", OtherKey="UserId", IsForeignKey=true)]
		public SecurityUser ObsoletedByEntity
		{
			get
			{
				return this._ObsoletedByEntity.Entity;
			}
			set
			{
				SecurityUser previousValue = this._ObsoletedByEntity.Entity;
				if (((previousValue != value) 
							|| (this._ObsoletedByEntity.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ObsoletedByEntity.Entity = null;
						previousValue.ProtocolHandlersObsoletedBy.Remove(this);
					}
					this._ObsoletedByEntity.Entity = value;
					if ((value != null))
					{
						value.ProtocolHandlersObsoletedBy.Add(this);
						this._ObsoletedBy = value.UserId;
					}
					else
					{
						this._ObsoletedBy = default(Nullable<System.Guid>);
					}
					this.SendPropertyChanged("ObsoletedByEntity");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Protocols(Protocol entity)
		{
			this.SendPropertyChanging();
			entity.ProtocolHandler = this;
		}
		
		private void detach_Protocols(Protocol entity)
		{
			this.SendPropertyChanging();
			entity.ProtocolHandler = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Provider")]
	public partial class Provider : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _EntityVersionId;
		
		private System.Nullable<System.Guid> _ProviderSpecialtyConceptId;
		
		private EntityRef<Person> _Person;
		
		private EntityRef<Concept> _ProviderSpecialtyConcept;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnEntityVersionIdChanging(System.Guid value);
    partial void OnEntityVersionIdChanged();
    partial void OnProviderSpecialtyConceptIdChanging(System.Nullable<System.Guid> value);
    partial void OnProviderSpecialtyConceptIdChanged();
    #endregion
		
		public Provider()
		{
			this._Person = default(EntityRef<Person>);
			this._ProviderSpecialtyConcept = default(EntityRef<Concept>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EntityVersionId", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid EntityVersionId
		{
			get
			{
				return this._EntityVersionId;
			}
			set
			{
				if ((this._EntityVersionId != value))
				{
					if (this._Person.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnEntityVersionIdChanging(value);
					this.SendPropertyChanging();
					this._EntityVersionId = value;
					this.SendPropertyChanged("EntityVersionId");
					this.OnEntityVersionIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProviderSpecialtyConceptId", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> ProviderSpecialtyConceptId
		{
			get
			{
				return this._ProviderSpecialtyConceptId;
			}
			set
			{
				if ((this._ProviderSpecialtyConceptId != value))
				{
					if (this._ProviderSpecialtyConcept.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnProviderSpecialtyConceptIdChanging(value);
					this.SendPropertyChanging();
					this._ProviderSpecialtyConceptId = value;
					this.SendPropertyChanged("ProviderSpecialtyConceptId");
					this.OnProviderSpecialtyConceptIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Person_Provider", Storage="_Person", ThisKey="EntityVersionId", OtherKey="EntityVersionId", IsForeignKey=true)]
		public Person Person
		{
			get
			{
				return this._Person.Entity;
			}
			set
			{
				Person previousValue = this._Person.Entity;
				if (((previousValue != value) 
							|| (this._Person.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Person.Entity = null;
						previousValue.Provider = null;
					}
					this._Person.Entity = value;
					if ((value != null))
					{
						value.Provider = this;
						this._EntityVersionId = value.EntityVersionId;
					}
					else
					{
						this._EntityVersionId = default(System.Guid);
					}
					this.SendPropertyChanged("Person");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Concept_Provider", Storage="_ProviderSpecialtyConcept", ThisKey="ProviderSpecialtyConceptId", OtherKey="ConceptId", IsForeignKey=true)]
		public Concept ProviderSpecialtyConcept
		{
			get
			{
				return this._ProviderSpecialtyConcept.Entity;
			}
			set
			{
				Concept previousValue = this._ProviderSpecialtyConcept.Entity;
				if (((previousValue != value) 
							|| (this._ProviderSpecialtyConcept.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ProviderSpecialtyConcept.Entity = null;
						previousValue.ProvidersProviderSpecialtyConceptId.Remove(this);
					}
					this._ProviderSpecialtyConcept.Entity = value;
					if ((value != null))
					{
						value.ProvidersProviderSpecialtyConceptId.Add(this);
						this._ProviderSpecialtyConceptId = value.ConceptId;
					}
					else
					{
						this._ProviderSpecialtyConceptId = default(Nullable<System.Guid>);
					}
					this.SendPropertyChanged("ProviderSpecialtyConcept");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.QuantifiedActParticipation")]
	public partial class QuantifiedActParticipation : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _ActParticipationId;
		
		private int _Quantity;
		
		private EntityRef<ActParticipation> _ActParticipation;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnActParticipationIdChanging(System.Guid value);
    partial void OnActParticipationIdChanged();
    partial void OnQuantityChanging(int value);
    partial void OnQuantityChanged();
    #endregion
		
		public QuantifiedActParticipation()
		{
			this._ActParticipation = default(EntityRef<ActParticipation>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ActParticipationId", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid ActParticipationId
		{
			get
			{
				return this._ActParticipationId;
			}
			set
			{
				if ((this._ActParticipationId != value))
				{
					if (this._ActParticipation.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnActParticipationIdChanging(value);
					this.SendPropertyChanging();
					this._ActParticipationId = value;
					this.SendPropertyChanged("ActParticipationId");
					this.OnActParticipationIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Quantity", DbType="Int NOT NULL")]
		public int Quantity
		{
			get
			{
				return this._Quantity;
			}
			set
			{
				if ((this._Quantity != value))
				{
					this.OnQuantityChanging(value);
					this.SendPropertyChanging();
					this._Quantity = value;
					this.SendPropertyChanged("Quantity");
					this.OnQuantityChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ActParticipation_QuantifiedActParticipation", Storage="_ActParticipation", ThisKey="ActParticipationId", OtherKey="ActParticipationId", IsForeignKey=true)]
		public ActParticipation ActParticipation
		{
			get
			{
				return this._ActParticipation.Entity;
			}
			set
			{
				ActParticipation previousValue = this._ActParticipation.Entity;
				if (((previousValue != value) 
							|| (this._ActParticipation.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ActParticipation.Entity = null;
						previousValue.QuantifiedActParticipation = null;
					}
					this._ActParticipation.Entity = value;
					if ((value != null))
					{
						value.QuantifiedActParticipation = this;
						this._ActParticipationId = value.ActParticipationId;
					}
					else
					{
						this._ActParticipationId = default(System.Guid);
					}
					this.SendPropertyChanged("ActParticipation");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.QuantifiedEntityAssociation")]
	public partial class QuantifiedEntityAssociation : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _EntityAssociationId;
		
		private double _Quantity;
		
		private EntityRef<EntityAssociation> _EntityAssociation;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnEntityAssociationIdChanging(System.Guid value);
    partial void OnEntityAssociationIdChanged();
    partial void OnQuantityChanging(double value);
    partial void OnQuantityChanged();
    #endregion
		
		public QuantifiedEntityAssociation()
		{
			this._EntityAssociation = default(EntityRef<EntityAssociation>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EntityAssociationId", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid EntityAssociationId
		{
			get
			{
				return this._EntityAssociationId;
			}
			set
			{
				if ((this._EntityAssociationId != value))
				{
					if (this._EntityAssociation.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnEntityAssociationIdChanging(value);
					this.SendPropertyChanging();
					this._EntityAssociationId = value;
					this.SendPropertyChanged("EntityAssociationId");
					this.OnEntityAssociationIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Quantity", DbType="Float NOT NULL")]
		public double Quantity
		{
			get
			{
				return this._Quantity;
			}
			set
			{
				if ((this._Quantity != value))
				{
					this.OnQuantityChanging(value);
					this.SendPropertyChanging();
					this._Quantity = value;
					this.SendPropertyChanged("Quantity");
					this.OnQuantityChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="EntityAssociation_QuantifiedEntityAssociation", Storage="_EntityAssociation", ThisKey="EntityAssociationId", OtherKey="EntityAssociationId", IsForeignKey=true)]
		public EntityAssociation EntityAssociation
		{
			get
			{
				return this._EntityAssociation.Entity;
			}
			set
			{
				EntityAssociation previousValue = this._EntityAssociation.Entity;
				if (((previousValue != value) 
							|| (this._EntityAssociation.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._EntityAssociation.Entity = null;
						previousValue.QuantifiedEntityAssociation = null;
					}
					this._EntityAssociation.Entity = value;
					if ((value != null))
					{
						value.QuantifiedEntityAssociation = this;
						this._EntityAssociationId = value.EntityAssociationId;
					}
					else
					{
						this._EntityAssociationId = default(System.Guid);
					}
					this.SendPropertyChanged("EntityAssociation");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.QuantityObservation")]
	public partial class QuantityObservation : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _ActVersionId;
		
		private decimal _Quantity;
		
		private decimal _QuantityPrecision;
		
		private System.Guid _UnitOfMeasureConceptId;
		
		private EntityRef<Observation> _Observation;
		
		private EntityRef<Concept> _UnitOfMeasureConcept;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnActVersionIdChanging(System.Guid value);
    partial void OnActVersionIdChanged();
    partial void OnQuantityChanging(decimal value);
    partial void OnQuantityChanged();
    partial void OnQuantityPrecisionChanging(decimal value);
    partial void OnQuantityPrecisionChanged();
    partial void OnUnitOfMeasureConceptIdChanging(System.Guid value);
    partial void OnUnitOfMeasureConceptIdChanged();
    #endregion
		
		public QuantityObservation()
		{
			this._Observation = default(EntityRef<Observation>);
			this._UnitOfMeasureConcept = default(EntityRef<Concept>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ActVersionId", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid ActVersionId
		{
			get
			{
				return this._ActVersionId;
			}
			set
			{
				if ((this._ActVersionId != value))
				{
					if (this._Observation.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnActVersionIdChanging(value);
					this.SendPropertyChanging();
					this._ActVersionId = value;
					this.SendPropertyChanged("ActVersionId");
					this.OnActVersionIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Quantity", DbType="Decimal(18,0) NOT NULL")]
		public decimal Quantity
		{
			get
			{
				return this._Quantity;
			}
			set
			{
				if ((this._Quantity != value))
				{
					this.OnQuantityChanging(value);
					this.SendPropertyChanging();
					this._Quantity = value;
					this.SendPropertyChanged("Quantity");
					this.OnQuantityChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_QuantityPrecision", DbType="Decimal(2,0) NOT NULL")]
		public decimal QuantityPrecision
		{
			get
			{
				return this._QuantityPrecision;
			}
			set
			{
				if ((this._QuantityPrecision != value))
				{
					this.OnQuantityPrecisionChanging(value);
					this.SendPropertyChanging();
					this._QuantityPrecision = value;
					this.SendPropertyChanged("QuantityPrecision");
					this.OnQuantityPrecisionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UnitOfMeasureConceptId", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid UnitOfMeasureConceptId
		{
			get
			{
				return this._UnitOfMeasureConceptId;
			}
			set
			{
				if ((this._UnitOfMeasureConceptId != value))
				{
					if (this._UnitOfMeasureConcept.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUnitOfMeasureConceptIdChanging(value);
					this.SendPropertyChanging();
					this._UnitOfMeasureConceptId = value;
					this.SendPropertyChanged("UnitOfMeasureConceptId");
					this.OnUnitOfMeasureConceptIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Observation_QuantityObservation", Storage="_Observation", ThisKey="ActVersionId", OtherKey="ActVersionId", IsForeignKey=true)]
		public Observation Observation
		{
			get
			{
				return this._Observation.Entity;
			}
			set
			{
				Observation previousValue = this._Observation.Entity;
				if (((previousValue != value) 
							|| (this._Observation.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Observation.Entity = null;
						previousValue.QuantityObservation = null;
					}
					this._Observation.Entity = value;
					if ((value != null))
					{
						value.QuantityObservation = this;
						this._ActVersionId = value.ActVersionId;
					}
					else
					{
						this._ActVersionId = default(System.Guid);
					}
					this.SendPropertyChanged("Observation");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Concept_QuantityObservation", Storage="_UnitOfMeasureConcept", ThisKey="UnitOfMeasureConceptId", OtherKey="ConceptId", IsForeignKey=true)]
		public Concept UnitOfMeasureConcept
		{
			get
			{
				return this._UnitOfMeasureConcept.Entity;
			}
			set
			{
				Concept previousValue = this._UnitOfMeasureConcept.Entity;
				if (((previousValue != value) 
							|| (this._UnitOfMeasureConcept.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._UnitOfMeasureConcept.Entity = null;
						previousValue.QuantityObservationsUnitOfMeasureConceptId.Remove(this);
					}
					this._UnitOfMeasureConcept.Entity = value;
					if ((value != null))
					{
						value.QuantityObservationsUnitOfMeasureConceptId.Add(this);
						this._UnitOfMeasureConceptId = value.ConceptId;
					}
					else
					{
						this._UnitOfMeasureConceptId = default(System.Guid);
					}
					this.SendPropertyChanged("UnitOfMeasureConcept");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ReferenceTerm")]
	public partial class ReferenceTerm : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _ReferenceTermId;
		
		private System.Guid _CodeSystemId;
		
		private string _Mnemonic;
		
		private System.DateTimeOffset _CreationTime;
		
		private System.Guid _CreatedBy;
		
		private System.Nullable<System.DateTimeOffset> _UpdatedTime;
		
		private System.Nullable<System.Guid> _UpdatedBy;
		
		private System.Nullable<System.DateTimeOffset> _ObsoletionTime;
		
		private System.Nullable<System.Guid> _ObsoletedBy;
		
		private EntitySet<ConceptReferenceTerm> _ConceptReferenceTerms;
		
		private EntitySet<ReferenceTermDisplayName> _ReferenceTermDisplayNames;
		
		private EntityRef<CodeSystem> _CodeSystem;
		
		private EntityRef<SecurityUser> _CreatedByEntity;
		
		private EntityRef<SecurityUser> _ObsoletedByEntity;
		
		private EntityRef<SecurityUser> _UpdatedByEntity;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnReferenceTermIdChanging(System.Guid value);
    partial void OnReferenceTermIdChanged();
    partial void OnCodeSystemIdChanging(System.Guid value);
    partial void OnCodeSystemIdChanged();
    partial void OnMnemonicChanging(string value);
    partial void OnMnemonicChanged();
    partial void OnCreationTimeChanging(System.DateTimeOffset value);
    partial void OnCreationTimeChanged();
    partial void OnCreatedByChanging(System.Guid value);
    partial void OnCreatedByChanged();
    partial void OnUpdatedTimeChanging(System.Nullable<System.DateTimeOffset> value);
    partial void OnUpdatedTimeChanged();
    partial void OnUpdatedByChanging(System.Nullable<System.Guid> value);
    partial void OnUpdatedByChanged();
    partial void OnObsoletionTimeChanging(System.Nullable<System.DateTimeOffset> value);
    partial void OnObsoletionTimeChanged();
    partial void OnObsoletedByChanging(System.Nullable<System.Guid> value);
    partial void OnObsoletedByChanged();
    #endregion
		
		public ReferenceTerm()
		{
			this._ConceptReferenceTerms = new EntitySet<ConceptReferenceTerm>(new Action<ConceptReferenceTerm>(this.attach_ConceptReferenceTerms), new Action<ConceptReferenceTerm>(this.detach_ConceptReferenceTerms));
			this._ReferenceTermDisplayNames = new EntitySet<ReferenceTermDisplayName>(new Action<ReferenceTermDisplayName>(this.attach_ReferenceTermDisplayNames), new Action<ReferenceTermDisplayName>(this.detach_ReferenceTermDisplayNames));
			this._CodeSystem = default(EntityRef<CodeSystem>);
			this._CreatedByEntity = default(EntityRef<SecurityUser>);
			this._ObsoletedByEntity = default(EntityRef<SecurityUser>);
			this._UpdatedByEntity = default(EntityRef<SecurityUser>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ReferenceTermId", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid ReferenceTermId
		{
			get
			{
				return this._ReferenceTermId;
			}
			set
			{
				if ((this._ReferenceTermId != value))
				{
					this.OnReferenceTermIdChanging(value);
					this.SendPropertyChanging();
					this._ReferenceTermId = value;
					this.SendPropertyChanged("ReferenceTermId");
					this.OnReferenceTermIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CodeSystemId", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid CodeSystemId
		{
			get
			{
				return this._CodeSystemId;
			}
			set
			{
				if ((this._CodeSystemId != value))
				{
					if (this._CodeSystem.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCodeSystemIdChanging(value);
					this.SendPropertyChanging();
					this._CodeSystemId = value;
					this.SendPropertyChanged("CodeSystemId");
					this.OnCodeSystemIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Mnemonic", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Mnemonic
		{
			get
			{
				return this._Mnemonic;
			}
			set
			{
				if ((this._Mnemonic != value))
				{
					this.OnMnemonicChanging(value);
					this.SendPropertyChanging();
					this._Mnemonic = value;
					this.SendPropertyChanged("Mnemonic");
					this.OnMnemonicChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CreationTime", AutoSync=AutoSync.Always, DbType="DateTimeOffset NOT NULL", IsDbGenerated=true)]
		public System.DateTimeOffset CreationTime
		{
			get
			{
				return this._CreationTime;
			}
			set
			{
				if ((this._CreationTime != value))
				{
					this.OnCreationTimeChanging(value);
					this.SendPropertyChanging();
					this._CreationTime = value;
					this.SendPropertyChanged("CreationTime");
					this.OnCreationTimeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CreatedBy", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid CreatedBy
		{
			get
			{
				return this._CreatedBy;
			}
			set
			{
				if ((this._CreatedBy != value))
				{
					if (this._CreatedByEntity.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCreatedByChanging(value);
					this.SendPropertyChanging();
					this._CreatedBy = value;
					this.SendPropertyChanged("CreatedBy");
					this.OnCreatedByChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UpdatedTime", DbType="DateTimeOffset")]
		public System.Nullable<System.DateTimeOffset> UpdatedTime
		{
			get
			{
				return this._UpdatedTime;
			}
			set
			{
				if ((this._UpdatedTime != value))
				{
					this.OnUpdatedTimeChanging(value);
					this.SendPropertyChanging();
					this._UpdatedTime = value;
					this.SendPropertyChanged("UpdatedTime");
					this.OnUpdatedTimeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UpdatedBy", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> UpdatedBy
		{
			get
			{
				return this._UpdatedBy;
			}
			set
			{
				if ((this._UpdatedBy != value))
				{
					if (this._UpdatedByEntity.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUpdatedByChanging(value);
					this.SendPropertyChanging();
					this._UpdatedBy = value;
					this.SendPropertyChanged("UpdatedBy");
					this.OnUpdatedByChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ObsoletionTime", DbType="DateTimeOffset")]
		public System.Nullable<System.DateTimeOffset> ObsoletionTime
		{
			get
			{
				return this._ObsoletionTime;
			}
			set
			{
				if ((this._ObsoletionTime != value))
				{
					this.OnObsoletionTimeChanging(value);
					this.SendPropertyChanging();
					this._ObsoletionTime = value;
					this.SendPropertyChanged("ObsoletionTime");
					this.OnObsoletionTimeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ObsoletedBy", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> ObsoletedBy
		{
			get
			{
				return this._ObsoletedBy;
			}
			set
			{
				if ((this._ObsoletedBy != value))
				{
					if (this._ObsoletedByEntity.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnObsoletedByChanging(value);
					this.SendPropertyChanging();
					this._ObsoletedBy = value;
					this.SendPropertyChanged("ObsoletedBy");
					this.OnObsoletedByChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ReferenceTerm_ConceptReferenceTerm", Storage="_ConceptReferenceTerms", ThisKey="ReferenceTermId", OtherKey="ReferenceTermId")]
		public EntitySet<ConceptReferenceTerm> ConceptReferenceTerms
		{
			get
			{
				return this._ConceptReferenceTerms;
			}
			set
			{
				this._ConceptReferenceTerms.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ReferenceTerm_ReferenceTermDisplayName", Storage="_ReferenceTermDisplayNames", ThisKey="ReferenceTermId", OtherKey="ReferenceTermId")]
		public EntitySet<ReferenceTermDisplayName> ReferenceTermDisplayNames
		{
			get
			{
				return this._ReferenceTermDisplayNames;
			}
			set
			{
				this._ReferenceTermDisplayNames.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="CodeSystem_ReferenceTerm", Storage="_CodeSystem", ThisKey="CodeSystemId", OtherKey="CodeSystemId", IsForeignKey=true)]
		public CodeSystem CodeSystem
		{
			get
			{
				return this._CodeSystem.Entity;
			}
			set
			{
				CodeSystem previousValue = this._CodeSystem.Entity;
				if (((previousValue != value) 
							|| (this._CodeSystem.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._CodeSystem.Entity = null;
						previousValue.ReferenceTerms.Remove(this);
					}
					this._CodeSystem.Entity = value;
					if ((value != null))
					{
						value.ReferenceTerms.Add(this);
						this._CodeSystemId = value.CodeSystemId;
					}
					else
					{
						this._CodeSystemId = default(System.Guid);
					}
					this.SendPropertyChanged("CodeSystem");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="SecurityUser_ReferenceTerm", Storage="_CreatedByEntity", ThisKey="CreatedBy", OtherKey="UserId", IsForeignKey=true)]
		public SecurityUser CreatedByEntity
		{
			get
			{
				return this._CreatedByEntity.Entity;
			}
			set
			{
				SecurityUser previousValue = this._CreatedByEntity.Entity;
				if (((previousValue != value) 
							|| (this._CreatedByEntity.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._CreatedByEntity.Entity = null;
						previousValue.ReferenceTermsCreatedBy.Remove(this);
					}
					this._CreatedByEntity.Entity = value;
					if ((value != null))
					{
						value.ReferenceTermsCreatedBy.Add(this);
						this._CreatedBy = value.UserId;
					}
					else
					{
						this._CreatedBy = default(System.Guid);
					}
					this.SendPropertyChanged("CreatedByEntity");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="SecurityUser_ReferenceTerm1", Storage="_ObsoletedByEntity", ThisKey="ObsoletedBy", OtherKey="UserId", IsForeignKey=true)]
		public SecurityUser ObsoletedByEntity
		{
			get
			{
				return this._ObsoletedByEntity.Entity;
			}
			set
			{
				SecurityUser previousValue = this._ObsoletedByEntity.Entity;
				if (((previousValue != value) 
							|| (this._ObsoletedByEntity.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ObsoletedByEntity.Entity = null;
						previousValue.ReferenceTermsObsoletedBy.Remove(this);
					}
					this._ObsoletedByEntity.Entity = value;
					if ((value != null))
					{
						value.ReferenceTermsObsoletedBy.Add(this);
						this._ObsoletedBy = value.UserId;
					}
					else
					{
						this._ObsoletedBy = default(Nullable<System.Guid>);
					}
					this.SendPropertyChanged("ObsoletedByEntity");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="SecurityUser_ReferenceTerm2", Storage="_UpdatedByEntity", ThisKey="UpdatedBy", OtherKey="UserId", IsForeignKey=true)]
		public SecurityUser UpdatedByEntity
		{
			get
			{
				return this._UpdatedByEntity.Entity;
			}
			set
			{
				SecurityUser previousValue = this._UpdatedByEntity.Entity;
				if (((previousValue != value) 
							|| (this._UpdatedByEntity.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._UpdatedByEntity.Entity = null;
						previousValue.ReferenceTermsUpdatedBy.Remove(this);
					}
					this._UpdatedByEntity.Entity = value;
					if ((value != null))
					{
						value.ReferenceTermsUpdatedBy.Add(this);
						this._UpdatedBy = value.UserId;
					}
					else
					{
						this._UpdatedBy = default(Nullable<System.Guid>);
					}
					this.SendPropertyChanged("UpdatedByEntity");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_ConceptReferenceTerms(ConceptReferenceTerm entity)
		{
			this.SendPropertyChanging();
			entity.ReferenceTerm = this;
		}
		
		private void detach_ConceptReferenceTerms(ConceptReferenceTerm entity)
		{
			this.SendPropertyChanging();
			entity.ReferenceTerm = null;
		}
		
		private void attach_ReferenceTermDisplayNames(ReferenceTermDisplayName entity)
		{
			this.SendPropertyChanging();
			entity.ReferenceTerm = this;
		}
		
		private void detach_ReferenceTermDisplayNames(ReferenceTermDisplayName entity)
		{
			this.SendPropertyChanging();
			entity.ReferenceTerm = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ReferenceTermDisplayName")]
	public partial class ReferenceTermDisplayName : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _ReferenceTermDisplayNameId;
		
		private System.Guid _ReferenceTermId;
		
		private string _LanguageCode;
		
		private string _DisplayName;
		
		private System.DateTimeOffset _CreationTime;
		
		private System.Guid _CreatedBy;
		
		private System.Nullable<System.DateTimeOffset> _ObsoletionTime;
		
		private System.Nullable<System.Guid> _ObsoletedBy;
		
		private string _ObsoletionReason;
		
		private string _PhoneticCode;
		
		private System.Guid _PhoneticAlgorithmId;
		
		private EntityRef<PhoneticAlgorithm> _PhoneticAlgorithm;
		
		private EntityRef<ReferenceTerm> _ReferenceTerm;
		
		private EntityRef<SecurityUser> _CreatedByEntity;
		
		private EntityRef<SecurityUser> _ObsoletedByEntity;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnReferenceTermDisplayNameIdChanging(System.Guid value);
    partial void OnReferenceTermDisplayNameIdChanged();
    partial void OnReferenceTermIdChanging(System.Guid value);
    partial void OnReferenceTermIdChanged();
    partial void OnLanguageCodeChanging(string value);
    partial void OnLanguageCodeChanged();
    partial void OnDisplayNameChanging(string value);
    partial void OnDisplayNameChanged();
    partial void OnCreationTimeChanging(System.DateTimeOffset value);
    partial void OnCreationTimeChanged();
    partial void OnCreatedByChanging(System.Guid value);
    partial void OnCreatedByChanged();
    partial void OnObsoletionTimeChanging(System.Nullable<System.DateTimeOffset> value);
    partial void OnObsoletionTimeChanged();
    partial void OnObsoletedByChanging(System.Nullable<System.Guid> value);
    partial void OnObsoletedByChanged();
    partial void OnObsoletionReasonChanging(string value);
    partial void OnObsoletionReasonChanged();
    partial void OnPhoneticCodeChanging(string value);
    partial void OnPhoneticCodeChanged();
    partial void OnPhoneticAlgorithmIdChanging(System.Guid value);
    partial void OnPhoneticAlgorithmIdChanged();
    #endregion
		
		public ReferenceTermDisplayName()
		{
			this._PhoneticAlgorithm = default(EntityRef<PhoneticAlgorithm>);
			this._ReferenceTerm = default(EntityRef<ReferenceTerm>);
			this._CreatedByEntity = default(EntityRef<SecurityUser>);
			this._ObsoletedByEntity = default(EntityRef<SecurityUser>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ReferenceTermDisplayNameId", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid ReferenceTermDisplayNameId
		{
			get
			{
				return this._ReferenceTermDisplayNameId;
			}
			set
			{
				if ((this._ReferenceTermDisplayNameId != value))
				{
					this.OnReferenceTermDisplayNameIdChanging(value);
					this.SendPropertyChanging();
					this._ReferenceTermDisplayNameId = value;
					this.SendPropertyChanged("ReferenceTermDisplayNameId");
					this.OnReferenceTermDisplayNameIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ReferenceTermId", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid ReferenceTermId
		{
			get
			{
				return this._ReferenceTermId;
			}
			set
			{
				if ((this._ReferenceTermId != value))
				{
					if (this._ReferenceTerm.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnReferenceTermIdChanging(value);
					this.SendPropertyChanging();
					this._ReferenceTermId = value;
					this.SendPropertyChanged("ReferenceTermId");
					this.OnReferenceTermIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LanguageCode", DbType="NVarChar(2) NOT NULL", CanBeNull=false)]
		public string LanguageCode
		{
			get
			{
				return this._LanguageCode;
			}
			set
			{
				if ((this._LanguageCode != value))
				{
					this.OnLanguageCodeChanging(value);
					this.SendPropertyChanging();
					this._LanguageCode = value;
					this.SendPropertyChanged("LanguageCode");
					this.OnLanguageCodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DisplayName", DbType="NVarChar(256) NOT NULL", CanBeNull=false)]
		public string DisplayName
		{
			get
			{
				return this._DisplayName;
			}
			set
			{
				if ((this._DisplayName != value))
				{
					this.OnDisplayNameChanging(value);
					this.SendPropertyChanging();
					this._DisplayName = value;
					this.SendPropertyChanged("DisplayName");
					this.OnDisplayNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CreationTime", AutoSync=AutoSync.Always, DbType="DateTimeOffset NOT NULL", IsDbGenerated=true)]
		public System.DateTimeOffset CreationTime
		{
			get
			{
				return this._CreationTime;
			}
			set
			{
				if ((this._CreationTime != value))
				{
					this.OnCreationTimeChanging(value);
					this.SendPropertyChanging();
					this._CreationTime = value;
					this.SendPropertyChanged("CreationTime");
					this.OnCreationTimeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CreatedBy", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid CreatedBy
		{
			get
			{
				return this._CreatedBy;
			}
			set
			{
				if ((this._CreatedBy != value))
				{
					if (this._CreatedByEntity.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCreatedByChanging(value);
					this.SendPropertyChanging();
					this._CreatedBy = value;
					this.SendPropertyChanged("CreatedBy");
					this.OnCreatedByChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ObsoletionTime", DbType="DateTimeOffset")]
		public System.Nullable<System.DateTimeOffset> ObsoletionTime
		{
			get
			{
				return this._ObsoletionTime;
			}
			set
			{
				if ((this._ObsoletionTime != value))
				{
					this.OnObsoletionTimeChanging(value);
					this.SendPropertyChanging();
					this._ObsoletionTime = value;
					this.SendPropertyChanged("ObsoletionTime");
					this.OnObsoletionTimeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ObsoletedBy", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> ObsoletedBy
		{
			get
			{
				return this._ObsoletedBy;
			}
			set
			{
				if ((this._ObsoletedBy != value))
				{
					if (this._ObsoletedByEntity.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnObsoletedByChanging(value);
					this.SendPropertyChanging();
					this._ObsoletedBy = value;
					this.SendPropertyChanged("ObsoletedBy");
					this.OnObsoletedByChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ObsoletionReason", DbType="NVarChar(MAX)")]
		public string ObsoletionReason
		{
			get
			{
				return this._ObsoletionReason;
			}
			set
			{
				if ((this._ObsoletionReason != value))
				{
					this.OnObsoletionReasonChanging(value);
					this.SendPropertyChanging();
					this._ObsoletionReason = value;
					this.SendPropertyChanged("ObsoletionReason");
					this.OnObsoletionReasonChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PhoneticCode", DbType="NVarChar(20)")]
		public string PhoneticCode
		{
			get
			{
				return this._PhoneticCode;
			}
			set
			{
				if ((this._PhoneticCode != value))
				{
					this.OnPhoneticCodeChanging(value);
					this.SendPropertyChanging();
					this._PhoneticCode = value;
					this.SendPropertyChanged("PhoneticCode");
					this.OnPhoneticCodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PhoneticAlgorithmId", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid PhoneticAlgorithmId
		{
			get
			{
				return this._PhoneticAlgorithmId;
			}
			set
			{
				if ((this._PhoneticAlgorithmId != value))
				{
					if (this._PhoneticAlgorithm.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPhoneticAlgorithmIdChanging(value);
					this.SendPropertyChanging();
					this._PhoneticAlgorithmId = value;
					this.SendPropertyChanged("PhoneticAlgorithmId");
					this.OnPhoneticAlgorithmIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="PhoneticAlgorithm_ReferenceTermDisplayName", Storage="_PhoneticAlgorithm", ThisKey="PhoneticAlgorithmId", OtherKey="PhoneticAlgorithmId", IsForeignKey=true)]
		public PhoneticAlgorithm PhoneticAlgorithm
		{
			get
			{
				return this._PhoneticAlgorithm.Entity;
			}
			set
			{
				PhoneticAlgorithm previousValue = this._PhoneticAlgorithm.Entity;
				if (((previousValue != value) 
							|| (this._PhoneticAlgorithm.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._PhoneticAlgorithm.Entity = null;
						previousValue.ReferenceTermDisplayNames.Remove(this);
					}
					this._PhoneticAlgorithm.Entity = value;
					if ((value != null))
					{
						value.ReferenceTermDisplayNames.Add(this);
						this._PhoneticAlgorithmId = value.PhoneticAlgorithmId;
					}
					else
					{
						this._PhoneticAlgorithmId = default(System.Guid);
					}
					this.SendPropertyChanged("PhoneticAlgorithm");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ReferenceTerm_ReferenceTermDisplayName", Storage="_ReferenceTerm", ThisKey="ReferenceTermId", OtherKey="ReferenceTermId", IsForeignKey=true)]
		public ReferenceTerm ReferenceTerm
		{
			get
			{
				return this._ReferenceTerm.Entity;
			}
			set
			{
				ReferenceTerm previousValue = this._ReferenceTerm.Entity;
				if (((previousValue != value) 
							|| (this._ReferenceTerm.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ReferenceTerm.Entity = null;
						previousValue.ReferenceTermDisplayNames.Remove(this);
					}
					this._ReferenceTerm.Entity = value;
					if ((value != null))
					{
						value.ReferenceTermDisplayNames.Add(this);
						this._ReferenceTermId = value.ReferenceTermId;
					}
					else
					{
						this._ReferenceTermId = default(System.Guid);
					}
					this.SendPropertyChanged("ReferenceTerm");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="SecurityUser_ReferenceTermDisplayName", Storage="_CreatedByEntity", ThisKey="CreatedBy", OtherKey="UserId", IsForeignKey=true)]
		public SecurityUser CreatedByEntity
		{
			get
			{
				return this._CreatedByEntity.Entity;
			}
			set
			{
				SecurityUser previousValue = this._CreatedByEntity.Entity;
				if (((previousValue != value) 
							|| (this._CreatedByEntity.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._CreatedByEntity.Entity = null;
						previousValue.ReferenceTermDisplayNamesCreatedBy.Remove(this);
					}
					this._CreatedByEntity.Entity = value;
					if ((value != null))
					{
						value.ReferenceTermDisplayNamesCreatedBy.Add(this);
						this._CreatedBy = value.UserId;
					}
					else
					{
						this._CreatedBy = default(System.Guid);
					}
					this.SendPropertyChanged("CreatedByEntity");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="SecurityUser_ReferenceTermDisplayName1", Storage="_ObsoletedByEntity", ThisKey="ObsoletedBy", OtherKey="UserId", IsForeignKey=true)]
		public SecurityUser ObsoletedByEntity
		{
			get
			{
				return this._ObsoletedByEntity.Entity;
			}
			set
			{
				SecurityUser previousValue = this._ObsoletedByEntity.Entity;
				if (((previousValue != value) 
							|| (this._ObsoletedByEntity.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ObsoletedByEntity.Entity = null;
						previousValue.ReferenceTermDisplayNamesObsoletedBy.Remove(this);
					}
					this._ObsoletedByEntity.Entity = value;
					if ((value != null))
					{
						value.ReferenceTermDisplayNamesObsoletedBy.Add(this);
						this._ObsoletedBy = value.UserId;
					}
					else
					{
						this._ObsoletedBy = default(Nullable<System.Guid>);
					}
					this.SendPropertyChanged("ObsoletedByEntity");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.SecurityApplication")]
	public partial class SecurityApplication : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _ApplicationId;
		
		private string _ApplicationPublicId;
		
		private string _ApplicationSecret;
		
		private System.DateTimeOffset _CreationTime;
		
		private System.Guid _CreatedBy;
		
		private System.Nullable<System.DateTimeOffset> _ObsoletionTime;
		
		private System.Nullable<System.Guid> _ObsoletedBy;
		
		private System.Nullable<System.Guid> _ReplacesApplicationId;
		
		private EntitySet<ApplicationEntity> _ApplicationEntities;
		
		private EntitySet<SecurityApplicationPolicy> _SecurityApplicationPolicies;
		
		private EntityRef<SecurityUser> _CreatedByEntity;
		
		private EntityRef<SecurityUser> _ObsoletedByEntity;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnApplicationIdChanging(System.Guid value);
    partial void OnApplicationIdChanged();
    partial void OnApplicationPublicIdChanging(string value);
    partial void OnApplicationPublicIdChanged();
    partial void OnApplicationSecretChanging(string value);
    partial void OnApplicationSecretChanged();
    partial void OnCreationTimeChanging(System.DateTimeOffset value);
    partial void OnCreationTimeChanged();
    partial void OnCreatedByChanging(System.Guid value);
    partial void OnCreatedByChanged();
    partial void OnObsoletionTimeChanging(System.Nullable<System.DateTimeOffset> value);
    partial void OnObsoletionTimeChanged();
    partial void OnObsoletedByChanging(System.Nullable<System.Guid> value);
    partial void OnObsoletedByChanged();
    partial void OnReplacesApplicationIdChanging(System.Nullable<System.Guid> value);
    partial void OnReplacesApplicationIdChanged();
    #endregion
		
		public SecurityApplication()
		{
			this._ApplicationEntities = new EntitySet<ApplicationEntity>(new Action<ApplicationEntity>(this.attach_ApplicationEntities), new Action<ApplicationEntity>(this.detach_ApplicationEntities));
			this._SecurityApplicationPolicies = new EntitySet<SecurityApplicationPolicy>(new Action<SecurityApplicationPolicy>(this.attach_SecurityApplicationPolicies), new Action<SecurityApplicationPolicy>(this.detach_SecurityApplicationPolicies));
			this._CreatedByEntity = default(EntityRef<SecurityUser>);
			this._ObsoletedByEntity = default(EntityRef<SecurityUser>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ApplicationId", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid ApplicationId
		{
			get
			{
				return this._ApplicationId;
			}
			set
			{
				if ((this._ApplicationId != value))
				{
					this.OnApplicationIdChanging(value);
					this.SendPropertyChanging();
					this._ApplicationId = value;
					this.SendPropertyChanged("ApplicationId");
					this.OnApplicationIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ApplicationPublicId", DbType="NVarChar(64) NOT NULL", CanBeNull=false)]
		public string ApplicationPublicId
		{
			get
			{
				return this._ApplicationPublicId;
			}
			set
			{
				if ((this._ApplicationPublicId != value))
				{
					this.OnApplicationPublicIdChanging(value);
					this.SendPropertyChanging();
					this._ApplicationPublicId = value;
					this.SendPropertyChanged("ApplicationPublicId");
					this.OnApplicationPublicIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ApplicationSecret", DbType="NVarChar(64) NOT NULL", CanBeNull=false)]
		public string ApplicationSecret
		{
			get
			{
				return this._ApplicationSecret;
			}
			set
			{
				if ((this._ApplicationSecret != value))
				{
					this.OnApplicationSecretChanging(value);
					this.SendPropertyChanging();
					this._ApplicationSecret = value;
					this.SendPropertyChanged("ApplicationSecret");
					this.OnApplicationSecretChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CreationTime", AutoSync=AutoSync.Always, DbType="DateTimeOffset NOT NULL", IsDbGenerated=true)]
		public System.DateTimeOffset CreationTime
		{
			get
			{
				return this._CreationTime;
			}
			set
			{
				if ((this._CreationTime != value))
				{
					this.OnCreationTimeChanging(value);
					this.SendPropertyChanging();
					this._CreationTime = value;
					this.SendPropertyChanged("CreationTime");
					this.OnCreationTimeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CreatedBy", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid CreatedBy
		{
			get
			{
				return this._CreatedBy;
			}
			set
			{
				if ((this._CreatedBy != value))
				{
					if (this._CreatedByEntity.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCreatedByChanging(value);
					this.SendPropertyChanging();
					this._CreatedBy = value;
					this.SendPropertyChanged("CreatedBy");
					this.OnCreatedByChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ObsoletionTime", DbType="DateTimeOffset")]
		public System.Nullable<System.DateTimeOffset> ObsoletionTime
		{
			get
			{
				return this._ObsoletionTime;
			}
			set
			{
				if ((this._ObsoletionTime != value))
				{
					this.OnObsoletionTimeChanging(value);
					this.SendPropertyChanging();
					this._ObsoletionTime = value;
					this.SendPropertyChanged("ObsoletionTime");
					this.OnObsoletionTimeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ObsoletedBy", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> ObsoletedBy
		{
			get
			{
				return this._ObsoletedBy;
			}
			set
			{
				if ((this._ObsoletedBy != value))
				{
					if (this._ObsoletedByEntity.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnObsoletedByChanging(value);
					this.SendPropertyChanging();
					this._ObsoletedBy = value;
					this.SendPropertyChanged("ObsoletedBy");
					this.OnObsoletedByChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ReplacesApplicationId", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> ReplacesApplicationId
		{
			get
			{
				return this._ReplacesApplicationId;
			}
			set
			{
				if ((this._ReplacesApplicationId != value))
				{
					this.OnReplacesApplicationIdChanging(value);
					this.SendPropertyChanging();
					this._ReplacesApplicationId = value;
					this.SendPropertyChanged("ReplacesApplicationId");
					this.OnReplacesApplicationIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="SecurityApplication_ApplicationEntity", Storage="_ApplicationEntities", ThisKey="ApplicationId", OtherKey="ApplicationId")]
		public EntitySet<ApplicationEntity> ApplicationEntities
		{
			get
			{
				return this._ApplicationEntities;
			}
			set
			{
				this._ApplicationEntities.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="SecurityApplication_SecurityApplicationPolicy", Storage="_SecurityApplicationPolicies", ThisKey="ApplicationId", OtherKey="ApplicationId")]
		public EntitySet<SecurityApplicationPolicy> SecurityApplicationPolicies
		{
			get
			{
				return this._SecurityApplicationPolicies;
			}
			set
			{
				this._SecurityApplicationPolicies.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="SecurityUser_SecurityApplication", Storage="_CreatedByEntity", ThisKey="CreatedBy", OtherKey="UserId", IsForeignKey=true)]
		public SecurityUser CreatedByEntity
		{
			get
			{
				return this._CreatedByEntity.Entity;
			}
			set
			{
				SecurityUser previousValue = this._CreatedByEntity.Entity;
				if (((previousValue != value) 
							|| (this._CreatedByEntity.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._CreatedByEntity.Entity = null;
						previousValue.SecurityApplicationsCreatedBy.Remove(this);
					}
					this._CreatedByEntity.Entity = value;
					if ((value != null))
					{
						value.SecurityApplicationsCreatedBy.Add(this);
						this._CreatedBy = value.UserId;
					}
					else
					{
						this._CreatedBy = default(System.Guid);
					}
					this.SendPropertyChanged("CreatedByEntity");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="SecurityUser_SecurityApplication1", Storage="_ObsoletedByEntity", ThisKey="ObsoletedBy", OtherKey="UserId", IsForeignKey=true)]
		public SecurityUser ObsoletedByEntity
		{
			get
			{
				return this._ObsoletedByEntity.Entity;
			}
			set
			{
				SecurityUser previousValue = this._ObsoletedByEntity.Entity;
				if (((previousValue != value) 
							|| (this._ObsoletedByEntity.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ObsoletedByEntity.Entity = null;
						previousValue.SecurityApplicationsObsoletedBy.Remove(this);
					}
					this._ObsoletedByEntity.Entity = value;
					if ((value != null))
					{
						value.SecurityApplicationsObsoletedBy.Add(this);
						this._ObsoletedBy = value.UserId;
					}
					else
					{
						this._ObsoletedBy = default(Nullable<System.Guid>);
					}
					this.SendPropertyChanged("ObsoletedByEntity");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_ApplicationEntities(ApplicationEntity entity)
		{
			this.SendPropertyChanging();
			entity.SecurityApplication = this;
		}
		
		private void detach_ApplicationEntities(ApplicationEntity entity)
		{
			this.SendPropertyChanging();
			entity.SecurityApplication = null;
		}
		
		private void attach_SecurityApplicationPolicies(SecurityApplicationPolicy entity)
		{
			this.SendPropertyChanging();
			entity.SecurityApplication = this;
		}
		
		private void detach_SecurityApplicationPolicies(SecurityApplicationPolicy entity)
		{
			this.SendPropertyChanging();
			entity.SecurityApplication = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.SecurityApplicationPolicy")]
	public partial class SecurityApplicationPolicy : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _SecurityPolicyInstanceId;
		
		private System.Guid _ApplicationId;
		
		private System.Guid _PolicyId;
		
		private int _PolicyAction;
		
		private EntityRef<SecurityApplication> _SecurityApplication;
		
		private EntityRef<Policy> _Policy;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnSecurityPolicyInstanceIdChanging(System.Guid value);
    partial void OnSecurityPolicyInstanceIdChanged();
    partial void OnApplicationIdChanging(System.Guid value);
    partial void OnApplicationIdChanged();
    partial void OnPolicyIdChanging(System.Guid value);
    partial void OnPolicyIdChanged();
    partial void OnPolicyActionChanging(int value);
    partial void OnPolicyActionChanged();
    #endregion
		
		public SecurityApplicationPolicy()
		{
			this._SecurityApplication = default(EntityRef<SecurityApplication>);
			this._Policy = default(EntityRef<Policy>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SecurityPolicyInstanceId", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid SecurityPolicyInstanceId
		{
			get
			{
				return this._SecurityPolicyInstanceId;
			}
			set
			{
				if ((this._SecurityPolicyInstanceId != value))
				{
					this.OnSecurityPolicyInstanceIdChanging(value);
					this.SendPropertyChanging();
					this._SecurityPolicyInstanceId = value;
					this.SendPropertyChanged("SecurityPolicyInstanceId");
					this.OnSecurityPolicyInstanceIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ApplicationId", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid ApplicationId
		{
			get
			{
				return this._ApplicationId;
			}
			set
			{
				if ((this._ApplicationId != value))
				{
					if (this._SecurityApplication.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnApplicationIdChanging(value);
					this.SendPropertyChanging();
					this._ApplicationId = value;
					this.SendPropertyChanged("ApplicationId");
					this.OnApplicationIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PolicyId", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid PolicyId
		{
			get
			{
				return this._PolicyId;
			}
			set
			{
				if ((this._PolicyId != value))
				{
					if (this._Policy.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPolicyIdChanging(value);
					this.SendPropertyChanging();
					this._PolicyId = value;
					this.SendPropertyChanged("PolicyId");
					this.OnPolicyIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PolicyAction", DbType="Int NOT NULL")]
		public int PolicyAction
		{
			get
			{
				return this._PolicyAction;
			}
			set
			{
				if ((this._PolicyAction != value))
				{
					this.OnPolicyActionChanging(value);
					this.SendPropertyChanging();
					this._PolicyAction = value;
					this.SendPropertyChanged("PolicyAction");
					this.OnPolicyActionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="SecurityApplication_SecurityApplicationPolicy", Storage="_SecurityApplication", ThisKey="ApplicationId", OtherKey="ApplicationId", IsForeignKey=true)]
		public SecurityApplication SecurityApplication
		{
			get
			{
				return this._SecurityApplication.Entity;
			}
			set
			{
				SecurityApplication previousValue = this._SecurityApplication.Entity;
				if (((previousValue != value) 
							|| (this._SecurityApplication.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._SecurityApplication.Entity = null;
						previousValue.SecurityApplicationPolicies.Remove(this);
					}
					this._SecurityApplication.Entity = value;
					if ((value != null))
					{
						value.SecurityApplicationPolicies.Add(this);
						this._ApplicationId = value.ApplicationId;
					}
					else
					{
						this._ApplicationId = default(System.Guid);
					}
					this.SendPropertyChanged("SecurityApplication");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Policy_SecurityApplicationPolicy", Storage="_Policy", ThisKey="PolicyId", OtherKey="PolicyId", IsForeignKey=true)]
		public Policy Policy
		{
			get
			{
				return this._Policy.Entity;
			}
			set
			{
				Policy previousValue = this._Policy.Entity;
				if (((previousValue != value) 
							|| (this._Policy.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Policy.Entity = null;
						previousValue.SecurityApplicationPolicies.Remove(this);
					}
					this._Policy.Entity = value;
					if ((value != null))
					{
						value.SecurityApplicationPolicies.Add(this);
						this._PolicyId = value.PolicyId;
					}
					else
					{
						this._PolicyId = default(System.Guid);
					}
					this.SendPropertyChanged("Policy");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.SecurityDevice")]
	public partial class SecurityDevice : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _DeviceId;
		
		private string _DeviceSecret;
		
		private string _DevicePublicId;
		
		private System.DateTimeOffset _CreationTime;
		
		private System.Guid _CreatedBy;
		
		private System.Nullable<System.DateTimeOffset> _ObsoletionTime;
		
		private System.Nullable<System.Guid> _ObsoletedBy;
		
		private System.Nullable<System.Guid> _ReplacesDeviceId;
		
		private EntitySet<AssigningAuthority> _AssigningAuthoritiesAssigningDeviceId;
		
		private EntitySet<DeviceEntity> _DeviceEntities;
		
		private EntitySet<SecurityDevicePolicy> _SecurityDevicePolicies;
		
		private EntityRef<SecurityUser> _ObsoletedByEntity;
		
		private EntityRef<SecurityUser> _CreatedByEntity;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnDeviceIdChanging(System.Guid value);
    partial void OnDeviceIdChanged();
    partial void OnDeviceSecretChanging(string value);
    partial void OnDeviceSecretChanged();
    partial void OnDevicePublicIdChanging(string value);
    partial void OnDevicePublicIdChanged();
    partial void OnCreationTimeChanging(System.DateTimeOffset value);
    partial void OnCreationTimeChanged();
    partial void OnCreatedByChanging(System.Guid value);
    partial void OnCreatedByChanged();
    partial void OnObsoletionTimeChanging(System.Nullable<System.DateTimeOffset> value);
    partial void OnObsoletionTimeChanged();
    partial void OnObsoletedByChanging(System.Nullable<System.Guid> value);
    partial void OnObsoletedByChanged();
    partial void OnReplacesDeviceIdChanging(System.Nullable<System.Guid> value);
    partial void OnReplacesDeviceIdChanged();
    #endregion
		
		public SecurityDevice()
		{
			this._AssigningAuthoritiesAssigningDeviceId = new EntitySet<AssigningAuthority>(new Action<AssigningAuthority>(this.attach_AssigningAuthoritiesAssigningDeviceId), new Action<AssigningAuthority>(this.detach_AssigningAuthoritiesAssigningDeviceId));
			this._DeviceEntities = new EntitySet<DeviceEntity>(new Action<DeviceEntity>(this.attach_DeviceEntities), new Action<DeviceEntity>(this.detach_DeviceEntities));
			this._SecurityDevicePolicies = new EntitySet<SecurityDevicePolicy>(new Action<SecurityDevicePolicy>(this.attach_SecurityDevicePolicies), new Action<SecurityDevicePolicy>(this.detach_SecurityDevicePolicies));
			this._ObsoletedByEntity = default(EntityRef<SecurityUser>);
			this._CreatedByEntity = default(EntityRef<SecurityUser>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DeviceId", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid DeviceId
		{
			get
			{
				return this._DeviceId;
			}
			set
			{
				if ((this._DeviceId != value))
				{
					this.OnDeviceIdChanging(value);
					this.SendPropertyChanging();
					this._DeviceId = value;
					this.SendPropertyChanged("DeviceId");
					this.OnDeviceIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DeviceSecret", DbType="NVarChar(64) NOT NULL", CanBeNull=false)]
		public string DeviceSecret
		{
			get
			{
				return this._DeviceSecret;
			}
			set
			{
				if ((this._DeviceSecret != value))
				{
					this.OnDeviceSecretChanging(value);
					this.SendPropertyChanging();
					this._DeviceSecret = value;
					this.SendPropertyChanged("DeviceSecret");
					this.OnDeviceSecretChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DevicePublicId", DbType="NVarChar(64) NOT NULL", CanBeNull=false)]
		public string DevicePublicId
		{
			get
			{
				return this._DevicePublicId;
			}
			set
			{
				if ((this._DevicePublicId != value))
				{
					this.OnDevicePublicIdChanging(value);
					this.SendPropertyChanging();
					this._DevicePublicId = value;
					this.SendPropertyChanged("DevicePublicId");
					this.OnDevicePublicIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CreationTime", AutoSync=AutoSync.Always, DbType="DateTimeOffset NOT NULL", IsDbGenerated=true)]
		public System.DateTimeOffset CreationTime
		{
			get
			{
				return this._CreationTime;
			}
			set
			{
				if ((this._CreationTime != value))
				{
					this.OnCreationTimeChanging(value);
					this.SendPropertyChanging();
					this._CreationTime = value;
					this.SendPropertyChanged("CreationTime");
					this.OnCreationTimeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CreatedBy", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid CreatedBy
		{
			get
			{
				return this._CreatedBy;
			}
			set
			{
				if ((this._CreatedBy != value))
				{
					if (this._CreatedByEntity.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCreatedByChanging(value);
					this.SendPropertyChanging();
					this._CreatedBy = value;
					this.SendPropertyChanged("CreatedBy");
					this.OnCreatedByChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ObsoletionTime", DbType="DateTimeOffset")]
		public System.Nullable<System.DateTimeOffset> ObsoletionTime
		{
			get
			{
				return this._ObsoletionTime;
			}
			set
			{
				if ((this._ObsoletionTime != value))
				{
					this.OnObsoletionTimeChanging(value);
					this.SendPropertyChanging();
					this._ObsoletionTime = value;
					this.SendPropertyChanged("ObsoletionTime");
					this.OnObsoletionTimeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ObsoletedBy", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> ObsoletedBy
		{
			get
			{
				return this._ObsoletedBy;
			}
			set
			{
				if ((this._ObsoletedBy != value))
				{
					if (this._ObsoletedByEntity.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnObsoletedByChanging(value);
					this.SendPropertyChanging();
					this._ObsoletedBy = value;
					this.SendPropertyChanged("ObsoletedBy");
					this.OnObsoletedByChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ReplacesDeviceId", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> ReplacesDeviceId
		{
			get
			{
				return this._ReplacesDeviceId;
			}
			set
			{
				if ((this._ReplacesDeviceId != value))
				{
					this.OnReplacesDeviceIdChanging(value);
					this.SendPropertyChanging();
					this._ReplacesDeviceId = value;
					this.SendPropertyChanged("ReplacesDeviceId");
					this.OnReplacesDeviceIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="SecurityDevice_AssigningAuthority", Storage="_AssigningAuthoritiesAssigningDeviceId", ThisKey="DeviceId", OtherKey="AssigningDeviceId")]
		public EntitySet<AssigningAuthority> AssigningAuthoritiesAssigningDeviceId
		{
			get
			{
				return this._AssigningAuthoritiesAssigningDeviceId;
			}
			set
			{
				this._AssigningAuthoritiesAssigningDeviceId.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="SecurityDevice_DeviceEntity", Storage="_DeviceEntities", ThisKey="DeviceId", OtherKey="DeviceId")]
		public EntitySet<DeviceEntity> DeviceEntities
		{
			get
			{
				return this._DeviceEntities;
			}
			set
			{
				this._DeviceEntities.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="SecurityDevice_SecurityDevicePolicy", Storage="_SecurityDevicePolicies", ThisKey="DeviceId", OtherKey="DeviceId")]
		public EntitySet<SecurityDevicePolicy> SecurityDevicePolicies
		{
			get
			{
				return this._SecurityDevicePolicies;
			}
			set
			{
				this._SecurityDevicePolicies.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="SecurityUser_SecurityDevice", Storage="_ObsoletedByEntity", ThisKey="ObsoletedBy", OtherKey="UserId", IsForeignKey=true)]
		public SecurityUser ObsoletedByEntity
		{
			get
			{
				return this._ObsoletedByEntity.Entity;
			}
			set
			{
				SecurityUser previousValue = this._ObsoletedByEntity.Entity;
				if (((previousValue != value) 
							|| (this._ObsoletedByEntity.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ObsoletedByEntity.Entity = null;
						previousValue.SecurityDevicesObsoletedBy.Remove(this);
					}
					this._ObsoletedByEntity.Entity = value;
					if ((value != null))
					{
						value.SecurityDevicesObsoletedBy.Add(this);
						this._ObsoletedBy = value.UserId;
					}
					else
					{
						this._ObsoletedBy = default(Nullable<System.Guid>);
					}
					this.SendPropertyChanged("ObsoletedByEntity");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="SecurityUser_SecurityDevice1", Storage="_CreatedByEntity", ThisKey="CreatedBy", OtherKey="UserId", IsForeignKey=true)]
		public SecurityUser CreatedByEntity
		{
			get
			{
				return this._CreatedByEntity.Entity;
			}
			set
			{
				SecurityUser previousValue = this._CreatedByEntity.Entity;
				if (((previousValue != value) 
							|| (this._CreatedByEntity.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._CreatedByEntity.Entity = null;
						previousValue.SecurityDevicesCreatedBy.Remove(this);
					}
					this._CreatedByEntity.Entity = value;
					if ((value != null))
					{
						value.SecurityDevicesCreatedBy.Add(this);
						this._CreatedBy = value.UserId;
					}
					else
					{
						this._CreatedBy = default(System.Guid);
					}
					this.SendPropertyChanged("CreatedByEntity");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_AssigningAuthoritiesAssigningDeviceId(AssigningAuthority entity)
		{
			this.SendPropertyChanging();
			entity.AssigningDevice = this;
		}
		
		private void detach_AssigningAuthoritiesAssigningDeviceId(AssigningAuthority entity)
		{
			this.SendPropertyChanging();
			entity.AssigningDevice = null;
		}
		
		private void attach_DeviceEntities(DeviceEntity entity)
		{
			this.SendPropertyChanging();
			entity.SecurityDevice = this;
		}
		
		private void detach_DeviceEntities(DeviceEntity entity)
		{
			this.SendPropertyChanging();
			entity.SecurityDevice = null;
		}
		
		private void attach_SecurityDevicePolicies(SecurityDevicePolicy entity)
		{
			this.SendPropertyChanging();
			entity.SecurityDevice = this;
		}
		
		private void detach_SecurityDevicePolicies(SecurityDevicePolicy entity)
		{
			this.SendPropertyChanging();
			entity.SecurityDevice = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.SecurityDevicePolicy")]
	public partial class SecurityDevicePolicy : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _SecurityPolicyInstanceId;
		
		private System.Guid _DeviceId;
		
		private System.Guid _PolicyId;
		
		private int _PolicyAction;
		
		private EntityRef<SecurityDevice> _SecurityDevice;
		
		private EntityRef<Policy> _Policy;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnSecurityPolicyInstanceIdChanging(System.Guid value);
    partial void OnSecurityPolicyInstanceIdChanged();
    partial void OnDeviceIdChanging(System.Guid value);
    partial void OnDeviceIdChanged();
    partial void OnPolicyIdChanging(System.Guid value);
    partial void OnPolicyIdChanged();
    partial void OnPolicyActionChanging(int value);
    partial void OnPolicyActionChanged();
    #endregion
		
		public SecurityDevicePolicy()
		{
			this._SecurityDevice = default(EntityRef<SecurityDevice>);
			this._Policy = default(EntityRef<Policy>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SecurityPolicyInstanceId", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid SecurityPolicyInstanceId
		{
			get
			{
				return this._SecurityPolicyInstanceId;
			}
			set
			{
				if ((this._SecurityPolicyInstanceId != value))
				{
					this.OnSecurityPolicyInstanceIdChanging(value);
					this.SendPropertyChanging();
					this._SecurityPolicyInstanceId = value;
					this.SendPropertyChanged("SecurityPolicyInstanceId");
					this.OnSecurityPolicyInstanceIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DeviceId", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid DeviceId
		{
			get
			{
				return this._DeviceId;
			}
			set
			{
				if ((this._DeviceId != value))
				{
					if (this._SecurityDevice.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnDeviceIdChanging(value);
					this.SendPropertyChanging();
					this._DeviceId = value;
					this.SendPropertyChanged("DeviceId");
					this.OnDeviceIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PolicyId", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid PolicyId
		{
			get
			{
				return this._PolicyId;
			}
			set
			{
				if ((this._PolicyId != value))
				{
					if (this._Policy.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPolicyIdChanging(value);
					this.SendPropertyChanging();
					this._PolicyId = value;
					this.SendPropertyChanged("PolicyId");
					this.OnPolicyIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PolicyAction", DbType="Int NOT NULL")]
		public int PolicyAction
		{
			get
			{
				return this._PolicyAction;
			}
			set
			{
				if ((this._PolicyAction != value))
				{
					this.OnPolicyActionChanging(value);
					this.SendPropertyChanging();
					this._PolicyAction = value;
					this.SendPropertyChanged("PolicyAction");
					this.OnPolicyActionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="SecurityDevice_SecurityDevicePolicy", Storage="_SecurityDevice", ThisKey="DeviceId", OtherKey="DeviceId", IsForeignKey=true)]
		public SecurityDevice SecurityDevice
		{
			get
			{
				return this._SecurityDevice.Entity;
			}
			set
			{
				SecurityDevice previousValue = this._SecurityDevice.Entity;
				if (((previousValue != value) 
							|| (this._SecurityDevice.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._SecurityDevice.Entity = null;
						previousValue.SecurityDevicePolicies.Remove(this);
					}
					this._SecurityDevice.Entity = value;
					if ((value != null))
					{
						value.SecurityDevicePolicies.Add(this);
						this._DeviceId = value.DeviceId;
					}
					else
					{
						this._DeviceId = default(System.Guid);
					}
					this.SendPropertyChanged("SecurityDevice");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Policy_SecurityDevicePolicy", Storage="_Policy", ThisKey="PolicyId", OtherKey="PolicyId", IsForeignKey=true)]
		public Policy Policy
		{
			get
			{
				return this._Policy.Entity;
			}
			set
			{
				Policy previousValue = this._Policy.Entity;
				if (((previousValue != value) 
							|| (this._Policy.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Policy.Entity = null;
						previousValue.SecurityDevicePolicies.Remove(this);
					}
					this._Policy.Entity = value;
					if ((value != null))
					{
						value.SecurityDevicePolicies.Add(this);
						this._PolicyId = value.PolicyId;
					}
					else
					{
						this._PolicyId = default(System.Guid);
					}
					this.SendPropertyChanged("Policy");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.SecurityRole")]
	public partial class SecurityRole : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _RoleId;
		
		private string _Name;
		
		private string _Description;
		
		private System.DateTimeOffset _CreationTime;
		
		private System.Guid _CreatedBy;
		
		private System.Nullable<System.DateTimeOffset> _ObsoletionTime;
		
		private System.Nullable<System.Guid> _ObsoletedBy;
		
		private System.Nullable<System.DateTimeOffset> _UpdatedTime;
		
		private System.Nullable<System.Guid> _UpdatedBy;
		
		private EntitySet<SecurityRolePolicy> _SecurityRolePolicies;
		
		private EntitySet<SecurityUserRole> _SecurityUserRoles;
		
		private EntityRef<SecurityUser> _CreatedByEntity;
		
		private EntityRef<SecurityUser> _ObsoletedByEntity;
		
		private EntityRef<SecurityUser> _UpdatedByEntity;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnRoleIdChanging(System.Guid value);
    partial void OnRoleIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    partial void OnCreationTimeChanging(System.DateTimeOffset value);
    partial void OnCreationTimeChanged();
    partial void OnCreatedByChanging(System.Guid value);
    partial void OnCreatedByChanged();
    partial void OnObsoletionTimeChanging(System.Nullable<System.DateTimeOffset> value);
    partial void OnObsoletionTimeChanged();
    partial void OnObsoletedByChanging(System.Nullable<System.Guid> value);
    partial void OnObsoletedByChanged();
    partial void OnUpdatedTimeChanging(System.Nullable<System.DateTimeOffset> value);
    partial void OnUpdatedTimeChanged();
    partial void OnUpdatedByChanging(System.Nullable<System.Guid> value);
    partial void OnUpdatedByChanged();
    #endregion
		
		public SecurityRole()
		{
			this._SecurityRolePolicies = new EntitySet<SecurityRolePolicy>(new Action<SecurityRolePolicy>(this.attach_SecurityRolePolicies), new Action<SecurityRolePolicy>(this.detach_SecurityRolePolicies));
			this._SecurityUserRoles = new EntitySet<SecurityUserRole>(new Action<SecurityUserRole>(this.attach_SecurityUserRoles), new Action<SecurityUserRole>(this.detach_SecurityUserRoles));
			this._CreatedByEntity = default(EntityRef<SecurityUser>);
			this._ObsoletedByEntity = default(EntityRef<SecurityUser>);
			this._UpdatedByEntity = default(EntityRef<SecurityUser>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RoleId", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid RoleId
		{
			get
			{
				return this._RoleId;
			}
			set
			{
				if ((this._RoleId != value))
				{
					this.OnRoleIdChanging(value);
					this.SendPropertyChanging();
					this._RoleId = value;
					this.SendPropertyChanged("RoleId");
					this.OnRoleIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="NVarChar(256)")]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CreationTime", AutoSync=AutoSync.Always, DbType="DateTimeOffset NOT NULL", IsDbGenerated=true)]
		public System.DateTimeOffset CreationTime
		{
			get
			{
				return this._CreationTime;
			}
			set
			{
				if ((this._CreationTime != value))
				{
					this.OnCreationTimeChanging(value);
					this.SendPropertyChanging();
					this._CreationTime = value;
					this.SendPropertyChanged("CreationTime");
					this.OnCreationTimeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CreatedBy", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid CreatedBy
		{
			get
			{
				return this._CreatedBy;
			}
			set
			{
				if ((this._CreatedBy != value))
				{
					if (this._CreatedByEntity.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCreatedByChanging(value);
					this.SendPropertyChanging();
					this._CreatedBy = value;
					this.SendPropertyChanged("CreatedBy");
					this.OnCreatedByChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ObsoletionTime", DbType="DateTimeOffset")]
		public System.Nullable<System.DateTimeOffset> ObsoletionTime
		{
			get
			{
				return this._ObsoletionTime;
			}
			set
			{
				if ((this._ObsoletionTime != value))
				{
					this.OnObsoletionTimeChanging(value);
					this.SendPropertyChanging();
					this._ObsoletionTime = value;
					this.SendPropertyChanged("ObsoletionTime");
					this.OnObsoletionTimeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ObsoletedBy", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> ObsoletedBy
		{
			get
			{
				return this._ObsoletedBy;
			}
			set
			{
				if ((this._ObsoletedBy != value))
				{
					if (this._ObsoletedByEntity.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnObsoletedByChanging(value);
					this.SendPropertyChanging();
					this._ObsoletedBy = value;
					this.SendPropertyChanged("ObsoletedBy");
					this.OnObsoletedByChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UpdatedTime", DbType="DateTimeOffset")]
		public System.Nullable<System.DateTimeOffset> UpdatedTime
		{
			get
			{
				return this._UpdatedTime;
			}
			set
			{
				if ((this._UpdatedTime != value))
				{
					this.OnUpdatedTimeChanging(value);
					this.SendPropertyChanging();
					this._UpdatedTime = value;
					this.SendPropertyChanged("UpdatedTime");
					this.OnUpdatedTimeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UpdatedBy", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> UpdatedBy
		{
			get
			{
				return this._UpdatedBy;
			}
			set
			{
				if ((this._UpdatedBy != value))
				{
					if (this._UpdatedByEntity.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUpdatedByChanging(value);
					this.SendPropertyChanging();
					this._UpdatedBy = value;
					this.SendPropertyChanged("UpdatedBy");
					this.OnUpdatedByChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="SecurityRole_SecurityRolePolicy", Storage="_SecurityRolePolicies", ThisKey="RoleId", OtherKey="RoleId")]
		public EntitySet<SecurityRolePolicy> SecurityRolePolicies
		{
			get
			{
				return this._SecurityRolePolicies;
			}
			set
			{
				this._SecurityRolePolicies.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="SecurityRole_SecurityUserRole", Storage="_SecurityUserRoles", ThisKey="RoleId", OtherKey="RoleId")]
		public EntitySet<SecurityUserRole> SecurityUserRoles
		{
			get
			{
				return this._SecurityUserRoles;
			}
			set
			{
				this._SecurityUserRoles.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="SecurityUser_SecurityRole", Storage="_CreatedByEntity", ThisKey="CreatedBy", OtherKey="UserId", IsForeignKey=true)]
		public SecurityUser CreatedByEntity
		{
			get
			{
				return this._CreatedByEntity.Entity;
			}
			set
			{
				SecurityUser previousValue = this._CreatedByEntity.Entity;
				if (((previousValue != value) 
							|| (this._CreatedByEntity.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._CreatedByEntity.Entity = null;
						previousValue.SecurityRolesCreatedBy.Remove(this);
					}
					this._CreatedByEntity.Entity = value;
					if ((value != null))
					{
						value.SecurityRolesCreatedBy.Add(this);
						this._CreatedBy = value.UserId;
					}
					else
					{
						this._CreatedBy = default(System.Guid);
					}
					this.SendPropertyChanged("CreatedByEntity");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="SecurityUser_SecurityRole1", Storage="_ObsoletedByEntity", ThisKey="ObsoletedBy", OtherKey="UserId", IsForeignKey=true)]
		public SecurityUser ObsoletedByEntity
		{
			get
			{
				return this._ObsoletedByEntity.Entity;
			}
			set
			{
				SecurityUser previousValue = this._ObsoletedByEntity.Entity;
				if (((previousValue != value) 
							|| (this._ObsoletedByEntity.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ObsoletedByEntity.Entity = null;
						previousValue.SecurityRolesObsoletedBy.Remove(this);
					}
					this._ObsoletedByEntity.Entity = value;
					if ((value != null))
					{
						value.SecurityRolesObsoletedBy.Add(this);
						this._ObsoletedBy = value.UserId;
					}
					else
					{
						this._ObsoletedBy = default(Nullable<System.Guid>);
					}
					this.SendPropertyChanged("ObsoletedByEntity");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="SecurityUser_SecurityRole2", Storage="_UpdatedByEntity", ThisKey="UpdatedBy", OtherKey="UserId", IsForeignKey=true)]
		public SecurityUser UpdatedByEntity
		{
			get
			{
				return this._UpdatedByEntity.Entity;
			}
			set
			{
				SecurityUser previousValue = this._UpdatedByEntity.Entity;
				if (((previousValue != value) 
							|| (this._UpdatedByEntity.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._UpdatedByEntity.Entity = null;
						previousValue.SecurityRolesUpdatedBy.Remove(this);
					}
					this._UpdatedByEntity.Entity = value;
					if ((value != null))
					{
						value.SecurityRolesUpdatedBy.Add(this);
						this._UpdatedBy = value.UserId;
					}
					else
					{
						this._UpdatedBy = default(Nullable<System.Guid>);
					}
					this.SendPropertyChanged("UpdatedByEntity");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_SecurityRolePolicies(SecurityRolePolicy entity)
		{
			this.SendPropertyChanging();
			entity.SecurityRole = this;
		}
		
		private void detach_SecurityRolePolicies(SecurityRolePolicy entity)
		{
			this.SendPropertyChanging();
			entity.SecurityRole = null;
		}
		
		private void attach_SecurityUserRoles(SecurityUserRole entity)
		{
			this.SendPropertyChanging();
			entity.SecurityRole = this;
		}
		
		private void detach_SecurityUserRoles(SecurityUserRole entity)
		{
			this.SendPropertyChanging();
			entity.SecurityRole = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.SecurityRolePolicy")]
	public partial class SecurityRolePolicy : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _SecurityPolicyInstanceId;
		
		private System.Guid _RoleId;
		
		private System.Guid _PolicyId;
		
		private int _PolicyAction;
		
		private EntityRef<Policy> _Policy;
		
		private EntityRef<SecurityRole> _SecurityRole;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnSecurityPolicyInstanceIdChanging(System.Guid value);
    partial void OnSecurityPolicyInstanceIdChanged();
    partial void OnRoleIdChanging(System.Guid value);
    partial void OnRoleIdChanged();
    partial void OnPolicyIdChanging(System.Guid value);
    partial void OnPolicyIdChanged();
    partial void OnPolicyActionChanging(int value);
    partial void OnPolicyActionChanged();
    #endregion
		
		public SecurityRolePolicy()
		{
			this._Policy = default(EntityRef<Policy>);
			this._SecurityRole = default(EntityRef<SecurityRole>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SecurityPolicyInstanceId", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid SecurityPolicyInstanceId
		{
			get
			{
				return this._SecurityPolicyInstanceId;
			}
			set
			{
				if ((this._SecurityPolicyInstanceId != value))
				{
					this.OnSecurityPolicyInstanceIdChanging(value);
					this.SendPropertyChanging();
					this._SecurityPolicyInstanceId = value;
					this.SendPropertyChanged("SecurityPolicyInstanceId");
					this.OnSecurityPolicyInstanceIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RoleId", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid RoleId
		{
			get
			{
				return this._RoleId;
			}
			set
			{
				if ((this._RoleId != value))
				{
					if (this._SecurityRole.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnRoleIdChanging(value);
					this.SendPropertyChanging();
					this._RoleId = value;
					this.SendPropertyChanged("RoleId");
					this.OnRoleIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PolicyId", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid PolicyId
		{
			get
			{
				return this._PolicyId;
			}
			set
			{
				if ((this._PolicyId != value))
				{
					if (this._Policy.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPolicyIdChanging(value);
					this.SendPropertyChanging();
					this._PolicyId = value;
					this.SendPropertyChanged("PolicyId");
					this.OnPolicyIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PolicyAction", DbType="Int NOT NULL")]
		public int PolicyAction
		{
			get
			{
				return this._PolicyAction;
			}
			set
			{
				if ((this._PolicyAction != value))
				{
					this.OnPolicyActionChanging(value);
					this.SendPropertyChanging();
					this._PolicyAction = value;
					this.SendPropertyChanged("PolicyAction");
					this.OnPolicyActionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Policy_SecurityRolePolicy", Storage="_Policy", ThisKey="PolicyId", OtherKey="PolicyId", IsForeignKey=true)]
		public Policy Policy
		{
			get
			{
				return this._Policy.Entity;
			}
			set
			{
				Policy previousValue = this._Policy.Entity;
				if (((previousValue != value) 
							|| (this._Policy.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Policy.Entity = null;
						previousValue.SecurityRolePolicies.Remove(this);
					}
					this._Policy.Entity = value;
					if ((value != null))
					{
						value.SecurityRolePolicies.Add(this);
						this._PolicyId = value.PolicyId;
					}
					else
					{
						this._PolicyId = default(System.Guid);
					}
					this.SendPropertyChanged("Policy");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="SecurityRole_SecurityRolePolicy", Storage="_SecurityRole", ThisKey="RoleId", OtherKey="RoleId", IsForeignKey=true)]
		public SecurityRole SecurityRole
		{
			get
			{
				return this._SecurityRole.Entity;
			}
			set
			{
				SecurityRole previousValue = this._SecurityRole.Entity;
				if (((previousValue != value) 
							|| (this._SecurityRole.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._SecurityRole.Entity = null;
						previousValue.SecurityRolePolicies.Remove(this);
					}
					this._SecurityRole.Entity = value;
					if ((value != null))
					{
						value.SecurityRolePolicies.Add(this);
						this._RoleId = value.RoleId;
					}
					else
					{
						this._RoleId = default(System.Guid);
					}
					this.SendPropertyChanged("SecurityRole");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.SecurityUser")]
	public partial class SecurityUser : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _UserId;
		
		private System.Guid _UserClass;
		
		private string _UserName;
		
		private string _Email;
		
		private bool _EmailConfirmed;
		
		private string _PhoneNumber;
		
		private bool _PhoneNumberConfirmed;
		
		private bool _TwoFactorEnabled;
		
		private System.Nullable<System.DateTimeOffset> _Lockout;
		
		private string _UserPassword;
		
		private string _SecurityStamp;
		
		private int _FailedLoginAttempts;
		
		private System.Nullable<System.DateTimeOffset> _LastSuccessfulLogin;
		
		private System.DateTimeOffset _CreationTime;
		
		private System.Guid _CreatedBy;
		
		private System.Nullable<System.DateTimeOffset> _ObsoletionTime;
		
		private System.Nullable<System.Guid> _ObsoletedBy;
		
		private System.Nullable<System.DateTimeOffset> _UpdatedTime;
		
		private System.Nullable<System.Guid> _UpdatedBy;
		
		private EntitySet<UserEntity> _UserEntities;
		
		private EntitySet<ActTag> _ActTagsCreatedBy;
		
		private EntitySet<ActTag> _ActTagsObsoletedBy;
		
		private EntitySet<ActVersion> _ActVersionsCreatedBy;
		
		private EntitySet<ActVersion> _ActVersionsObsoletedBy;
		
		private EntitySet<AssigningAuthority> _AssigningAuthoritiesCreatedBy;
		
		private EntitySet<AssigningAuthority> _AssigningAuthoritiesObsoletedBy;
		
		private EntitySet<CodeSystem> _CodeSystemsCreatedBy;
		
		private EntitySet<CodeSystem> _CodeSystemsObsoletedBy;
		
		private EntitySet<CodeSystem> _CodeSystemsUpdatedBy;
		
		private EntitySet<ConceptClass> _ConceptClassesCreatedBy;
		
		private EntitySet<ConceptClass> _ConceptClassesObsoletedBy;
		
		private EntitySet<ConceptClass> _ConceptClassesUpdatedBy;
		
		private EntitySet<ConceptRelationshipType> _ConceptRelationshipTypesCreatedBy;
		
		private EntitySet<ConceptRelationshipType> _ConceptRelationshipTypesObsoletedBy;
		
		private EntitySet<ConceptRelationshipType> _ConceptRelationshipTypesUpdatedBy;
		
		private EntitySet<ConceptSet> _ConceptSetsCreatedBy;
		
		private EntitySet<ConceptSet> _ConceptSetsObsoletedBy;
		
		private EntitySet<ConceptSet> _ConceptSetsUpdatedBy;
		
		private EntitySet<ConceptVersion> _ConceptVersionsCreatedBy;
		
		private EntitySet<ConceptVersion> _ConceptVersionsObsoletedBy;
		
		private EntitySet<EntityTag> _EntityTagsCreatedBy;
		
		private EntitySet<EntityTag> _EntityTagsObsoletedBy;
		
		private EntitySet<EntityVersion> _EntityVersionsCreatedBy;
		
		private EntitySet<EntityVersion> _EntityVersionsObsoletedBy;
		
		private EntitySet<ExtensionType> _ExtensionTypesCreatedBy;
		
		private EntitySet<ExtensionType> _ExtensionTypesObsoletedBy;
		
		private EntitySet<ExtensionType> _ExtensionTypesUpdatedBy;
		
		private EntitySet<PhoneticAlgorithm> _PhoneticAlgorithmsCreatedBy;
		
		private EntitySet<PhoneticAlgorithm> _PhoneticAlgorithmsObsoletedBy;
		
		private EntitySet<PhoneticAlgorithm> _PhoneticAlgorithmsUpdatedBy;
		
		private EntitySet<Policy> _PoliciesCreatedBy;
		
		private EntitySet<Policy> _PoliciesObsoletedBy;
		
		private EntitySet<Protocol> _ProtocolsCreatedBy;
		
		private EntitySet<Protocol> _ProtocolsObsoletedBy;
		
		private EntitySet<ProtocolHandler> _ProtocolHandlersCreatedBy;
		
		private EntitySet<ProtocolHandler> _ProtocolHandlersObsoletedBy;
		
		private EntitySet<ReferenceTerm> _ReferenceTermsCreatedBy;
		
		private EntitySet<ReferenceTerm> _ReferenceTermsObsoletedBy;
		
		private EntitySet<ReferenceTerm> _ReferenceTermsUpdatedBy;
		
		private EntitySet<ReferenceTermDisplayName> _ReferenceTermDisplayNamesCreatedBy;
		
		private EntitySet<ReferenceTermDisplayName> _ReferenceTermDisplayNamesObsoletedBy;
		
		private EntitySet<SecurityApplication> _SecurityApplicationsCreatedBy;
		
		private EntitySet<SecurityApplication> _SecurityApplicationsObsoletedBy;
		
		private EntitySet<SecurityDevice> _SecurityDevicesObsoletedBy;
		
		private EntitySet<SecurityDevice> _SecurityDevicesCreatedBy;
		
		private EntitySet<SecurityRole> _SecurityRolesCreatedBy;
		
		private EntitySet<SecurityRole> _SecurityRolesObsoletedBy;
		
		private EntitySet<SecurityRole> _SecurityRolesUpdatedBy;
		
		private EntitySet<SecurityUser> _SecurityUsersCreatedBy;
		
		private EntitySet<SecurityUser> _SecurityUsersObsoletedBy;
		
		private EntitySet<SecurityUser> _SecurityUsersUpdatedBy;
		
		private EntitySet<SecurityUserClaim> _SecurityUserClaims;
		
		private EntitySet<SecurityUserLogin> _SecurityUserLogins;
		
		private EntitySet<SecurityUserRole> _SecurityUserRoles;
		
		private EntityRef<SecurityUser> _CreatedByEntity;
		
		private EntityRef<SecurityUser> _ObsoletedByEntity;
		
		private EntityRef<SecurityUser> _UpdatedByEntity;
		
		private EntityRef<SecurityUserClass> _UserClassEntity;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnUserIdChanging(System.Guid value);
    partial void OnUserIdChanged();
    partial void OnUserClassChanging(System.Guid value);
    partial void OnUserClassChanged();
    partial void OnUserNameChanging(string value);
    partial void OnUserNameChanged();
    partial void OnEmailChanging(string value);
    partial void OnEmailChanged();
    partial void OnEmailConfirmedChanging(bool value);
    partial void OnEmailConfirmedChanged();
    partial void OnPhoneNumberChanging(string value);
    partial void OnPhoneNumberChanged();
    partial void OnPhoneNumberConfirmedChanging(bool value);
    partial void OnPhoneNumberConfirmedChanged();
    partial void OnTwoFactorEnabledChanging(bool value);
    partial void OnTwoFactorEnabledChanged();
    partial void OnLockoutChanging(System.Nullable<System.DateTimeOffset> value);
    partial void OnLockoutChanged();
    partial void OnUserPasswordChanging(string value);
    partial void OnUserPasswordChanged();
    partial void OnSecurityStampChanging(string value);
    partial void OnSecurityStampChanged();
    partial void OnFailedLoginAttemptsChanging(int value);
    partial void OnFailedLoginAttemptsChanged();
    partial void OnLastSuccessfulLoginChanging(System.Nullable<System.DateTimeOffset> value);
    partial void OnLastSuccessfulLoginChanged();
    partial void OnCreationTimeChanging(System.DateTimeOffset value);
    partial void OnCreationTimeChanged();
    partial void OnCreatedByChanging(System.Guid value);
    partial void OnCreatedByChanged();
    partial void OnObsoletionTimeChanging(System.Nullable<System.DateTimeOffset> value);
    partial void OnObsoletionTimeChanged();
    partial void OnObsoletedByChanging(System.Nullable<System.Guid> value);
    partial void OnObsoletedByChanged();
    partial void OnUpdatedTimeChanging(System.Nullable<System.DateTimeOffset> value);
    partial void OnUpdatedTimeChanged();
    partial void OnUpdatedByChanging(System.Nullable<System.Guid> value);
    partial void OnUpdatedByChanged();
    #endregion
		
		public SecurityUser()
		{
			this._UserEntities = new EntitySet<UserEntity>(new Action<UserEntity>(this.attach_UserEntities), new Action<UserEntity>(this.detach_UserEntities));
			this._ActTagsCreatedBy = new EntitySet<ActTag>(new Action<ActTag>(this.attach_ActTagsCreatedBy), new Action<ActTag>(this.detach_ActTagsCreatedBy));
			this._ActTagsObsoletedBy = new EntitySet<ActTag>(new Action<ActTag>(this.attach_ActTagsObsoletedBy), new Action<ActTag>(this.detach_ActTagsObsoletedBy));
			this._ActVersionsCreatedBy = new EntitySet<ActVersion>(new Action<ActVersion>(this.attach_ActVersionsCreatedBy), new Action<ActVersion>(this.detach_ActVersionsCreatedBy));
			this._ActVersionsObsoletedBy = new EntitySet<ActVersion>(new Action<ActVersion>(this.attach_ActVersionsObsoletedBy), new Action<ActVersion>(this.detach_ActVersionsObsoletedBy));
			this._AssigningAuthoritiesCreatedBy = new EntitySet<AssigningAuthority>(new Action<AssigningAuthority>(this.attach_AssigningAuthoritiesCreatedBy), new Action<AssigningAuthority>(this.detach_AssigningAuthoritiesCreatedBy));
			this._AssigningAuthoritiesObsoletedBy = new EntitySet<AssigningAuthority>(new Action<AssigningAuthority>(this.attach_AssigningAuthoritiesObsoletedBy), new Action<AssigningAuthority>(this.detach_AssigningAuthoritiesObsoletedBy));
			this._CodeSystemsCreatedBy = new EntitySet<CodeSystem>(new Action<CodeSystem>(this.attach_CodeSystemsCreatedBy), new Action<CodeSystem>(this.detach_CodeSystemsCreatedBy));
			this._CodeSystemsObsoletedBy = new EntitySet<CodeSystem>(new Action<CodeSystem>(this.attach_CodeSystemsObsoletedBy), new Action<CodeSystem>(this.detach_CodeSystemsObsoletedBy));
			this._CodeSystemsUpdatedBy = new EntitySet<CodeSystem>(new Action<CodeSystem>(this.attach_CodeSystemsUpdatedBy), new Action<CodeSystem>(this.detach_CodeSystemsUpdatedBy));
			this._ConceptClassesCreatedBy = new EntitySet<ConceptClass>(new Action<ConceptClass>(this.attach_ConceptClassesCreatedBy), new Action<ConceptClass>(this.detach_ConceptClassesCreatedBy));
			this._ConceptClassesObsoletedBy = new EntitySet<ConceptClass>(new Action<ConceptClass>(this.attach_ConceptClassesObsoletedBy), new Action<ConceptClass>(this.detach_ConceptClassesObsoletedBy));
			this._ConceptClassesUpdatedBy = new EntitySet<ConceptClass>(new Action<ConceptClass>(this.attach_ConceptClassesUpdatedBy), new Action<ConceptClass>(this.detach_ConceptClassesUpdatedBy));
			this._ConceptRelationshipTypesCreatedBy = new EntitySet<ConceptRelationshipType>(new Action<ConceptRelationshipType>(this.attach_ConceptRelationshipTypesCreatedBy), new Action<ConceptRelationshipType>(this.detach_ConceptRelationshipTypesCreatedBy));
			this._ConceptRelationshipTypesObsoletedBy = new EntitySet<ConceptRelationshipType>(new Action<ConceptRelationshipType>(this.attach_ConceptRelationshipTypesObsoletedBy), new Action<ConceptRelationshipType>(this.detach_ConceptRelationshipTypesObsoletedBy));
			this._ConceptRelationshipTypesUpdatedBy = new EntitySet<ConceptRelationshipType>(new Action<ConceptRelationshipType>(this.attach_ConceptRelationshipTypesUpdatedBy), new Action<ConceptRelationshipType>(this.detach_ConceptRelationshipTypesUpdatedBy));
			this._ConceptSetsCreatedBy = new EntitySet<ConceptSet>(new Action<ConceptSet>(this.attach_ConceptSetsCreatedBy), new Action<ConceptSet>(this.detach_ConceptSetsCreatedBy));
			this._ConceptSetsObsoletedBy = new EntitySet<ConceptSet>(new Action<ConceptSet>(this.attach_ConceptSetsObsoletedBy), new Action<ConceptSet>(this.detach_ConceptSetsObsoletedBy));
			this._ConceptSetsUpdatedBy = new EntitySet<ConceptSet>(new Action<ConceptSet>(this.attach_ConceptSetsUpdatedBy), new Action<ConceptSet>(this.detach_ConceptSetsUpdatedBy));
			this._ConceptVersionsCreatedBy = new EntitySet<ConceptVersion>(new Action<ConceptVersion>(this.attach_ConceptVersionsCreatedBy), new Action<ConceptVersion>(this.detach_ConceptVersionsCreatedBy));
			this._ConceptVersionsObsoletedBy = new EntitySet<ConceptVersion>(new Action<ConceptVersion>(this.attach_ConceptVersionsObsoletedBy), new Action<ConceptVersion>(this.detach_ConceptVersionsObsoletedBy));
			this._EntityTagsCreatedBy = new EntitySet<EntityTag>(new Action<EntityTag>(this.attach_EntityTagsCreatedBy), new Action<EntityTag>(this.detach_EntityTagsCreatedBy));
			this._EntityTagsObsoletedBy = new EntitySet<EntityTag>(new Action<EntityTag>(this.attach_EntityTagsObsoletedBy), new Action<EntityTag>(this.detach_EntityTagsObsoletedBy));
			this._EntityVersionsCreatedBy = new EntitySet<EntityVersion>(new Action<EntityVersion>(this.attach_EntityVersionsCreatedBy), new Action<EntityVersion>(this.detach_EntityVersionsCreatedBy));
			this._EntityVersionsObsoletedBy = new EntitySet<EntityVersion>(new Action<EntityVersion>(this.attach_EntityVersionsObsoletedBy), new Action<EntityVersion>(this.detach_EntityVersionsObsoletedBy));
			this._ExtensionTypesCreatedBy = new EntitySet<ExtensionType>(new Action<ExtensionType>(this.attach_ExtensionTypesCreatedBy), new Action<ExtensionType>(this.detach_ExtensionTypesCreatedBy));
			this._ExtensionTypesObsoletedBy = new EntitySet<ExtensionType>(new Action<ExtensionType>(this.attach_ExtensionTypesObsoletedBy), new Action<ExtensionType>(this.detach_ExtensionTypesObsoletedBy));
			this._ExtensionTypesUpdatedBy = new EntitySet<ExtensionType>(new Action<ExtensionType>(this.attach_ExtensionTypesUpdatedBy), new Action<ExtensionType>(this.detach_ExtensionTypesUpdatedBy));
			this._PhoneticAlgorithmsCreatedBy = new EntitySet<PhoneticAlgorithm>(new Action<PhoneticAlgorithm>(this.attach_PhoneticAlgorithmsCreatedBy), new Action<PhoneticAlgorithm>(this.detach_PhoneticAlgorithmsCreatedBy));
			this._PhoneticAlgorithmsObsoletedBy = new EntitySet<PhoneticAlgorithm>(new Action<PhoneticAlgorithm>(this.attach_PhoneticAlgorithmsObsoletedBy), new Action<PhoneticAlgorithm>(this.detach_PhoneticAlgorithmsObsoletedBy));
			this._PhoneticAlgorithmsUpdatedBy = new EntitySet<PhoneticAlgorithm>(new Action<PhoneticAlgorithm>(this.attach_PhoneticAlgorithmsUpdatedBy), new Action<PhoneticAlgorithm>(this.detach_PhoneticAlgorithmsUpdatedBy));
			this._PoliciesCreatedBy = new EntitySet<Policy>(new Action<Policy>(this.attach_PoliciesCreatedBy), new Action<Policy>(this.detach_PoliciesCreatedBy));
			this._PoliciesObsoletedBy = new EntitySet<Policy>(new Action<Policy>(this.attach_PoliciesObsoletedBy), new Action<Policy>(this.detach_PoliciesObsoletedBy));
			this._ProtocolsCreatedBy = new EntitySet<Protocol>(new Action<Protocol>(this.attach_ProtocolsCreatedBy), new Action<Protocol>(this.detach_ProtocolsCreatedBy));
			this._ProtocolsObsoletedBy = new EntitySet<Protocol>(new Action<Protocol>(this.attach_ProtocolsObsoletedBy), new Action<Protocol>(this.detach_ProtocolsObsoletedBy));
			this._ProtocolHandlersCreatedBy = new EntitySet<ProtocolHandler>(new Action<ProtocolHandler>(this.attach_ProtocolHandlersCreatedBy), new Action<ProtocolHandler>(this.detach_ProtocolHandlersCreatedBy));
			this._ProtocolHandlersObsoletedBy = new EntitySet<ProtocolHandler>(new Action<ProtocolHandler>(this.attach_ProtocolHandlersObsoletedBy), new Action<ProtocolHandler>(this.detach_ProtocolHandlersObsoletedBy));
			this._ReferenceTermsCreatedBy = new EntitySet<ReferenceTerm>(new Action<ReferenceTerm>(this.attach_ReferenceTermsCreatedBy), new Action<ReferenceTerm>(this.detach_ReferenceTermsCreatedBy));
			this._ReferenceTermsObsoletedBy = new EntitySet<ReferenceTerm>(new Action<ReferenceTerm>(this.attach_ReferenceTermsObsoletedBy), new Action<ReferenceTerm>(this.detach_ReferenceTermsObsoletedBy));
			this._ReferenceTermsUpdatedBy = new EntitySet<ReferenceTerm>(new Action<ReferenceTerm>(this.attach_ReferenceTermsUpdatedBy), new Action<ReferenceTerm>(this.detach_ReferenceTermsUpdatedBy));
			this._ReferenceTermDisplayNamesCreatedBy = new EntitySet<ReferenceTermDisplayName>(new Action<ReferenceTermDisplayName>(this.attach_ReferenceTermDisplayNamesCreatedBy), new Action<ReferenceTermDisplayName>(this.detach_ReferenceTermDisplayNamesCreatedBy));
			this._ReferenceTermDisplayNamesObsoletedBy = new EntitySet<ReferenceTermDisplayName>(new Action<ReferenceTermDisplayName>(this.attach_ReferenceTermDisplayNamesObsoletedBy), new Action<ReferenceTermDisplayName>(this.detach_ReferenceTermDisplayNamesObsoletedBy));
			this._SecurityApplicationsCreatedBy = new EntitySet<SecurityApplication>(new Action<SecurityApplication>(this.attach_SecurityApplicationsCreatedBy), new Action<SecurityApplication>(this.detach_SecurityApplicationsCreatedBy));
			this._SecurityApplicationsObsoletedBy = new EntitySet<SecurityApplication>(new Action<SecurityApplication>(this.attach_SecurityApplicationsObsoletedBy), new Action<SecurityApplication>(this.detach_SecurityApplicationsObsoletedBy));
			this._SecurityDevicesObsoletedBy = new EntitySet<SecurityDevice>(new Action<SecurityDevice>(this.attach_SecurityDevicesObsoletedBy), new Action<SecurityDevice>(this.detach_SecurityDevicesObsoletedBy));
			this._SecurityDevicesCreatedBy = new EntitySet<SecurityDevice>(new Action<SecurityDevice>(this.attach_SecurityDevicesCreatedBy), new Action<SecurityDevice>(this.detach_SecurityDevicesCreatedBy));
			this._SecurityRolesCreatedBy = new EntitySet<SecurityRole>(new Action<SecurityRole>(this.attach_SecurityRolesCreatedBy), new Action<SecurityRole>(this.detach_SecurityRolesCreatedBy));
			this._SecurityRolesObsoletedBy = new EntitySet<SecurityRole>(new Action<SecurityRole>(this.attach_SecurityRolesObsoletedBy), new Action<SecurityRole>(this.detach_SecurityRolesObsoletedBy));
			this._SecurityRolesUpdatedBy = new EntitySet<SecurityRole>(new Action<SecurityRole>(this.attach_SecurityRolesUpdatedBy), new Action<SecurityRole>(this.detach_SecurityRolesUpdatedBy));
			this._SecurityUsersCreatedBy = new EntitySet<SecurityUser>(new Action<SecurityUser>(this.attach_SecurityUsersCreatedBy), new Action<SecurityUser>(this.detach_SecurityUsersCreatedBy));
			this._SecurityUsersObsoletedBy = new EntitySet<SecurityUser>(new Action<SecurityUser>(this.attach_SecurityUsersObsoletedBy), new Action<SecurityUser>(this.detach_SecurityUsersObsoletedBy));
			this._SecurityUsersUpdatedBy = new EntitySet<SecurityUser>(new Action<SecurityUser>(this.attach_SecurityUsersUpdatedBy), new Action<SecurityUser>(this.detach_SecurityUsersUpdatedBy));
			this._SecurityUserClaims = new EntitySet<SecurityUserClaim>(new Action<SecurityUserClaim>(this.attach_SecurityUserClaims), new Action<SecurityUserClaim>(this.detach_SecurityUserClaims));
			this._SecurityUserLogins = new EntitySet<SecurityUserLogin>(new Action<SecurityUserLogin>(this.attach_SecurityUserLogins), new Action<SecurityUserLogin>(this.detach_SecurityUserLogins));
			this._SecurityUserRoles = new EntitySet<SecurityUserRole>(new Action<SecurityUserRole>(this.attach_SecurityUserRoles), new Action<SecurityUserRole>(this.detach_SecurityUserRoles));
			this._CreatedByEntity = default(EntityRef<SecurityUser>);
			this._ObsoletedByEntity = default(EntityRef<SecurityUser>);
			this._UpdatedByEntity = default(EntityRef<SecurityUser>);
			this._UserClassEntity = default(EntityRef<SecurityUserClass>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserId", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid UserId
		{
			get
			{
				return this._UserId;
			}
			set
			{
				if ((this._UserId != value))
				{
					this.OnUserIdChanging(value);
					this.SendPropertyChanging();
					this._UserId = value;
					this.SendPropertyChanged("UserId");
					this.OnUserIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserClass", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid UserClass
		{
			get
			{
				return this._UserClass;
			}
			set
			{
				if ((this._UserClass != value))
				{
					if (this._UserClassEntity.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserClassChanging(value);
					this.SendPropertyChanging();
					this._UserClass = value;
					this.SendPropertyChanged("UserClass");
					this.OnUserClassChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserName", DbType="NVarChar(128) NOT NULL", CanBeNull=false)]
		public string UserName
		{
			get
			{
				return this._UserName;
			}
			set
			{
				if ((this._UserName != value))
				{
					this.OnUserNameChanging(value);
					this.SendPropertyChanging();
					this._UserName = value;
					this.SendPropertyChanged("UserName");
					this.OnUserNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Email", DbType="NVarChar(250)")]
		public string Email
		{
			get
			{
				return this._Email;
			}
			set
			{
				if ((this._Email != value))
				{
					this.OnEmailChanging(value);
					this.SendPropertyChanging();
					this._Email = value;
					this.SendPropertyChanged("Email");
					this.OnEmailChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EmailConfirmed", DbType="Bit NOT NULL")]
		public bool EmailConfirmed
		{
			get
			{
				return this._EmailConfirmed;
			}
			set
			{
				if ((this._EmailConfirmed != value))
				{
					this.OnEmailConfirmedChanging(value);
					this.SendPropertyChanging();
					this._EmailConfirmed = value;
					this.SendPropertyChanged("EmailConfirmed");
					this.OnEmailConfirmedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PhoneNumber", DbType="NVarChar(128)")]
		public string PhoneNumber
		{
			get
			{
				return this._PhoneNumber;
			}
			set
			{
				if ((this._PhoneNumber != value))
				{
					this.OnPhoneNumberChanging(value);
					this.SendPropertyChanging();
					this._PhoneNumber = value;
					this.SendPropertyChanged("PhoneNumber");
					this.OnPhoneNumberChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PhoneNumberConfirmed", DbType="Bit NOT NULL")]
		public bool PhoneNumberConfirmed
		{
			get
			{
				return this._PhoneNumberConfirmed;
			}
			set
			{
				if ((this._PhoneNumberConfirmed != value))
				{
					this.OnPhoneNumberConfirmedChanging(value);
					this.SendPropertyChanging();
					this._PhoneNumberConfirmed = value;
					this.SendPropertyChanged("PhoneNumberConfirmed");
					this.OnPhoneNumberConfirmedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TwoFactorEnabled", DbType="Bit NOT NULL")]
		public bool TwoFactorEnabled
		{
			get
			{
				return this._TwoFactorEnabled;
			}
			set
			{
				if ((this._TwoFactorEnabled != value))
				{
					this.OnTwoFactorEnabledChanging(value);
					this.SendPropertyChanging();
					this._TwoFactorEnabled = value;
					this.SendPropertyChanged("TwoFactorEnabled");
					this.OnTwoFactorEnabledChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Lockout", DbType="DateTimeOffset")]
		public System.Nullable<System.DateTimeOffset> Lockout
		{
			get
			{
				return this._Lockout;
			}
			set
			{
				if ((this._Lockout != value))
				{
					this.OnLockoutChanging(value);
					this.SendPropertyChanging();
					this._Lockout = value;
					this.SendPropertyChanged("Lockout");
					this.OnLockoutChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserPassword", DbType="NVarChar(128) NOT NULL", CanBeNull=false)]
		public string UserPassword
		{
			get
			{
				return this._UserPassword;
			}
			set
			{
				if ((this._UserPassword != value))
				{
					this.OnUserPasswordChanging(value);
					this.SendPropertyChanging();
					this._UserPassword = value;
					this.SendPropertyChanged("UserPassword");
					this.OnUserPasswordChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SecurityStamp", DbType="NVarChar(128) NOT NULL", CanBeNull=false)]
		public string SecurityStamp
		{
			get
			{
				return this._SecurityStamp;
			}
			set
			{
				if ((this._SecurityStamp != value))
				{
					this.OnSecurityStampChanging(value);
					this.SendPropertyChanging();
					this._SecurityStamp = value;
					this.SendPropertyChanged("SecurityStamp");
					this.OnSecurityStampChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FailedLoginAttempts", DbType="Int NOT NULL")]
		public int FailedLoginAttempts
		{
			get
			{
				return this._FailedLoginAttempts;
			}
			set
			{
				if ((this._FailedLoginAttempts != value))
				{
					this.OnFailedLoginAttemptsChanging(value);
					this.SendPropertyChanging();
					this._FailedLoginAttempts = value;
					this.SendPropertyChanged("FailedLoginAttempts");
					this.OnFailedLoginAttemptsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LastSuccessfulLogin", DbType="DateTimeOffset")]
		public System.Nullable<System.DateTimeOffset> LastSuccessfulLogin
		{
			get
			{
				return this._LastSuccessfulLogin;
			}
			set
			{
				if ((this._LastSuccessfulLogin != value))
				{
					this.OnLastSuccessfulLoginChanging(value);
					this.SendPropertyChanging();
					this._LastSuccessfulLogin = value;
					this.SendPropertyChanged("LastSuccessfulLogin");
					this.OnLastSuccessfulLoginChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CreationTime", AutoSync=AutoSync.Always, DbType="DateTimeOffset NOT NULL", IsDbGenerated=true)]
		public System.DateTimeOffset CreationTime
		{
			get
			{
				return this._CreationTime;
			}
			set
			{
				if ((this._CreationTime != value))
				{
					this.OnCreationTimeChanging(value);
					this.SendPropertyChanging();
					this._CreationTime = value;
					this.SendPropertyChanged("CreationTime");
					this.OnCreationTimeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CreatedBy", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid CreatedBy
		{
			get
			{
				return this._CreatedBy;
			}
			set
			{
				if ((this._CreatedBy != value))
				{
					if (this._CreatedByEntity.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCreatedByChanging(value);
					this.SendPropertyChanging();
					this._CreatedBy = value;
					this.SendPropertyChanged("CreatedBy");
					this.OnCreatedByChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ObsoletionTime", DbType="DateTimeOffset")]
		public System.Nullable<System.DateTimeOffset> ObsoletionTime
		{
			get
			{
				return this._ObsoletionTime;
			}
			set
			{
				if ((this._ObsoletionTime != value))
				{
					this.OnObsoletionTimeChanging(value);
					this.SendPropertyChanging();
					this._ObsoletionTime = value;
					this.SendPropertyChanged("ObsoletionTime");
					this.OnObsoletionTimeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ObsoletedBy", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> ObsoletedBy
		{
			get
			{
				return this._ObsoletedBy;
			}
			set
			{
				if ((this._ObsoletedBy != value))
				{
					if (this._ObsoletedByEntity.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnObsoletedByChanging(value);
					this.SendPropertyChanging();
					this._ObsoletedBy = value;
					this.SendPropertyChanged("ObsoletedBy");
					this.OnObsoletedByChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UpdatedTime", DbType="DateTimeOffset")]
		public System.Nullable<System.DateTimeOffset> UpdatedTime
		{
			get
			{
				return this._UpdatedTime;
			}
			set
			{
				if ((this._UpdatedTime != value))
				{
					this.OnUpdatedTimeChanging(value);
					this.SendPropertyChanging();
					this._UpdatedTime = value;
					this.SendPropertyChanged("UpdatedTime");
					this.OnUpdatedTimeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UpdatedBy", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> UpdatedBy
		{
			get
			{
				return this._UpdatedBy;
			}
			set
			{
				if ((this._UpdatedBy != value))
				{
					if (this._UpdatedByEntity.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUpdatedByChanging(value);
					this.SendPropertyChanging();
					this._UpdatedBy = value;
					this.SendPropertyChanged("UpdatedBy");
					this.OnUpdatedByChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="SecurityUser_UserEntity", Storage="_UserEntities", ThisKey="UserId", OtherKey="UserId")]
		public EntitySet<UserEntity> UserEntities
		{
			get
			{
				return this._UserEntities;
			}
			set
			{
				this._UserEntities.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="SecurityUser_ActTag", Storage="_ActTagsCreatedBy", ThisKey="UserId", OtherKey="CreatedBy")]
		public EntitySet<ActTag> ActTagsCreatedBy
		{
			get
			{
				return this._ActTagsCreatedBy;
			}
			set
			{
				this._ActTagsCreatedBy.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="SecurityUser_ActTag1", Storage="_ActTagsObsoletedBy", ThisKey="UserId", OtherKey="ObsoletedBy")]
		public EntitySet<ActTag> ActTagsObsoletedBy
		{
			get
			{
				return this._ActTagsObsoletedBy;
			}
			set
			{
				this._ActTagsObsoletedBy.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="SecurityUser_ActVersion", Storage="_ActVersionsCreatedBy", ThisKey="UserId", OtherKey="CreatedBy")]
		public EntitySet<ActVersion> ActVersionsCreatedBy
		{
			get
			{
				return this._ActVersionsCreatedBy;
			}
			set
			{
				this._ActVersionsCreatedBy.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="SecurityUser_ActVersion1", Storage="_ActVersionsObsoletedBy", ThisKey="UserId", OtherKey="ObsoletedBy")]
		public EntitySet<ActVersion> ActVersionsObsoletedBy
		{
			get
			{
				return this._ActVersionsObsoletedBy;
			}
			set
			{
				this._ActVersionsObsoletedBy.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="SecurityUser_AssigningAuthority", Storage="_AssigningAuthoritiesCreatedBy", ThisKey="UserId", OtherKey="CreatedBy")]
		public EntitySet<AssigningAuthority> AssigningAuthoritiesCreatedBy
		{
			get
			{
				return this._AssigningAuthoritiesCreatedBy;
			}
			set
			{
				this._AssigningAuthoritiesCreatedBy.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="SecurityUser_AssigningAuthority1", Storage="_AssigningAuthoritiesObsoletedBy", ThisKey="UserId", OtherKey="ObsoletedBy")]
		public EntitySet<AssigningAuthority> AssigningAuthoritiesObsoletedBy
		{
			get
			{
				return this._AssigningAuthoritiesObsoletedBy;
			}
			set
			{
				this._AssigningAuthoritiesObsoletedBy.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="SecurityUser_CodeSystem", Storage="_CodeSystemsCreatedBy", ThisKey="UserId", OtherKey="CreatedBy")]
		public EntitySet<CodeSystem> CodeSystemsCreatedBy
		{
			get
			{
				return this._CodeSystemsCreatedBy;
			}
			set
			{
				this._CodeSystemsCreatedBy.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="SecurityUser_CodeSystem1", Storage="_CodeSystemsObsoletedBy", ThisKey="UserId", OtherKey="ObsoletedBy")]
		public EntitySet<CodeSystem> CodeSystemsObsoletedBy
		{
			get
			{
				return this._CodeSystemsObsoletedBy;
			}
			set
			{
				this._CodeSystemsObsoletedBy.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="SecurityUser_CodeSystem2", Storage="_CodeSystemsUpdatedBy", ThisKey="UserId", OtherKey="UpdatedBy")]
		public EntitySet<CodeSystem> CodeSystemsUpdatedBy
		{
			get
			{
				return this._CodeSystemsUpdatedBy;
			}
			set
			{
				this._CodeSystemsUpdatedBy.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="SecurityUser_ConceptClass", Storage="_ConceptClassesCreatedBy", ThisKey="UserId", OtherKey="CreatedBy")]
		public EntitySet<ConceptClass> ConceptClassesCreatedBy
		{
			get
			{
				return this._ConceptClassesCreatedBy;
			}
			set
			{
				this._ConceptClassesCreatedBy.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="SecurityUser_ConceptClass1", Storage="_ConceptClassesObsoletedBy", ThisKey="UserId", OtherKey="ObsoletedBy")]
		public EntitySet<ConceptClass> ConceptClassesObsoletedBy
		{
			get
			{
				return this._ConceptClassesObsoletedBy;
			}
			set
			{
				this._ConceptClassesObsoletedBy.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="SecurityUser_ConceptClass2", Storage="_ConceptClassesUpdatedBy", ThisKey="UserId", OtherKey="UpdatedBy")]
		public EntitySet<ConceptClass> ConceptClassesUpdatedBy
		{
			get
			{
				return this._ConceptClassesUpdatedBy;
			}
			set
			{
				this._ConceptClassesUpdatedBy.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="SecurityUser_ConceptRelationshipType", Storage="_ConceptRelationshipTypesCreatedBy", ThisKey="UserId", OtherKey="CreatedBy")]
		public EntitySet<ConceptRelationshipType> ConceptRelationshipTypesCreatedBy
		{
			get
			{
				return this._ConceptRelationshipTypesCreatedBy;
			}
			set
			{
				this._ConceptRelationshipTypesCreatedBy.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="SecurityUser_ConceptRelationshipType1", Storage="_ConceptRelationshipTypesObsoletedBy", ThisKey="UserId", OtherKey="ObsoletedBy")]
		public EntitySet<ConceptRelationshipType> ConceptRelationshipTypesObsoletedBy
		{
			get
			{
				return this._ConceptRelationshipTypesObsoletedBy;
			}
			set
			{
				this._ConceptRelationshipTypesObsoletedBy.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="SecurityUser_ConceptRelationshipType2", Storage="_ConceptRelationshipTypesUpdatedBy", ThisKey="UserId", OtherKey="UpdatedBy")]
		public EntitySet<ConceptRelationshipType> ConceptRelationshipTypesUpdatedBy
		{
			get
			{
				return this._ConceptRelationshipTypesUpdatedBy;
			}
			set
			{
				this._ConceptRelationshipTypesUpdatedBy.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="SecurityUser_ConceptSet", Storage="_ConceptSetsCreatedBy", ThisKey="UserId", OtherKey="CreatedBy")]
		public EntitySet<ConceptSet> ConceptSetsCreatedBy
		{
			get
			{
				return this._ConceptSetsCreatedBy;
			}
			set
			{
				this._ConceptSetsCreatedBy.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="SecurityUser_ConceptSet1", Storage="_ConceptSetsObsoletedBy", ThisKey="UserId", OtherKey="ObsoletedBy")]
		public EntitySet<ConceptSet> ConceptSetsObsoletedBy
		{
			get
			{
				return this._ConceptSetsObsoletedBy;
			}
			set
			{
				this._ConceptSetsObsoletedBy.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="SecurityUser_ConceptSet2", Storage="_ConceptSetsUpdatedBy", ThisKey="UserId", OtherKey="UpdatedBy")]
		public EntitySet<ConceptSet> ConceptSetsUpdatedBy
		{
			get
			{
				return this._ConceptSetsUpdatedBy;
			}
			set
			{
				this._ConceptSetsUpdatedBy.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="SecurityUser_ConceptVersion", Storage="_ConceptVersionsCreatedBy", ThisKey="UserId", OtherKey="CreatedBy")]
		public EntitySet<ConceptVersion> ConceptVersionsCreatedBy
		{
			get
			{
				return this._ConceptVersionsCreatedBy;
			}
			set
			{
				this._ConceptVersionsCreatedBy.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="SecurityUser_ConceptVersion1", Storage="_ConceptVersionsObsoletedBy", ThisKey="UserId", OtherKey="ObsoletedBy")]
		public EntitySet<ConceptVersion> ConceptVersionsObsoletedBy
		{
			get
			{
				return this._ConceptVersionsObsoletedBy;
			}
			set
			{
				this._ConceptVersionsObsoletedBy.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="SecurityUser_EntityTag", Storage="_EntityTagsCreatedBy", ThisKey="UserId", OtherKey="CreatedBy")]
		public EntitySet<EntityTag> EntityTagsCreatedBy
		{
			get
			{
				return this._EntityTagsCreatedBy;
			}
			set
			{
				this._EntityTagsCreatedBy.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="SecurityUser_EntityTag1", Storage="_EntityTagsObsoletedBy", ThisKey="UserId", OtherKey="ObsoletedBy")]
		public EntitySet<EntityTag> EntityTagsObsoletedBy
		{
			get
			{
				return this._EntityTagsObsoletedBy;
			}
			set
			{
				this._EntityTagsObsoletedBy.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="SecurityUser_EntityVersion", Storage="_EntityVersionsCreatedBy", ThisKey="UserId", OtherKey="CreatedBy")]
		public EntitySet<EntityVersion> EntityVersionsCreatedBy
		{
			get
			{
				return this._EntityVersionsCreatedBy;
			}
			set
			{
				this._EntityVersionsCreatedBy.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="SecurityUser_EntityVersion1", Storage="_EntityVersionsObsoletedBy", ThisKey="UserId", OtherKey="ObsoletedBy")]
		public EntitySet<EntityVersion> EntityVersionsObsoletedBy
		{
			get
			{
				return this._EntityVersionsObsoletedBy;
			}
			set
			{
				this._EntityVersionsObsoletedBy.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="SecurityUser_ExtensionType", Storage="_ExtensionTypesCreatedBy", ThisKey="UserId", OtherKey="CreatedBy")]
		public EntitySet<ExtensionType> ExtensionTypesCreatedBy
		{
			get
			{
				return this._ExtensionTypesCreatedBy;
			}
			set
			{
				this._ExtensionTypesCreatedBy.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="SecurityUser_ExtensionType1", Storage="_ExtensionTypesObsoletedBy", ThisKey="UserId", OtherKey="ObsoletedBy")]
		public EntitySet<ExtensionType> ExtensionTypesObsoletedBy
		{
			get
			{
				return this._ExtensionTypesObsoletedBy;
			}
			set
			{
				this._ExtensionTypesObsoletedBy.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="SecurityUser_ExtensionType2", Storage="_ExtensionTypesUpdatedBy", ThisKey="UserId", OtherKey="UpdatedBy")]
		public EntitySet<ExtensionType> ExtensionTypesUpdatedBy
		{
			get
			{
				return this._ExtensionTypesUpdatedBy;
			}
			set
			{
				this._ExtensionTypesUpdatedBy.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="SecurityUser_PhoneticAlgorithm", Storage="_PhoneticAlgorithmsCreatedBy", ThisKey="UserId", OtherKey="CreatedBy")]
		public EntitySet<PhoneticAlgorithm> PhoneticAlgorithmsCreatedBy
		{
			get
			{
				return this._PhoneticAlgorithmsCreatedBy;
			}
			set
			{
				this._PhoneticAlgorithmsCreatedBy.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="SecurityUser_PhoneticAlgorithm1", Storage="_PhoneticAlgorithmsObsoletedBy", ThisKey="UserId", OtherKey="ObsoletedBy")]
		public EntitySet<PhoneticAlgorithm> PhoneticAlgorithmsObsoletedBy
		{
			get
			{
				return this._PhoneticAlgorithmsObsoletedBy;
			}
			set
			{
				this._PhoneticAlgorithmsObsoletedBy.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="SecurityUser_PhoneticAlgorithm2", Storage="_PhoneticAlgorithmsUpdatedBy", ThisKey="UserId", OtherKey="UpdatedBy")]
		public EntitySet<PhoneticAlgorithm> PhoneticAlgorithmsUpdatedBy
		{
			get
			{
				return this._PhoneticAlgorithmsUpdatedBy;
			}
			set
			{
				this._PhoneticAlgorithmsUpdatedBy.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="SecurityUser_Policy", Storage="_PoliciesCreatedBy", ThisKey="UserId", OtherKey="CreatedBy")]
		public EntitySet<Policy> PoliciesCreatedBy
		{
			get
			{
				return this._PoliciesCreatedBy;
			}
			set
			{
				this._PoliciesCreatedBy.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="SecurityUser_Policy1", Storage="_PoliciesObsoletedBy", ThisKey="UserId", OtherKey="ObsoletedBy")]
		public EntitySet<Policy> PoliciesObsoletedBy
		{
			get
			{
				return this._PoliciesObsoletedBy;
			}
			set
			{
				this._PoliciesObsoletedBy.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="SecurityUser_Protocol", Storage="_ProtocolsCreatedBy", ThisKey="UserId", OtherKey="CreatedBy")]
		public EntitySet<Protocol> ProtocolsCreatedBy
		{
			get
			{
				return this._ProtocolsCreatedBy;
			}
			set
			{
				this._ProtocolsCreatedBy.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="SecurityUser_Protocol1", Storage="_ProtocolsObsoletedBy", ThisKey="UserId", OtherKey="ObsoletedBy")]
		public EntitySet<Protocol> ProtocolsObsoletedBy
		{
			get
			{
				return this._ProtocolsObsoletedBy;
			}
			set
			{
				this._ProtocolsObsoletedBy.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="SecurityUser_ProtocolHandler", Storage="_ProtocolHandlersCreatedBy", ThisKey="UserId", OtherKey="CreatedBy")]
		public EntitySet<ProtocolHandler> ProtocolHandlersCreatedBy
		{
			get
			{
				return this._ProtocolHandlersCreatedBy;
			}
			set
			{
				this._ProtocolHandlersCreatedBy.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="SecurityUser_ProtocolHandler1", Storage="_ProtocolHandlersObsoletedBy", ThisKey="UserId", OtherKey="ObsoletedBy")]
		public EntitySet<ProtocolHandler> ProtocolHandlersObsoletedBy
		{
			get
			{
				return this._ProtocolHandlersObsoletedBy;
			}
			set
			{
				this._ProtocolHandlersObsoletedBy.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="SecurityUser_ReferenceTerm", Storage="_ReferenceTermsCreatedBy", ThisKey="UserId", OtherKey="CreatedBy")]
		public EntitySet<ReferenceTerm> ReferenceTermsCreatedBy
		{
			get
			{
				return this._ReferenceTermsCreatedBy;
			}
			set
			{
				this._ReferenceTermsCreatedBy.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="SecurityUser_ReferenceTerm1", Storage="_ReferenceTermsObsoletedBy", ThisKey="UserId", OtherKey="ObsoletedBy")]
		public EntitySet<ReferenceTerm> ReferenceTermsObsoletedBy
		{
			get
			{
				return this._ReferenceTermsObsoletedBy;
			}
			set
			{
				this._ReferenceTermsObsoletedBy.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="SecurityUser_ReferenceTerm2", Storage="_ReferenceTermsUpdatedBy", ThisKey="UserId", OtherKey="UpdatedBy")]
		public EntitySet<ReferenceTerm> ReferenceTermsUpdatedBy
		{
			get
			{
				return this._ReferenceTermsUpdatedBy;
			}
			set
			{
				this._ReferenceTermsUpdatedBy.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="SecurityUser_ReferenceTermDisplayName", Storage="_ReferenceTermDisplayNamesCreatedBy", ThisKey="UserId", OtherKey="CreatedBy")]
		public EntitySet<ReferenceTermDisplayName> ReferenceTermDisplayNamesCreatedBy
		{
			get
			{
				return this._ReferenceTermDisplayNamesCreatedBy;
			}
			set
			{
				this._ReferenceTermDisplayNamesCreatedBy.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="SecurityUser_ReferenceTermDisplayName1", Storage="_ReferenceTermDisplayNamesObsoletedBy", ThisKey="UserId", OtherKey="ObsoletedBy")]
		public EntitySet<ReferenceTermDisplayName> ReferenceTermDisplayNamesObsoletedBy
		{
			get
			{
				return this._ReferenceTermDisplayNamesObsoletedBy;
			}
			set
			{
				this._ReferenceTermDisplayNamesObsoletedBy.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="SecurityUser_SecurityApplication", Storage="_SecurityApplicationsCreatedBy", ThisKey="UserId", OtherKey="CreatedBy")]
		public EntitySet<SecurityApplication> SecurityApplicationsCreatedBy
		{
			get
			{
				return this._SecurityApplicationsCreatedBy;
			}
			set
			{
				this._SecurityApplicationsCreatedBy.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="SecurityUser_SecurityApplication1", Storage="_SecurityApplicationsObsoletedBy", ThisKey="UserId", OtherKey="ObsoletedBy")]
		public EntitySet<SecurityApplication> SecurityApplicationsObsoletedBy
		{
			get
			{
				return this._SecurityApplicationsObsoletedBy;
			}
			set
			{
				this._SecurityApplicationsObsoletedBy.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="SecurityUser_SecurityDevice", Storage="_SecurityDevicesObsoletedBy", ThisKey="UserId", OtherKey="ObsoletedBy")]
		public EntitySet<SecurityDevice> SecurityDevicesObsoletedBy
		{
			get
			{
				return this._SecurityDevicesObsoletedBy;
			}
			set
			{
				this._SecurityDevicesObsoletedBy.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="SecurityUser_SecurityDevice1", Storage="_SecurityDevicesCreatedBy", ThisKey="UserId", OtherKey="CreatedBy")]
		public EntitySet<SecurityDevice> SecurityDevicesCreatedBy
		{
			get
			{
				return this._SecurityDevicesCreatedBy;
			}
			set
			{
				this._SecurityDevicesCreatedBy.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="SecurityUser_SecurityRole", Storage="_SecurityRolesCreatedBy", ThisKey="UserId", OtherKey="CreatedBy")]
		public EntitySet<SecurityRole> SecurityRolesCreatedBy
		{
			get
			{
				return this._SecurityRolesCreatedBy;
			}
			set
			{
				this._SecurityRolesCreatedBy.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="SecurityUser_SecurityRole1", Storage="_SecurityRolesObsoletedBy", ThisKey="UserId", OtherKey="ObsoletedBy")]
		public EntitySet<SecurityRole> SecurityRolesObsoletedBy
		{
			get
			{
				return this._SecurityRolesObsoletedBy;
			}
			set
			{
				this._SecurityRolesObsoletedBy.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="SecurityUser_SecurityRole2", Storage="_SecurityRolesUpdatedBy", ThisKey="UserId", OtherKey="UpdatedBy")]
		public EntitySet<SecurityRole> SecurityRolesUpdatedBy
		{
			get
			{
				return this._SecurityRolesUpdatedBy;
			}
			set
			{
				this._SecurityRolesUpdatedBy.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="SecurityUser_SecurityUser", Storage="_SecurityUsersCreatedBy", ThisKey="UserId", OtherKey="CreatedBy")]
		public EntitySet<SecurityUser> SecurityUsersCreatedBy
		{
			get
			{
				return this._SecurityUsersCreatedBy;
			}
			set
			{
				this._SecurityUsersCreatedBy.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="SecurityUser_SecurityUser1", Storage="_SecurityUsersObsoletedBy", ThisKey="UserId", OtherKey="ObsoletedBy")]
		public EntitySet<SecurityUser> SecurityUsersObsoletedBy
		{
			get
			{
				return this._SecurityUsersObsoletedBy;
			}
			set
			{
				this._SecurityUsersObsoletedBy.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="SecurityUser_SecurityUser2", Storage="_SecurityUsersUpdatedBy", ThisKey="UserId", OtherKey="UpdatedBy")]
		public EntitySet<SecurityUser> SecurityUsersUpdatedBy
		{
			get
			{
				return this._SecurityUsersUpdatedBy;
			}
			set
			{
				this._SecurityUsersUpdatedBy.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="SecurityUser_SecurityUserClaim", Storage="_SecurityUserClaims", ThisKey="UserId", OtherKey="UserId")]
		public EntitySet<SecurityUserClaim> SecurityUserClaims
		{
			get
			{
				return this._SecurityUserClaims;
			}
			set
			{
				this._SecurityUserClaims.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="SecurityUser_SecurityUserLogin", Storage="_SecurityUserLogins", ThisKey="UserId", OtherKey="UserId")]
		public EntitySet<SecurityUserLogin> SecurityUserLogins
		{
			get
			{
				return this._SecurityUserLogins;
			}
			set
			{
				this._SecurityUserLogins.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="SecurityUser_SecurityUserRole", Storage="_SecurityUserRoles", ThisKey="UserId", OtherKey="UserId")]
		public EntitySet<SecurityUserRole> SecurityUserRoles
		{
			get
			{
				return this._SecurityUserRoles;
			}
			set
			{
				this._SecurityUserRoles.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="SecurityUser_SecurityUser", Storage="_CreatedByEntity", ThisKey="CreatedBy", OtherKey="UserId", IsForeignKey=true)]
		public SecurityUser CreatedByEntity
		{
			get
			{
				return this._CreatedByEntity.Entity;
			}
			set
			{
				SecurityUser previousValue = this._CreatedByEntity.Entity;
				if (((previousValue != value) 
							|| (this._CreatedByEntity.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._CreatedByEntity.Entity = null;
						previousValue.SecurityUsersCreatedBy.Remove(this);
					}
					this._CreatedByEntity.Entity = value;
					if ((value != null))
					{
						value.SecurityUsersCreatedBy.Add(this);
						this._CreatedBy = value.UserId;
					}
					else
					{
						this._CreatedBy = default(System.Guid);
					}
					this.SendPropertyChanged("CreatedByEntity");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="SecurityUser_SecurityUser1", Storage="_ObsoletedByEntity", ThisKey="ObsoletedBy", OtherKey="UserId", IsForeignKey=true)]
		public SecurityUser ObsoletedByEntity
		{
			get
			{
				return this._ObsoletedByEntity.Entity;
			}
			set
			{
				SecurityUser previousValue = this._ObsoletedByEntity.Entity;
				if (((previousValue != value) 
							|| (this._ObsoletedByEntity.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ObsoletedByEntity.Entity = null;
						previousValue.SecurityUsersObsoletedBy.Remove(this);
					}
					this._ObsoletedByEntity.Entity = value;
					if ((value != null))
					{
						value.SecurityUsersObsoletedBy.Add(this);
						this._ObsoletedBy = value.UserId;
					}
					else
					{
						this._ObsoletedBy = default(Nullable<System.Guid>);
					}
					this.SendPropertyChanged("ObsoletedByEntity");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="SecurityUser_SecurityUser2", Storage="_UpdatedByEntity", ThisKey="UpdatedBy", OtherKey="UserId", IsForeignKey=true)]
		public SecurityUser UpdatedByEntity
		{
			get
			{
				return this._UpdatedByEntity.Entity;
			}
			set
			{
				SecurityUser previousValue = this._UpdatedByEntity.Entity;
				if (((previousValue != value) 
							|| (this._UpdatedByEntity.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._UpdatedByEntity.Entity = null;
						previousValue.SecurityUsersUpdatedBy.Remove(this);
					}
					this._UpdatedByEntity.Entity = value;
					if ((value != null))
					{
						value.SecurityUsersUpdatedBy.Add(this);
						this._UpdatedBy = value.UserId;
					}
					else
					{
						this._UpdatedBy = default(Nullable<System.Guid>);
					}
					this.SendPropertyChanged("UpdatedByEntity");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="SecurityUserClass_SecurityUser", Storage="_UserClassEntity", ThisKey="UserClass", OtherKey="ClassId", IsForeignKey=true)]
		public SecurityUserClass UserClassEntity
		{
			get
			{
				return this._UserClassEntity.Entity;
			}
			set
			{
				SecurityUserClass previousValue = this._UserClassEntity.Entity;
				if (((previousValue != value) 
							|| (this._UserClassEntity.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._UserClassEntity.Entity = null;
						previousValue.SecurityUsersUserClass.Remove(this);
					}
					this._UserClassEntity.Entity = value;
					if ((value != null))
					{
						value.SecurityUsersUserClass.Add(this);
						this._UserClass = value.ClassId;
					}
					else
					{
						this._UserClass = default(System.Guid);
					}
					this.SendPropertyChanged("UserClassEntity");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_UserEntities(UserEntity entity)
		{
			this.SendPropertyChanging();
			entity.SecurityUser = this;
		}
		
		private void detach_UserEntities(UserEntity entity)
		{
			this.SendPropertyChanging();
			entity.SecurityUser = null;
		}
		
		private void attach_ActTagsCreatedBy(ActTag entity)
		{
			this.SendPropertyChanging();
			entity.CreatedByEntity = this;
		}
		
		private void detach_ActTagsCreatedBy(ActTag entity)
		{
			this.SendPropertyChanging();
			entity.CreatedByEntity = null;
		}
		
		private void attach_ActTagsObsoletedBy(ActTag entity)
		{
			this.SendPropertyChanging();
			entity.ObsoletedByEntity = this;
		}
		
		private void detach_ActTagsObsoletedBy(ActTag entity)
		{
			this.SendPropertyChanging();
			entity.ObsoletedByEntity = null;
		}
		
		private void attach_ActVersionsCreatedBy(ActVersion entity)
		{
			this.SendPropertyChanging();
			entity.CreatedByEntity = this;
		}
		
		private void detach_ActVersionsCreatedBy(ActVersion entity)
		{
			this.SendPropertyChanging();
			entity.CreatedByEntity = null;
		}
		
		private void attach_ActVersionsObsoletedBy(ActVersion entity)
		{
			this.SendPropertyChanging();
			entity.ObsoletedByEntity = this;
		}
		
		private void detach_ActVersionsObsoletedBy(ActVersion entity)
		{
			this.SendPropertyChanging();
			entity.ObsoletedByEntity = null;
		}
		
		private void attach_AssigningAuthoritiesCreatedBy(AssigningAuthority entity)
		{
			this.SendPropertyChanging();
			entity.CreatedByEntity = this;
		}
		
		private void detach_AssigningAuthoritiesCreatedBy(AssigningAuthority entity)
		{
			this.SendPropertyChanging();
			entity.CreatedByEntity = null;
		}
		
		private void attach_AssigningAuthoritiesObsoletedBy(AssigningAuthority entity)
		{
			this.SendPropertyChanging();
			entity.ObsoletedByEntity = this;
		}
		
		private void detach_AssigningAuthoritiesObsoletedBy(AssigningAuthority entity)
		{
			this.SendPropertyChanging();
			entity.ObsoletedByEntity = null;
		}
		
		private void attach_CodeSystemsCreatedBy(CodeSystem entity)
		{
			this.SendPropertyChanging();
			entity.CreatedByEntity = this;
		}
		
		private void detach_CodeSystemsCreatedBy(CodeSystem entity)
		{
			this.SendPropertyChanging();
			entity.CreatedByEntity = null;
		}
		
		private void attach_CodeSystemsObsoletedBy(CodeSystem entity)
		{
			this.SendPropertyChanging();
			entity.ObsoletedByEntity = this;
		}
		
		private void detach_CodeSystemsObsoletedBy(CodeSystem entity)
		{
			this.SendPropertyChanging();
			entity.ObsoletedByEntity = null;
		}
		
		private void attach_CodeSystemsUpdatedBy(CodeSystem entity)
		{
			this.SendPropertyChanging();
			entity.UpdatedByEntity = this;
		}
		
		private void detach_CodeSystemsUpdatedBy(CodeSystem entity)
		{
			this.SendPropertyChanging();
			entity.UpdatedByEntity = null;
		}
		
		private void attach_ConceptClassesCreatedBy(ConceptClass entity)
		{
			this.SendPropertyChanging();
			entity.CreatedByEntity = this;
		}
		
		private void detach_ConceptClassesCreatedBy(ConceptClass entity)
		{
			this.SendPropertyChanging();
			entity.CreatedByEntity = null;
		}
		
		private void attach_ConceptClassesObsoletedBy(ConceptClass entity)
		{
			this.SendPropertyChanging();
			entity.ObsoletedByEntity = this;
		}
		
		private void detach_ConceptClassesObsoletedBy(ConceptClass entity)
		{
			this.SendPropertyChanging();
			entity.ObsoletedByEntity = null;
		}
		
		private void attach_ConceptClassesUpdatedBy(ConceptClass entity)
		{
			this.SendPropertyChanging();
			entity.UpdatedByEntity = this;
		}
		
		private void detach_ConceptClassesUpdatedBy(ConceptClass entity)
		{
			this.SendPropertyChanging();
			entity.UpdatedByEntity = null;
		}
		
		private void attach_ConceptRelationshipTypesCreatedBy(ConceptRelationshipType entity)
		{
			this.SendPropertyChanging();
			entity.CreatedByEntity = this;
		}
		
		private void detach_ConceptRelationshipTypesCreatedBy(ConceptRelationshipType entity)
		{
			this.SendPropertyChanging();
			entity.CreatedByEntity = null;
		}
		
		private void attach_ConceptRelationshipTypesObsoletedBy(ConceptRelationshipType entity)
		{
			this.SendPropertyChanging();
			entity.ObsoletedByEntity = this;
		}
		
		private void detach_ConceptRelationshipTypesObsoletedBy(ConceptRelationshipType entity)
		{
			this.SendPropertyChanging();
			entity.ObsoletedByEntity = null;
		}
		
		private void attach_ConceptRelationshipTypesUpdatedBy(ConceptRelationshipType entity)
		{
			this.SendPropertyChanging();
			entity.UpdatedByEntity = this;
		}
		
		private void detach_ConceptRelationshipTypesUpdatedBy(ConceptRelationshipType entity)
		{
			this.SendPropertyChanging();
			entity.UpdatedByEntity = null;
		}
		
		private void attach_ConceptSetsCreatedBy(ConceptSet entity)
		{
			this.SendPropertyChanging();
			entity.CreatedByEntity = this;
		}
		
		private void detach_ConceptSetsCreatedBy(ConceptSet entity)
		{
			this.SendPropertyChanging();
			entity.CreatedByEntity = null;
		}
		
		private void attach_ConceptSetsObsoletedBy(ConceptSet entity)
		{
			this.SendPropertyChanging();
			entity.ObsoletedByEntity = this;
		}
		
		private void detach_ConceptSetsObsoletedBy(ConceptSet entity)
		{
			this.SendPropertyChanging();
			entity.ObsoletedByEntity = null;
		}
		
		private void attach_ConceptSetsUpdatedBy(ConceptSet entity)
		{
			this.SendPropertyChanging();
			entity.UpdatedByEntity = this;
		}
		
		private void detach_ConceptSetsUpdatedBy(ConceptSet entity)
		{
			this.SendPropertyChanging();
			entity.UpdatedByEntity = null;
		}
		
		private void attach_ConceptVersionsCreatedBy(ConceptVersion entity)
		{
			this.SendPropertyChanging();
			entity.CreatedByEntity = this;
		}
		
		private void detach_ConceptVersionsCreatedBy(ConceptVersion entity)
		{
			this.SendPropertyChanging();
			entity.CreatedByEntity = null;
		}
		
		private void attach_ConceptVersionsObsoletedBy(ConceptVersion entity)
		{
			this.SendPropertyChanging();
			entity.ObsoletedByEntity = this;
		}
		
		private void detach_ConceptVersionsObsoletedBy(ConceptVersion entity)
		{
			this.SendPropertyChanging();
			entity.ObsoletedByEntity = null;
		}
		
		private void attach_EntityTagsCreatedBy(EntityTag entity)
		{
			this.SendPropertyChanging();
			entity.CreatedByEntity = this;
		}
		
		private void detach_EntityTagsCreatedBy(EntityTag entity)
		{
			this.SendPropertyChanging();
			entity.CreatedByEntity = null;
		}
		
		private void attach_EntityTagsObsoletedBy(EntityTag entity)
		{
			this.SendPropertyChanging();
			entity.ObsoletedByEntity = this;
		}
		
		private void detach_EntityTagsObsoletedBy(EntityTag entity)
		{
			this.SendPropertyChanging();
			entity.ObsoletedByEntity = null;
		}
		
		private void attach_EntityVersionsCreatedBy(EntityVersion entity)
		{
			this.SendPropertyChanging();
			entity.CreatedByEntity = this;
		}
		
		private void detach_EntityVersionsCreatedBy(EntityVersion entity)
		{
			this.SendPropertyChanging();
			entity.CreatedByEntity = null;
		}
		
		private void attach_EntityVersionsObsoletedBy(EntityVersion entity)
		{
			this.SendPropertyChanging();
			entity.ObsoletedByEntity = this;
		}
		
		private void detach_EntityVersionsObsoletedBy(EntityVersion entity)
		{
			this.SendPropertyChanging();
			entity.ObsoletedByEntity = null;
		}
		
		private void attach_ExtensionTypesCreatedBy(ExtensionType entity)
		{
			this.SendPropertyChanging();
			entity.CreatedByEntity = this;
		}
		
		private void detach_ExtensionTypesCreatedBy(ExtensionType entity)
		{
			this.SendPropertyChanging();
			entity.CreatedByEntity = null;
		}
		
		private void attach_ExtensionTypesObsoletedBy(ExtensionType entity)
		{
			this.SendPropertyChanging();
			entity.ObsoletedByEntity = this;
		}
		
		private void detach_ExtensionTypesObsoletedBy(ExtensionType entity)
		{
			this.SendPropertyChanging();
			entity.ObsoletedByEntity = null;
		}
		
		private void attach_ExtensionTypesUpdatedBy(ExtensionType entity)
		{
			this.SendPropertyChanging();
			entity.UpdatedByEntity = this;
		}
		
		private void detach_ExtensionTypesUpdatedBy(ExtensionType entity)
		{
			this.SendPropertyChanging();
			entity.UpdatedByEntity = null;
		}
		
		private void attach_PhoneticAlgorithmsCreatedBy(PhoneticAlgorithm entity)
		{
			this.SendPropertyChanging();
			entity.CreatedByEntity = this;
		}
		
		private void detach_PhoneticAlgorithmsCreatedBy(PhoneticAlgorithm entity)
		{
			this.SendPropertyChanging();
			entity.CreatedByEntity = null;
		}
		
		private void attach_PhoneticAlgorithmsObsoletedBy(PhoneticAlgorithm entity)
		{
			this.SendPropertyChanging();
			entity.ObsoletedByEntity = this;
		}
		
		private void detach_PhoneticAlgorithmsObsoletedBy(PhoneticAlgorithm entity)
		{
			this.SendPropertyChanging();
			entity.ObsoletedByEntity = null;
		}
		
		private void attach_PhoneticAlgorithmsUpdatedBy(PhoneticAlgorithm entity)
		{
			this.SendPropertyChanging();
			entity.UpdatedByEntity = this;
		}
		
		private void detach_PhoneticAlgorithmsUpdatedBy(PhoneticAlgorithm entity)
		{
			this.SendPropertyChanging();
			entity.UpdatedByEntity = null;
		}
		
		private void attach_PoliciesCreatedBy(Policy entity)
		{
			this.SendPropertyChanging();
			entity.CreatedByEntity = this;
		}
		
		private void detach_PoliciesCreatedBy(Policy entity)
		{
			this.SendPropertyChanging();
			entity.CreatedByEntity = null;
		}
		
		private void attach_PoliciesObsoletedBy(Policy entity)
		{
			this.SendPropertyChanging();
			entity.ObsoletedByEntity = this;
		}
		
		private void detach_PoliciesObsoletedBy(Policy entity)
		{
			this.SendPropertyChanging();
			entity.ObsoletedByEntity = null;
		}
		
		private void attach_ProtocolsCreatedBy(Protocol entity)
		{
			this.SendPropertyChanging();
			entity.CreatedByEntity = this;
		}
		
		private void detach_ProtocolsCreatedBy(Protocol entity)
		{
			this.SendPropertyChanging();
			entity.CreatedByEntity = null;
		}
		
		private void attach_ProtocolsObsoletedBy(Protocol entity)
		{
			this.SendPropertyChanging();
			entity.ObsoletedByEntity = this;
		}
		
		private void detach_ProtocolsObsoletedBy(Protocol entity)
		{
			this.SendPropertyChanging();
			entity.ObsoletedByEntity = null;
		}
		
		private void attach_ProtocolHandlersCreatedBy(ProtocolHandler entity)
		{
			this.SendPropertyChanging();
			entity.CreatedByEntity = this;
		}
		
		private void detach_ProtocolHandlersCreatedBy(ProtocolHandler entity)
		{
			this.SendPropertyChanging();
			entity.CreatedByEntity = null;
		}
		
		private void attach_ProtocolHandlersObsoletedBy(ProtocolHandler entity)
		{
			this.SendPropertyChanging();
			entity.ObsoletedByEntity = this;
		}
		
		private void detach_ProtocolHandlersObsoletedBy(ProtocolHandler entity)
		{
			this.SendPropertyChanging();
			entity.ObsoletedByEntity = null;
		}
		
		private void attach_ReferenceTermsCreatedBy(ReferenceTerm entity)
		{
			this.SendPropertyChanging();
			entity.CreatedByEntity = this;
		}
		
		private void detach_ReferenceTermsCreatedBy(ReferenceTerm entity)
		{
			this.SendPropertyChanging();
			entity.CreatedByEntity = null;
		}
		
		private void attach_ReferenceTermsObsoletedBy(ReferenceTerm entity)
		{
			this.SendPropertyChanging();
			entity.ObsoletedByEntity = this;
		}
		
		private void detach_ReferenceTermsObsoletedBy(ReferenceTerm entity)
		{
			this.SendPropertyChanging();
			entity.ObsoletedByEntity = null;
		}
		
		private void attach_ReferenceTermsUpdatedBy(ReferenceTerm entity)
		{
			this.SendPropertyChanging();
			entity.UpdatedByEntity = this;
		}
		
		private void detach_ReferenceTermsUpdatedBy(ReferenceTerm entity)
		{
			this.SendPropertyChanging();
			entity.UpdatedByEntity = null;
		}
		
		private void attach_ReferenceTermDisplayNamesCreatedBy(ReferenceTermDisplayName entity)
		{
			this.SendPropertyChanging();
			entity.CreatedByEntity = this;
		}
		
		private void detach_ReferenceTermDisplayNamesCreatedBy(ReferenceTermDisplayName entity)
		{
			this.SendPropertyChanging();
			entity.CreatedByEntity = null;
		}
		
		private void attach_ReferenceTermDisplayNamesObsoletedBy(ReferenceTermDisplayName entity)
		{
			this.SendPropertyChanging();
			entity.ObsoletedByEntity = this;
		}
		
		private void detach_ReferenceTermDisplayNamesObsoletedBy(ReferenceTermDisplayName entity)
		{
			this.SendPropertyChanging();
			entity.ObsoletedByEntity = null;
		}
		
		private void attach_SecurityApplicationsCreatedBy(SecurityApplication entity)
		{
			this.SendPropertyChanging();
			entity.CreatedByEntity = this;
		}
		
		private void detach_SecurityApplicationsCreatedBy(SecurityApplication entity)
		{
			this.SendPropertyChanging();
			entity.CreatedByEntity = null;
		}
		
		private void attach_SecurityApplicationsObsoletedBy(SecurityApplication entity)
		{
			this.SendPropertyChanging();
			entity.ObsoletedByEntity = this;
		}
		
		private void detach_SecurityApplicationsObsoletedBy(SecurityApplication entity)
		{
			this.SendPropertyChanging();
			entity.ObsoletedByEntity = null;
		}
		
		private void attach_SecurityDevicesObsoletedBy(SecurityDevice entity)
		{
			this.SendPropertyChanging();
			entity.ObsoletedByEntity = this;
		}
		
		private void detach_SecurityDevicesObsoletedBy(SecurityDevice entity)
		{
			this.SendPropertyChanging();
			entity.ObsoletedByEntity = null;
		}
		
		private void attach_SecurityDevicesCreatedBy(SecurityDevice entity)
		{
			this.SendPropertyChanging();
			entity.CreatedByEntity = this;
		}
		
		private void detach_SecurityDevicesCreatedBy(SecurityDevice entity)
		{
			this.SendPropertyChanging();
			entity.CreatedByEntity = null;
		}
		
		private void attach_SecurityRolesCreatedBy(SecurityRole entity)
		{
			this.SendPropertyChanging();
			entity.CreatedByEntity = this;
		}
		
		private void detach_SecurityRolesCreatedBy(SecurityRole entity)
		{
			this.SendPropertyChanging();
			entity.CreatedByEntity = null;
		}
		
		private void attach_SecurityRolesObsoletedBy(SecurityRole entity)
		{
			this.SendPropertyChanging();
			entity.ObsoletedByEntity = this;
		}
		
		private void detach_SecurityRolesObsoletedBy(SecurityRole entity)
		{
			this.SendPropertyChanging();
			entity.ObsoletedByEntity = null;
		}
		
		private void attach_SecurityRolesUpdatedBy(SecurityRole entity)
		{
			this.SendPropertyChanging();
			entity.UpdatedByEntity = this;
		}
		
		private void detach_SecurityRolesUpdatedBy(SecurityRole entity)
		{
			this.SendPropertyChanging();
			entity.UpdatedByEntity = null;
		}
		
		private void attach_SecurityUsersCreatedBy(SecurityUser entity)
		{
			this.SendPropertyChanging();
			entity.CreatedByEntity = this;
		}
		
		private void detach_SecurityUsersCreatedBy(SecurityUser entity)
		{
			this.SendPropertyChanging();
			entity.CreatedByEntity = null;
		}
		
		private void attach_SecurityUsersObsoletedBy(SecurityUser entity)
		{
			this.SendPropertyChanging();
			entity.ObsoletedByEntity = this;
		}
		
		private void detach_SecurityUsersObsoletedBy(SecurityUser entity)
		{
			this.SendPropertyChanging();
			entity.ObsoletedByEntity = null;
		}
		
		private void attach_SecurityUsersUpdatedBy(SecurityUser entity)
		{
			this.SendPropertyChanging();
			entity.UpdatedByEntity = this;
		}
		
		private void detach_SecurityUsersUpdatedBy(SecurityUser entity)
		{
			this.SendPropertyChanging();
			entity.UpdatedByEntity = null;
		}
		
		private void attach_SecurityUserClaims(SecurityUserClaim entity)
		{
			this.SendPropertyChanging();
			entity.SecurityUser = this;
		}
		
		private void detach_SecurityUserClaims(SecurityUserClaim entity)
		{
			this.SendPropertyChanging();
			entity.SecurityUser = null;
		}
		
		private void attach_SecurityUserLogins(SecurityUserLogin entity)
		{
			this.SendPropertyChanging();
			entity.SecurityUser = this;
		}
		
		private void detach_SecurityUserLogins(SecurityUserLogin entity)
		{
			this.SendPropertyChanging();
			entity.SecurityUser = null;
		}
		
		private void attach_SecurityUserRoles(SecurityUserRole entity)
		{
			this.SendPropertyChanging();
			entity.SecurityUser = this;
		}
		
		private void detach_SecurityUserRoles(SecurityUserRole entity)
		{
			this.SendPropertyChanging();
			entity.SecurityUser = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.SecurityUserClaim")]
	public partial class SecurityUserClaim : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _ClaimId;
		
		private System.Guid _UserId;
		
		private string _ClaimType;
		
		private string _ClaimValue;
		
		private EntityRef<SecurityUser> _SecurityUser;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnClaimIdChanging(System.Guid value);
    partial void OnClaimIdChanged();
    partial void OnUserIdChanging(System.Guid value);
    partial void OnUserIdChanged();
    partial void OnClaimTypeChanging(string value);
    partial void OnClaimTypeChanged();
    partial void OnClaimValueChanging(string value);
    partial void OnClaimValueChanged();
    #endregion
		
		public SecurityUserClaim()
		{
			this._SecurityUser = default(EntityRef<SecurityUser>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ClaimId", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid ClaimId
		{
			get
			{
				return this._ClaimId;
			}
			set
			{
				if ((this._ClaimId != value))
				{
					this.OnClaimIdChanging(value);
					this.SendPropertyChanging();
					this._ClaimId = value;
					this.SendPropertyChanged("ClaimId");
					this.OnClaimIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserId", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid UserId
		{
			get
			{
				return this._UserId;
			}
			set
			{
				if ((this._UserId != value))
				{
					if (this._SecurityUser.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserIdChanging(value);
					this.SendPropertyChanging();
					this._UserId = value;
					this.SendPropertyChanged("UserId");
					this.OnUserIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ClaimType", DbType="NVarChar(128)")]
		public string ClaimType
		{
			get
			{
				return this._ClaimType;
			}
			set
			{
				if ((this._ClaimType != value))
				{
					this.OnClaimTypeChanging(value);
					this.SendPropertyChanging();
					this._ClaimType = value;
					this.SendPropertyChanged("ClaimType");
					this.OnClaimTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ClaimValue", DbType="NVarChar(128)")]
		public string ClaimValue
		{
			get
			{
				return this._ClaimValue;
			}
			set
			{
				if ((this._ClaimValue != value))
				{
					this.OnClaimValueChanging(value);
					this.SendPropertyChanging();
					this._ClaimValue = value;
					this.SendPropertyChanged("ClaimValue");
					this.OnClaimValueChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="SecurityUser_SecurityUserClaim", Storage="_SecurityUser", ThisKey="UserId", OtherKey="UserId", IsForeignKey=true)]
		public SecurityUser SecurityUser
		{
			get
			{
				return this._SecurityUser.Entity;
			}
			set
			{
				SecurityUser previousValue = this._SecurityUser.Entity;
				if (((previousValue != value) 
							|| (this._SecurityUser.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._SecurityUser.Entity = null;
						previousValue.SecurityUserClaims.Remove(this);
					}
					this._SecurityUser.Entity = value;
					if ((value != null))
					{
						value.SecurityUserClaims.Add(this);
						this._UserId = value.UserId;
					}
					else
					{
						this._UserId = default(System.Guid);
					}
					this.SendPropertyChanged("SecurityUser");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.SecurityUserClass")]
	public partial class SecurityUserClass : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _ClassId;
		
		private string _Mnemonic;
		
		private EntitySet<SecurityUser> _SecurityUsersUserClass;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnClassIdChanging(System.Guid value);
    partial void OnClassIdChanged();
    partial void OnMnemonicChanging(string value);
    partial void OnMnemonicChanged();
    #endregion
		
		public SecurityUserClass()
		{
			this._SecurityUsersUserClass = new EntitySet<SecurityUser>(new Action<SecurityUser>(this.attach_SecurityUsersUserClass), new Action<SecurityUser>(this.detach_SecurityUsersUserClass));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ClassId", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid ClassId
		{
			get
			{
				return this._ClassId;
			}
			set
			{
				if ((this._ClassId != value))
				{
					this.OnClassIdChanging(value);
					this.SendPropertyChanging();
					this._ClassId = value;
					this.SendPropertyChanged("ClassId");
					this.OnClassIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Mnemonic", DbType="VarChar(32) NOT NULL", CanBeNull=false)]
		public string Mnemonic
		{
			get
			{
				return this._Mnemonic;
			}
			set
			{
				if ((this._Mnemonic != value))
				{
					this.OnMnemonicChanging(value);
					this.SendPropertyChanging();
					this._Mnemonic = value;
					this.SendPropertyChanged("Mnemonic");
					this.OnMnemonicChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="SecurityUserClass_SecurityUser", Storage="_SecurityUsersUserClass", ThisKey="ClassId", OtherKey="UserClass")]
		public EntitySet<SecurityUser> SecurityUsersUserClass
		{
			get
			{
				return this._SecurityUsersUserClass;
			}
			set
			{
				this._SecurityUsersUserClass.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_SecurityUsersUserClass(SecurityUser entity)
		{
			this.SendPropertyChanging();
			entity.UserClassEntity = this;
		}
		
		private void detach_SecurityUsersUserClass(SecurityUser entity)
		{
			this.SendPropertyChanging();
			entity.UserClassEntity = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.SecurityUserLogins")]
	public partial class SecurityUserLogin : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _LoginProvider;
		
		private string _ProviderKey;
		
		private System.Guid _UserId;
		
		private EntityRef<SecurityUser> _SecurityUser;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnLoginProviderChanging(string value);
    partial void OnLoginProviderChanged();
    partial void OnProviderKeyChanging(string value);
    partial void OnProviderKeyChanged();
    partial void OnUserIdChanging(System.Guid value);
    partial void OnUserIdChanged();
    #endregion
		
		public SecurityUserLogin()
		{
			this._SecurityUser = default(EntityRef<SecurityUser>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LoginProvider", DbType="NVarChar(128) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string LoginProvider
		{
			get
			{
				return this._LoginProvider;
			}
			set
			{
				if ((this._LoginProvider != value))
				{
					this.OnLoginProviderChanging(value);
					this.SendPropertyChanging();
					this._LoginProvider = value;
					this.SendPropertyChanged("LoginProvider");
					this.OnLoginProviderChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProviderKey", DbType="NVarChar(128) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string ProviderKey
		{
			get
			{
				return this._ProviderKey;
			}
			set
			{
				if ((this._ProviderKey != value))
				{
					this.OnProviderKeyChanging(value);
					this.SendPropertyChanging();
					this._ProviderKey = value;
					this.SendPropertyChanged("ProviderKey");
					this.OnProviderKeyChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserId", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid UserId
		{
			get
			{
				return this._UserId;
			}
			set
			{
				if ((this._UserId != value))
				{
					if (this._SecurityUser.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserIdChanging(value);
					this.SendPropertyChanging();
					this._UserId = value;
					this.SendPropertyChanged("UserId");
					this.OnUserIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="SecurityUser_SecurityUserLogin", Storage="_SecurityUser", ThisKey="UserId", OtherKey="UserId", IsForeignKey=true)]
		public SecurityUser SecurityUser
		{
			get
			{
				return this._SecurityUser.Entity;
			}
			set
			{
				SecurityUser previousValue = this._SecurityUser.Entity;
				if (((previousValue != value) 
							|| (this._SecurityUser.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._SecurityUser.Entity = null;
						previousValue.SecurityUserLogins.Remove(this);
					}
					this._SecurityUser.Entity = value;
					if ((value != null))
					{
						value.SecurityUserLogins.Add(this);
						this._UserId = value.UserId;
					}
					else
					{
						this._UserId = default(System.Guid);
					}
					this.SendPropertyChanged("SecurityUser");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.SecurityUserRole")]
	public partial class SecurityUserRole : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _UserId;
		
		private System.Guid _RoleId;
		
		private EntityRef<SecurityRole> _SecurityRole;
		
		private EntityRef<SecurityUser> _SecurityUser;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnUserIdChanging(System.Guid value);
    partial void OnUserIdChanged();
    partial void OnRoleIdChanging(System.Guid value);
    partial void OnRoleIdChanged();
    #endregion
		
		public SecurityUserRole()
		{
			this._SecurityRole = default(EntityRef<SecurityRole>);
			this._SecurityUser = default(EntityRef<SecurityUser>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserId", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid UserId
		{
			get
			{
				return this._UserId;
			}
			set
			{
				if ((this._UserId != value))
				{
					if (this._SecurityUser.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserIdChanging(value);
					this.SendPropertyChanging();
					this._UserId = value;
					this.SendPropertyChanged("UserId");
					this.OnUserIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RoleId", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid RoleId
		{
			get
			{
				return this._RoleId;
			}
			set
			{
				if ((this._RoleId != value))
				{
					if (this._SecurityRole.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnRoleIdChanging(value);
					this.SendPropertyChanging();
					this._RoleId = value;
					this.SendPropertyChanged("RoleId");
					this.OnRoleIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="SecurityRole_SecurityUserRole", Storage="_SecurityRole", ThisKey="RoleId", OtherKey="RoleId", IsForeignKey=true)]
		public SecurityRole SecurityRole
		{
			get
			{
				return this._SecurityRole.Entity;
			}
			set
			{
				SecurityRole previousValue = this._SecurityRole.Entity;
				if (((previousValue != value) 
							|| (this._SecurityRole.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._SecurityRole.Entity = null;
						previousValue.SecurityUserRoles.Remove(this);
					}
					this._SecurityRole.Entity = value;
					if ((value != null))
					{
						value.SecurityUserRoles.Add(this);
						this._RoleId = value.RoleId;
					}
					else
					{
						this._RoleId = default(System.Guid);
					}
					this.SendPropertyChanged("SecurityRole");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="SecurityUser_SecurityUserRole", Storage="_SecurityUser", ThisKey="UserId", OtherKey="UserId", IsForeignKey=true)]
		public SecurityUser SecurityUser
		{
			get
			{
				return this._SecurityUser.Entity;
			}
			set
			{
				SecurityUser previousValue = this._SecurityUser.Entity;
				if (((previousValue != value) 
							|| (this._SecurityUser.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._SecurityUser.Entity = null;
						previousValue.SecurityUserRoles.Remove(this);
					}
					this._SecurityUser.Entity = value;
					if ((value != null))
					{
						value.SecurityUserRoles.Add(this);
						this._UserId = value.UserId;
					}
					else
					{
						this._UserId = default(System.Guid);
					}
					this.SendPropertyChanged("SecurityUser");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.SubstanceAdministration")]
	public partial class SubstanceAdministration : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _ActVersionId;
		
		private System.Guid _RouteConceptId;
		
		private decimal _DoseQuantity;
		
		private System.Guid _DoseUnitConceptId;
		
		private int _SequenceId;
		
		private EntityRef<ActVersion> _ActVersion;
		
		private EntityRef<Concept> _DoseUnitConcept;
		
		private EntityRef<Concept> _RouteConcept;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnActVersionIdChanging(System.Guid value);
    partial void OnActVersionIdChanged();
    partial void OnRouteConceptIdChanging(System.Guid value);
    partial void OnRouteConceptIdChanged();
    partial void OnDoseQuantityChanging(decimal value);
    partial void OnDoseQuantityChanged();
    partial void OnDoseUnitConceptIdChanging(System.Guid value);
    partial void OnDoseUnitConceptIdChanged();
    partial void OnSequenceIdChanging(int value);
    partial void OnSequenceIdChanged();
    #endregion
		
		public SubstanceAdministration()
		{
			this._ActVersion = default(EntityRef<ActVersion>);
			this._DoseUnitConcept = default(EntityRef<Concept>);
			this._RouteConcept = default(EntityRef<Concept>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ActVersionId", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid ActVersionId
		{
			get
			{
				return this._ActVersionId;
			}
			set
			{
				if ((this._ActVersionId != value))
				{
					if (this._ActVersion.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnActVersionIdChanging(value);
					this.SendPropertyChanging();
					this._ActVersionId = value;
					this.SendPropertyChanged("ActVersionId");
					this.OnActVersionIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RouteConceptId", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid RouteConceptId
		{
			get
			{
				return this._RouteConceptId;
			}
			set
			{
				if ((this._RouteConceptId != value))
				{
					if (this._RouteConcept.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnRouteConceptIdChanging(value);
					this.SendPropertyChanging();
					this._RouteConceptId = value;
					this.SendPropertyChanged("RouteConceptId");
					this.OnRouteConceptIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DoseQuantity", DbType="Decimal(18,0) NOT NULL")]
		public decimal DoseQuantity
		{
			get
			{
				return this._DoseQuantity;
			}
			set
			{
				if ((this._DoseQuantity != value))
				{
					this.OnDoseQuantityChanging(value);
					this.SendPropertyChanging();
					this._DoseQuantity = value;
					this.SendPropertyChanged("DoseQuantity");
					this.OnDoseQuantityChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DoseUnitConceptId", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid DoseUnitConceptId
		{
			get
			{
				return this._DoseUnitConceptId;
			}
			set
			{
				if ((this._DoseUnitConceptId != value))
				{
					if (this._DoseUnitConcept.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnDoseUnitConceptIdChanging(value);
					this.SendPropertyChanging();
					this._DoseUnitConceptId = value;
					this.SendPropertyChanged("DoseUnitConceptId");
					this.OnDoseUnitConceptIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SequenceId", DbType="Int NOT NULL")]
		public int SequenceId
		{
			get
			{
				return this._SequenceId;
			}
			set
			{
				if ((this._SequenceId != value))
				{
					this.OnSequenceIdChanging(value);
					this.SendPropertyChanging();
					this._SequenceId = value;
					this.SendPropertyChanged("SequenceId");
					this.OnSequenceIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ActVersion_SubstanceAdministration", Storage="_ActVersion", ThisKey="ActVersionId", OtherKey="ActVersionId", IsForeignKey=true)]
		public ActVersion ActVersion
		{
			get
			{
				return this._ActVersion.Entity;
			}
			set
			{
				ActVersion previousValue = this._ActVersion.Entity;
				if (((previousValue != value) 
							|| (this._ActVersion.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ActVersion.Entity = null;
						previousValue.SubstanceAdministration = null;
					}
					this._ActVersion.Entity = value;
					if ((value != null))
					{
						value.SubstanceAdministration = this;
						this._ActVersionId = value.ActVersionId;
					}
					else
					{
						this._ActVersionId = default(System.Guid);
					}
					this.SendPropertyChanged("ActVersion");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Concept_SubstanceAdministration", Storage="_DoseUnitConcept", ThisKey="DoseUnitConceptId", OtherKey="ConceptId", IsForeignKey=true)]
		public Concept DoseUnitConcept
		{
			get
			{
				return this._DoseUnitConcept.Entity;
			}
			set
			{
				Concept previousValue = this._DoseUnitConcept.Entity;
				if (((previousValue != value) 
							|| (this._DoseUnitConcept.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._DoseUnitConcept.Entity = null;
						previousValue.SubstanceAdministrationsDoseUnitConceptId.Remove(this);
					}
					this._DoseUnitConcept.Entity = value;
					if ((value != null))
					{
						value.SubstanceAdministrationsDoseUnitConceptId.Add(this);
						this._DoseUnitConceptId = value.ConceptId;
					}
					else
					{
						this._DoseUnitConceptId = default(System.Guid);
					}
					this.SendPropertyChanged("DoseUnitConcept");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Concept_SubstanceAdministration1", Storage="_RouteConcept", ThisKey="RouteConceptId", OtherKey="ConceptId", IsForeignKey=true)]
		public Concept RouteConcept
		{
			get
			{
				return this._RouteConcept.Entity;
			}
			set
			{
				Concept previousValue = this._RouteConcept.Entity;
				if (((previousValue != value) 
							|| (this._RouteConcept.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._RouteConcept.Entity = null;
						previousValue.SubstanceAdministrationsRouteConceptId.Remove(this);
					}
					this._RouteConcept.Entity = value;
					if ((value != null))
					{
						value.SubstanceAdministrationsRouteConceptId.Add(this);
						this._RouteConceptId = value.ConceptId;
					}
					else
					{
						this._RouteConceptId = default(System.Guid);
					}
					this.SendPropertyChanged("RouteConcept");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.TextObservation")]
	public partial class TextObservation : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _ActVersionId;
		
		private string _Value;
		
		private EntityRef<Observation> _Observation;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnActVersionIdChanging(System.Guid value);
    partial void OnActVersionIdChanged();
    partial void OnValueChanging(string value);
    partial void OnValueChanged();
    #endregion
		
		public TextObservation()
		{
			this._Observation = default(EntityRef<Observation>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ActVersionId", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid ActVersionId
		{
			get
			{
				return this._ActVersionId;
			}
			set
			{
				if ((this._ActVersionId != value))
				{
					if (this._Observation.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnActVersionIdChanging(value);
					this.SendPropertyChanging();
					this._ActVersionId = value;
					this.SendPropertyChanged("ActVersionId");
					this.OnActVersionIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Value", DbType="VarChar(MAX) NOT NULL", CanBeNull=false)]
		public string Value
		{
			get
			{
				return this._Value;
			}
			set
			{
				if ((this._Value != value))
				{
					this.OnValueChanging(value);
					this.SendPropertyChanging();
					this._Value = value;
					this.SendPropertyChanged("Value");
					this.OnValueChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Observation_TextObservation", Storage="_Observation", ThisKey="ActVersionId", OtherKey="ActVersionId", IsForeignKey=true)]
		public Observation Observation
		{
			get
			{
				return this._Observation.Entity;
			}
			set
			{
				Observation previousValue = this._Observation.Entity;
				if (((previousValue != value) 
							|| (this._Observation.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Observation.Entity = null;
						previousValue.TextObservation = null;
					}
					this._Observation.Entity = value;
					if ((value != null))
					{
						value.TextObservation = this;
						this._ActVersionId = value.ActVersionId;
					}
					else
					{
						this._ActVersionId = default(System.Guid);
					}
					this.SendPropertyChanged("Observation");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
}
#pragma warning restore 1591
