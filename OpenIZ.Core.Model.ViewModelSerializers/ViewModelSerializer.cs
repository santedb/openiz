//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace OpenIZ.Core.Model.Json.Formatter {
    using OpenIZ.Core.Model;
    
    
    public class NonVersionedEntityDataViewModelSerializer : OpenIZ.Core.Applets.ViewModel.Json.IJsonViewModelTypeFormatter {
        
        private OpenIZ.Core.Model.Serialization.ModelSerializationBinder m_binder = new OpenIZ.Core.Model.Serialization.ModelSerializationBinder();
        
        private OpenIZ.Core.Diagnostics.Tracer m_tracer = OpenIZ.Core.Diagnostics.Tracer.GetTracer(typeof(NonVersionedEntityDataViewModelSerializer));
        
        public System.Type HandlesType {
            get {
                return typeof(OpenIZ.Core.Model.NonVersionedEntityData);
            }
        }
        
        public void Serialize(Newtonsoft.Json.JsonWriter w, OpenIZ.Core.Model.IdentifiedData o, OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext context) {
            if ((o == null)) {
                throw new System.ArgumentNullException("o");
            }
            OpenIZ.Core.Model.NonVersionedEntityData _strong = null;
            OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext _jsonContext = null;
            bool _loaded = false;
            try {
                _strong = ((OpenIZ.Core.Model.NonVersionedEntityData)(o));
            }
            catch (System.Exception e) {
                this.m_tracer.TraceError(string.Format("Casting Error: {0}", e));
                throw new System.ArgumentException(string.Format("Invalid type {0} provided, expected {1}", o.GetType(), typeof(OpenIZ.Core.Model.NonVersionedEntityData)));
            }
            if (context.ShouldSerialize("updatedTime")) {
                if ((_strong.UpdatedTimeXml == null)) {
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "updatedTime", _strong.UpdatedTimeXml, context);
                }
            }
            if (context.ShouldSerialize("updatedBy")) {
                if ((_strong.UpdatedByKey == null)) {
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "updatedBy", _strong.UpdatedByKey, context);
                }
            }
            if (context.ShouldSerialize("creationTimeModel")) {
                if ((_strong.CreationTime == null)) {
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "creationTimeModel", _strong.CreationTime, context);
                }
            }
            if (context.ShouldSerialize("creationTime")) {
                if ((_strong.CreationTimeXml == null)) {
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "creationTime", _strong.CreationTimeXml, context);
                }
            }
            if (context.ShouldSerialize("obsoletionTimeModel")) {
                if ((_strong.ObsoletionTime == null)) {
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "obsoletionTimeModel", _strong.ObsoletionTime, context);
                }
            }
            if (context.ShouldSerialize("obsoletionTime")) {
                if ((_strong.ObsoletionTimeXml == null)) {
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "obsoletionTime", _strong.ObsoletionTimeXml, context);
                }
            }
            if (context.ShouldSerialize("createdBy")) {
                if ((_strong.CreatedByKey == null)) {
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "createdBy", _strong.CreatedByKey, context);
                }
            }
            if (context.ShouldSerialize("obsoletedBy")) {
                if ((_strong.ObsoletedByKey == null)) {
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "obsoletedBy", _strong.ObsoletedByKey, context);
                }
            }
            if (context.ShouldSerialize("id")) {
                if ((_strong.Key == null)) {
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "id", _strong.Key, context);
                }
            }
            if (context.ShouldSerialize("etag")) {
                if ((_strong.Tag == null)) {
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "etag", _strong.Tag, context);
                }
            }
            if ((_loaded && _strong.Key.HasValue)) {
                ((OpenIZ.Core.Services.IDataCachingService)(OpenIZ.Core.ApplicationServiceContext.Current.GetService(typeof(OpenIZ.Core.Services.IDataCachingService)))).Add(_strong);
            }
        }
        
        public object Deserialize(Newtonsoft.Json.JsonReader r, System.Type asType, OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext context) {
            OpenIZ.Core.Model.NonVersionedEntityData _retVal = new OpenIZ.Core.Model.NonVersionedEntityData();
            int _depth = r.Depth;
            if ((r.TokenType != Newtonsoft.Json.JsonToken.StartObject)) {
                _depth = (_depth - 1);
            }
            for (
            ; r.Read(); 
            ) {
                if ((r.TokenType == Newtonsoft.Json.JsonToken.PropertyName)) {
                    if ("id".Equals(r.Value)) {
                        r.Read();
                        System.Nullable<System.Guid> _instance = ((System.Nullable<System.Guid>)(context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<System.Guid>), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("id", context.JsonContext, _retVal, context))));
                        if ((_instance != null)) {
                            _retVal.Key = _instance;
                        }
                    }
                    else {
                        if ("obsoletedBy".Equals(r.Value)) {
                            r.Read();
                            System.Nullable<System.Guid> _instance = ((System.Nullable<System.Guid>)(context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<System.Guid>), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("obsoletedBy", context.JsonContext, _retVal, context))));
                            if ((_instance != null)) {
                                _retVal.ObsoletedByKey = _instance;
                            }
                        }
                        else {
                            if ("createdBy".Equals(r.Value)) {
                                r.Read();
                                System.Nullable<System.Guid> _instance = ((System.Nullable<System.Guid>)(context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<System.Guid>), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("createdBy", context.JsonContext, _retVal, context))));
                                if ((_instance != null)) {
                                    _retVal.CreatedByKey = _instance;
                                }
                            }
                            else {
                                if ("obsoletionTime".Equals(r.Value)) {
                                    r.Read();
                                    string _instance = ((string)(context.JsonContext.ReadElementUtil(r, typeof(string), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("obsoletionTime", context.JsonContext, _retVal, context))));
                                    if ((_instance != null)) {
                                        _retVal.ObsoletionTimeXml = _instance;
                                    }
                                }
                                else {
                                    if ("obsoletionTimeModel".Equals(r.Value)) {
                                        r.Read();
                                        System.Nullable<System.DateTimeOffset> _instance = ((System.Nullable<System.DateTimeOffset>)(context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<System.DateTimeOffset>), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("obsoletionTimeModel", context.JsonContext, _retVal, context))));
                                        if ((_instance != null)) {
                                            _retVal.ObsoletionTime = _instance;
                                        }
                                    }
                                    else {
                                        if ("creationTime".Equals(r.Value)) {
                                            r.Read();
                                            string _instance = ((string)(context.JsonContext.ReadElementUtil(r, typeof(string), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("creationTime", context.JsonContext, _retVal, context))));
                                            if ((_instance != null)) {
                                                _retVal.CreationTimeXml = _instance;
                                            }
                                        }
                                        else {
                                            if ("creationTimeModel".Equals(r.Value)) {
                                                r.Read();
                                                System.DateTimeOffset _instance = ((System.DateTimeOffset)(context.JsonContext.ReadElementUtil(r, typeof(System.DateTimeOffset), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("creationTimeModel", context.JsonContext, _retVal, context))));
                                                if ((_instance != null)) {
                                                    _retVal.CreationTime = _instance;
                                                }
                                            }
                                            else {
                                                if ("updatedBy".Equals(r.Value)) {
                                                    r.Read();
                                                    System.Nullable<System.Guid> _instance = ((System.Nullable<System.Guid>)(context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<System.Guid>), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("updatedBy", context.JsonContext, _retVal, context))));
                                                    if ((_instance != null)) {
                                                        _retVal.UpdatedByKey = _instance;
                                                    }
                                                }
                                                else {
                                                    if ("updatedTime".Equals(r.Value)) {
                                                        r.Read();
                                                        string _instance = ((string)(context.JsonContext.ReadElementUtil(r, typeof(string), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("updatedTime", context.JsonContext, _retVal, context))));
                                                        if ((_instance != null)) {
                                                            _retVal.UpdatedTimeXml = _instance;
                                                        }
                                                    }
                                                    else {
                                                        if ("$type".Equals(r.Value)) {
                                                            System.Type _type = this.m_binder.BindToType("OpenIZ.Core.Model, Version=0.6.14.21496, Culture=neutral, PublicKeyToken=null", r.ReadAsString());
                                                            if ((_type != typeof(OpenIZ.Core.Model.NonVersionedEntityData))) {
                                                                OpenIZ.Core.Model.NonVersionedEntityData _nretVal = ((OpenIZ.Core.Model.NonVersionedEntityData)(context.JsonContext.GetFormatter(_type).Deserialize(r, _type, context)));
                                                                _nretVal.CopyObjectData(_retVal);
                                                                return _nretVal;
                                                            }
                                                        }
                                                        else {
                                                            r.Skip();
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
                else {
                    if (((r.TokenType == Newtonsoft.Json.JsonToken.EndObject) 
                                && (r.Depth == _depth))) {
                        return _retVal;
                    }
                    else {
                        throw new Newtonsoft.Json.JsonSerializationException("JSON in invalid state");
                    }
                }
            }
            return _retVal;
        }
        
        public object FromSimpleValue(object o) {
            return null;
        }
        
        public object GetSimpleValue(object o) {
            return null;
        }
    }
    
    public class SecurityApplicationViewModelSerializer : OpenIZ.Core.Applets.ViewModel.Json.IJsonViewModelTypeFormatter {
        
        private OpenIZ.Core.Model.Serialization.ModelSerializationBinder m_binder = new OpenIZ.Core.Model.Serialization.ModelSerializationBinder();
        
        private OpenIZ.Core.Diagnostics.Tracer m_tracer = OpenIZ.Core.Diagnostics.Tracer.GetTracer(typeof(SecurityApplicationViewModelSerializer));
        
        public System.Type HandlesType {
            get {
                return typeof(OpenIZ.Core.Model.Security.SecurityApplication);
            }
        }
        
        public void Serialize(Newtonsoft.Json.JsonWriter w, OpenIZ.Core.Model.IdentifiedData o, OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext context) {
            if ((o == null)) {
                throw new System.ArgumentNullException("o");
            }
            OpenIZ.Core.Model.Security.SecurityApplication _strong = null;
            OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext _jsonContext = null;
            bool _loaded = false;
            try {
                _strong = ((OpenIZ.Core.Model.Security.SecurityApplication)(o));
            }
            catch (System.Exception e) {
                this.m_tracer.TraceError(string.Format("Casting Error: {0}", e));
                throw new System.ArgumentException(string.Format("Invalid type {0} provided, expected {1}", o.GetType(), typeof(OpenIZ.Core.Model.Security.SecurityApplication)));
            }
            if (context.ShouldSerialize("applicationSecret")) {
                if ((_strong.ApplicationSecret == null)) {
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "applicationSecret", _strong.ApplicationSecret, context);
                }
            }
            if (context.ShouldSerialize("name")) {
                if ((_strong.Name == null)) {
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "name", _strong.Name, context);
                }
            }
            if (context.ShouldSerialize("updatedTime")) {
                if ((_strong.UpdatedTimeXml == null)) {
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "updatedTime", _strong.UpdatedTimeXml, context);
                }
            }
            if (context.ShouldSerialize("updatedBy")) {
                if ((_strong.UpdatedByKey == null)) {
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "updatedBy", _strong.UpdatedByKey, context);
                }
            }
            if (context.ShouldSerialize("creationTimeModel")) {
                if ((_strong.CreationTime == null)) {
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "creationTimeModel", _strong.CreationTime, context);
                }
            }
            if (context.ShouldSerialize("creationTime")) {
                if ((_strong.CreationTimeXml == null)) {
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "creationTime", _strong.CreationTimeXml, context);
                }
            }
            if (context.ShouldSerialize("obsoletionTimeModel")) {
                if ((_strong.ObsoletionTime == null)) {
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "obsoletionTimeModel", _strong.ObsoletionTime, context);
                }
            }
            if (context.ShouldSerialize("obsoletionTime")) {
                if ((_strong.ObsoletionTimeXml == null)) {
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "obsoletionTime", _strong.ObsoletionTimeXml, context);
                }
            }
            if (context.ShouldSerialize("createdBy")) {
                if ((_strong.CreatedByKey == null)) {
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "createdBy", _strong.CreatedByKey, context);
                }
            }
            if (context.ShouldSerialize("obsoletedBy")) {
                if ((_strong.ObsoletedByKey == null)) {
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "obsoletedBy", _strong.ObsoletedByKey, context);
                }
            }
            if (context.ShouldSerialize("id")) {
                if ((_strong.Key == null)) {
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "id", _strong.Key, context);
                }
            }
            if (context.ShouldSerialize("etag")) {
                if ((_strong.Tag == null)) {
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "etag", _strong.Tag, context);
                }
            }
            if ((_loaded && _strong.Key.HasValue)) {
                ((OpenIZ.Core.Services.IDataCachingService)(OpenIZ.Core.ApplicationServiceContext.Current.GetService(typeof(OpenIZ.Core.Services.IDataCachingService)))).Add(_strong);
            }
        }
        
        public object Deserialize(Newtonsoft.Json.JsonReader r, System.Type asType, OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext context) {
            OpenIZ.Core.Model.Security.SecurityApplication _retVal = new OpenIZ.Core.Model.Security.SecurityApplication();
            int _depth = r.Depth;
            if ((r.TokenType != Newtonsoft.Json.JsonToken.StartObject)) {
                _depth = (_depth - 1);
            }
            for (
            ; r.Read(); 
            ) {
                if ((r.TokenType == Newtonsoft.Json.JsonToken.PropertyName)) {
                    if ("id".Equals(r.Value)) {
                        r.Read();
                        System.Nullable<System.Guid> _instance = ((System.Nullable<System.Guid>)(context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<System.Guid>), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("id", context.JsonContext, _retVal, context))));
                        if ((_instance != null)) {
                            _retVal.Key = _instance;
                        }
                    }
                    else {
                        if ("obsoletedBy".Equals(r.Value)) {
                            r.Read();
                            System.Nullable<System.Guid> _instance = ((System.Nullable<System.Guid>)(context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<System.Guid>), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("obsoletedBy", context.JsonContext, _retVal, context))));
                            if ((_instance != null)) {
                                _retVal.ObsoletedByKey = _instance;
                            }
                        }
                        else {
                            if ("createdBy".Equals(r.Value)) {
                                r.Read();
                                System.Nullable<System.Guid> _instance = ((System.Nullable<System.Guid>)(context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<System.Guid>), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("createdBy", context.JsonContext, _retVal, context))));
                                if ((_instance != null)) {
                                    _retVal.CreatedByKey = _instance;
                                }
                            }
                            else {
                                if ("obsoletionTime".Equals(r.Value)) {
                                    r.Read();
                                    string _instance = ((string)(context.JsonContext.ReadElementUtil(r, typeof(string), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("obsoletionTime", context.JsonContext, _retVal, context))));
                                    if ((_instance != null)) {
                                        _retVal.ObsoletionTimeXml = _instance;
                                    }
                                }
                                else {
                                    if ("obsoletionTimeModel".Equals(r.Value)) {
                                        r.Read();
                                        System.Nullable<System.DateTimeOffset> _instance = ((System.Nullable<System.DateTimeOffset>)(context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<System.DateTimeOffset>), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("obsoletionTimeModel", context.JsonContext, _retVal, context))));
                                        if ((_instance != null)) {
                                            _retVal.ObsoletionTime = _instance;
                                        }
                                    }
                                    else {
                                        if ("creationTime".Equals(r.Value)) {
                                            r.Read();
                                            string _instance = ((string)(context.JsonContext.ReadElementUtil(r, typeof(string), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("creationTime", context.JsonContext, _retVal, context))));
                                            if ((_instance != null)) {
                                                _retVal.CreationTimeXml = _instance;
                                            }
                                        }
                                        else {
                                            if ("creationTimeModel".Equals(r.Value)) {
                                                r.Read();
                                                System.DateTimeOffset _instance = ((System.DateTimeOffset)(context.JsonContext.ReadElementUtil(r, typeof(System.DateTimeOffset), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("creationTimeModel", context.JsonContext, _retVal, context))));
                                                if ((_instance != null)) {
                                                    _retVal.CreationTime = _instance;
                                                }
                                            }
                                            else {
                                                if ("updatedBy".Equals(r.Value)) {
                                                    r.Read();
                                                    System.Nullable<System.Guid> _instance = ((System.Nullable<System.Guid>)(context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<System.Guid>), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("updatedBy", context.JsonContext, _retVal, context))));
                                                    if ((_instance != null)) {
                                                        _retVal.UpdatedByKey = _instance;
                                                    }
                                                }
                                                else {
                                                    if ("updatedTime".Equals(r.Value)) {
                                                        r.Read();
                                                        string _instance = ((string)(context.JsonContext.ReadElementUtil(r, typeof(string), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("updatedTime", context.JsonContext, _retVal, context))));
                                                        if ((_instance != null)) {
                                                            _retVal.UpdatedTimeXml = _instance;
                                                        }
                                                    }
                                                    else {
                                                        if ("name".Equals(r.Value)) {
                                                            r.Read();
                                                            string _instance = ((string)(context.JsonContext.ReadElementUtil(r, typeof(string), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("name", context.JsonContext, _retVal, context))));
                                                            if ((_instance != null)) {
                                                                _retVal.Name = _instance;
                                                            }
                                                        }
                                                        else {
                                                            if ("applicationSecret".Equals(r.Value)) {
                                                                r.Read();
                                                                string _instance = ((string)(context.JsonContext.ReadElementUtil(r, typeof(string), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("applicationSecret", context.JsonContext, _retVal, context))));
                                                                if ((_instance != null)) {
                                                                    _retVal.ApplicationSecret = _instance;
                                                                }
                                                            }
                                                            else {
                                                                if ("$type".Equals(r.Value)) {
                                                                    System.Type _type = this.m_binder.BindToType("OpenIZ.Core.Model, Version=0.6.14.21496, Culture=neutral, PublicKeyToken=null", r.ReadAsString());
                                                                    if ((_type != typeof(OpenIZ.Core.Model.Security.SecurityApplication))) {
                                                                        OpenIZ.Core.Model.Security.SecurityApplication _nretVal = ((OpenIZ.Core.Model.Security.SecurityApplication)(context.JsonContext.GetFormatter(_type).Deserialize(r, _type, context)));
                                                                        _nretVal.CopyObjectData(_retVal);
                                                                        return _nretVal;
                                                                    }
                                                                }
                                                                else {
                                                                    r.Skip();
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
                else {
                    if (((r.TokenType == Newtonsoft.Json.JsonToken.EndObject) 
                                && (r.Depth == _depth))) {
                        return _retVal;
                    }
                    else {
                        throw new Newtonsoft.Json.JsonSerializationException("JSON in invalid state");
                    }
                }
            }
            return _retVal;
        }
        
        public object FromSimpleValue(object o) {
            return null;
        }
        
        public object GetSimpleValue(object o) {
            return null;
        }
    }
    
    public class SecurityDeviceViewModelSerializer : OpenIZ.Core.Applets.ViewModel.Json.IJsonViewModelTypeFormatter {
        
        private OpenIZ.Core.Model.Serialization.ModelSerializationBinder m_binder = new OpenIZ.Core.Model.Serialization.ModelSerializationBinder();
        
        private OpenIZ.Core.Diagnostics.Tracer m_tracer = OpenIZ.Core.Diagnostics.Tracer.GetTracer(typeof(SecurityDeviceViewModelSerializer));
        
        public System.Type HandlesType {
            get {
                return typeof(OpenIZ.Core.Model.Security.SecurityDevice);
            }
        }
        
        public void Serialize(Newtonsoft.Json.JsonWriter w, OpenIZ.Core.Model.IdentifiedData o, OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext context) {
            if ((o == null)) {
                throw new System.ArgumentNullException("o");
            }
            OpenIZ.Core.Model.Security.SecurityDevice _strong = null;
            OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext _jsonContext = null;
            bool _loaded = false;
            try {
                _strong = ((OpenIZ.Core.Model.Security.SecurityDevice)(o));
            }
            catch (System.Exception e) {
                this.m_tracer.TraceError(string.Format("Casting Error: {0}", e));
                throw new System.ArgumentException(string.Format("Invalid type {0} provided, expected {1}", o.GetType(), typeof(OpenIZ.Core.Model.Security.SecurityDevice)));
            }
            if (context.ShouldSerialize("deviceSecret")) {
                if ((_strong.DeviceSecret == null)) {
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "deviceSecret", _strong.DeviceSecret, context);
                }
            }
            if (context.ShouldSerialize("name")) {
                if ((_strong.Name == null)) {
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "name", _strong.Name, context);
                }
            }
            if (context.ShouldSerialize("updatedTime")) {
                if ((_strong.UpdatedTimeXml == null)) {
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "updatedTime", _strong.UpdatedTimeXml, context);
                }
            }
            if (context.ShouldSerialize("updatedBy")) {
                if ((_strong.UpdatedByKey == null)) {
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "updatedBy", _strong.UpdatedByKey, context);
                }
            }
            if (context.ShouldSerialize("creationTimeModel")) {
                if ((_strong.CreationTime == null)) {
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "creationTimeModel", _strong.CreationTime, context);
                }
            }
            if (context.ShouldSerialize("creationTime")) {
                if ((_strong.CreationTimeXml == null)) {
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "creationTime", _strong.CreationTimeXml, context);
                }
            }
            if (context.ShouldSerialize("obsoletionTimeModel")) {
                if ((_strong.ObsoletionTime == null)) {
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "obsoletionTimeModel", _strong.ObsoletionTime, context);
                }
            }
            if (context.ShouldSerialize("obsoletionTime")) {
                if ((_strong.ObsoletionTimeXml == null)) {
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "obsoletionTime", _strong.ObsoletionTimeXml, context);
                }
            }
            if (context.ShouldSerialize("createdBy")) {
                if ((_strong.CreatedByKey == null)) {
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "createdBy", _strong.CreatedByKey, context);
                }
            }
            if (context.ShouldSerialize("obsoletedBy")) {
                if ((_strong.ObsoletedByKey == null)) {
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "obsoletedBy", _strong.ObsoletedByKey, context);
                }
            }
            if (context.ShouldSerialize("id")) {
                if ((_strong.Key == null)) {
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "id", _strong.Key, context);
                }
            }
            if (context.ShouldSerialize("etag")) {
                if ((_strong.Tag == null)) {
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "etag", _strong.Tag, context);
                }
            }
            if ((_loaded && _strong.Key.HasValue)) {
                ((OpenIZ.Core.Services.IDataCachingService)(OpenIZ.Core.ApplicationServiceContext.Current.GetService(typeof(OpenIZ.Core.Services.IDataCachingService)))).Add(_strong);
            }
        }
        
        public object Deserialize(Newtonsoft.Json.JsonReader r, System.Type asType, OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext context) {
            OpenIZ.Core.Model.Security.SecurityDevice _retVal = new OpenIZ.Core.Model.Security.SecurityDevice();
            int _depth = r.Depth;
            if ((r.TokenType != Newtonsoft.Json.JsonToken.StartObject)) {
                _depth = (_depth - 1);
            }
            for (
            ; r.Read(); 
            ) {
                if ((r.TokenType == Newtonsoft.Json.JsonToken.PropertyName)) {
                    if ("id".Equals(r.Value)) {
                        r.Read();
                        System.Nullable<System.Guid> _instance = ((System.Nullable<System.Guid>)(context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<System.Guid>), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("id", context.JsonContext, _retVal, context))));
                        if ((_instance != null)) {
                            _retVal.Key = _instance;
                        }
                    }
                    else {
                        if ("obsoletedBy".Equals(r.Value)) {
                            r.Read();
                            System.Nullable<System.Guid> _instance = ((System.Nullable<System.Guid>)(context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<System.Guid>), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("obsoletedBy", context.JsonContext, _retVal, context))));
                            if ((_instance != null)) {
                                _retVal.ObsoletedByKey = _instance;
                            }
                        }
                        else {
                            if ("createdBy".Equals(r.Value)) {
                                r.Read();
                                System.Nullable<System.Guid> _instance = ((System.Nullable<System.Guid>)(context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<System.Guid>), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("createdBy", context.JsonContext, _retVal, context))));
                                if ((_instance != null)) {
                                    _retVal.CreatedByKey = _instance;
                                }
                            }
                            else {
                                if ("obsoletionTime".Equals(r.Value)) {
                                    r.Read();
                                    string _instance = ((string)(context.JsonContext.ReadElementUtil(r, typeof(string), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("obsoletionTime", context.JsonContext, _retVal, context))));
                                    if ((_instance != null)) {
                                        _retVal.ObsoletionTimeXml = _instance;
                                    }
                                }
                                else {
                                    if ("obsoletionTimeModel".Equals(r.Value)) {
                                        r.Read();
                                        System.Nullable<System.DateTimeOffset> _instance = ((System.Nullable<System.DateTimeOffset>)(context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<System.DateTimeOffset>), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("obsoletionTimeModel", context.JsonContext, _retVal, context))));
                                        if ((_instance != null)) {
                                            _retVal.ObsoletionTime = _instance;
                                        }
                                    }
                                    else {
                                        if ("creationTime".Equals(r.Value)) {
                                            r.Read();
                                            string _instance = ((string)(context.JsonContext.ReadElementUtil(r, typeof(string), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("creationTime", context.JsonContext, _retVal, context))));
                                            if ((_instance != null)) {
                                                _retVal.CreationTimeXml = _instance;
                                            }
                                        }
                                        else {
                                            if ("creationTimeModel".Equals(r.Value)) {
                                                r.Read();
                                                System.DateTimeOffset _instance = ((System.DateTimeOffset)(context.JsonContext.ReadElementUtil(r, typeof(System.DateTimeOffset), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("creationTimeModel", context.JsonContext, _retVal, context))));
                                                if ((_instance != null)) {
                                                    _retVal.CreationTime = _instance;
                                                }
                                            }
                                            else {
                                                if ("updatedBy".Equals(r.Value)) {
                                                    r.Read();
                                                    System.Nullable<System.Guid> _instance = ((System.Nullable<System.Guid>)(context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<System.Guid>), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("updatedBy", context.JsonContext, _retVal, context))));
                                                    if ((_instance != null)) {
                                                        _retVal.UpdatedByKey = _instance;
                                                    }
                                                }
                                                else {
                                                    if ("updatedTime".Equals(r.Value)) {
                                                        r.Read();
                                                        string _instance = ((string)(context.JsonContext.ReadElementUtil(r, typeof(string), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("updatedTime", context.JsonContext, _retVal, context))));
                                                        if ((_instance != null)) {
                                                            _retVal.UpdatedTimeXml = _instance;
                                                        }
                                                    }
                                                    else {
                                                        if ("name".Equals(r.Value)) {
                                                            r.Read();
                                                            string _instance = ((string)(context.JsonContext.ReadElementUtil(r, typeof(string), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("name", context.JsonContext, _retVal, context))));
                                                            if ((_instance != null)) {
                                                                _retVal.Name = _instance;
                                                            }
                                                        }
                                                        else {
                                                            if ("deviceSecret".Equals(r.Value)) {
                                                                r.Read();
                                                                string _instance = ((string)(context.JsonContext.ReadElementUtil(r, typeof(string), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("deviceSecret", context.JsonContext, _retVal, context))));
                                                                if ((_instance != null)) {
                                                                    _retVal.DeviceSecret = _instance;
                                                                }
                                                            }
                                                            else {
                                                                if ("$type".Equals(r.Value)) {
                                                                    System.Type _type = this.m_binder.BindToType("OpenIZ.Core.Model, Version=0.6.14.21496, Culture=neutral, PublicKeyToken=null", r.ReadAsString());
                                                                    if ((_type != typeof(OpenIZ.Core.Model.Security.SecurityDevice))) {
                                                                        OpenIZ.Core.Model.Security.SecurityDevice _nretVal = ((OpenIZ.Core.Model.Security.SecurityDevice)(context.JsonContext.GetFormatter(_type).Deserialize(r, _type, context)));
                                                                        _nretVal.CopyObjectData(_retVal);
                                                                        return _nretVal;
                                                                    }
                                                                }
                                                                else {
                                                                    r.Skip();
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
                else {
                    if (((r.TokenType == Newtonsoft.Json.JsonToken.EndObject) 
                                && (r.Depth == _depth))) {
                        return _retVal;
                    }
                    else {
                        throw new Newtonsoft.Json.JsonSerializationException("JSON in invalid state");
                    }
                }
            }
            return _retVal;
        }
        
        public object FromSimpleValue(object o) {
            return null;
        }
        
        public object GetSimpleValue(object o) {
            return null;
        }
    }
    
    public class SecurityEntityViewModelSerializer : OpenIZ.Core.Applets.ViewModel.Json.IJsonViewModelTypeFormatter {
        
        private OpenIZ.Core.Model.Serialization.ModelSerializationBinder m_binder = new OpenIZ.Core.Model.Serialization.ModelSerializationBinder();
        
        private OpenIZ.Core.Diagnostics.Tracer m_tracer = OpenIZ.Core.Diagnostics.Tracer.GetTracer(typeof(SecurityEntityViewModelSerializer));
        
        public System.Type HandlesType {
            get {
                return typeof(OpenIZ.Core.Model.Security.SecurityEntity);
            }
        }
        
        public void Serialize(Newtonsoft.Json.JsonWriter w, OpenIZ.Core.Model.IdentifiedData o, OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext context) {
            if ((o == null)) {
                throw new System.ArgumentNullException("o");
            }
            OpenIZ.Core.Model.Security.SecurityEntity _strong = null;
            OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext _jsonContext = null;
            bool _loaded = false;
            try {
                _strong = ((OpenIZ.Core.Model.Security.SecurityEntity)(o));
            }
            catch (System.Exception e) {
                this.m_tracer.TraceError(string.Format("Casting Error: {0}", e));
                throw new System.ArgumentException(string.Format("Invalid type {0} provided, expected {1}", o.GetType(), typeof(OpenIZ.Core.Model.Security.SecurityEntity)));
            }
            if (context.ShouldSerialize("updatedTime")) {
                if ((_strong.UpdatedTimeXml == null)) {
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "updatedTime", _strong.UpdatedTimeXml, context);
                }
            }
            if (context.ShouldSerialize("updatedBy")) {
                if ((_strong.UpdatedByKey == null)) {
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "updatedBy", _strong.UpdatedByKey, context);
                }
            }
            if (context.ShouldSerialize("creationTimeModel")) {
                if ((_strong.CreationTime == null)) {
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "creationTimeModel", _strong.CreationTime, context);
                }
            }
            if (context.ShouldSerialize("creationTime")) {
                if ((_strong.CreationTimeXml == null)) {
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "creationTime", _strong.CreationTimeXml, context);
                }
            }
            if (context.ShouldSerialize("obsoletionTimeModel")) {
                if ((_strong.ObsoletionTime == null)) {
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "obsoletionTimeModel", _strong.ObsoletionTime, context);
                }
            }
            if (context.ShouldSerialize("obsoletionTime")) {
                if ((_strong.ObsoletionTimeXml == null)) {
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "obsoletionTime", _strong.ObsoletionTimeXml, context);
                }
            }
            if (context.ShouldSerialize("createdBy")) {
                if ((_strong.CreatedByKey == null)) {
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "createdBy", _strong.CreatedByKey, context);
                }
            }
            if (context.ShouldSerialize("obsoletedBy")) {
                if ((_strong.ObsoletedByKey == null)) {
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "obsoletedBy", _strong.ObsoletedByKey, context);
                }
            }
            if (context.ShouldSerialize("id")) {
                if ((_strong.Key == null)) {
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "id", _strong.Key, context);
                }
            }
            if (context.ShouldSerialize("etag")) {
                if ((_strong.Tag == null)) {
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "etag", _strong.Tag, context);
                }
            }
            if ((_loaded && _strong.Key.HasValue)) {
                ((OpenIZ.Core.Services.IDataCachingService)(OpenIZ.Core.ApplicationServiceContext.Current.GetService(typeof(OpenIZ.Core.Services.IDataCachingService)))).Add(_strong);
            }
        }
        
        public object Deserialize(Newtonsoft.Json.JsonReader r, System.Type asType, OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext context) {
            OpenIZ.Core.Model.Security.SecurityEntity _retVal = new OpenIZ.Core.Model.Security.SecurityEntity();
            int _depth = r.Depth;
            if ((r.TokenType != Newtonsoft.Json.JsonToken.StartObject)) {
                _depth = (_depth - 1);
            }
            for (
            ; r.Read(); 
            ) {
                if ((r.TokenType == Newtonsoft.Json.JsonToken.PropertyName)) {
                    if ("id".Equals(r.Value)) {
                        r.Read();
                        System.Nullable<System.Guid> _instance = ((System.Nullable<System.Guid>)(context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<System.Guid>), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("id", context.JsonContext, _retVal, context))));
                        if ((_instance != null)) {
                            _retVal.Key = _instance;
                        }
                    }
                    else {
                        if ("obsoletedBy".Equals(r.Value)) {
                            r.Read();
                            System.Nullable<System.Guid> _instance = ((System.Nullable<System.Guid>)(context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<System.Guid>), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("obsoletedBy", context.JsonContext, _retVal, context))));
                            if ((_instance != null)) {
                                _retVal.ObsoletedByKey = _instance;
                            }
                        }
                        else {
                            if ("createdBy".Equals(r.Value)) {
                                r.Read();
                                System.Nullable<System.Guid> _instance = ((System.Nullable<System.Guid>)(context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<System.Guid>), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("createdBy", context.JsonContext, _retVal, context))));
                                if ((_instance != null)) {
                                    _retVal.CreatedByKey = _instance;
                                }
                            }
                            else {
                                if ("obsoletionTime".Equals(r.Value)) {
                                    r.Read();
                                    string _instance = ((string)(context.JsonContext.ReadElementUtil(r, typeof(string), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("obsoletionTime", context.JsonContext, _retVal, context))));
                                    if ((_instance != null)) {
                                        _retVal.ObsoletionTimeXml = _instance;
                                    }
                                }
                                else {
                                    if ("obsoletionTimeModel".Equals(r.Value)) {
                                        r.Read();
                                        System.Nullable<System.DateTimeOffset> _instance = ((System.Nullable<System.DateTimeOffset>)(context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<System.DateTimeOffset>), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("obsoletionTimeModel", context.JsonContext, _retVal, context))));
                                        if ((_instance != null)) {
                                            _retVal.ObsoletionTime = _instance;
                                        }
                                    }
                                    else {
                                        if ("creationTime".Equals(r.Value)) {
                                            r.Read();
                                            string _instance = ((string)(context.JsonContext.ReadElementUtil(r, typeof(string), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("creationTime", context.JsonContext, _retVal, context))));
                                            if ((_instance != null)) {
                                                _retVal.CreationTimeXml = _instance;
                                            }
                                        }
                                        else {
                                            if ("creationTimeModel".Equals(r.Value)) {
                                                r.Read();
                                                System.DateTimeOffset _instance = ((System.DateTimeOffset)(context.JsonContext.ReadElementUtil(r, typeof(System.DateTimeOffset), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("creationTimeModel", context.JsonContext, _retVal, context))));
                                                if ((_instance != null)) {
                                                    _retVal.CreationTime = _instance;
                                                }
                                            }
                                            else {
                                                if ("updatedBy".Equals(r.Value)) {
                                                    r.Read();
                                                    System.Nullable<System.Guid> _instance = ((System.Nullable<System.Guid>)(context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<System.Guid>), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("updatedBy", context.JsonContext, _retVal, context))));
                                                    if ((_instance != null)) {
                                                        _retVal.UpdatedByKey = _instance;
                                                    }
                                                }
                                                else {
                                                    if ("updatedTime".Equals(r.Value)) {
                                                        r.Read();
                                                        string _instance = ((string)(context.JsonContext.ReadElementUtil(r, typeof(string), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("updatedTime", context.JsonContext, _retVal, context))));
                                                        if ((_instance != null)) {
                                                            _retVal.UpdatedTimeXml = _instance;
                                                        }
                                                    }
                                                    else {
                                                        if ("$type".Equals(r.Value)) {
                                                            System.Type _type = this.m_binder.BindToType("OpenIZ.Core.Model, Version=0.6.14.21496, Culture=neutral, PublicKeyToken=null", r.ReadAsString());
                                                            if ((_type != typeof(OpenIZ.Core.Model.Security.SecurityEntity))) {
                                                                OpenIZ.Core.Model.Security.SecurityEntity _nretVal = ((OpenIZ.Core.Model.Security.SecurityEntity)(context.JsonContext.GetFormatter(_type).Deserialize(r, _type, context)));
                                                                _nretVal.CopyObjectData(_retVal);
                                                                return _nretVal;
                                                            }
                                                        }
                                                        else {
                                                            r.Skip();
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
                else {
                    if (((r.TokenType == Newtonsoft.Json.JsonToken.EndObject) 
                                && (r.Depth == _depth))) {
                        return _retVal;
                    }
                    else {
                        throw new Newtonsoft.Json.JsonSerializationException("JSON in invalid state");
                    }
                }
            }
            return _retVal;
        }
        
        public object FromSimpleValue(object o) {
            return null;
        }
        
        public object GetSimpleValue(object o) {
            return null;
        }
    }
    
    public class SecurityPolicyViewModelSerializer : OpenIZ.Core.Applets.ViewModel.Json.IJsonViewModelTypeFormatter {
        
        private OpenIZ.Core.Model.Serialization.ModelSerializationBinder m_binder = new OpenIZ.Core.Model.Serialization.ModelSerializationBinder();
        
        private OpenIZ.Core.Diagnostics.Tracer m_tracer = OpenIZ.Core.Diagnostics.Tracer.GetTracer(typeof(SecurityPolicyViewModelSerializer));
        
        public System.Type HandlesType {
            get {
                return typeof(OpenIZ.Core.Model.Security.SecurityPolicy);
            }
        }
        
        public void Serialize(Newtonsoft.Json.JsonWriter w, OpenIZ.Core.Model.IdentifiedData o, OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext context) {
            if ((o == null)) {
                throw new System.ArgumentNullException("o");
            }
            OpenIZ.Core.Model.Security.SecurityPolicy _strong = null;
            OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext _jsonContext = null;
            bool _loaded = false;
            try {
                _strong = ((OpenIZ.Core.Model.Security.SecurityPolicy)(o));
            }
            catch (System.Exception e) {
                this.m_tracer.TraceError(string.Format("Casting Error: {0}", e));
                throw new System.ArgumentException(string.Format("Invalid type {0} provided, expected {1}", o.GetType(), typeof(OpenIZ.Core.Model.Security.SecurityPolicy)));
            }
            if (context.ShouldSerialize("handler")) {
                if ((_strong.Handler == null)) {
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "handler", _strong.Handler, context);
                }
            }
            if (context.ShouldSerialize("name")) {
                if ((_strong.Name == null)) {
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "name", _strong.Name, context);
                }
            }
            if (context.ShouldSerialize("oid")) {
                if ((_strong.Oid == null)) {
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "oid", _strong.Oid, context);
                }
            }
            if (context.ShouldSerialize("isPublic")) {
                if ((_strong.IsPublic == null)) {
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "isPublic", _strong.IsPublic, context);
                }
            }
            if (context.ShouldSerialize("canOverride")) {
                if ((_strong.CanOverride == null)) {
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "canOverride", _strong.CanOverride, context);
                }
            }
            if (context.ShouldSerialize("creationTimeModel")) {
                if ((_strong.CreationTime == null)) {
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "creationTimeModel", _strong.CreationTime, context);
                }
            }
            if (context.ShouldSerialize("creationTime")) {
                if ((_strong.CreationTimeXml == null)) {
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "creationTime", _strong.CreationTimeXml, context);
                }
            }
            if (context.ShouldSerialize("obsoletionTimeModel")) {
                if ((_strong.ObsoletionTime == null)) {
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "obsoletionTimeModel", _strong.ObsoletionTime, context);
                }
            }
            if (context.ShouldSerialize("obsoletionTime")) {
                if ((_strong.ObsoletionTimeXml == null)) {
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "obsoletionTime", _strong.ObsoletionTimeXml, context);
                }
            }
            if (context.ShouldSerialize("createdBy")) {
                if ((_strong.CreatedByKey == null)) {
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "createdBy", _strong.CreatedByKey, context);
                }
            }
            if (context.ShouldSerialize("obsoletedBy")) {
                if ((_strong.ObsoletedByKey == null)) {
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "obsoletedBy", _strong.ObsoletedByKey, context);
                }
            }
            if (context.ShouldSerialize("id")) {
                if ((_strong.Key == null)) {
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "id", _strong.Key, context);
                }
            }
            if (context.ShouldSerialize("etag")) {
                if ((_strong.Tag == null)) {
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "etag", _strong.Tag, context);
                }
            }
            if ((_loaded && _strong.Key.HasValue)) {
                ((OpenIZ.Core.Services.IDataCachingService)(OpenIZ.Core.ApplicationServiceContext.Current.GetService(typeof(OpenIZ.Core.Services.IDataCachingService)))).Add(_strong);
            }
        }
        
        public object Deserialize(Newtonsoft.Json.JsonReader r, System.Type asType, OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext context) {
            OpenIZ.Core.Model.Security.SecurityPolicy _retVal = new OpenIZ.Core.Model.Security.SecurityPolicy();
            int _depth = r.Depth;
            if ((r.TokenType != Newtonsoft.Json.JsonToken.StartObject)) {
                _depth = (_depth - 1);
            }
            for (
            ; r.Read(); 
            ) {
                if ((r.TokenType == Newtonsoft.Json.JsonToken.PropertyName)) {
                    if ("id".Equals(r.Value)) {
                        r.Read();
                        System.Nullable<System.Guid> _instance = ((System.Nullable<System.Guid>)(context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<System.Guid>), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("id", context.JsonContext, _retVal, context))));
                        if ((_instance != null)) {
                            _retVal.Key = _instance;
                        }
                    }
                    else {
                        if ("obsoletedBy".Equals(r.Value)) {
                            r.Read();
                            System.Nullable<System.Guid> _instance = ((System.Nullable<System.Guid>)(context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<System.Guid>), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("obsoletedBy", context.JsonContext, _retVal, context))));
                            if ((_instance != null)) {
                                _retVal.ObsoletedByKey = _instance;
                            }
                        }
                        else {
                            if ("createdBy".Equals(r.Value)) {
                                r.Read();
                                System.Nullable<System.Guid> _instance = ((System.Nullable<System.Guid>)(context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<System.Guid>), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("createdBy", context.JsonContext, _retVal, context))));
                                if ((_instance != null)) {
                                    _retVal.CreatedByKey = _instance;
                                }
                            }
                            else {
                                if ("obsoletionTime".Equals(r.Value)) {
                                    r.Read();
                                    string _instance = ((string)(context.JsonContext.ReadElementUtil(r, typeof(string), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("obsoletionTime", context.JsonContext, _retVal, context))));
                                    if ((_instance != null)) {
                                        _retVal.ObsoletionTimeXml = _instance;
                                    }
                                }
                                else {
                                    if ("obsoletionTimeModel".Equals(r.Value)) {
                                        r.Read();
                                        System.Nullable<System.DateTimeOffset> _instance = ((System.Nullable<System.DateTimeOffset>)(context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<System.DateTimeOffset>), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("obsoletionTimeModel", context.JsonContext, _retVal, context))));
                                        if ((_instance != null)) {
                                            _retVal.ObsoletionTime = _instance;
                                        }
                                    }
                                    else {
                                        if ("creationTime".Equals(r.Value)) {
                                            r.Read();
                                            string _instance = ((string)(context.JsonContext.ReadElementUtil(r, typeof(string), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("creationTime", context.JsonContext, _retVal, context))));
                                            if ((_instance != null)) {
                                                _retVal.CreationTimeXml = _instance;
                                            }
                                        }
                                        else {
                                            if ("creationTimeModel".Equals(r.Value)) {
                                                r.Read();
                                                System.DateTimeOffset _instance = ((System.DateTimeOffset)(context.JsonContext.ReadElementUtil(r, typeof(System.DateTimeOffset), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("creationTimeModel", context.JsonContext, _retVal, context))));
                                                if ((_instance != null)) {
                                                    _retVal.CreationTime = _instance;
                                                }
                                            }
                                            else {
                                                if ("canOverride".Equals(r.Value)) {
                                                    r.Read();
                                                    bool _instance = ((bool)(context.JsonContext.ReadElementUtil(r, typeof(bool), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("canOverride", context.JsonContext, _retVal, context))));
                                                    if ((_instance != null)) {
                                                        _retVal.CanOverride = _instance;
                                                    }
                                                }
                                                else {
                                                    if ("isPublic".Equals(r.Value)) {
                                                        r.Read();
                                                        bool _instance = ((bool)(context.JsonContext.ReadElementUtil(r, typeof(bool), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("isPublic", context.JsonContext, _retVal, context))));
                                                        if ((_instance != null)) {
                                                            _retVal.IsPublic = _instance;
                                                        }
                                                    }
                                                    else {
                                                        if ("oid".Equals(r.Value)) {
                                                            r.Read();
                                                            string _instance = ((string)(context.JsonContext.ReadElementUtil(r, typeof(string), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("oid", context.JsonContext, _retVal, context))));
                                                            if ((_instance != null)) {
                                                                _retVal.Oid = _instance;
                                                            }
                                                        }
                                                        else {
                                                            if ("name".Equals(r.Value)) {
                                                                r.Read();
                                                                string _instance = ((string)(context.JsonContext.ReadElementUtil(r, typeof(string), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("name", context.JsonContext, _retVal, context))));
                                                                if ((_instance != null)) {
                                                                    _retVal.Name = _instance;
                                                                }
                                                            }
                                                            else {
                                                                if ("handler".Equals(r.Value)) {
                                                                    r.Read();
                                                                    string _instance = ((string)(context.JsonContext.ReadElementUtil(r, typeof(string), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("handler", context.JsonContext, _retVal, context))));
                                                                    if ((_instance != null)) {
                                                                        _retVal.Handler = _instance;
                                                                    }
                                                                }
                                                                else {
                                                                    if ("$type".Equals(r.Value)) {
                                                                        System.Type _type = this.m_binder.BindToType("OpenIZ.Core.Model, Version=0.6.14.21496, Culture=neutral, PublicKeyToken=null", r.ReadAsString());
                                                                        if ((_type != typeof(OpenIZ.Core.Model.Security.SecurityPolicy))) {
                                                                            OpenIZ.Core.Model.Security.SecurityPolicy _nretVal = ((OpenIZ.Core.Model.Security.SecurityPolicy)(context.JsonContext.GetFormatter(_type).Deserialize(r, _type, context)));
                                                                            _nretVal.CopyObjectData(_retVal);
                                                                            return _nretVal;
                                                                        }
                                                                    }
                                                                    else {
                                                                        r.Skip();
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
                else {
                    if (((r.TokenType == Newtonsoft.Json.JsonToken.EndObject) 
                                && (r.Depth == _depth))) {
                        return _retVal;
                    }
                    else {
                        throw new Newtonsoft.Json.JsonSerializationException("JSON in invalid state");
                    }
                }
            }
            return _retVal;
        }
        
        public object FromSimpleValue(object o) {
            string _strong = null;
            if ((o == null)) {
                return null;
            }
            try {
                _strong = o.ToString();
            }
            catch (System.Exception e) {
                this.m_tracer.TraceError(string.Format("Casting Error: {0}", e));
                return null;
            }
            OpenIZ.Core.Model.Security.SecurityPolicy _retVal = new OpenIZ.Core.Model.Security.SecurityPolicy();
            _retVal.Name = _strong;
            return _retVal;
        }
        
        public object GetSimpleValue(object o) {
            if ((o == null)) {
                return null;
            }
            OpenIZ.Core.Model.Security.SecurityPolicy _strong = null;
            try {
                _strong = ((OpenIZ.Core.Model.Security.SecurityPolicy)(o));
            }
            catch (System.Exception e) {
                this.m_tracer.TraceError(string.Format("Casting Error: {0}", e));
                return null;
            }
            return _strong.Name;
        }
    }
    
    public class SecurityPolicyInstanceViewModelSerializer : OpenIZ.Core.Applets.ViewModel.Json.IJsonViewModelTypeFormatter {
        
        private OpenIZ.Core.Model.Serialization.ModelSerializationBinder m_binder = new OpenIZ.Core.Model.Serialization.ModelSerializationBinder();
        
        private OpenIZ.Core.Diagnostics.Tracer m_tracer = OpenIZ.Core.Diagnostics.Tracer.GetTracer(typeof(SecurityPolicyInstanceViewModelSerializer));
        
        public System.Type HandlesType {
            get {
                return typeof(OpenIZ.Core.Model.Security.SecurityPolicyInstance);
            }
        }
        
        public void Serialize(Newtonsoft.Json.JsonWriter w, OpenIZ.Core.Model.IdentifiedData o, OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext context) {
            if ((o == null)) {
                throw new System.ArgumentNullException("o");
            }
            OpenIZ.Core.Model.Security.SecurityPolicyInstance _strong = null;
            OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext _jsonContext = null;
            bool _loaded = false;
            try {
                _strong = ((OpenIZ.Core.Model.Security.SecurityPolicyInstance)(o));
            }
            catch (System.Exception e) {
                this.m_tracer.TraceError(string.Format("Casting Error: {0}", e));
                throw new System.ArgumentException(string.Format("Invalid type {0} provided, expected {1}", o.GetType(), typeof(OpenIZ.Core.Model.Security.SecurityPolicyInstance)));
            }
            if (context.ShouldSerialize("policykeyModel")) {
                if ((_strong.PolicyKey == null)) {
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "policykeyModel", _strong.PolicyKey, context);
                }
            }
            if (context.ShouldSerialize("policyModel")) {
                if ((_strong.Policy == null)) {
                    if ((_strong.Key.HasValue && context.ShouldForceLoad("policyModel", _strong.Key.Value))) {
                        OpenIZ.Core.Model.Security.SecurityPolicy _delay = null;
                    }
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "policyModel", _strong.Policy, context);
                }
            }
            if (context.ShouldSerialize("granttypeModel")) {
                if ((_strong.GrantType == null)) {
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "granttypeModel", _strong.GrantType, context);
                }
            }
            if (context.ShouldSerialize("modifiedOn")) {
                if ((_strong.ModifiedOn == null)) {
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "modifiedOn", _strong.ModifiedOn, context);
                }
            }
            if (context.ShouldSerialize("source")) {
                if ((_strong.SourceEntityKey == null)) {
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "source", _strong.SourceEntityKey, context);
                }
            }
            if (context.ShouldSerialize("id")) {
                if ((_strong.Key == null)) {
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "id", _strong.Key, context);
                }
            }
            if (context.ShouldSerialize("etag")) {
                if ((_strong.Tag == null)) {
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "etag", _strong.Tag, context);
                }
            }
            if ((_loaded && _strong.Key.HasValue)) {
                ((OpenIZ.Core.Services.IDataCachingService)(OpenIZ.Core.ApplicationServiceContext.Current.GetService(typeof(OpenIZ.Core.Services.IDataCachingService)))).Add(_strong);
            }
        }
        
        public object Deserialize(Newtonsoft.Json.JsonReader r, System.Type asType, OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext context) {
            OpenIZ.Core.Model.Security.SecurityPolicyInstance _retVal = new OpenIZ.Core.Model.Security.SecurityPolicyInstance();
            int _depth = r.Depth;
            if ((r.TokenType != Newtonsoft.Json.JsonToken.StartObject)) {
                _depth = (_depth - 1);
            }
            for (
            ; r.Read(); 
            ) {
                if ((r.TokenType == Newtonsoft.Json.JsonToken.PropertyName)) {
                    if ("id".Equals(r.Value)) {
                        r.Read();
                        System.Nullable<System.Guid> _instance = ((System.Nullable<System.Guid>)(context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<System.Guid>), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("id", context.JsonContext, _retVal, context))));
                        if ((_instance != null)) {
                            _retVal.Key = _instance;
                        }
                    }
                    else {
                        if ("source".Equals(r.Value)) {
                            r.Read();
                            System.Nullable<System.Guid> _instance = ((System.Nullable<System.Guid>)(context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<System.Guid>), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("source", context.JsonContext, _retVal, context))));
                            if ((_instance != null)) {
                                _retVal.SourceEntityKey = _instance;
                            }
                        }
                        else {
                            if ("granttypeModel".Equals(r.Value)) {
                                r.Read();
                                OpenIZ.Core.Model.Security.PolicyGrantType _instance = ((OpenIZ.Core.Model.Security.PolicyGrantType)(context.JsonContext.ReadElementUtil(r, typeof(OpenIZ.Core.Model.Security.PolicyGrantType), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("granttypeModel", context.JsonContext, _retVal, context))));
                                if ((_instance != null)) {
                                    _retVal.GrantType = _instance;
                                }
                            }
                            else {
                                if ("policyModel".Equals(r.Value)) {
                                    r.Read();
                                    OpenIZ.Core.Model.Security.SecurityPolicy _instance = ((OpenIZ.Core.Model.Security.SecurityPolicy)(context.JsonContext.ReadElementUtil(r, typeof(OpenIZ.Core.Model.Security.SecurityPolicy), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("policyModel", context.JsonContext, _retVal, context))));
                                    if ((_instance != null)) {
                                        _retVal.Policy = _instance;
                                    }
                                }
                                else {
                                    if ("policykeyModel".Equals(r.Value)) {
                                        r.Read();
                                        System.Nullable<System.Guid> _instance = ((System.Nullable<System.Guid>)(context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<System.Guid>), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("policykeyModel", context.JsonContext, _retVal, context))));
                                        if ((_instance != null)) {
                                            _retVal.PolicyKey = _instance;
                                        }
                                    }
                                    else {
                                        if ("$type".Equals(r.Value)) {
                                            System.Type _type = this.m_binder.BindToType("OpenIZ.Core.Model, Version=0.6.14.21496, Culture=neutral, PublicKeyToken=null", r.ReadAsString());
                                            if ((_type != typeof(OpenIZ.Core.Model.Security.SecurityPolicyInstance))) {
                                                OpenIZ.Core.Model.Security.SecurityPolicyInstance _nretVal = ((OpenIZ.Core.Model.Security.SecurityPolicyInstance)(context.JsonContext.GetFormatter(_type).Deserialize(r, _type, context)));
                                                _nretVal.CopyObjectData(_retVal);
                                                return _nretVal;
                                            }
                                        }
                                        else {
                                            r.Skip();
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
                else {
                    if (((r.TokenType == Newtonsoft.Json.JsonToken.EndObject) 
                                && (r.Depth == _depth))) {
                        return _retVal;
                    }
                    else {
                        throw new Newtonsoft.Json.JsonSerializationException("JSON in invalid state");
                    }
                }
            }
            return _retVal;
        }
        
        public object FromSimpleValue(object o) {
            return null;
        }
        
        public object GetSimpleValue(object o) {
            return null;
        }
    }
    
    public class SecurityRoleViewModelSerializer : OpenIZ.Core.Applets.ViewModel.Json.IJsonViewModelTypeFormatter {
        
        private OpenIZ.Core.Model.Serialization.ModelSerializationBinder m_binder = new OpenIZ.Core.Model.Serialization.ModelSerializationBinder();
        
        private OpenIZ.Core.Diagnostics.Tracer m_tracer = OpenIZ.Core.Diagnostics.Tracer.GetTracer(typeof(SecurityRoleViewModelSerializer));
        
        public System.Type HandlesType {
            get {
                return typeof(OpenIZ.Core.Model.Security.SecurityRole);
            }
        }
        
        public void Serialize(Newtonsoft.Json.JsonWriter w, OpenIZ.Core.Model.IdentifiedData o, OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext context) {
            if ((o == null)) {
                throw new System.ArgumentNullException("o");
            }
            OpenIZ.Core.Model.Security.SecurityRole _strong = null;
            OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext _jsonContext = null;
            bool _loaded = false;
            try {
                _strong = ((OpenIZ.Core.Model.Security.SecurityRole)(o));
            }
            catch (System.Exception e) {
                this.m_tracer.TraceError(string.Format("Casting Error: {0}", e));
                throw new System.ArgumentException(string.Format("Invalid type {0} provided, expected {1}", o.GetType(), typeof(OpenIZ.Core.Model.Security.SecurityRole)));
            }
            if (context.ShouldSerialize("name")) {
                if ((_strong.Name == null)) {
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "name", _strong.Name, context);
                }
            }
            if (context.ShouldSerialize("description")) {
                if ((_strong.Description == null)) {
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "description", _strong.Description, context);
                }
            }
            if (context.ShouldSerialize("updatedTime")) {
                if ((_strong.UpdatedTimeXml == null)) {
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "updatedTime", _strong.UpdatedTimeXml, context);
                }
            }
            if (context.ShouldSerialize("updatedBy")) {
                if ((_strong.UpdatedByKey == null)) {
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "updatedBy", _strong.UpdatedByKey, context);
                }
            }
            if (context.ShouldSerialize("creationTimeModel")) {
                if ((_strong.CreationTime == null)) {
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "creationTimeModel", _strong.CreationTime, context);
                }
            }
            if (context.ShouldSerialize("creationTime")) {
                if ((_strong.CreationTimeXml == null)) {
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "creationTime", _strong.CreationTimeXml, context);
                }
            }
            if (context.ShouldSerialize("obsoletionTimeModel")) {
                if ((_strong.ObsoletionTime == null)) {
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "obsoletionTimeModel", _strong.ObsoletionTime, context);
                }
            }
            if (context.ShouldSerialize("obsoletionTime")) {
                if ((_strong.ObsoletionTimeXml == null)) {
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "obsoletionTime", _strong.ObsoletionTimeXml, context);
                }
            }
            if (context.ShouldSerialize("createdBy")) {
                if ((_strong.CreatedByKey == null)) {
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "createdBy", _strong.CreatedByKey, context);
                }
            }
            if (context.ShouldSerialize("obsoletedBy")) {
                if ((_strong.ObsoletedByKey == null)) {
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "obsoletedBy", _strong.ObsoletedByKey, context);
                }
            }
            if (context.ShouldSerialize("id")) {
                if ((_strong.Key == null)) {
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "id", _strong.Key, context);
                }
            }
            if (context.ShouldSerialize("etag")) {
                if ((_strong.Tag == null)) {
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "etag", _strong.Tag, context);
                }
            }
            if ((_loaded && _strong.Key.HasValue)) {
                ((OpenIZ.Core.Services.IDataCachingService)(OpenIZ.Core.ApplicationServiceContext.Current.GetService(typeof(OpenIZ.Core.Services.IDataCachingService)))).Add(_strong);
            }
        }
        
        public object Deserialize(Newtonsoft.Json.JsonReader r, System.Type asType, OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext context) {
            OpenIZ.Core.Model.Security.SecurityRole _retVal = new OpenIZ.Core.Model.Security.SecurityRole();
            int _depth = r.Depth;
            if ((r.TokenType != Newtonsoft.Json.JsonToken.StartObject)) {
                _depth = (_depth - 1);
            }
            for (
            ; r.Read(); 
            ) {
                if ((r.TokenType == Newtonsoft.Json.JsonToken.PropertyName)) {
                    if ("id".Equals(r.Value)) {
                        r.Read();
                        System.Nullable<System.Guid> _instance = ((System.Nullable<System.Guid>)(context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<System.Guid>), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("id", context.JsonContext, _retVal, context))));
                        if ((_instance != null)) {
                            _retVal.Key = _instance;
                        }
                    }
                    else {
                        if ("obsoletedBy".Equals(r.Value)) {
                            r.Read();
                            System.Nullable<System.Guid> _instance = ((System.Nullable<System.Guid>)(context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<System.Guid>), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("obsoletedBy", context.JsonContext, _retVal, context))));
                            if ((_instance != null)) {
                                _retVal.ObsoletedByKey = _instance;
                            }
                        }
                        else {
                            if ("createdBy".Equals(r.Value)) {
                                r.Read();
                                System.Nullable<System.Guid> _instance = ((System.Nullable<System.Guid>)(context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<System.Guid>), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("createdBy", context.JsonContext, _retVal, context))));
                                if ((_instance != null)) {
                                    _retVal.CreatedByKey = _instance;
                                }
                            }
                            else {
                                if ("obsoletionTime".Equals(r.Value)) {
                                    r.Read();
                                    string _instance = ((string)(context.JsonContext.ReadElementUtil(r, typeof(string), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("obsoletionTime", context.JsonContext, _retVal, context))));
                                    if ((_instance != null)) {
                                        _retVal.ObsoletionTimeXml = _instance;
                                    }
                                }
                                else {
                                    if ("obsoletionTimeModel".Equals(r.Value)) {
                                        r.Read();
                                        System.Nullable<System.DateTimeOffset> _instance = ((System.Nullable<System.DateTimeOffset>)(context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<System.DateTimeOffset>), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("obsoletionTimeModel", context.JsonContext, _retVal, context))));
                                        if ((_instance != null)) {
                                            _retVal.ObsoletionTime = _instance;
                                        }
                                    }
                                    else {
                                        if ("creationTime".Equals(r.Value)) {
                                            r.Read();
                                            string _instance = ((string)(context.JsonContext.ReadElementUtil(r, typeof(string), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("creationTime", context.JsonContext, _retVal, context))));
                                            if ((_instance != null)) {
                                                _retVal.CreationTimeXml = _instance;
                                            }
                                        }
                                        else {
                                            if ("creationTimeModel".Equals(r.Value)) {
                                                r.Read();
                                                System.DateTimeOffset _instance = ((System.DateTimeOffset)(context.JsonContext.ReadElementUtil(r, typeof(System.DateTimeOffset), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("creationTimeModel", context.JsonContext, _retVal, context))));
                                                if ((_instance != null)) {
                                                    _retVal.CreationTime = _instance;
                                                }
                                            }
                                            else {
                                                if ("updatedBy".Equals(r.Value)) {
                                                    r.Read();
                                                    System.Nullable<System.Guid> _instance = ((System.Nullable<System.Guid>)(context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<System.Guid>), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("updatedBy", context.JsonContext, _retVal, context))));
                                                    if ((_instance != null)) {
                                                        _retVal.UpdatedByKey = _instance;
                                                    }
                                                }
                                                else {
                                                    if ("updatedTime".Equals(r.Value)) {
                                                        r.Read();
                                                        string _instance = ((string)(context.JsonContext.ReadElementUtil(r, typeof(string), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("updatedTime", context.JsonContext, _retVal, context))));
                                                        if ((_instance != null)) {
                                                            _retVal.UpdatedTimeXml = _instance;
                                                        }
                                                    }
                                                    else {
                                                        if ("description".Equals(r.Value)) {
                                                            r.Read();
                                                            string _instance = ((string)(context.JsonContext.ReadElementUtil(r, typeof(string), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("description", context.JsonContext, _retVal, context))));
                                                            if ((_instance != null)) {
                                                                _retVal.Description = _instance;
                                                            }
                                                        }
                                                        else {
                                                            if ("name".Equals(r.Value)) {
                                                                r.Read();
                                                                string _instance = ((string)(context.JsonContext.ReadElementUtil(r, typeof(string), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("name", context.JsonContext, _retVal, context))));
                                                                if ((_instance != null)) {
                                                                    _retVal.Name = _instance;
                                                                }
                                                            }
                                                            else {
                                                                if ("$type".Equals(r.Value)) {
                                                                    System.Type _type = this.m_binder.BindToType("OpenIZ.Core.Model, Version=0.6.14.21496, Culture=neutral, PublicKeyToken=null", r.ReadAsString());
                                                                    if ((_type != typeof(OpenIZ.Core.Model.Security.SecurityRole))) {
                                                                        OpenIZ.Core.Model.Security.SecurityRole _nretVal = ((OpenIZ.Core.Model.Security.SecurityRole)(context.JsonContext.GetFormatter(_type).Deserialize(r, _type, context)));
                                                                        _nretVal.CopyObjectData(_retVal);
                                                                        return _nretVal;
                                                                    }
                                                                }
                                                                else {
                                                                    r.Skip();
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
                else {
                    if (((r.TokenType == Newtonsoft.Json.JsonToken.EndObject) 
                                && (r.Depth == _depth))) {
                        return _retVal;
                    }
                    else {
                        throw new Newtonsoft.Json.JsonSerializationException("JSON in invalid state");
                    }
                }
            }
            return _retVal;
        }
        
        public object FromSimpleValue(object o) {
            return null;
        }
        
        public object GetSimpleValue(object o) {
            return null;
        }
    }
    
    public class SecurityUserViewModelSerializer : OpenIZ.Core.Applets.ViewModel.Json.IJsonViewModelTypeFormatter {
        
        private OpenIZ.Core.Model.Serialization.ModelSerializationBinder m_binder = new OpenIZ.Core.Model.Serialization.ModelSerializationBinder();
        
        private OpenIZ.Core.Diagnostics.Tracer m_tracer = OpenIZ.Core.Diagnostics.Tracer.GetTracer(typeof(SecurityUserViewModelSerializer));
        
        public System.Type HandlesType {
            get {
                return typeof(OpenIZ.Core.Model.Security.SecurityUser);
            }
        }
        
        public void Serialize(Newtonsoft.Json.JsonWriter w, OpenIZ.Core.Model.IdentifiedData o, OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext context) {
            if ((o == null)) {
                throw new System.ArgumentNullException("o");
            }
            OpenIZ.Core.Model.Security.SecurityUser _strong = null;
            OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext _jsonContext = null;
            bool _loaded = false;
            try {
                _strong = ((OpenIZ.Core.Model.Security.SecurityUser)(o));
            }
            catch (System.Exception e) {
                this.m_tracer.TraceError(string.Format("Casting Error: {0}", e));
                throw new System.ArgumentException(string.Format("Invalid type {0} provided, expected {1}", o.GetType(), typeof(OpenIZ.Core.Model.Security.SecurityUser)));
            }
            if (context.ShouldSerialize("email")) {
                if ((_strong.Email == null)) {
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "email", _strong.Email, context);
                }
            }
            if (context.ShouldSerialize("emailConfirmed")) {
                if ((_strong.EmailConfirmed == null)) {
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "emailConfirmed", _strong.EmailConfirmed, context);
                }
            }
            if (context.ShouldSerialize("invalidLoginAttempts")) {
                if ((_strong.InvalidLoginAttempts == null)) {
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "invalidLoginAttempts", _strong.InvalidLoginAttempts, context);
                }
            }
            if (context.ShouldSerialize("lockout")) {
                if ((_strong.LockoutXml == null)) {
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "lockout", _strong.LockoutXml, context);
                }
            }
            if (context.ShouldSerialize("passwordHash")) {
                if ((_strong.PasswordHash == null)) {
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "passwordHash", _strong.PasswordHash, context);
                }
            }
            if (context.ShouldSerialize("securityStamp")) {
                if ((_strong.SecurityHash == null)) {
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "securityStamp", _strong.SecurityHash, context);
                }
            }
            if (context.ShouldSerialize("twoFactorEnabled")) {
                if ((_strong.TwoFactorEnabled == null)) {
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "twoFactorEnabled", _strong.TwoFactorEnabled, context);
                }
            }
            if (context.ShouldSerialize("userName")) {
                if ((_strong.UserName == null)) {
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "userName", _strong.UserName, context);
                }
            }
            if (context.ShouldSerialize("photo")) {
                if ((_strong.UserPhoto == null)) {
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "photo", _strong.UserPhoto, context);
                }
            }
            if (context.ShouldSerialize("lastLoginTime")) {
                if ((_strong.LastLoginTimeXml == null)) {
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "lastLoginTime", _strong.LastLoginTimeXml, context);
                }
            }
            if (context.ShouldSerialize("phoneNumber")) {
                if ((_strong.PhoneNumber == null)) {
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "phoneNumber", _strong.PhoneNumber, context);
                }
            }
            if (context.ShouldSerialize("phoneNumberConfirmed")) {
                if ((_strong.PhoneNumberConfirmed == null)) {
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "phoneNumberConfirmed", _strong.PhoneNumberConfirmed, context);
                }
            }
            if (context.ShouldSerialize("userClass")) {
                if ((_strong.UserClass == null)) {
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "userClass", _strong.UserClass, context);
                }
            }
            if (context.ShouldSerialize("etag")) {
                if ((_strong.Tag == null)) {
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "etag", _strong.Tag, context);
                }
            }
            if (context.ShouldSerialize("updatedTime")) {
                if ((_strong.UpdatedTimeXml == null)) {
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "updatedTime", _strong.UpdatedTimeXml, context);
                }
            }
            if (context.ShouldSerialize("updatedBy")) {
                if ((_strong.UpdatedByKey == null)) {
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "updatedBy", _strong.UpdatedByKey, context);
                }
            }
            if (context.ShouldSerialize("creationTimeModel")) {
                if ((_strong.CreationTime == null)) {
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "creationTimeModel", _strong.CreationTime, context);
                }
            }
            if (context.ShouldSerialize("creationTime")) {
                if ((_strong.CreationTimeXml == null)) {
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "creationTime", _strong.CreationTimeXml, context);
                }
            }
            if (context.ShouldSerialize("obsoletionTimeModel")) {
                if ((_strong.ObsoletionTime == null)) {
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "obsoletionTimeModel", _strong.ObsoletionTime, context);
                }
            }
            if (context.ShouldSerialize("obsoletionTime")) {
                if ((_strong.ObsoletionTimeXml == null)) {
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "obsoletionTime", _strong.ObsoletionTimeXml, context);
                }
            }
            if (context.ShouldSerialize("createdBy")) {
                if ((_strong.CreatedByKey == null)) {
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "createdBy", _strong.CreatedByKey, context);
                }
            }
            if (context.ShouldSerialize("obsoletedBy")) {
                if ((_strong.ObsoletedByKey == null)) {
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "obsoletedBy", _strong.ObsoletedByKey, context);
                }
            }
            if (context.ShouldSerialize("id")) {
                if ((_strong.Key == null)) {
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "id", _strong.Key, context);
                }
            }
            if ((_loaded && _strong.Key.HasValue)) {
                ((OpenIZ.Core.Services.IDataCachingService)(OpenIZ.Core.ApplicationServiceContext.Current.GetService(typeof(OpenIZ.Core.Services.IDataCachingService)))).Add(_strong);
            }
        }
        
        public object Deserialize(Newtonsoft.Json.JsonReader r, System.Type asType, OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext context) {
            OpenIZ.Core.Model.Security.SecurityUser _retVal = new OpenIZ.Core.Model.Security.SecurityUser();
            int _depth = r.Depth;
            if ((r.TokenType != Newtonsoft.Json.JsonToken.StartObject)) {
                _depth = (_depth - 1);
            }
            for (
            ; r.Read(); 
            ) {
                if ((r.TokenType == Newtonsoft.Json.JsonToken.PropertyName)) {
                    if ("id".Equals(r.Value)) {
                        r.Read();
                        System.Nullable<System.Guid> _instance = ((System.Nullable<System.Guid>)(context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<System.Guid>), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("id", context.JsonContext, _retVal, context))));
                        if ((_instance != null)) {
                            _retVal.Key = _instance;
                        }
                    }
                    else {
                        if ("obsoletedBy".Equals(r.Value)) {
                            r.Read();
                            System.Nullable<System.Guid> _instance = ((System.Nullable<System.Guid>)(context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<System.Guid>), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("obsoletedBy", context.JsonContext, _retVal, context))));
                            if ((_instance != null)) {
                                _retVal.ObsoletedByKey = _instance;
                            }
                        }
                        else {
                            if ("createdBy".Equals(r.Value)) {
                                r.Read();
                                System.Nullable<System.Guid> _instance = ((System.Nullable<System.Guid>)(context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<System.Guid>), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("createdBy", context.JsonContext, _retVal, context))));
                                if ((_instance != null)) {
                                    _retVal.CreatedByKey = _instance;
                                }
                            }
                            else {
                                if ("obsoletionTime".Equals(r.Value)) {
                                    r.Read();
                                    string _instance = ((string)(context.JsonContext.ReadElementUtil(r, typeof(string), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("obsoletionTime", context.JsonContext, _retVal, context))));
                                    if ((_instance != null)) {
                                        _retVal.ObsoletionTimeXml = _instance;
                                    }
                                }
                                else {
                                    if ("obsoletionTimeModel".Equals(r.Value)) {
                                        r.Read();
                                        System.Nullable<System.DateTimeOffset> _instance = ((System.Nullable<System.DateTimeOffset>)(context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<System.DateTimeOffset>), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("obsoletionTimeModel", context.JsonContext, _retVal, context))));
                                        if ((_instance != null)) {
                                            _retVal.ObsoletionTime = _instance;
                                        }
                                    }
                                    else {
                                        if ("creationTime".Equals(r.Value)) {
                                            r.Read();
                                            string _instance = ((string)(context.JsonContext.ReadElementUtil(r, typeof(string), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("creationTime", context.JsonContext, _retVal, context))));
                                            if ((_instance != null)) {
                                                _retVal.CreationTimeXml = _instance;
                                            }
                                        }
                                        else {
                                            if ("creationTimeModel".Equals(r.Value)) {
                                                r.Read();
                                                System.DateTimeOffset _instance = ((System.DateTimeOffset)(context.JsonContext.ReadElementUtil(r, typeof(System.DateTimeOffset), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("creationTimeModel", context.JsonContext, _retVal, context))));
                                                if ((_instance != null)) {
                                                    _retVal.CreationTime = _instance;
                                                }
                                            }
                                            else {
                                                if ("updatedBy".Equals(r.Value)) {
                                                    r.Read();
                                                    System.Nullable<System.Guid> _instance = ((System.Nullable<System.Guid>)(context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<System.Guid>), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("updatedBy", context.JsonContext, _retVal, context))));
                                                    if ((_instance != null)) {
                                                        _retVal.UpdatedByKey = _instance;
                                                    }
                                                }
                                                else {
                                                    if ("updatedTime".Equals(r.Value)) {
                                                        r.Read();
                                                        string _instance = ((string)(context.JsonContext.ReadElementUtil(r, typeof(string), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("updatedTime", context.JsonContext, _retVal, context))));
                                                        if ((_instance != null)) {
                                                            _retVal.UpdatedTimeXml = _instance;
                                                        }
                                                    }
                                                    else {
                                                        if ("userClass".Equals(r.Value)) {
                                                            r.Read();
                                                            System.Guid _instance = ((System.Guid)(context.JsonContext.ReadElementUtil(r, typeof(System.Guid), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("userClass", context.JsonContext, _retVal, context))));
                                                            if ((_instance != null)) {
                                                                _retVal.UserClass = _instance;
                                                            }
                                                        }
                                                        else {
                                                            if ("phoneNumberConfirmed".Equals(r.Value)) {
                                                                r.Read();
                                                                bool _instance = ((bool)(context.JsonContext.ReadElementUtil(r, typeof(bool), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("phoneNumberConfirmed", context.JsonContext, _retVal, context))));
                                                                if ((_instance != null)) {
                                                                    _retVal.PhoneNumberConfirmed = _instance;
                                                                }
                                                            }
                                                            else {
                                                                if ("phoneNumber".Equals(r.Value)) {
                                                                    r.Read();
                                                                    string _instance = ((string)(context.JsonContext.ReadElementUtil(r, typeof(string), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("phoneNumber", context.JsonContext, _retVal, context))));
                                                                    if ((_instance != null)) {
                                                                        _retVal.PhoneNumber = _instance;
                                                                    }
                                                                }
                                                                else {
                                                                    if ("lastLoginTime".Equals(r.Value)) {
                                                                        r.Read();
                                                                        string _instance = ((string)(context.JsonContext.ReadElementUtil(r, typeof(string), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("lastLoginTime", context.JsonContext, _retVal, context))));
                                                                        if ((_instance != null)) {
                                                                            _retVal.LastLoginTimeXml = _instance;
                                                                        }
                                                                    }
                                                                    else {
                                                                        if ("photo".Equals(r.Value)) {
                                                                            r.Read();
                                                                            byte[] _instance = ((byte[])(context.JsonContext.ReadElementUtil(r, typeof(byte[]), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("photo", context.JsonContext, _retVal, context))));
                                                                            if ((_instance != null)) {
                                                                                _retVal.UserPhoto = _instance;
                                                                            }
                                                                        }
                                                                        else {
                                                                            if ("userName".Equals(r.Value)) {
                                                                                r.Read();
                                                                                string _instance = ((string)(context.JsonContext.ReadElementUtil(r, typeof(string), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("userName", context.JsonContext, _retVal, context))));
                                                                                if ((_instance != null)) {
                                                                                    _retVal.UserName = _instance;
                                                                                }
                                                                            }
                                                                            else {
                                                                                if ("twoFactorEnabled".Equals(r.Value)) {
                                                                                    r.Read();
                                                                                    bool _instance = ((bool)(context.JsonContext.ReadElementUtil(r, typeof(bool), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("twoFactorEnabled", context.JsonContext, _retVal, context))));
                                                                                    if ((_instance != null)) {
                                                                                        _retVal.TwoFactorEnabled = _instance;
                                                                                    }
                                                                                }
                                                                                else {
                                                                                    if ("securityStamp".Equals(r.Value)) {
                                                                                        r.Read();
                                                                                        string _instance = ((string)(context.JsonContext.ReadElementUtil(r, typeof(string), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("securityStamp", context.JsonContext, _retVal, context))));
                                                                                        if ((_instance != null)) {
                                                                                            _retVal.SecurityHash = _instance;
                                                                                        }
                                                                                    }
                                                                                    else {
                                                                                        if ("passwordHash".Equals(r.Value)) {
                                                                                            r.Read();
                                                                                            string _instance = ((string)(context.JsonContext.ReadElementUtil(r, typeof(string), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("passwordHash", context.JsonContext, _retVal, context))));
                                                                                            if ((_instance != null)) {
                                                                                                _retVal.PasswordHash = _instance;
                                                                                            }
                                                                                        }
                                                                                        else {
                                                                                            if ("lockout".Equals(r.Value)) {
                                                                                                r.Read();
                                                                                                string _instance = ((string)(context.JsonContext.ReadElementUtil(r, typeof(string), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("lockout", context.JsonContext, _retVal, context))));
                                                                                                if ((_instance != null)) {
                                                                                                    _retVal.LockoutXml = _instance;
                                                                                                }
                                                                                            }
                                                                                            else {
                                                                                                if ("invalidLoginAttempts".Equals(r.Value)) {
                                                                                                    r.Read();
                                                                                                    int _instance = ((int)(context.JsonContext.ReadElementUtil(r, typeof(int), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("invalidLoginAttempts", context.JsonContext, _retVal, context))));
                                                                                                    if ((_instance != null)) {
                                                                                                        _retVal.InvalidLoginAttempts = _instance;
                                                                                                    }
                                                                                                }
                                                                                                else {
                                                                                                    if ("emailConfirmed".Equals(r.Value)) {
                                                                                                        r.Read();
                                                                                                        bool _instance = ((bool)(context.JsonContext.ReadElementUtil(r, typeof(bool), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("emailConfirmed", context.JsonContext, _retVal, context))));
                                                                                                        if ((_instance != null)) {
                                                                                                            _retVal.EmailConfirmed = _instance;
                                                                                                        }
                                                                                                    }
                                                                                                    else {
                                                                                                        if ("email".Equals(r.Value)) {
                                                                                                            r.Read();
                                                                                                            string _instance = ((string)(context.JsonContext.ReadElementUtil(r, typeof(string), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("email", context.JsonContext, _retVal, context))));
                                                                                                            if ((_instance != null)) {
                                                                                                                _retVal.Email = _instance;
                                                                                                            }
                                                                                                        }
                                                                                                        else {
                                                                                                            if ("$type".Equals(r.Value)) {
                                                                                                                System.Type _type = this.m_binder.BindToType("OpenIZ.Core.Model, Version=0.6.14.21496, Culture=neutral, PublicKeyToken=null", r.ReadAsString());
                                                                                                                if ((_type != typeof(OpenIZ.Core.Model.Security.SecurityUser))) {
                                                                                                                    OpenIZ.Core.Model.Security.SecurityUser _nretVal = ((OpenIZ.Core.Model.Security.SecurityUser)(context.JsonContext.GetFormatter(_type).Deserialize(r, _type, context)));
                                                                                                                    _nretVal.CopyObjectData(_retVal);
                                                                                                                    return _nretVal;
                                                                                                                }
                                                                                                            }
                                                                                                            else {
                                                                                                                r.Skip();
                                                                                                            }
                                                                                                        }
                                                                                                    }
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
                else {
                    if (((r.TokenType == Newtonsoft.Json.JsonToken.EndObject) 
                                && (r.Depth == _depth))) {
                        return _retVal;
                    }
                    else {
                        throw new Newtonsoft.Json.JsonSerializationException("JSON in invalid state");
                    }
                }
            }
            return _retVal;
        }
        
        public object FromSimpleValue(object o) {
            return null;
        }
        
        public object GetSimpleValue(object o) {
            return null;
        }
    }
    
    public class PatientViewModelSerializer : OpenIZ.Core.Applets.ViewModel.Json.IJsonViewModelTypeFormatter {
        
        private OpenIZ.Core.Model.Serialization.ModelSerializationBinder m_binder = new OpenIZ.Core.Model.Serialization.ModelSerializationBinder();
        
        private OpenIZ.Core.Diagnostics.Tracer m_tracer = OpenIZ.Core.Diagnostics.Tracer.GetTracer(typeof(PatientViewModelSerializer));
        
        public System.Type HandlesType {
            get {
                return typeof(OpenIZ.Core.Model.Roles.Patient);
            }
        }
        
        public void Serialize(Newtonsoft.Json.JsonWriter w, OpenIZ.Core.Model.IdentifiedData o, OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext context) {
            if ((o == null)) {
                throw new System.ArgumentNullException("o");
            }
            OpenIZ.Core.Model.Roles.Patient _strong = null;
            OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext _jsonContext = null;
            bool _loaded = false;
            try {
                _strong = ((OpenIZ.Core.Model.Roles.Patient)(o));
            }
            catch (System.Exception e) {
                this.m_tracer.TraceError(string.Format("Casting Error: {0}", e));
                throw new System.ArgumentException(string.Format("Invalid type {0} provided, expected {1}", o.GetType(), typeof(OpenIZ.Core.Model.Roles.Patient)));
            }
            if (context.ShouldSerialize("deceasedDate")) {
                if ((_strong.DeceasedDate == null)) {
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "deceasedDate", _strong.DeceasedDate, context);
                }
            }
            if (context.ShouldSerialize("deceasedDatePrecision")) {
                if ((_strong.DeceasedDatePrecision == null)) {
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "deceasedDatePrecision", _strong.DeceasedDatePrecision, context);
                }
            }
            if (context.ShouldSerialize("multipleBirthOrder")) {
                if ((_strong.MultipleBirthOrder == null)) {
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "multipleBirthOrder", _strong.MultipleBirthOrder, context);
                }
            }
            if (context.ShouldSerialize("genderConcept")) {
                if ((_strong.GenderConceptKey == null)) {
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "genderConcept", _strong.GenderConceptKey, context);
                }
            }
            if (context.ShouldSerialize("dateOfBirth")) {
                if ((_strong.DateOfBirth == null)) {
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "dateOfBirth", _strong.DateOfBirth, context);
                }
            }
            if (context.ShouldSerialize("dateOfBirthPrecision")) {
                if ((_strong.DateOfBirthPrecision == null)) {
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "dateOfBirthPrecision", _strong.DateOfBirthPrecision, context);
                }
            }
            if (context.ShouldSerialize("language")) {
                if (((_strong.LanguageCommunication == null) 
                            || (_strong.LanguageCommunication.Count == 0))) {
                    if ((_strong.Key.HasValue && context.ShouldForceLoad("language", _strong.Key.Value))) {
                        System.Collections.Generic.List<OpenIZ.Core.Model.Entities.PersonLanguageCommunication> _delay = null;
                        _delay = new System.Collections.Generic.List<OpenIZ.Core.Model.Entities.PersonLanguageCommunication>(context.JsonContext.LoadCollection<OpenIZ.Core.Model.Entities.PersonLanguageCommunication>(_strong.Key.Value));
                        _strong.LanguageCommunication = _delay;
                        if ((_delay.Count > 0)) {
                            _loaded = true;
                            context.JsonContext.WritePropertyUtil(w, "language", _strong.LanguageCommunication, context);
                        }
                    }
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "language", _strong.LanguageCommunication, context);
                }
            }
            if (context.ShouldSerialize("template")) {
                if ((_strong.Template == null)) {
                    if ((_strong.Key.HasValue && context.ShouldForceLoad("template", _strong.Key.Value))) {
                        OpenIZ.Core.Model.DataTypes.TemplateDefinition _delay = null;
                    }
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "template", _strong.Template, context);
                }
            }
            if (context.ShouldSerialize("classConcept")) {
                if ((_strong.ClassConceptKey == null)) {
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "classConcept", _strong.ClassConceptKey, context);
                }
            }
            if (context.ShouldSerialize("determinerConcept")) {
                if ((_strong.DeterminerConceptKey == null)) {
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "determinerConcept", _strong.DeterminerConceptKey, context);
                }
            }
            if (context.ShouldSerialize("statusConcept")) {
                if ((_strong.StatusConceptKey == null)) {
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "statusConcept", _strong.StatusConceptKey, context);
                }
            }
            if (context.ShouldSerialize("creationAct")) {
                if ((_strong.CreationActKey == null)) {
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "creationAct", _strong.CreationActKey, context);
                }
            }
            if (context.ShouldSerialize("typeConcept")) {
                if ((_strong.TypeConceptKey == null)) {
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "typeConcept", _strong.TypeConceptKey, context);
                }
            }
            if (context.ShouldSerialize("classConceptModel")) {
                if ((_strong.ClassConcept == null)) {
                    if ((_strong.Key.HasValue && context.ShouldForceLoad("classConceptModel", _strong.Key.Value))) {
                        OpenIZ.Core.Model.DataTypes.Concept _delay = null;
                        _delay = context.JsonContext.LoadRelated<OpenIZ.Core.Model.DataTypes.Concept>(_strong.ClassConceptKey);
                        _strong.ClassConcept = _delay;
                        if ((_delay != null)) {
                            _loaded = true;
                            context.JsonContext.WritePropertyUtil(w, "classConceptModel", _strong.ClassConcept, context);
                        }
                    }
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "classConceptModel", _strong.ClassConcept, context);
                }
            }
            if (context.ShouldSerialize("determinerConceptModel")) {
                if ((_strong.DeterminerConcept == null)) {
                    if ((_strong.Key.HasValue && context.ShouldForceLoad("determinerConceptModel", _strong.Key.Value))) {
                        OpenIZ.Core.Model.DataTypes.Concept _delay = null;
                        _delay = context.JsonContext.LoadRelated<OpenIZ.Core.Model.DataTypes.Concept>(_strong.DeterminerConceptKey);
                        _strong.DeterminerConcept = _delay;
                        if ((_delay != null)) {
                            _loaded = true;
                            context.JsonContext.WritePropertyUtil(w, "determinerConceptModel", _strong.DeterminerConcept, context);
                        }
                    }
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "determinerConceptModel", _strong.DeterminerConcept, context);
                }
            }
            if (context.ShouldSerialize("statusConceptModel")) {
                if ((_strong.StatusConcept == null)) {
                    if ((_strong.Key.HasValue && context.ShouldForceLoad("statusConceptModel", _strong.Key.Value))) {
                        OpenIZ.Core.Model.DataTypes.Concept _delay = null;
                        _delay = context.JsonContext.LoadRelated<OpenIZ.Core.Model.DataTypes.Concept>(_strong.StatusConceptKey);
                        _strong.StatusConcept = _delay;
                        if ((_delay != null)) {
                            _loaded = true;
                            context.JsonContext.WritePropertyUtil(w, "statusConceptModel", _strong.StatusConcept, context);
                        }
                    }
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "statusConceptModel", _strong.StatusConcept, context);
                }
            }
            if (context.ShouldSerialize("creationActModel")) {
                if ((_strong.CreationAct == null)) {
                    if ((_strong.Key.HasValue && context.ShouldForceLoad("creationActModel", _strong.Key.Value))) {
                        OpenIZ.Core.Model.Acts.Act _delay = null;
                        _delay = context.JsonContext.LoadRelated<OpenIZ.Core.Model.Acts.Act>(_strong.CreationActKey);
                        _strong.CreationAct = _delay;
                        if ((_delay != null)) {
                            _loaded = true;
                            context.JsonContext.WritePropertyUtil(w, "creationActModel", _strong.CreationAct, context);
                        }
                    }
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "creationActModel", _strong.CreationAct, context);
                }
            }
            if (context.ShouldSerialize("typeConceptModel")) {
                if ((_strong.TypeConcept == null)) {
                    if ((_strong.Key.HasValue && context.ShouldForceLoad("typeConceptModel", _strong.Key.Value))) {
                        OpenIZ.Core.Model.DataTypes.Concept _delay = null;
                        _delay = context.JsonContext.LoadRelated<OpenIZ.Core.Model.DataTypes.Concept>(_strong.TypeConceptKey);
                        _strong.TypeConcept = _delay;
                        if ((_delay != null)) {
                            _loaded = true;
                            context.JsonContext.WritePropertyUtil(w, "typeConceptModel", _strong.TypeConcept, context);
                        }
                    }
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "typeConceptModel", _strong.TypeConcept, context);
                }
            }
            if (context.ShouldSerialize("identifier")) {
                if (((_strong.Identifiers == null) 
                            || (_strong.Identifiers.Count == 0))) {
                    if ((_strong.Key.HasValue && context.ShouldForceLoad("identifier", _strong.Key.Value))) {
                        System.Collections.Generic.List<OpenIZ.Core.Model.DataTypes.EntityIdentifier> _delay = null;
                        _delay = new System.Collections.Generic.List<OpenIZ.Core.Model.DataTypes.EntityIdentifier>(context.JsonContext.LoadCollection<OpenIZ.Core.Model.DataTypes.EntityIdentifier>(_strong.Key.Value));
                        _strong.Identifiers = _delay;
                        if ((_delay.Count > 0)) {
                            _loaded = true;
                            context.JsonContext.WritePropertyUtil(w, "identifier", _strong.Identifiers, context);
                        }
                    }
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "identifier", _strong.Identifiers, context);
                }
            }
            if (context.ShouldSerialize("relationship")) {
                if (((_strong.Relationships == null) 
                            || (_strong.Relationships.Count == 0))) {
                    if ((_strong.Key.HasValue && context.ShouldForceLoad("relationship", _strong.Key.Value))) {
                        System.Collections.Generic.List<OpenIZ.Core.Model.Entities.EntityRelationship> _delay = null;
                        _delay = new System.Collections.Generic.List<OpenIZ.Core.Model.Entities.EntityRelationship>(context.JsonContext.LoadCollection<OpenIZ.Core.Model.Entities.EntityRelationship>(_strong.Key.Value));
                        _strong.Relationships = _delay;
                        if ((_delay.Count > 0)) {
                            _loaded = true;
                            context.JsonContext.WritePropertyUtil(w, "relationship", _strong.Relationships, context);
                        }
                    }
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "relationship", _strong.Relationships, context);
                }
            }
            if (context.ShouldSerialize("telecom")) {
                if (((_strong.Telecoms == null) 
                            || (_strong.Telecoms.Count == 0))) {
                    if ((_strong.Key.HasValue && context.ShouldForceLoad("telecom", _strong.Key.Value))) {
                        System.Collections.Generic.List<OpenIZ.Core.Model.Entities.EntityTelecomAddress> _delay = null;
                        _delay = new System.Collections.Generic.List<OpenIZ.Core.Model.Entities.EntityTelecomAddress>(context.JsonContext.LoadCollection<OpenIZ.Core.Model.Entities.EntityTelecomAddress>(_strong.Key.Value));
                        _strong.Telecoms = _delay;
                        if ((_delay.Count > 0)) {
                            _loaded = true;
                            context.JsonContext.WritePropertyUtil(w, "telecom", _strong.Telecoms, context);
                        }
                    }
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "telecom", _strong.Telecoms, context);
                }
            }
            if (context.ShouldSerialize("extension")) {
                if (((_strong.Extensions == null) 
                            || (_strong.Extensions.Count == 0))) {
                    if ((_strong.Key.HasValue && context.ShouldForceLoad("extension", _strong.Key.Value))) {
                        System.Collections.Generic.List<OpenIZ.Core.Model.DataTypes.EntityExtension> _delay = null;
                        _delay = new System.Collections.Generic.List<OpenIZ.Core.Model.DataTypes.EntityExtension>(context.JsonContext.LoadCollection<OpenIZ.Core.Model.DataTypes.EntityExtension>(_strong.Key.Value));
                        _strong.Extensions = _delay;
                        if ((_delay.Count > 0)) {
                            _loaded = true;
                            context.JsonContext.WritePropertyUtil(w, "extension", _strong.Extensions, context);
                        }
                    }
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "extension", _strong.Extensions, context);
                }
            }
            if (context.ShouldSerialize("name")) {
                if (((_strong.Names == null) 
                            || (_strong.Names.Count == 0))) {
                    if ((_strong.Key.HasValue && context.ShouldForceLoad("name", _strong.Key.Value))) {
                        System.Collections.Generic.List<OpenIZ.Core.Model.Entities.EntityName> _delay = null;
                        _delay = new System.Collections.Generic.List<OpenIZ.Core.Model.Entities.EntityName>(context.JsonContext.LoadCollection<OpenIZ.Core.Model.Entities.EntityName>(_strong.Key.Value));
                        _strong.Names = _delay;
                        if ((_delay.Count > 0)) {
                            _loaded = true;
                            context.JsonContext.WritePropertyUtil(w, "name", _strong.Names, context);
                        }
                    }
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "name", _strong.Names, context);
                }
            }
            if (context.ShouldSerialize("address")) {
                if (((_strong.Addresses == null) 
                            || (_strong.Addresses.Count == 0))) {
                    if ((_strong.Key.HasValue && context.ShouldForceLoad("address", _strong.Key.Value))) {
                        System.Collections.Generic.List<OpenIZ.Core.Model.Entities.EntityAddress> _delay = null;
                        _delay = new System.Collections.Generic.List<OpenIZ.Core.Model.Entities.EntityAddress>(context.JsonContext.LoadCollection<OpenIZ.Core.Model.Entities.EntityAddress>(_strong.Key.Value));
                        _strong.Addresses = _delay;
                        if ((_delay.Count > 0)) {
                            _loaded = true;
                            context.JsonContext.WritePropertyUtil(w, "address", _strong.Addresses, context);
                        }
                    }
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "address", _strong.Addresses, context);
                }
            }
            if (context.ShouldSerialize("note")) {
                if (((_strong.Notes == null) 
                            || (_strong.Notes.Count == 0))) {
                    if ((_strong.Key.HasValue && context.ShouldForceLoad("note", _strong.Key.Value))) {
                        System.Collections.Generic.List<OpenIZ.Core.Model.DataTypes.EntityNote> _delay = null;
                        _delay = new System.Collections.Generic.List<OpenIZ.Core.Model.DataTypes.EntityNote>(context.JsonContext.LoadCollection<OpenIZ.Core.Model.DataTypes.EntityNote>(_strong.Key.Value));
                        _strong.Notes = _delay;
                        if ((_delay.Count > 0)) {
                            _loaded = true;
                            context.JsonContext.WritePropertyUtil(w, "note", _strong.Notes, context);
                        }
                    }
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "note", _strong.Notes, context);
                }
            }
            if (context.ShouldSerialize("tag")) {
                if (((_strong.Tags == null) 
                            || (_strong.Tags.Count == 0))) {
                    if ((_strong.Key.HasValue && context.ShouldForceLoad("tag", _strong.Key.Value))) {
                        System.Collections.Generic.List<OpenIZ.Core.Model.DataTypes.EntityTag> _delay = null;
                        _delay = new System.Collections.Generic.List<OpenIZ.Core.Model.DataTypes.EntityTag>(context.JsonContext.LoadCollection<OpenIZ.Core.Model.DataTypes.EntityTag>(_strong.Key.Value));
                        _strong.Tags = _delay;
                        if ((_delay.Count > 0)) {
                            _loaded = true;
                            context.JsonContext.WritePropertyUtil(w, "tag", _strong.Tags, context);
                        }
                    }
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "tag", _strong.Tags, context);
                }
            }
            if (context.ShouldSerialize("participation")) {
                if (((_strong.Participations == null) 
                            || (_strong.Participations.Count == 0))) {
                    if ((_strong.Key.HasValue && context.ShouldForceLoad("participation", _strong.Key.Value))) {
                        System.Collections.Generic.List<OpenIZ.Core.Model.Acts.ActParticipation> _delay = null;
                        _delay = new System.Collections.Generic.List<OpenIZ.Core.Model.Acts.ActParticipation>(context.JsonContext.LoadCollection<OpenIZ.Core.Model.Acts.ActParticipation>(_strong.Key.Value));
                        _strong.Participations = _delay;
                        if ((_delay.Count > 0)) {
                            _loaded = true;
                            context.JsonContext.WritePropertyUtil(w, "participation", _strong.Participations, context);
                        }
                    }
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "participation", _strong.Participations, context);
                }
            }
            if (context.ShouldSerialize("etag")) {
                if ((_strong.Tag == null)) {
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "etag", _strong.Tag, context);
                }
            }
            if (context.ShouldSerialize("previousVersion")) {
                if ((_strong.PreviousVersionKey == null)) {
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "previousVersion", _strong.PreviousVersionKey, context);
                }
            }
            if (context.ShouldSerialize("version")) {
                if ((_strong.VersionKey == null)) {
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "version", _strong.VersionKey, context);
                }
            }
            if (context.ShouldSerialize("sequence")) {
                if ((_strong.VersionSequence == null)) {
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "sequence", _strong.VersionSequence, context);
                }
            }
            if (context.ShouldSerialize("creationTimeModel")) {
                if ((_strong.CreationTime == null)) {
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "creationTimeModel", _strong.CreationTime, context);
                }
            }
            if (context.ShouldSerialize("creationTime")) {
                if ((_strong.CreationTimeXml == null)) {
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "creationTime", _strong.CreationTimeXml, context);
                }
            }
            if (context.ShouldSerialize("obsoletionTimeModel")) {
                if ((_strong.ObsoletionTime == null)) {
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "obsoletionTimeModel", _strong.ObsoletionTime, context);
                }
            }
            if (context.ShouldSerialize("obsoletionTime")) {
                if ((_strong.ObsoletionTimeXml == null)) {
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "obsoletionTime", _strong.ObsoletionTimeXml, context);
                }
            }
            if (context.ShouldSerialize("createdBy")) {
                if ((_strong.CreatedByKey == null)) {
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "createdBy", _strong.CreatedByKey, context);
                }
            }
            if (context.ShouldSerialize("obsoletedBy")) {
                if ((_strong.ObsoletedByKey == null)) {
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "obsoletedBy", _strong.ObsoletedByKey, context);
                }
            }
            if (context.ShouldSerialize("id")) {
                if ((_strong.Key == null)) {
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "id", _strong.Key, context);
                }
            }
            if (((_loaded && _strong.Key.HasValue) 
                        && _strong.VersionKey.HasValue)) {
                ((OpenIZ.Core.Services.IDataCachingService)(OpenIZ.Core.ApplicationServiceContext.Current.GetService(typeof(OpenIZ.Core.Services.IDataCachingService)))).Add(_strong);
            }
        }
        
        public object Deserialize(Newtonsoft.Json.JsonReader r, System.Type asType, OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext context) {
            OpenIZ.Core.Model.Roles.Patient _retVal = new OpenIZ.Core.Model.Roles.Patient();
            int _depth = r.Depth;
            if ((r.TokenType != Newtonsoft.Json.JsonToken.StartObject)) {
                _depth = (_depth - 1);
            }
            for (
            ; r.Read(); 
            ) {
                if ((r.TokenType == Newtonsoft.Json.JsonToken.PropertyName)) {
                    if ("id".Equals(r.Value)) {
                        r.Read();
                        System.Nullable<System.Guid> _instance = ((System.Nullable<System.Guid>)(context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<System.Guid>), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("id", context.JsonContext, _retVal, context))));
                        if ((_instance != null)) {
                            _retVal.Key = _instance;
                        }
                    }
                    else {
                        if ("obsoletedBy".Equals(r.Value)) {
                            r.Read();
                            System.Nullable<System.Guid> _instance = ((System.Nullable<System.Guid>)(context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<System.Guid>), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("obsoletedBy", context.JsonContext, _retVal, context))));
                            if ((_instance != null)) {
                                _retVal.ObsoletedByKey = _instance;
                            }
                        }
                        else {
                            if ("createdBy".Equals(r.Value)) {
                                r.Read();
                                System.Nullable<System.Guid> _instance = ((System.Nullable<System.Guid>)(context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<System.Guid>), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("createdBy", context.JsonContext, _retVal, context))));
                                if ((_instance != null)) {
                                    _retVal.CreatedByKey = _instance;
                                }
                            }
                            else {
                                if ("obsoletionTime".Equals(r.Value)) {
                                    r.Read();
                                    string _instance = ((string)(context.JsonContext.ReadElementUtil(r, typeof(string), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("obsoletionTime", context.JsonContext, _retVal, context))));
                                    if ((_instance != null)) {
                                        _retVal.ObsoletionTimeXml = _instance;
                                    }
                                }
                                else {
                                    if ("obsoletionTimeModel".Equals(r.Value)) {
                                        r.Read();
                                        System.Nullable<System.DateTimeOffset> _instance = ((System.Nullable<System.DateTimeOffset>)(context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<System.DateTimeOffset>), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("obsoletionTimeModel", context.JsonContext, _retVal, context))));
                                        if ((_instance != null)) {
                                            _retVal.ObsoletionTime = _instance;
                                        }
                                    }
                                    else {
                                        if ("creationTime".Equals(r.Value)) {
                                            r.Read();
                                            string _instance = ((string)(context.JsonContext.ReadElementUtil(r, typeof(string), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("creationTime", context.JsonContext, _retVal, context))));
                                            if ((_instance != null)) {
                                                _retVal.CreationTimeXml = _instance;
                                            }
                                        }
                                        else {
                                            if ("creationTimeModel".Equals(r.Value)) {
                                                r.Read();
                                                System.DateTimeOffset _instance = ((System.DateTimeOffset)(context.JsonContext.ReadElementUtil(r, typeof(System.DateTimeOffset), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("creationTimeModel", context.JsonContext, _retVal, context))));
                                                if ((_instance != null)) {
                                                    _retVal.CreationTime = _instance;
                                                }
                                            }
                                            else {
                                                if ("sequence".Equals(r.Value)) {
                                                    r.Read();
                                                    System.Nullable<decimal> _instance = ((System.Nullable<decimal>)(context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<decimal>), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("sequence", context.JsonContext, _retVal, context))));
                                                    if ((_instance != null)) {
                                                        _retVal.VersionSequence = _instance;
                                                    }
                                                }
                                                else {
                                                    if ("version".Equals(r.Value)) {
                                                        r.Read();
                                                        System.Nullable<System.Guid> _instance = ((System.Nullable<System.Guid>)(context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<System.Guid>), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("version", context.JsonContext, _retVal, context))));
                                                        if ((_instance != null)) {
                                                            _retVal.VersionKey = _instance;
                                                        }
                                                    }
                                                    else {
                                                        if ("previousVersion".Equals(r.Value)) {
                                                            r.Read();
                                                            System.Nullable<System.Guid> _instance = ((System.Nullable<System.Guid>)(context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<System.Guid>), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("previousVersion", context.JsonContext, _retVal, context))));
                                                            if ((_instance != null)) {
                                                                _retVal.PreviousVersionKey = _instance;
                                                            }
                                                        }
                                                        else {
                                                            if ("participation".Equals(r.Value)) {
                                                                r.Read();
                                                                System.Collections.Generic.List<OpenIZ.Core.Model.Acts.ActParticipation> _instance = ((System.Collections.Generic.List<OpenIZ.Core.Model.Acts.ActParticipation>)(context.JsonContext.ReadElementUtil(r, typeof(System.Collections.Generic.List<OpenIZ.Core.Model.Acts.ActParticipation>), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("participation", context.JsonContext, _retVal, context))));
                                                                if ((_instance != null)) {
                                                                    _retVal.Participations = _instance;
                                                                }
                                                            }
                                                            else {
                                                                if ("tag".Equals(r.Value)) {
                                                                    r.Read();
                                                                    System.Collections.Generic.List<OpenIZ.Core.Model.DataTypes.EntityTag> _instance = ((System.Collections.Generic.List<OpenIZ.Core.Model.DataTypes.EntityTag>)(context.JsonContext.ReadElementUtil(r, typeof(System.Collections.Generic.List<OpenIZ.Core.Model.DataTypes.EntityTag>), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("tag", context.JsonContext, _retVal, context))));
                                                                    if ((_instance != null)) {
                                                                        _retVal.Tags = _instance;
                                                                    }
                                                                }
                                                                else {
                                                                    if ("note".Equals(r.Value)) {
                                                                        r.Read();
                                                                        System.Collections.Generic.List<OpenIZ.Core.Model.DataTypes.EntityNote> _instance = ((System.Collections.Generic.List<OpenIZ.Core.Model.DataTypes.EntityNote>)(context.JsonContext.ReadElementUtil(r, typeof(System.Collections.Generic.List<OpenIZ.Core.Model.DataTypes.EntityNote>), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("note", context.JsonContext, _retVal, context))));
                                                                        if ((_instance != null)) {
                                                                            _retVal.Notes = _instance;
                                                                        }
                                                                    }
                                                                    else {
                                                                        if ("address".Equals(r.Value)) {
                                                                            r.Read();
                                                                            System.Collections.Generic.List<OpenIZ.Core.Model.Entities.EntityAddress> _instance = ((System.Collections.Generic.List<OpenIZ.Core.Model.Entities.EntityAddress>)(context.JsonContext.ReadElementUtil(r, typeof(System.Collections.Generic.List<OpenIZ.Core.Model.Entities.EntityAddress>), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("address", context.JsonContext, _retVal, context))));
                                                                            if ((_instance != null)) {
                                                                                _retVal.Addresses = _instance;
                                                                            }
                                                                        }
                                                                        else {
                                                                            if ("name".Equals(r.Value)) {
                                                                                r.Read();
                                                                                System.Collections.Generic.List<OpenIZ.Core.Model.Entities.EntityName> _instance = ((System.Collections.Generic.List<OpenIZ.Core.Model.Entities.EntityName>)(context.JsonContext.ReadElementUtil(r, typeof(System.Collections.Generic.List<OpenIZ.Core.Model.Entities.EntityName>), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("name", context.JsonContext, _retVal, context))));
                                                                                if ((_instance != null)) {
                                                                                    _retVal.Names = _instance;
                                                                                }
                                                                            }
                                                                            else {
                                                                                if ("extension".Equals(r.Value)) {
                                                                                    r.Read();
                                                                                    System.Collections.Generic.List<OpenIZ.Core.Model.DataTypes.EntityExtension> _instance = ((System.Collections.Generic.List<OpenIZ.Core.Model.DataTypes.EntityExtension>)(context.JsonContext.ReadElementUtil(r, typeof(System.Collections.Generic.List<OpenIZ.Core.Model.DataTypes.EntityExtension>), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("extension", context.JsonContext, _retVal, context))));
                                                                                    if ((_instance != null)) {
                                                                                        _retVal.Extensions = _instance;
                                                                                    }
                                                                                }
                                                                                else {
                                                                                    if ("telecom".Equals(r.Value)) {
                                                                                        r.Read();
                                                                                        System.Collections.Generic.List<OpenIZ.Core.Model.Entities.EntityTelecomAddress> _instance = ((System.Collections.Generic.List<OpenIZ.Core.Model.Entities.EntityTelecomAddress>)(context.JsonContext.ReadElementUtil(r, typeof(System.Collections.Generic.List<OpenIZ.Core.Model.Entities.EntityTelecomAddress>), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("telecom", context.JsonContext, _retVal, context))));
                                                                                        if ((_instance != null)) {
                                                                                            _retVal.Telecoms = _instance;
                                                                                        }
                                                                                    }
                                                                                    else {
                                                                                        if ("relationship".Equals(r.Value)) {
                                                                                            r.Read();
                                                                                            System.Collections.Generic.List<OpenIZ.Core.Model.Entities.EntityRelationship> _instance = ((System.Collections.Generic.List<OpenIZ.Core.Model.Entities.EntityRelationship>)(context.JsonContext.ReadElementUtil(r, typeof(System.Collections.Generic.List<OpenIZ.Core.Model.Entities.EntityRelationship>), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("relationship", context.JsonContext, _retVal, context))));
                                                                                            if ((_instance != null)) {
                                                                                                _retVal.Relationships = _instance;
                                                                                            }
                                                                                        }
                                                                                        else {
                                                                                            if ("identifier".Equals(r.Value)) {
                                                                                                r.Read();
                                                                                                System.Collections.Generic.List<OpenIZ.Core.Model.DataTypes.EntityIdentifier> _instance = ((System.Collections.Generic.List<OpenIZ.Core.Model.DataTypes.EntityIdentifier>)(context.JsonContext.ReadElementUtil(r, typeof(System.Collections.Generic.List<OpenIZ.Core.Model.DataTypes.EntityIdentifier>), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("identifier", context.JsonContext, _retVal, context))));
                                                                                                if ((_instance != null)) {
                                                                                                    _retVal.Identifiers = _instance;
                                                                                                }
                                                                                            }
                                                                                            else {
                                                                                                if ("typeConceptModel".Equals(r.Value)) {
                                                                                                    r.Read();
                                                                                                    OpenIZ.Core.Model.DataTypes.Concept _instance = ((OpenIZ.Core.Model.DataTypes.Concept)(context.JsonContext.ReadElementUtil(r, typeof(OpenIZ.Core.Model.DataTypes.Concept), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("typeConceptModel", context.JsonContext, _retVal, context))));
                                                                                                    if ((_instance != null)) {
                                                                                                        _retVal.TypeConcept = _instance;
                                                                                                    }
                                                                                                }
                                                                                                else {
                                                                                                    if ("creationActModel".Equals(r.Value)) {
                                                                                                        r.Read();
                                                                                                        OpenIZ.Core.Model.Acts.Act _instance = ((OpenIZ.Core.Model.Acts.Act)(context.JsonContext.ReadElementUtil(r, typeof(OpenIZ.Core.Model.Acts.Act), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("creationActModel", context.JsonContext, _retVal, context))));
                                                                                                        if ((_instance != null)) {
                                                                                                            _retVal.CreationAct = _instance;
                                                                                                        }
                                                                                                    }
                                                                                                    else {
                                                                                                        if ("statusConceptModel".Equals(r.Value)) {
                                                                                                            r.Read();
                                                                                                            OpenIZ.Core.Model.DataTypes.Concept _instance = ((OpenIZ.Core.Model.DataTypes.Concept)(context.JsonContext.ReadElementUtil(r, typeof(OpenIZ.Core.Model.DataTypes.Concept), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("statusConceptModel", context.JsonContext, _retVal, context))));
                                                                                                            if ((_instance != null)) {
                                                                                                                _retVal.StatusConcept = _instance;
                                                                                                            }
                                                                                                        }
                                                                                                        else {
                                                                                                            if ("determinerConceptModel".Equals(r.Value)) {
                                                                                                                r.Read();
                                                                                                                OpenIZ.Core.Model.DataTypes.Concept _instance = ((OpenIZ.Core.Model.DataTypes.Concept)(context.JsonContext.ReadElementUtil(r, typeof(OpenIZ.Core.Model.DataTypes.Concept), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("determinerConceptModel", context.JsonContext, _retVal, context))));
                                                                                                                if ((_instance != null)) {
                                                                                                                    _retVal.DeterminerConcept = _instance;
                                                                                                                }
                                                                                                            }
                                                                                                            else {
                                                                                                                if ("classConceptModel".Equals(r.Value)) {
                                                                                                                    r.Read();
                                                                                                                    OpenIZ.Core.Model.DataTypes.Concept _instance = ((OpenIZ.Core.Model.DataTypes.Concept)(context.JsonContext.ReadElementUtil(r, typeof(OpenIZ.Core.Model.DataTypes.Concept), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("classConceptModel", context.JsonContext, _retVal, context))));
                                                                                                                    if ((_instance != null)) {
                                                                                                                        _retVal.ClassConcept = _instance;
                                                                                                                    }
                                                                                                                }
                                                                                                                else {
                                                                                                                    if ("typeConcept".Equals(r.Value)) {
                                                                                                                        r.Read();
                                                                                                                        System.Nullable<System.Guid> _instance = ((System.Nullable<System.Guid>)(context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<System.Guid>), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("typeConcept", context.JsonContext, _retVal, context))));
                                                                                                                        if ((_instance != null)) {
                                                                                                                            _retVal.TypeConceptKey = _instance;
                                                                                                                        }
                                                                                                                    }
                                                                                                                    else {
                                                                                                                        if ("creationAct".Equals(r.Value)) {
                                                                                                                            r.Read();
                                                                                                                            System.Nullable<System.Guid> _instance = ((System.Nullable<System.Guid>)(context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<System.Guid>), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("creationAct", context.JsonContext, _retVal, context))));
                                                                                                                            if ((_instance != null)) {
                                                                                                                                _retVal.CreationActKey = _instance;
                                                                                                                            }
                                                                                                                        }
                                                                                                                        else {
                                                                                                                            if ("statusConcept".Equals(r.Value)) {
                                                                                                                                r.Read();
                                                                                                                                System.Nullable<System.Guid> _instance = ((System.Nullable<System.Guid>)(context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<System.Guid>), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("statusConcept", context.JsonContext, _retVal, context))));
                                                                                                                                if ((_instance != null)) {
                                                                                                                                    _retVal.StatusConceptKey = _instance;
                                                                                                                                }
                                                                                                                            }
                                                                                                                            else {
                                                                                                                                if ("determinerConcept".Equals(r.Value)) {
                                                                                                                                    r.Read();
                                                                                                                                    System.Nullable<System.Guid> _instance = ((System.Nullable<System.Guid>)(context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<System.Guid>), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("determinerConcept", context.JsonContext, _retVal, context))));
                                                                                                                                    if ((_instance != null)) {
                                                                                                                                        _retVal.DeterminerConceptKey = _instance;
                                                                                                                                    }
                                                                                                                                }
                                                                                                                                else {
                                                                                                                                    if ("classConcept".Equals(r.Value)) {
                                                                                                                                        r.Read();
                                                                                                                                        System.Nullable<System.Guid> _instance = ((System.Nullable<System.Guid>)(context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<System.Guid>), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("classConcept", context.JsonContext, _retVal, context))));
                                                                                                                                        if ((_instance != null)) {
                                                                                                                                            _retVal.ClassConceptKey = _instance;
                                                                                                                                        }
                                                                                                                                    }
                                                                                                                                    else {
                                                                                                                                        if ("template".Equals(r.Value)) {
                                                                                                                                            r.Read();
                                                                                                                                            OpenIZ.Core.Model.DataTypes.TemplateDefinition _instance = ((OpenIZ.Core.Model.DataTypes.TemplateDefinition)(context.JsonContext.ReadElementUtil(r, typeof(OpenIZ.Core.Model.DataTypes.TemplateDefinition), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("template", context.JsonContext, _retVal, context))));
                                                                                                                                            if ((_instance != null)) {
                                                                                                                                                _retVal.Template = _instance;
                                                                                                                                            }
                                                                                                                                        }
                                                                                                                                        else {
                                                                                                                                            if ("language".Equals(r.Value)) {
                                                                                                                                                r.Read();
                                                                                                                                                System.Collections.Generic.List<OpenIZ.Core.Model.Entities.PersonLanguageCommunication> _instance = ((System.Collections.Generic.List<OpenIZ.Core.Model.Entities.PersonLanguageCommunication>)(context.JsonContext.ReadElementUtil(r, typeof(System.Collections.Generic.List<OpenIZ.Core.Model.Entities.PersonLanguageCommunication>), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("language", context.JsonContext, _retVal, context))));
                                                                                                                                                if ((_instance != null)) {
                                                                                                                                                    _retVal.LanguageCommunication = _instance;
                                                                                                                                                }
                                                                                                                                            }
                                                                                                                                            else {
                                                                                                                                                if ("dateOfBirthPrecision".Equals(r.Value)) {
                                                                                                                                                    r.Read();
                                                                                                                                                    System.Nullable<OpenIZ.Core.Model.DataTypes.DatePrecision> _instance = ((System.Nullable<OpenIZ.Core.Model.DataTypes.DatePrecision>)(context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<OpenIZ.Core.Model.DataTypes.DatePrecision>), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("dateOfBirthPrecision", context.JsonContext, _retVal, context))));
                                                                                                                                                    if ((_instance != null)) {
                                                                                                                                                        _retVal.DateOfBirthPrecision = _instance;
                                                                                                                                                    }
                                                                                                                                                }
                                                                                                                                                else {
                                                                                                                                                    if ("dateOfBirth".Equals(r.Value)) {
                                                                                                                                                        r.Read();
                                                                                                                                                        System.Nullable<System.DateTime> _instance = ((System.Nullable<System.DateTime>)(context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<System.DateTime>), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("dateOfBirth", context.JsonContext, _retVal, context))));
                                                                                                                                                        if ((_instance != null)) {
                                                                                                                                                            _retVal.DateOfBirth = _instance;
                                                                                                                                                        }
                                                                                                                                                    }
                                                                                                                                                    else {
                                                                                                                                                        if ("genderConcept".Equals(r.Value)) {
                                                                                                                                                            r.Read();
                                                                                                                                                            System.Nullable<System.Guid> _instance = ((System.Nullable<System.Guid>)(context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<System.Guid>), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("genderConcept", context.JsonContext, _retVal, context))));
                                                                                                                                                            if ((_instance != null)) {
                                                                                                                                                                _retVal.GenderConceptKey = _instance;
                                                                                                                                                            }
                                                                                                                                                        }
                                                                                                                                                        else {
                                                                                                                                                            if ("multipleBirthOrder".Equals(r.Value)) {
                                                                                                                                                                r.Read();
                                                                                                                                                                System.Nullable<int> _instance = ((System.Nullable<int>)(context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<int>), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("multipleBirthOrder", context.JsonContext, _retVal, context))));
                                                                                                                                                                if ((_instance != null)) {
                                                                                                                                                                    _retVal.MultipleBirthOrder = _instance;
                                                                                                                                                                }
                                                                                                                                                            }
                                                                                                                                                            else {
                                                                                                                                                                if ("deceasedDatePrecision".Equals(r.Value)) {
                                                                                                                                                                    r.Read();
                                                                                                                                                                    System.Nullable<OpenIZ.Core.Model.DataTypes.DatePrecision> _instance = ((System.Nullable<OpenIZ.Core.Model.DataTypes.DatePrecision>)(context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<OpenIZ.Core.Model.DataTypes.DatePrecision>), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("deceasedDatePrecision", context.JsonContext, _retVal, context))));
                                                                                                                                                                    if ((_instance != null)) {
                                                                                                                                                                        _retVal.DeceasedDatePrecision = _instance;
                                                                                                                                                                    }
                                                                                                                                                                }
                                                                                                                                                                else {
                                                                                                                                                                    if ("deceasedDate".Equals(r.Value)) {
                                                                                                                                                                        r.Read();
                                                                                                                                                                        System.Nullable<System.DateTime> _instance = ((System.Nullable<System.DateTime>)(context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<System.DateTime>), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("deceasedDate", context.JsonContext, _retVal, context))));
                                                                                                                                                                        if ((_instance != null)) {
                                                                                                                                                                            _retVal.DeceasedDate = _instance;
                                                                                                                                                                        }
                                                                                                                                                                    }
                                                                                                                                                                    else {
                                                                                                                                                                        if ("$type".Equals(r.Value)) {
                                                                                                                                                                            System.Type _type = this.m_binder.BindToType("OpenIZ.Core.Model, Version=0.6.14.21496, Culture=neutral, PublicKeyToken=null", r.ReadAsString());
                                                                                                                                                                            if ((_type != typeof(OpenIZ.Core.Model.Roles.Patient))) {
                                                                                                                                                                                OpenIZ.Core.Model.Roles.Patient _nretVal = ((OpenIZ.Core.Model.Roles.Patient)(context.JsonContext.GetFormatter(_type).Deserialize(r, _type, context)));
                                                                                                                                                                                _nretVal.CopyObjectData(_retVal);
                                                                                                                                                                                return _nretVal;
                                                                                                                                                                            }
                                                                                                                                                                        }
                                                                                                                                                                        else {
                                                                                                                                                                            r.Skip();
                                                                                                                                                                        }
                                                                                                                                                                    }
                                                                                                                                                                }
                                                                                                                                                            }
                                                                                                                                                        }
                                                                                                                                                    }
                                                                                                                                                }
                                                                                                                                            }
                                                                                                                                        }
                                                                                                                                    }
                                                                                                                                }
                                                                                                                            }
                                                                                                                        }
                                                                                                                    }
                                                                                                                }
                                                                                                            }
                                                                                                        }
                                                                                                    }
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
                else {
                    if (((r.TokenType == Newtonsoft.Json.JsonToken.EndObject) 
                                && (r.Depth == _depth))) {
                        return _retVal;
                    }
                    else {
                        throw new Newtonsoft.Json.JsonSerializationException("JSON in invalid state");
                    }
                }
            }
            return _retVal;
        }
        
        public object FromSimpleValue(object o) {
            return null;
        }
        
        public object GetSimpleValue(object o) {
            return null;
        }
    }
    
    public class ProviderViewModelSerializer : OpenIZ.Core.Applets.ViewModel.Json.IJsonViewModelTypeFormatter {
        
        private OpenIZ.Core.Model.Serialization.ModelSerializationBinder m_binder = new OpenIZ.Core.Model.Serialization.ModelSerializationBinder();
        
        private OpenIZ.Core.Diagnostics.Tracer m_tracer = OpenIZ.Core.Diagnostics.Tracer.GetTracer(typeof(ProviderViewModelSerializer));
        
        public System.Type HandlesType {
            get {
                return typeof(OpenIZ.Core.Model.Roles.Provider);
            }
        }
        
        public void Serialize(Newtonsoft.Json.JsonWriter w, OpenIZ.Core.Model.IdentifiedData o, OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext context) {
            if ((o == null)) {
                throw new System.ArgumentNullException("o");
            }
            OpenIZ.Core.Model.Roles.Provider _strong = null;
            OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext _jsonContext = null;
            bool _loaded = false;
            try {
                _strong = ((OpenIZ.Core.Model.Roles.Provider)(o));
            }
            catch (System.Exception e) {
                this.m_tracer.TraceError(string.Format("Casting Error: {0}", e));
                throw new System.ArgumentException(string.Format("Invalid type {0} provided, expected {1}", o.GetType(), typeof(OpenIZ.Core.Model.Roles.Provider)));
            }
            if (context.ShouldSerialize("providerSpecialty")) {
                if ((_strong.ProviderSpecialtyKey == null)) {
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "providerSpecialty", _strong.ProviderSpecialtyKey, context);
                }
            }
            if (context.ShouldSerialize("providerSpecialtyModel")) {
                if ((_strong.ProviderSpecialty == null)) {
                    if ((_strong.Key.HasValue && context.ShouldForceLoad("providerSpecialtyModel", _strong.Key.Value))) {
                        OpenIZ.Core.Model.DataTypes.Concept _delay = null;
                        _delay = context.JsonContext.LoadRelated<OpenIZ.Core.Model.DataTypes.Concept>(_strong.ProviderSpecialtyKey);
                        _strong.ProviderSpecialty = _delay;
                        if ((_delay != null)) {
                            _loaded = true;
                            context.JsonContext.WritePropertyUtil(w, "providerSpecialtyModel", _strong.ProviderSpecialty, context);
                        }
                    }
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "providerSpecialtyModel", _strong.ProviderSpecialty, context);
                }
            }
            if (context.ShouldSerialize("dateOfBirth")) {
                if ((_strong.DateOfBirth == null)) {
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "dateOfBirth", _strong.DateOfBirth, context);
                }
            }
            if (context.ShouldSerialize("dateOfBirthPrecision")) {
                if ((_strong.DateOfBirthPrecision == null)) {
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "dateOfBirthPrecision", _strong.DateOfBirthPrecision, context);
                }
            }
            if (context.ShouldSerialize("language")) {
                if (((_strong.LanguageCommunication == null) 
                            || (_strong.LanguageCommunication.Count == 0))) {
                    if ((_strong.Key.HasValue && context.ShouldForceLoad("language", _strong.Key.Value))) {
                        System.Collections.Generic.List<OpenIZ.Core.Model.Entities.PersonLanguageCommunication> _delay = null;
                        _delay = new System.Collections.Generic.List<OpenIZ.Core.Model.Entities.PersonLanguageCommunication>(context.JsonContext.LoadCollection<OpenIZ.Core.Model.Entities.PersonLanguageCommunication>(_strong.Key.Value));
                        _strong.LanguageCommunication = _delay;
                        if ((_delay.Count > 0)) {
                            _loaded = true;
                            context.JsonContext.WritePropertyUtil(w, "language", _strong.LanguageCommunication, context);
                        }
                    }
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "language", _strong.LanguageCommunication, context);
                }
            }
            if (context.ShouldSerialize("template")) {
                if ((_strong.Template == null)) {
                    if ((_strong.Key.HasValue && context.ShouldForceLoad("template", _strong.Key.Value))) {
                        OpenIZ.Core.Model.DataTypes.TemplateDefinition _delay = null;
                    }
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "template", _strong.Template, context);
                }
            }
            if (context.ShouldSerialize("classConcept")) {
                if ((_strong.ClassConceptKey == null)) {
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "classConcept", _strong.ClassConceptKey, context);
                }
            }
            if (context.ShouldSerialize("determinerConcept")) {
                if ((_strong.DeterminerConceptKey == null)) {
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "determinerConcept", _strong.DeterminerConceptKey, context);
                }
            }
            if (context.ShouldSerialize("statusConcept")) {
                if ((_strong.StatusConceptKey == null)) {
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "statusConcept", _strong.StatusConceptKey, context);
                }
            }
            if (context.ShouldSerialize("creationAct")) {
                if ((_strong.CreationActKey == null)) {
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "creationAct", _strong.CreationActKey, context);
                }
            }
            if (context.ShouldSerialize("typeConcept")) {
                if ((_strong.TypeConceptKey == null)) {
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "typeConcept", _strong.TypeConceptKey, context);
                }
            }
            if (context.ShouldSerialize("classConceptModel")) {
                if ((_strong.ClassConcept == null)) {
                    if ((_strong.Key.HasValue && context.ShouldForceLoad("classConceptModel", _strong.Key.Value))) {
                        OpenIZ.Core.Model.DataTypes.Concept _delay = null;
                        _delay = context.JsonContext.LoadRelated<OpenIZ.Core.Model.DataTypes.Concept>(_strong.ClassConceptKey);
                        _strong.ClassConcept = _delay;
                        if ((_delay != null)) {
                            _loaded = true;
                            context.JsonContext.WritePropertyUtil(w, "classConceptModel", _strong.ClassConcept, context);
                        }
                    }
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "classConceptModel", _strong.ClassConcept, context);
                }
            }
            if (context.ShouldSerialize("determinerConceptModel")) {
                if ((_strong.DeterminerConcept == null)) {
                    if ((_strong.Key.HasValue && context.ShouldForceLoad("determinerConceptModel", _strong.Key.Value))) {
                        OpenIZ.Core.Model.DataTypes.Concept _delay = null;
                        _delay = context.JsonContext.LoadRelated<OpenIZ.Core.Model.DataTypes.Concept>(_strong.DeterminerConceptKey);
                        _strong.DeterminerConcept = _delay;
                        if ((_delay != null)) {
                            _loaded = true;
                            context.JsonContext.WritePropertyUtil(w, "determinerConceptModel", _strong.DeterminerConcept, context);
                        }
                    }
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "determinerConceptModel", _strong.DeterminerConcept, context);
                }
            }
            if (context.ShouldSerialize("statusConceptModel")) {
                if ((_strong.StatusConcept == null)) {
                    if ((_strong.Key.HasValue && context.ShouldForceLoad("statusConceptModel", _strong.Key.Value))) {
                        OpenIZ.Core.Model.DataTypes.Concept _delay = null;
                        _delay = context.JsonContext.LoadRelated<OpenIZ.Core.Model.DataTypes.Concept>(_strong.StatusConceptKey);
                        _strong.StatusConcept = _delay;
                        if ((_delay != null)) {
                            _loaded = true;
                            context.JsonContext.WritePropertyUtil(w, "statusConceptModel", _strong.StatusConcept, context);
                        }
                    }
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "statusConceptModel", _strong.StatusConcept, context);
                }
            }
            if (context.ShouldSerialize("creationActModel")) {
                if ((_strong.CreationAct == null)) {
                    if ((_strong.Key.HasValue && context.ShouldForceLoad("creationActModel", _strong.Key.Value))) {
                        OpenIZ.Core.Model.Acts.Act _delay = null;
                        _delay = context.JsonContext.LoadRelated<OpenIZ.Core.Model.Acts.Act>(_strong.CreationActKey);
                        _strong.CreationAct = _delay;
                        if ((_delay != null)) {
                            _loaded = true;
                            context.JsonContext.WritePropertyUtil(w, "creationActModel", _strong.CreationAct, context);
                        }
                    }
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "creationActModel", _strong.CreationAct, context);
                }
            }
            if (context.ShouldSerialize("typeConceptModel")) {
                if ((_strong.TypeConcept == null)) {
                    if ((_strong.Key.HasValue && context.ShouldForceLoad("typeConceptModel", _strong.Key.Value))) {
                        OpenIZ.Core.Model.DataTypes.Concept _delay = null;
                        _delay = context.JsonContext.LoadRelated<OpenIZ.Core.Model.DataTypes.Concept>(_strong.TypeConceptKey);
                        _strong.TypeConcept = _delay;
                        if ((_delay != null)) {
                            _loaded = true;
                            context.JsonContext.WritePropertyUtil(w, "typeConceptModel", _strong.TypeConcept, context);
                        }
                    }
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "typeConceptModel", _strong.TypeConcept, context);
                }
            }
            if (context.ShouldSerialize("identifier")) {
                if (((_strong.Identifiers == null) 
                            || (_strong.Identifiers.Count == 0))) {
                    if ((_strong.Key.HasValue && context.ShouldForceLoad("identifier", _strong.Key.Value))) {
                        System.Collections.Generic.List<OpenIZ.Core.Model.DataTypes.EntityIdentifier> _delay = null;
                        _delay = new System.Collections.Generic.List<OpenIZ.Core.Model.DataTypes.EntityIdentifier>(context.JsonContext.LoadCollection<OpenIZ.Core.Model.DataTypes.EntityIdentifier>(_strong.Key.Value));
                        _strong.Identifiers = _delay;
                        if ((_delay.Count > 0)) {
                            _loaded = true;
                            context.JsonContext.WritePropertyUtil(w, "identifier", _strong.Identifiers, context);
                        }
                    }
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "identifier", _strong.Identifiers, context);
                }
            }
            if (context.ShouldSerialize("relationship")) {
                if (((_strong.Relationships == null) 
                            || (_strong.Relationships.Count == 0))) {
                    if ((_strong.Key.HasValue && context.ShouldForceLoad("relationship", _strong.Key.Value))) {
                        System.Collections.Generic.List<OpenIZ.Core.Model.Entities.EntityRelationship> _delay = null;
                        _delay = new System.Collections.Generic.List<OpenIZ.Core.Model.Entities.EntityRelationship>(context.JsonContext.LoadCollection<OpenIZ.Core.Model.Entities.EntityRelationship>(_strong.Key.Value));
                        _strong.Relationships = _delay;
                        if ((_delay.Count > 0)) {
                            _loaded = true;
                            context.JsonContext.WritePropertyUtil(w, "relationship", _strong.Relationships, context);
                        }
                    }
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "relationship", _strong.Relationships, context);
                }
            }
            if (context.ShouldSerialize("telecom")) {
                if (((_strong.Telecoms == null) 
                            || (_strong.Telecoms.Count == 0))) {
                    if ((_strong.Key.HasValue && context.ShouldForceLoad("telecom", _strong.Key.Value))) {
                        System.Collections.Generic.List<OpenIZ.Core.Model.Entities.EntityTelecomAddress> _delay = null;
                        _delay = new System.Collections.Generic.List<OpenIZ.Core.Model.Entities.EntityTelecomAddress>(context.JsonContext.LoadCollection<OpenIZ.Core.Model.Entities.EntityTelecomAddress>(_strong.Key.Value));
                        _strong.Telecoms = _delay;
                        if ((_delay.Count > 0)) {
                            _loaded = true;
                            context.JsonContext.WritePropertyUtil(w, "telecom", _strong.Telecoms, context);
                        }
                    }
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "telecom", _strong.Telecoms, context);
                }
            }
            if (context.ShouldSerialize("extension")) {
                if (((_strong.Extensions == null) 
                            || (_strong.Extensions.Count == 0))) {
                    if ((_strong.Key.HasValue && context.ShouldForceLoad("extension", _strong.Key.Value))) {
                        System.Collections.Generic.List<OpenIZ.Core.Model.DataTypes.EntityExtension> _delay = null;
                        _delay = new System.Collections.Generic.List<OpenIZ.Core.Model.DataTypes.EntityExtension>(context.JsonContext.LoadCollection<OpenIZ.Core.Model.DataTypes.EntityExtension>(_strong.Key.Value));
                        _strong.Extensions = _delay;
                        if ((_delay.Count > 0)) {
                            _loaded = true;
                            context.JsonContext.WritePropertyUtil(w, "extension", _strong.Extensions, context);
                        }
                    }
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "extension", _strong.Extensions, context);
                }
            }
            if (context.ShouldSerialize("name")) {
                if (((_strong.Names == null) 
                            || (_strong.Names.Count == 0))) {
                    if ((_strong.Key.HasValue && context.ShouldForceLoad("name", _strong.Key.Value))) {
                        System.Collections.Generic.List<OpenIZ.Core.Model.Entities.EntityName> _delay = null;
                        _delay = new System.Collections.Generic.List<OpenIZ.Core.Model.Entities.EntityName>(context.JsonContext.LoadCollection<OpenIZ.Core.Model.Entities.EntityName>(_strong.Key.Value));
                        _strong.Names = _delay;
                        if ((_delay.Count > 0)) {
                            _loaded = true;
                            context.JsonContext.WritePropertyUtil(w, "name", _strong.Names, context);
                        }
                    }
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "name", _strong.Names, context);
                }
            }
            if (context.ShouldSerialize("address")) {
                if (((_strong.Addresses == null) 
                            || (_strong.Addresses.Count == 0))) {
                    if ((_strong.Key.HasValue && context.ShouldForceLoad("address", _strong.Key.Value))) {
                        System.Collections.Generic.List<OpenIZ.Core.Model.Entities.EntityAddress> _delay = null;
                        _delay = new System.Collections.Generic.List<OpenIZ.Core.Model.Entities.EntityAddress>(context.JsonContext.LoadCollection<OpenIZ.Core.Model.Entities.EntityAddress>(_strong.Key.Value));
                        _strong.Addresses = _delay;
                        if ((_delay.Count > 0)) {
                            _loaded = true;
                            context.JsonContext.WritePropertyUtil(w, "address", _strong.Addresses, context);
                        }
                    }
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "address", _strong.Addresses, context);
                }
            }
            if (context.ShouldSerialize("note")) {
                if (((_strong.Notes == null) 
                            || (_strong.Notes.Count == 0))) {
                    if ((_strong.Key.HasValue && context.ShouldForceLoad("note", _strong.Key.Value))) {
                        System.Collections.Generic.List<OpenIZ.Core.Model.DataTypes.EntityNote> _delay = null;
                        _delay = new System.Collections.Generic.List<OpenIZ.Core.Model.DataTypes.EntityNote>(context.JsonContext.LoadCollection<OpenIZ.Core.Model.DataTypes.EntityNote>(_strong.Key.Value));
                        _strong.Notes = _delay;
                        if ((_delay.Count > 0)) {
                            _loaded = true;
                            context.JsonContext.WritePropertyUtil(w, "note", _strong.Notes, context);
                        }
                    }
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "note", _strong.Notes, context);
                }
            }
            if (context.ShouldSerialize("tag")) {
                if (((_strong.Tags == null) 
                            || (_strong.Tags.Count == 0))) {
                    if ((_strong.Key.HasValue && context.ShouldForceLoad("tag", _strong.Key.Value))) {
                        System.Collections.Generic.List<OpenIZ.Core.Model.DataTypes.EntityTag> _delay = null;
                        _delay = new System.Collections.Generic.List<OpenIZ.Core.Model.DataTypes.EntityTag>(context.JsonContext.LoadCollection<OpenIZ.Core.Model.DataTypes.EntityTag>(_strong.Key.Value));
                        _strong.Tags = _delay;
                        if ((_delay.Count > 0)) {
                            _loaded = true;
                            context.JsonContext.WritePropertyUtil(w, "tag", _strong.Tags, context);
                        }
                    }
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "tag", _strong.Tags, context);
                }
            }
            if (context.ShouldSerialize("participation")) {
                if (((_strong.Participations == null) 
                            || (_strong.Participations.Count == 0))) {
                    if ((_strong.Key.HasValue && context.ShouldForceLoad("participation", _strong.Key.Value))) {
                        System.Collections.Generic.List<OpenIZ.Core.Model.Acts.ActParticipation> _delay = null;
                        _delay = new System.Collections.Generic.List<OpenIZ.Core.Model.Acts.ActParticipation>(context.JsonContext.LoadCollection<OpenIZ.Core.Model.Acts.ActParticipation>(_strong.Key.Value));
                        _strong.Participations = _delay;
                        if ((_delay.Count > 0)) {
                            _loaded = true;
                            context.JsonContext.WritePropertyUtil(w, "participation", _strong.Participations, context);
                        }
                    }
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "participation", _strong.Participations, context);
                }
            }
            if (context.ShouldSerialize("etag")) {
                if ((_strong.Tag == null)) {
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "etag", _strong.Tag, context);
                }
            }
            if (context.ShouldSerialize("previousVersion")) {
                if ((_strong.PreviousVersionKey == null)) {
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "previousVersion", _strong.PreviousVersionKey, context);
                }
            }
            if (context.ShouldSerialize("version")) {
                if ((_strong.VersionKey == null)) {
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "version", _strong.VersionKey, context);
                }
            }
            if (context.ShouldSerialize("sequence")) {
                if ((_strong.VersionSequence == null)) {
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "sequence", _strong.VersionSequence, context);
                }
            }
            if (context.ShouldSerialize("creationTimeModel")) {
                if ((_strong.CreationTime == null)) {
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "creationTimeModel", _strong.CreationTime, context);
                }
            }
            if (context.ShouldSerialize("creationTime")) {
                if ((_strong.CreationTimeXml == null)) {
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "creationTime", _strong.CreationTimeXml, context);
                }
            }
            if (context.ShouldSerialize("obsoletionTimeModel")) {
                if ((_strong.ObsoletionTime == null)) {
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "obsoletionTimeModel", _strong.ObsoletionTime, context);
                }
            }
            if (context.ShouldSerialize("obsoletionTime")) {
                if ((_strong.ObsoletionTimeXml == null)) {
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "obsoletionTime", _strong.ObsoletionTimeXml, context);
                }
            }
            if (context.ShouldSerialize("createdBy")) {
                if ((_strong.CreatedByKey == null)) {
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "createdBy", _strong.CreatedByKey, context);
                }
            }
            if (context.ShouldSerialize("obsoletedBy")) {
                if ((_strong.ObsoletedByKey == null)) {
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "obsoletedBy", _strong.ObsoletedByKey, context);
                }
            }
            if (context.ShouldSerialize("id")) {
                if ((_strong.Key == null)) {
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "id", _strong.Key, context);
                }
            }
            if (((_loaded && _strong.Key.HasValue) 
                        && _strong.VersionKey.HasValue)) {
                ((OpenIZ.Core.Services.IDataCachingService)(OpenIZ.Core.ApplicationServiceContext.Current.GetService(typeof(OpenIZ.Core.Services.IDataCachingService)))).Add(_strong);
            }
        }
        
        public object Deserialize(Newtonsoft.Json.JsonReader r, System.Type asType, OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext context) {
            OpenIZ.Core.Model.Roles.Provider _retVal = new OpenIZ.Core.Model.Roles.Provider();
            int _depth = r.Depth;
            if ((r.TokenType != Newtonsoft.Json.JsonToken.StartObject)) {
                _depth = (_depth - 1);
            }
            for (
            ; r.Read(); 
            ) {
                if ((r.TokenType == Newtonsoft.Json.JsonToken.PropertyName)) {
                    if ("id".Equals(r.Value)) {
                        r.Read();
                        System.Nullable<System.Guid> _instance = ((System.Nullable<System.Guid>)(context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<System.Guid>), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("id", context.JsonContext, _retVal, context))));
                        if ((_instance != null)) {
                            _retVal.Key = _instance;
                        }
                    }
                    else {
                        if ("obsoletedBy".Equals(r.Value)) {
                            r.Read();
                            System.Nullable<System.Guid> _instance = ((System.Nullable<System.Guid>)(context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<System.Guid>), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("obsoletedBy", context.JsonContext, _retVal, context))));
                            if ((_instance != null)) {
                                _retVal.ObsoletedByKey = _instance;
                            }
                        }
                        else {
                            if ("createdBy".Equals(r.Value)) {
                                r.Read();
                                System.Nullable<System.Guid> _instance = ((System.Nullable<System.Guid>)(context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<System.Guid>), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("createdBy", context.JsonContext, _retVal, context))));
                                if ((_instance != null)) {
                                    _retVal.CreatedByKey = _instance;
                                }
                            }
                            else {
                                if ("obsoletionTime".Equals(r.Value)) {
                                    r.Read();
                                    string _instance = ((string)(context.JsonContext.ReadElementUtil(r, typeof(string), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("obsoletionTime", context.JsonContext, _retVal, context))));
                                    if ((_instance != null)) {
                                        _retVal.ObsoletionTimeXml = _instance;
                                    }
                                }
                                else {
                                    if ("obsoletionTimeModel".Equals(r.Value)) {
                                        r.Read();
                                        System.Nullable<System.DateTimeOffset> _instance = ((System.Nullable<System.DateTimeOffset>)(context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<System.DateTimeOffset>), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("obsoletionTimeModel", context.JsonContext, _retVal, context))));
                                        if ((_instance != null)) {
                                            _retVal.ObsoletionTime = _instance;
                                        }
                                    }
                                    else {
                                        if ("creationTime".Equals(r.Value)) {
                                            r.Read();
                                            string _instance = ((string)(context.JsonContext.ReadElementUtil(r, typeof(string), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("creationTime", context.JsonContext, _retVal, context))));
                                            if ((_instance != null)) {
                                                _retVal.CreationTimeXml = _instance;
                                            }
                                        }
                                        else {
                                            if ("creationTimeModel".Equals(r.Value)) {
                                                r.Read();
                                                System.DateTimeOffset _instance = ((System.DateTimeOffset)(context.JsonContext.ReadElementUtil(r, typeof(System.DateTimeOffset), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("creationTimeModel", context.JsonContext, _retVal, context))));
                                                if ((_instance != null)) {
                                                    _retVal.CreationTime = _instance;
                                                }
                                            }
                                            else {
                                                if ("sequence".Equals(r.Value)) {
                                                    r.Read();
                                                    System.Nullable<decimal> _instance = ((System.Nullable<decimal>)(context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<decimal>), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("sequence", context.JsonContext, _retVal, context))));
                                                    if ((_instance != null)) {
                                                        _retVal.VersionSequence = _instance;
                                                    }
                                                }
                                                else {
                                                    if ("version".Equals(r.Value)) {
                                                        r.Read();
                                                        System.Nullable<System.Guid> _instance = ((System.Nullable<System.Guid>)(context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<System.Guid>), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("version", context.JsonContext, _retVal, context))));
                                                        if ((_instance != null)) {
                                                            _retVal.VersionKey = _instance;
                                                        }
                                                    }
                                                    else {
                                                        if ("previousVersion".Equals(r.Value)) {
                                                            r.Read();
                                                            System.Nullable<System.Guid> _instance = ((System.Nullable<System.Guid>)(context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<System.Guid>), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("previousVersion", context.JsonContext, _retVal, context))));
                                                            if ((_instance != null)) {
                                                                _retVal.PreviousVersionKey = _instance;
                                                            }
                                                        }
                                                        else {
                                                            if ("participation".Equals(r.Value)) {
                                                                r.Read();
                                                                System.Collections.Generic.List<OpenIZ.Core.Model.Acts.ActParticipation> _instance = ((System.Collections.Generic.List<OpenIZ.Core.Model.Acts.ActParticipation>)(context.JsonContext.ReadElementUtil(r, typeof(System.Collections.Generic.List<OpenIZ.Core.Model.Acts.ActParticipation>), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("participation", context.JsonContext, _retVal, context))));
                                                                if ((_instance != null)) {
                                                                    _retVal.Participations = _instance;
                                                                }
                                                            }
                                                            else {
                                                                if ("tag".Equals(r.Value)) {
                                                                    r.Read();
                                                                    System.Collections.Generic.List<OpenIZ.Core.Model.DataTypes.EntityTag> _instance = ((System.Collections.Generic.List<OpenIZ.Core.Model.DataTypes.EntityTag>)(context.JsonContext.ReadElementUtil(r, typeof(System.Collections.Generic.List<OpenIZ.Core.Model.DataTypes.EntityTag>), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("tag", context.JsonContext, _retVal, context))));
                                                                    if ((_instance != null)) {
                                                                        _retVal.Tags = _instance;
                                                                    }
                                                                }
                                                                else {
                                                                    if ("note".Equals(r.Value)) {
                                                                        r.Read();
                                                                        System.Collections.Generic.List<OpenIZ.Core.Model.DataTypes.EntityNote> _instance = ((System.Collections.Generic.List<OpenIZ.Core.Model.DataTypes.EntityNote>)(context.JsonContext.ReadElementUtil(r, typeof(System.Collections.Generic.List<OpenIZ.Core.Model.DataTypes.EntityNote>), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("note", context.JsonContext, _retVal, context))));
                                                                        if ((_instance != null)) {
                                                                            _retVal.Notes = _instance;
                                                                        }
                                                                    }
                                                                    else {
                                                                        if ("address".Equals(r.Value)) {
                                                                            r.Read();
                                                                            System.Collections.Generic.List<OpenIZ.Core.Model.Entities.EntityAddress> _instance = ((System.Collections.Generic.List<OpenIZ.Core.Model.Entities.EntityAddress>)(context.JsonContext.ReadElementUtil(r, typeof(System.Collections.Generic.List<OpenIZ.Core.Model.Entities.EntityAddress>), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("address", context.JsonContext, _retVal, context))));
                                                                            if ((_instance != null)) {
                                                                                _retVal.Addresses = _instance;
                                                                            }
                                                                        }
                                                                        else {
                                                                            if ("name".Equals(r.Value)) {
                                                                                r.Read();
                                                                                System.Collections.Generic.List<OpenIZ.Core.Model.Entities.EntityName> _instance = ((System.Collections.Generic.List<OpenIZ.Core.Model.Entities.EntityName>)(context.JsonContext.ReadElementUtil(r, typeof(System.Collections.Generic.List<OpenIZ.Core.Model.Entities.EntityName>), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("name", context.JsonContext, _retVal, context))));
                                                                                if ((_instance != null)) {
                                                                                    _retVal.Names = _instance;
                                                                                }
                                                                            }
                                                                            else {
                                                                                if ("extension".Equals(r.Value)) {
                                                                                    r.Read();
                                                                                    System.Collections.Generic.List<OpenIZ.Core.Model.DataTypes.EntityExtension> _instance = ((System.Collections.Generic.List<OpenIZ.Core.Model.DataTypes.EntityExtension>)(context.JsonContext.ReadElementUtil(r, typeof(System.Collections.Generic.List<OpenIZ.Core.Model.DataTypes.EntityExtension>), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("extension", context.JsonContext, _retVal, context))));
                                                                                    if ((_instance != null)) {
                                                                                        _retVal.Extensions = _instance;
                                                                                    }
                                                                                }
                                                                                else {
                                                                                    if ("telecom".Equals(r.Value)) {
                                                                                        r.Read();
                                                                                        System.Collections.Generic.List<OpenIZ.Core.Model.Entities.EntityTelecomAddress> _instance = ((System.Collections.Generic.List<OpenIZ.Core.Model.Entities.EntityTelecomAddress>)(context.JsonContext.ReadElementUtil(r, typeof(System.Collections.Generic.List<OpenIZ.Core.Model.Entities.EntityTelecomAddress>), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("telecom", context.JsonContext, _retVal, context))));
                                                                                        if ((_instance != null)) {
                                                                                            _retVal.Telecoms = _instance;
                                                                                        }
                                                                                    }
                                                                                    else {
                                                                                        if ("relationship".Equals(r.Value)) {
                                                                                            r.Read();
                                                                                            System.Collections.Generic.List<OpenIZ.Core.Model.Entities.EntityRelationship> _instance = ((System.Collections.Generic.List<OpenIZ.Core.Model.Entities.EntityRelationship>)(context.JsonContext.ReadElementUtil(r, typeof(System.Collections.Generic.List<OpenIZ.Core.Model.Entities.EntityRelationship>), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("relationship", context.JsonContext, _retVal, context))));
                                                                                            if ((_instance != null)) {
                                                                                                _retVal.Relationships = _instance;
                                                                                            }
                                                                                        }
                                                                                        else {
                                                                                            if ("identifier".Equals(r.Value)) {
                                                                                                r.Read();
                                                                                                System.Collections.Generic.List<OpenIZ.Core.Model.DataTypes.EntityIdentifier> _instance = ((System.Collections.Generic.List<OpenIZ.Core.Model.DataTypes.EntityIdentifier>)(context.JsonContext.ReadElementUtil(r, typeof(System.Collections.Generic.List<OpenIZ.Core.Model.DataTypes.EntityIdentifier>), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("identifier", context.JsonContext, _retVal, context))));
                                                                                                if ((_instance != null)) {
                                                                                                    _retVal.Identifiers = _instance;
                                                                                                }
                                                                                            }
                                                                                            else {
                                                                                                if ("typeConceptModel".Equals(r.Value)) {
                                                                                                    r.Read();
                                                                                                    OpenIZ.Core.Model.DataTypes.Concept _instance = ((OpenIZ.Core.Model.DataTypes.Concept)(context.JsonContext.ReadElementUtil(r, typeof(OpenIZ.Core.Model.DataTypes.Concept), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("typeConceptModel", context.JsonContext, _retVal, context))));
                                                                                                    if ((_instance != null)) {
                                                                                                        _retVal.TypeConcept = _instance;
                                                                                                    }
                                                                                                }
                                                                                                else {
                                                                                                    if ("creationActModel".Equals(r.Value)) {
                                                                                                        r.Read();
                                                                                                        OpenIZ.Core.Model.Acts.Act _instance = ((OpenIZ.Core.Model.Acts.Act)(context.JsonContext.ReadElementUtil(r, typeof(OpenIZ.Core.Model.Acts.Act), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("creationActModel", context.JsonContext, _retVal, context))));
                                                                                                        if ((_instance != null)) {
                                                                                                            _retVal.CreationAct = _instance;
                                                                                                        }
                                                                                                    }
                                                                                                    else {
                                                                                                        if ("statusConceptModel".Equals(r.Value)) {
                                                                                                            r.Read();
                                                                                                            OpenIZ.Core.Model.DataTypes.Concept _instance = ((OpenIZ.Core.Model.DataTypes.Concept)(context.JsonContext.ReadElementUtil(r, typeof(OpenIZ.Core.Model.DataTypes.Concept), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("statusConceptModel", context.JsonContext, _retVal, context))));
                                                                                                            if ((_instance != null)) {
                                                                                                                _retVal.StatusConcept = _instance;
                                                                                                            }
                                                                                                        }
                                                                                                        else {
                                                                                                            if ("determinerConceptModel".Equals(r.Value)) {
                                                                                                                r.Read();
                                                                                                                OpenIZ.Core.Model.DataTypes.Concept _instance = ((OpenIZ.Core.Model.DataTypes.Concept)(context.JsonContext.ReadElementUtil(r, typeof(OpenIZ.Core.Model.DataTypes.Concept), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("determinerConceptModel", context.JsonContext, _retVal, context))));
                                                                                                                if ((_instance != null)) {
                                                                                                                    _retVal.DeterminerConcept = _instance;
                                                                                                                }
                                                                                                            }
                                                                                                            else {
                                                                                                                if ("classConceptModel".Equals(r.Value)) {
                                                                                                                    r.Read();
                                                                                                                    OpenIZ.Core.Model.DataTypes.Concept _instance = ((OpenIZ.Core.Model.DataTypes.Concept)(context.JsonContext.ReadElementUtil(r, typeof(OpenIZ.Core.Model.DataTypes.Concept), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("classConceptModel", context.JsonContext, _retVal, context))));
                                                                                                                    if ((_instance != null)) {
                                                                                                                        _retVal.ClassConcept = _instance;
                                                                                                                    }
                                                                                                                }
                                                                                                                else {
                                                                                                                    if ("typeConcept".Equals(r.Value)) {
                                                                                                                        r.Read();
                                                                                                                        System.Nullable<System.Guid> _instance = ((System.Nullable<System.Guid>)(context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<System.Guid>), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("typeConcept", context.JsonContext, _retVal, context))));
                                                                                                                        if ((_instance != null)) {
                                                                                                                            _retVal.TypeConceptKey = _instance;
                                                                                                                        }
                                                                                                                    }
                                                                                                                    else {
                                                                                                                        if ("creationAct".Equals(r.Value)) {
                                                                                                                            r.Read();
                                                                                                                            System.Nullable<System.Guid> _instance = ((System.Nullable<System.Guid>)(context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<System.Guid>), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("creationAct", context.JsonContext, _retVal, context))));
                                                                                                                            if ((_instance != null)) {
                                                                                                                                _retVal.CreationActKey = _instance;
                                                                                                                            }
                                                                                                                        }
                                                                                                                        else {
                                                                                                                            if ("statusConcept".Equals(r.Value)) {
                                                                                                                                r.Read();
                                                                                                                                System.Nullable<System.Guid> _instance = ((System.Nullable<System.Guid>)(context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<System.Guid>), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("statusConcept", context.JsonContext, _retVal, context))));
                                                                                                                                if ((_instance != null)) {
                                                                                                                                    _retVal.StatusConceptKey = _instance;
                                                                                                                                }
                                                                                                                            }
                                                                                                                            else {
                                                                                                                                if ("determinerConcept".Equals(r.Value)) {
                                                                                                                                    r.Read();
                                                                                                                                    System.Nullable<System.Guid> _instance = ((System.Nullable<System.Guid>)(context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<System.Guid>), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("determinerConcept", context.JsonContext, _retVal, context))));
                                                                                                                                    if ((_instance != null)) {
                                                                                                                                        _retVal.DeterminerConceptKey = _instance;
                                                                                                                                    }
                                                                                                                                }
                                                                                                                                else {
                                                                                                                                    if ("classConcept".Equals(r.Value)) {
                                                                                                                                        r.Read();
                                                                                                                                        System.Nullable<System.Guid> _instance = ((System.Nullable<System.Guid>)(context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<System.Guid>), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("classConcept", context.JsonContext, _retVal, context))));
                                                                                                                                        if ((_instance != null)) {
                                                                                                                                            _retVal.ClassConceptKey = _instance;
                                                                                                                                        }
                                                                                                                                    }
                                                                                                                                    else {
                                                                                                                                        if ("template".Equals(r.Value)) {
                                                                                                                                            r.Read();
                                                                                                                                            OpenIZ.Core.Model.DataTypes.TemplateDefinition _instance = ((OpenIZ.Core.Model.DataTypes.TemplateDefinition)(context.JsonContext.ReadElementUtil(r, typeof(OpenIZ.Core.Model.DataTypes.TemplateDefinition), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("template", context.JsonContext, _retVal, context))));
                                                                                                                                            if ((_instance != null)) {
                                                                                                                                                _retVal.Template = _instance;
                                                                                                                                            }
                                                                                                                                        }
                                                                                                                                        else {
                                                                                                                                            if ("language".Equals(r.Value)) {
                                                                                                                                                r.Read();
                                                                                                                                                System.Collections.Generic.List<OpenIZ.Core.Model.Entities.PersonLanguageCommunication> _instance = ((System.Collections.Generic.List<OpenIZ.Core.Model.Entities.PersonLanguageCommunication>)(context.JsonContext.ReadElementUtil(r, typeof(System.Collections.Generic.List<OpenIZ.Core.Model.Entities.PersonLanguageCommunication>), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("language", context.JsonContext, _retVal, context))));
                                                                                                                                                if ((_instance != null)) {
                                                                                                                                                    _retVal.LanguageCommunication = _instance;
                                                                                                                                                }
                                                                                                                                            }
                                                                                                                                            else {
                                                                                                                                                if ("dateOfBirthPrecision".Equals(r.Value)) {
                                                                                                                                                    r.Read();
                                                                                                                                                    System.Nullable<OpenIZ.Core.Model.DataTypes.DatePrecision> _instance = ((System.Nullable<OpenIZ.Core.Model.DataTypes.DatePrecision>)(context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<OpenIZ.Core.Model.DataTypes.DatePrecision>), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("dateOfBirthPrecision", context.JsonContext, _retVal, context))));
                                                                                                                                                    if ((_instance != null)) {
                                                                                                                                                        _retVal.DateOfBirthPrecision = _instance;
                                                                                                                                                    }
                                                                                                                                                }
                                                                                                                                                else {
                                                                                                                                                    if ("dateOfBirth".Equals(r.Value)) {
                                                                                                                                                        r.Read();
                                                                                                                                                        System.Nullable<System.DateTime> _instance = ((System.Nullable<System.DateTime>)(context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<System.DateTime>), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("dateOfBirth", context.JsonContext, _retVal, context))));
                                                                                                                                                        if ((_instance != null)) {
                                                                                                                                                            _retVal.DateOfBirth = _instance;
                                                                                                                                                        }
                                                                                                                                                    }
                                                                                                                                                    else {
                                                                                                                                                        if ("providerSpecialtyModel".Equals(r.Value)) {
                                                                                                                                                            r.Read();
                                                                                                                                                            OpenIZ.Core.Model.DataTypes.Concept _instance = ((OpenIZ.Core.Model.DataTypes.Concept)(context.JsonContext.ReadElementUtil(r, typeof(OpenIZ.Core.Model.DataTypes.Concept), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("providerSpecialtyModel", context.JsonContext, _retVal, context))));
                                                                                                                                                            if ((_instance != null)) {
                                                                                                                                                                _retVal.ProviderSpecialty = _instance;
                                                                                                                                                            }
                                                                                                                                                        }
                                                                                                                                                        else {
                                                                                                                                                            if ("providerSpecialty".Equals(r.Value)) {
                                                                                                                                                                r.Read();
                                                                                                                                                                System.Nullable<System.Guid> _instance = ((System.Nullable<System.Guid>)(context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<System.Guid>), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("providerSpecialty", context.JsonContext, _retVal, context))));
                                                                                                                                                                if ((_instance != null)) {
                                                                                                                                                                    _retVal.ProviderSpecialtyKey = _instance;
                                                                                                                                                                }
                                                                                                                                                            }
                                                                                                                                                            else {
                                                                                                                                                                if ("$type".Equals(r.Value)) {
                                                                                                                                                                    System.Type _type = this.m_binder.BindToType("OpenIZ.Core.Model, Version=0.6.14.21496, Culture=neutral, PublicKeyToken=null", r.ReadAsString());
                                                                                                                                                                    if ((_type != typeof(OpenIZ.Core.Model.Roles.Provider))) {
                                                                                                                                                                        OpenIZ.Core.Model.Roles.Provider _nretVal = ((OpenIZ.Core.Model.Roles.Provider)(context.JsonContext.GetFormatter(_type).Deserialize(r, _type, context)));
                                                                                                                                                                        _nretVal.CopyObjectData(_retVal);
                                                                                                                                                                        return _nretVal;
                                                                                                                                                                    }
                                                                                                                                                                }
                                                                                                                                                                else {
                                                                                                                                                                    r.Skip();
                                                                                                                                                                }
                                                                                                                                                            }
                                                                                                                                                        }
                                                                                                                                                    }
                                                                                                                                                }
                                                                                                                                            }
                                                                                                                                        }
                                                                                                                                    }
                                                                                                                                }
                                                                                                                            }
                                                                                                                        }
                                                                                                                    }
                                                                                                                }
                                                                                                            }
                                                                                                        }
                                                                                                    }
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
                else {
                    if (((r.TokenType == Newtonsoft.Json.JsonToken.EndObject) 
                                && (r.Depth == _depth))) {
                        return _retVal;
                    }
                    else {
                        throw new Newtonsoft.Json.JsonSerializationException("JSON in invalid state");
                    }
                }
            }
            return _retVal;
        }
        
        public object FromSimpleValue(object o) {
            return null;
        }
        
        public object GetSimpleValue(object o) {
            return null;
        }
    }
    
    public class PatchViewModelSerializer : OpenIZ.Core.Applets.ViewModel.Json.IJsonViewModelTypeFormatter {
        
        private OpenIZ.Core.Model.Serialization.ModelSerializationBinder m_binder = new OpenIZ.Core.Model.Serialization.ModelSerializationBinder();
        
        private OpenIZ.Core.Diagnostics.Tracer m_tracer = OpenIZ.Core.Diagnostics.Tracer.GetTracer(typeof(PatchViewModelSerializer));
        
        public System.Type HandlesType {
            get {
                return typeof(OpenIZ.Core.Model.Patch.Patch);
            }
        }
        
        public void Serialize(Newtonsoft.Json.JsonWriter w, OpenIZ.Core.Model.IdentifiedData o, OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext context) {
            if ((o == null)) {
                throw new System.ArgumentNullException("o");
            }
            OpenIZ.Core.Model.Patch.Patch _strong = null;
            OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext _jsonContext = null;
            bool _loaded = false;
            try {
                _strong = ((OpenIZ.Core.Model.Patch.Patch)(o));
            }
            catch (System.Exception e) {
                this.m_tracer.TraceError(string.Format("Casting Error: {0}", e));
                throw new System.ArgumentException(string.Format("Invalid type {0} provided, expected {1}", o.GetType(), typeof(OpenIZ.Core.Model.Patch.Patch)));
            }
            if (context.ShouldSerialize("appliesTo")) {
                if ((_strong.AppliesTo == null)) {
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "appliesTo", _strong.AppliesTo, context);
                }
            }
            if (context.ShouldSerialize("change")) {
                if (((_strong.Operation == null) 
                            || (_strong.Operation.Count == 0))) {
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "change", _strong.Operation, context);
                }
            }
            if (context.ShouldSerialize("creationTimeModel")) {
                if ((_strong.CreationTime == null)) {
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "creationTimeModel", _strong.CreationTime, context);
                }
            }
            if (context.ShouldSerialize("creationTime")) {
                if ((_strong.CreationTimeXml == null)) {
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "creationTime", _strong.CreationTimeXml, context);
                }
            }
            if (context.ShouldSerialize("obsoletionTimeModel")) {
                if ((_strong.ObsoletionTime == null)) {
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "obsoletionTimeModel", _strong.ObsoletionTime, context);
                }
            }
            if (context.ShouldSerialize("obsoletionTime")) {
                if ((_strong.ObsoletionTimeXml == null)) {
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "obsoletionTime", _strong.ObsoletionTimeXml, context);
                }
            }
            if (context.ShouldSerialize("createdBy")) {
                if ((_strong.CreatedByKey == null)) {
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "createdBy", _strong.CreatedByKey, context);
                }
            }
            if (context.ShouldSerialize("obsoletedBy")) {
                if ((_strong.ObsoletedByKey == null)) {
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "obsoletedBy", _strong.ObsoletedByKey, context);
                }
            }
            if (context.ShouldSerialize("id")) {
                if ((_strong.Key == null)) {
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "id", _strong.Key, context);
                }
            }
            if (context.ShouldSerialize("etag")) {
                if ((_strong.Tag == null)) {
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "etag", _strong.Tag, context);
                }
            }
            if ((_loaded && _strong.Key.HasValue)) {
                ((OpenIZ.Core.Services.IDataCachingService)(OpenIZ.Core.ApplicationServiceContext.Current.GetService(typeof(OpenIZ.Core.Services.IDataCachingService)))).Add(_strong);
            }
        }
        
        public object Deserialize(Newtonsoft.Json.JsonReader r, System.Type asType, OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext context) {
            OpenIZ.Core.Model.Patch.Patch _retVal = new OpenIZ.Core.Model.Patch.Patch();
            int _depth = r.Depth;
            if ((r.TokenType != Newtonsoft.Json.JsonToken.StartObject)) {
                _depth = (_depth - 1);
            }
            for (
            ; r.Read(); 
            ) {
                if ((r.TokenType == Newtonsoft.Json.JsonToken.PropertyName)) {
                    if ("id".Equals(r.Value)) {
                        r.Read();
                        System.Nullable<System.Guid> _instance = ((System.Nullable<System.Guid>)(context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<System.Guid>), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("id", context.JsonContext, _retVal, context))));
                        if ((_instance != null)) {
                            _retVal.Key = _instance;
                        }
                    }
                    else {
                        if ("obsoletedBy".Equals(r.Value)) {
                            r.Read();
                            System.Nullable<System.Guid> _instance = ((System.Nullable<System.Guid>)(context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<System.Guid>), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("obsoletedBy", context.JsonContext, _retVal, context))));
                            if ((_instance != null)) {
                                _retVal.ObsoletedByKey = _instance;
                            }
                        }
                        else {
                            if ("createdBy".Equals(r.Value)) {
                                r.Read();
                                System.Nullable<System.Guid> _instance = ((System.Nullable<System.Guid>)(context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<System.Guid>), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("createdBy", context.JsonContext, _retVal, context))));
                                if ((_instance != null)) {
                                    _retVal.CreatedByKey = _instance;
                                }
                            }
                            else {
                                if ("obsoletionTime".Equals(r.Value)) {
                                    r.Read();
                                    string _instance = ((string)(context.JsonContext.ReadElementUtil(r, typeof(string), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("obsoletionTime", context.JsonContext, _retVal, context))));
                                    if ((_instance != null)) {
                                        _retVal.ObsoletionTimeXml = _instance;
                                    }
                                }
                                else {
                                    if ("obsoletionTimeModel".Equals(r.Value)) {
                                        r.Read();
                                        System.Nullable<System.DateTimeOffset> _instance = ((System.Nullable<System.DateTimeOffset>)(context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<System.DateTimeOffset>), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("obsoletionTimeModel", context.JsonContext, _retVal, context))));
                                        if ((_instance != null)) {
                                            _retVal.ObsoletionTime = _instance;
                                        }
                                    }
                                    else {
                                        if ("creationTime".Equals(r.Value)) {
                                            r.Read();
                                            string _instance = ((string)(context.JsonContext.ReadElementUtil(r, typeof(string), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("creationTime", context.JsonContext, _retVal, context))));
                                            if ((_instance != null)) {
                                                _retVal.CreationTimeXml = _instance;
                                            }
                                        }
                                        else {
                                            if ("creationTimeModel".Equals(r.Value)) {
                                                r.Read();
                                                System.DateTimeOffset _instance = ((System.DateTimeOffset)(context.JsonContext.ReadElementUtil(r, typeof(System.DateTimeOffset), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("creationTimeModel", context.JsonContext, _retVal, context))));
                                                if ((_instance != null)) {
                                                    _retVal.CreationTime = _instance;
                                                }
                                            }
                                            else {
                                                if ("change".Equals(r.Value)) {
                                                    r.Read();
                                                    System.Collections.Generic.List<OpenIZ.Core.Model.Patch.PatchOperation> _instance = ((System.Collections.Generic.List<OpenIZ.Core.Model.Patch.PatchOperation>)(context.JsonContext.ReadElementUtil(r, typeof(System.Collections.Generic.List<OpenIZ.Core.Model.Patch.PatchOperation>), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("change", context.JsonContext, _retVal, context))));
                                                    if ((_instance != null)) {
                                                        _retVal.Operation = _instance;
                                                    }
                                                }
                                                else {
                                                    if ("appliesTo".Equals(r.Value)) {
                                                        r.Read();
                                                        OpenIZ.Core.Model.Patch.PatchTarget _instance = ((OpenIZ.Core.Model.Patch.PatchTarget)(context.JsonContext.ReadElementUtil(r, typeof(OpenIZ.Core.Model.Patch.PatchTarget), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("appliesTo", context.JsonContext, _retVal, context))));
                                                        if ((_instance != null)) {
                                                            _retVal.AppliesTo = _instance;
                                                        }
                                                    }
                                                    else {
                                                        if ("$type".Equals(r.Value)) {
                                                            System.Type _type = this.m_binder.BindToType("OpenIZ.Core.Model, Version=0.6.14.21496, Culture=neutral, PublicKeyToken=null", r.ReadAsString());
                                                            if ((_type != typeof(OpenIZ.Core.Model.Patch.Patch))) {
                                                                OpenIZ.Core.Model.Patch.Patch _nretVal = ((OpenIZ.Core.Model.Patch.Patch)(context.JsonContext.GetFormatter(_type).Deserialize(r, _type, context)));
                                                                _nretVal.CopyObjectData(_retVal);
                                                                return _nretVal;
                                                            }
                                                        }
                                                        else {
                                                            r.Skip();
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
                else {
                    if (((r.TokenType == Newtonsoft.Json.JsonToken.EndObject) 
                                && (r.Depth == _depth))) {
                        return _retVal;
                    }
                    else {
                        throw new Newtonsoft.Json.JsonSerializationException("JSON in invalid state");
                    }
                }
            }
            return _retVal;
        }
        
        public object FromSimpleValue(object o) {
            return null;
        }
        
        public object GetSimpleValue(object o) {
            return null;
        }
    }
    
    public class UserEntityViewModelSerializer : OpenIZ.Core.Applets.ViewModel.Json.IJsonViewModelTypeFormatter {
        
        private OpenIZ.Core.Model.Serialization.ModelSerializationBinder m_binder = new OpenIZ.Core.Model.Serialization.ModelSerializationBinder();
        
        private OpenIZ.Core.Diagnostics.Tracer m_tracer = OpenIZ.Core.Diagnostics.Tracer.GetTracer(typeof(UserEntityViewModelSerializer));
        
        public System.Type HandlesType {
            get {
                return typeof(OpenIZ.Core.Model.Entities.UserEntity);
            }
        }
        
        public void Serialize(Newtonsoft.Json.JsonWriter w, OpenIZ.Core.Model.IdentifiedData o, OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext context) {
            if ((o == null)) {
                throw new System.ArgumentNullException("o");
            }
            OpenIZ.Core.Model.Entities.UserEntity _strong = null;
            OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext _jsonContext = null;
            bool _loaded = false;
            try {
                _strong = ((OpenIZ.Core.Model.Entities.UserEntity)(o));
            }
            catch (System.Exception e) {
                this.m_tracer.TraceError(string.Format("Casting Error: {0}", e));
                throw new System.ArgumentException(string.Format("Invalid type {0} provided, expected {1}", o.GetType(), typeof(OpenIZ.Core.Model.Entities.UserEntity)));
            }
            if (context.ShouldSerialize("securityUser")) {
                if ((_strong.SecurityUserKey == null)) {
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "securityUser", _strong.SecurityUserKey, context);
                }
            }
            if (context.ShouldSerialize("dateOfBirth")) {
                if ((_strong.DateOfBirth == null)) {
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "dateOfBirth", _strong.DateOfBirth, context);
                }
            }
            if (context.ShouldSerialize("dateOfBirthPrecision")) {
                if ((_strong.DateOfBirthPrecision == null)) {
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "dateOfBirthPrecision", _strong.DateOfBirthPrecision, context);
                }
            }
            if (context.ShouldSerialize("language")) {
                if (((_strong.LanguageCommunication == null) 
                            || (_strong.LanguageCommunication.Count == 0))) {
                    if ((_strong.Key.HasValue && context.ShouldForceLoad("language", _strong.Key.Value))) {
                        System.Collections.Generic.List<OpenIZ.Core.Model.Entities.PersonLanguageCommunication> _delay = null;
                        _delay = new System.Collections.Generic.List<OpenIZ.Core.Model.Entities.PersonLanguageCommunication>(context.JsonContext.LoadCollection<OpenIZ.Core.Model.Entities.PersonLanguageCommunication>(_strong.Key.Value));
                        _strong.LanguageCommunication = _delay;
                        if ((_delay.Count > 0)) {
                            _loaded = true;
                            context.JsonContext.WritePropertyUtil(w, "language", _strong.LanguageCommunication, context);
                        }
                    }
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "language", _strong.LanguageCommunication, context);
                }
            }
            if (context.ShouldSerialize("template")) {
                if ((_strong.Template == null)) {
                    if ((_strong.Key.HasValue && context.ShouldForceLoad("template", _strong.Key.Value))) {
                        OpenIZ.Core.Model.DataTypes.TemplateDefinition _delay = null;
                    }
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "template", _strong.Template, context);
                }
            }
            if (context.ShouldSerialize("classConcept")) {
                if ((_strong.ClassConceptKey == null)) {
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "classConcept", _strong.ClassConceptKey, context);
                }
            }
            if (context.ShouldSerialize("determinerConcept")) {
                if ((_strong.DeterminerConceptKey == null)) {
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "determinerConcept", _strong.DeterminerConceptKey, context);
                }
            }
            if (context.ShouldSerialize("statusConcept")) {
                if ((_strong.StatusConceptKey == null)) {
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "statusConcept", _strong.StatusConceptKey, context);
                }
            }
            if (context.ShouldSerialize("creationAct")) {
                if ((_strong.CreationActKey == null)) {
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "creationAct", _strong.CreationActKey, context);
                }
            }
            if (context.ShouldSerialize("typeConcept")) {
                if ((_strong.TypeConceptKey == null)) {
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "typeConcept", _strong.TypeConceptKey, context);
                }
            }
            if (context.ShouldSerialize("classConceptModel")) {
                if ((_strong.ClassConcept == null)) {
                    if ((_strong.Key.HasValue && context.ShouldForceLoad("classConceptModel", _strong.Key.Value))) {
                        OpenIZ.Core.Model.DataTypes.Concept _delay = null;
                        _delay = context.JsonContext.LoadRelated<OpenIZ.Core.Model.DataTypes.Concept>(_strong.ClassConceptKey);
                        _strong.ClassConcept = _delay;
                        if ((_delay != null)) {
                            _loaded = true;
                            context.JsonContext.WritePropertyUtil(w, "classConceptModel", _strong.ClassConcept, context);
                        }
                    }
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "classConceptModel", _strong.ClassConcept, context);
                }
            }
            if (context.ShouldSerialize("determinerConceptModel")) {
                if ((_strong.DeterminerConcept == null)) {
                    if ((_strong.Key.HasValue && context.ShouldForceLoad("determinerConceptModel", _strong.Key.Value))) {
                        OpenIZ.Core.Model.DataTypes.Concept _delay = null;
                        _delay = context.JsonContext.LoadRelated<OpenIZ.Core.Model.DataTypes.Concept>(_strong.DeterminerConceptKey);
                        _strong.DeterminerConcept = _delay;
                        if ((_delay != null)) {
                            _loaded = true;
                            context.JsonContext.WritePropertyUtil(w, "determinerConceptModel", _strong.DeterminerConcept, context);
                        }
                    }
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "determinerConceptModel", _strong.DeterminerConcept, context);
                }
            }
            if (context.ShouldSerialize("statusConceptModel")) {
                if ((_strong.StatusConcept == null)) {
                    if ((_strong.Key.HasValue && context.ShouldForceLoad("statusConceptModel", _strong.Key.Value))) {
                        OpenIZ.Core.Model.DataTypes.Concept _delay = null;
                        _delay = context.JsonContext.LoadRelated<OpenIZ.Core.Model.DataTypes.Concept>(_strong.StatusConceptKey);
                        _strong.StatusConcept = _delay;
                        if ((_delay != null)) {
                            _loaded = true;
                            context.JsonContext.WritePropertyUtil(w, "statusConceptModel", _strong.StatusConcept, context);
                        }
                    }
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "statusConceptModel", _strong.StatusConcept, context);
                }
            }
            if (context.ShouldSerialize("creationActModel")) {
                if ((_strong.CreationAct == null)) {
                    if ((_strong.Key.HasValue && context.ShouldForceLoad("creationActModel", _strong.Key.Value))) {
                        OpenIZ.Core.Model.Acts.Act _delay = null;
                        _delay = context.JsonContext.LoadRelated<OpenIZ.Core.Model.Acts.Act>(_strong.CreationActKey);
                        _strong.CreationAct = _delay;
                        if ((_delay != null)) {
                            _loaded = true;
                            context.JsonContext.WritePropertyUtil(w, "creationActModel", _strong.CreationAct, context);
                        }
                    }
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "creationActModel", _strong.CreationAct, context);
                }
            }
            if (context.ShouldSerialize("typeConceptModel")) {
                if ((_strong.TypeConcept == null)) {
                    if ((_strong.Key.HasValue && context.ShouldForceLoad("typeConceptModel", _strong.Key.Value))) {
                        OpenIZ.Core.Model.DataTypes.Concept _delay = null;
                        _delay = context.JsonContext.LoadRelated<OpenIZ.Core.Model.DataTypes.Concept>(_strong.TypeConceptKey);
                        _strong.TypeConcept = _delay;
                        if ((_delay != null)) {
                            _loaded = true;
                            context.JsonContext.WritePropertyUtil(w, "typeConceptModel", _strong.TypeConcept, context);
                        }
                    }
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "typeConceptModel", _strong.TypeConcept, context);
                }
            }
            if (context.ShouldSerialize("identifier")) {
                if (((_strong.Identifiers == null) 
                            || (_strong.Identifiers.Count == 0))) {
                    if ((_strong.Key.HasValue && context.ShouldForceLoad("identifier", _strong.Key.Value))) {
                        System.Collections.Generic.List<OpenIZ.Core.Model.DataTypes.EntityIdentifier> _delay = null;
                        _delay = new System.Collections.Generic.List<OpenIZ.Core.Model.DataTypes.EntityIdentifier>(context.JsonContext.LoadCollection<OpenIZ.Core.Model.DataTypes.EntityIdentifier>(_strong.Key.Value));
                        _strong.Identifiers = _delay;
                        if ((_delay.Count > 0)) {
                            _loaded = true;
                            context.JsonContext.WritePropertyUtil(w, "identifier", _strong.Identifiers, context);
                        }
                    }
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "identifier", _strong.Identifiers, context);
                }
            }
            if (context.ShouldSerialize("relationship")) {
                if (((_strong.Relationships == null) 
                            || (_strong.Relationships.Count == 0))) {
                    if ((_strong.Key.HasValue && context.ShouldForceLoad("relationship", _strong.Key.Value))) {
                        System.Collections.Generic.List<OpenIZ.Core.Model.Entities.EntityRelationship> _delay = null;
                        _delay = new System.Collections.Generic.List<OpenIZ.Core.Model.Entities.EntityRelationship>(context.JsonContext.LoadCollection<OpenIZ.Core.Model.Entities.EntityRelationship>(_strong.Key.Value));
                        _strong.Relationships = _delay;
                        if ((_delay.Count > 0)) {
                            _loaded = true;
                            context.JsonContext.WritePropertyUtil(w, "relationship", _strong.Relationships, context);
                        }
                    }
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "relationship", _strong.Relationships, context);
                }
            }
            if (context.ShouldSerialize("telecom")) {
                if (((_strong.Telecoms == null) 
                            || (_strong.Telecoms.Count == 0))) {
                    if ((_strong.Key.HasValue && context.ShouldForceLoad("telecom", _strong.Key.Value))) {
                        System.Collections.Generic.List<OpenIZ.Core.Model.Entities.EntityTelecomAddress> _delay = null;
                        _delay = new System.Collections.Generic.List<OpenIZ.Core.Model.Entities.EntityTelecomAddress>(context.JsonContext.LoadCollection<OpenIZ.Core.Model.Entities.EntityTelecomAddress>(_strong.Key.Value));
                        _strong.Telecoms = _delay;
                        if ((_delay.Count > 0)) {
                            _loaded = true;
                            context.JsonContext.WritePropertyUtil(w, "telecom", _strong.Telecoms, context);
                        }
                    }
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "telecom", _strong.Telecoms, context);
                }
            }
            if (context.ShouldSerialize("extension")) {
                if (((_strong.Extensions == null) 
                            || (_strong.Extensions.Count == 0))) {
                    if ((_strong.Key.HasValue && context.ShouldForceLoad("extension", _strong.Key.Value))) {
                        System.Collections.Generic.List<OpenIZ.Core.Model.DataTypes.EntityExtension> _delay = null;
                        _delay = new System.Collections.Generic.List<OpenIZ.Core.Model.DataTypes.EntityExtension>(context.JsonContext.LoadCollection<OpenIZ.Core.Model.DataTypes.EntityExtension>(_strong.Key.Value));
                        _strong.Extensions = _delay;
                        if ((_delay.Count > 0)) {
                            _loaded = true;
                            context.JsonContext.WritePropertyUtil(w, "extension", _strong.Extensions, context);
                        }
                    }
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "extension", _strong.Extensions, context);
                }
            }
            if (context.ShouldSerialize("name")) {
                if (((_strong.Names == null) 
                            || (_strong.Names.Count == 0))) {
                    if ((_strong.Key.HasValue && context.ShouldForceLoad("name", _strong.Key.Value))) {
                        System.Collections.Generic.List<OpenIZ.Core.Model.Entities.EntityName> _delay = null;
                        _delay = new System.Collections.Generic.List<OpenIZ.Core.Model.Entities.EntityName>(context.JsonContext.LoadCollection<OpenIZ.Core.Model.Entities.EntityName>(_strong.Key.Value));
                        _strong.Names = _delay;
                        if ((_delay.Count > 0)) {
                            _loaded = true;
                            context.JsonContext.WritePropertyUtil(w, "name", _strong.Names, context);
                        }
                    }
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "name", _strong.Names, context);
                }
            }
            if (context.ShouldSerialize("address")) {
                if (((_strong.Addresses == null) 
                            || (_strong.Addresses.Count == 0))) {
                    if ((_strong.Key.HasValue && context.ShouldForceLoad("address", _strong.Key.Value))) {
                        System.Collections.Generic.List<OpenIZ.Core.Model.Entities.EntityAddress> _delay = null;
                        _delay = new System.Collections.Generic.List<OpenIZ.Core.Model.Entities.EntityAddress>(context.JsonContext.LoadCollection<OpenIZ.Core.Model.Entities.EntityAddress>(_strong.Key.Value));
                        _strong.Addresses = _delay;
                        if ((_delay.Count > 0)) {
                            _loaded = true;
                            context.JsonContext.WritePropertyUtil(w, "address", _strong.Addresses, context);
                        }
                    }
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "address", _strong.Addresses, context);
                }
            }
            if (context.ShouldSerialize("note")) {
                if (((_strong.Notes == null) 
                            || (_strong.Notes.Count == 0))) {
                    if ((_strong.Key.HasValue && context.ShouldForceLoad("note", _strong.Key.Value))) {
                        System.Collections.Generic.List<OpenIZ.Core.Model.DataTypes.EntityNote> _delay = null;
                        _delay = new System.Collections.Generic.List<OpenIZ.Core.Model.DataTypes.EntityNote>(context.JsonContext.LoadCollection<OpenIZ.Core.Model.DataTypes.EntityNote>(_strong.Key.Value));
                        _strong.Notes = _delay;
                        if ((_delay.Count > 0)) {
                            _loaded = true;
                            context.JsonContext.WritePropertyUtil(w, "note", _strong.Notes, context);
                        }
                    }
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "note", _strong.Notes, context);
                }
            }
            if (context.ShouldSerialize("tag")) {
                if (((_strong.Tags == null) 
                            || (_strong.Tags.Count == 0))) {
                    if ((_strong.Key.HasValue && context.ShouldForceLoad("tag", _strong.Key.Value))) {
                        System.Collections.Generic.List<OpenIZ.Core.Model.DataTypes.EntityTag> _delay = null;
                        _delay = new System.Collections.Generic.List<OpenIZ.Core.Model.DataTypes.EntityTag>(context.JsonContext.LoadCollection<OpenIZ.Core.Model.DataTypes.EntityTag>(_strong.Key.Value));
                        _strong.Tags = _delay;
                        if ((_delay.Count > 0)) {
                            _loaded = true;
                            context.JsonContext.WritePropertyUtil(w, "tag", _strong.Tags, context);
                        }
                    }
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "tag", _strong.Tags, context);
                }
            }
            if (context.ShouldSerialize("participation")) {
                if (((_strong.Participations == null) 
                            || (_strong.Participations.Count == 0))) {
                    if ((_strong.Key.HasValue && context.ShouldForceLoad("participation", _strong.Key.Value))) {
                        System.Collections.Generic.List<OpenIZ.Core.Model.Acts.ActParticipation> _delay = null;
                        _delay = new System.Collections.Generic.List<OpenIZ.Core.Model.Acts.ActParticipation>(context.JsonContext.LoadCollection<OpenIZ.Core.Model.Acts.ActParticipation>(_strong.Key.Value));
                        _strong.Participations = _delay;
                        if ((_delay.Count > 0)) {
                            _loaded = true;
                            context.JsonContext.WritePropertyUtil(w, "participation", _strong.Participations, context);
                        }
                    }
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "participation", _strong.Participations, context);
                }
            }
            if (context.ShouldSerialize("etag")) {
                if ((_strong.Tag == null)) {
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "etag", _strong.Tag, context);
                }
            }
            if (context.ShouldSerialize("previousVersion")) {
                if ((_strong.PreviousVersionKey == null)) {
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "previousVersion", _strong.PreviousVersionKey, context);
                }
            }
            if (context.ShouldSerialize("version")) {
                if ((_strong.VersionKey == null)) {
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "version", _strong.VersionKey, context);
                }
            }
            if (context.ShouldSerialize("sequence")) {
                if ((_strong.VersionSequence == null)) {
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "sequence", _strong.VersionSequence, context);
                }
            }
            if (context.ShouldSerialize("creationTimeModel")) {
                if ((_strong.CreationTime == null)) {
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "creationTimeModel", _strong.CreationTime, context);
                }
            }
            if (context.ShouldSerialize("creationTime")) {
                if ((_strong.CreationTimeXml == null)) {
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "creationTime", _strong.CreationTimeXml, context);
                }
            }
            if (context.ShouldSerialize("obsoletionTimeModel")) {
                if ((_strong.ObsoletionTime == null)) {
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "obsoletionTimeModel", _strong.ObsoletionTime, context);
                }
            }
            if (context.ShouldSerialize("obsoletionTime")) {
                if ((_strong.ObsoletionTimeXml == null)) {
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "obsoletionTime", _strong.ObsoletionTimeXml, context);
                }
            }
            if (context.ShouldSerialize("createdBy")) {
                if ((_strong.CreatedByKey == null)) {
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "createdBy", _strong.CreatedByKey, context);
                }
            }
            if (context.ShouldSerialize("obsoletedBy")) {
                if ((_strong.ObsoletedByKey == null)) {
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "obsoletedBy", _strong.ObsoletedByKey, context);
                }
            }
            if (context.ShouldSerialize("id")) {
                if ((_strong.Key == null)) {
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "id", _strong.Key, context);
                }
            }
            if (((_loaded && _strong.Key.HasValue) 
                        && _strong.VersionKey.HasValue)) {
                ((OpenIZ.Core.Services.IDataCachingService)(OpenIZ.Core.ApplicationServiceContext.Current.GetService(typeof(OpenIZ.Core.Services.IDataCachingService)))).Add(_strong);
            }
        }
        
        public object Deserialize(Newtonsoft.Json.JsonReader r, System.Type asType, OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext context) {
            OpenIZ.Core.Model.Entities.UserEntity _retVal = new OpenIZ.Core.Model.Entities.UserEntity();
            int _depth = r.Depth;
            if ((r.TokenType != Newtonsoft.Json.JsonToken.StartObject)) {
                _depth = (_depth - 1);
            }
            for (
            ; r.Read(); 
            ) {
                if ((r.TokenType == Newtonsoft.Json.JsonToken.PropertyName)) {
                    if ("id".Equals(r.Value)) {
                        r.Read();
                        System.Nullable<System.Guid> _instance = ((System.Nullable<System.Guid>)(context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<System.Guid>), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("id", context.JsonContext, _retVal, context))));
                        if ((_instance != null)) {
                            _retVal.Key = _instance;
                        }
                    }
                    else {
                        if ("obsoletedBy".Equals(r.Value)) {
                            r.Read();
                            System.Nullable<System.Guid> _instance = ((System.Nullable<System.Guid>)(context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<System.Guid>), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("obsoletedBy", context.JsonContext, _retVal, context))));
                            if ((_instance != null)) {
                                _retVal.ObsoletedByKey = _instance;
                            }
                        }
                        else {
                            if ("createdBy".Equals(r.Value)) {
                                r.Read();
                                System.Nullable<System.Guid> _instance = ((System.Nullable<System.Guid>)(context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<System.Guid>), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("createdBy", context.JsonContext, _retVal, context))));
                                if ((_instance != null)) {
                                    _retVal.CreatedByKey = _instance;
                                }
                            }
                            else {
                                if ("obsoletionTime".Equals(r.Value)) {
                                    r.Read();
                                    string _instance = ((string)(context.JsonContext.ReadElementUtil(r, typeof(string), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("obsoletionTime", context.JsonContext, _retVal, context))));
                                    if ((_instance != null)) {
                                        _retVal.ObsoletionTimeXml = _instance;
                                    }
                                }
                                else {
                                    if ("obsoletionTimeModel".Equals(r.Value)) {
                                        r.Read();
                                        System.Nullable<System.DateTimeOffset> _instance = ((System.Nullable<System.DateTimeOffset>)(context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<System.DateTimeOffset>), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("obsoletionTimeModel", context.JsonContext, _retVal, context))));
                                        if ((_instance != null)) {
                                            _retVal.ObsoletionTime = _instance;
                                        }
                                    }
                                    else {
                                        if ("creationTime".Equals(r.Value)) {
                                            r.Read();
                                            string _instance = ((string)(context.JsonContext.ReadElementUtil(r, typeof(string), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("creationTime", context.JsonContext, _retVal, context))));
                                            if ((_instance != null)) {
                                                _retVal.CreationTimeXml = _instance;
                                            }
                                        }
                                        else {
                                            if ("creationTimeModel".Equals(r.Value)) {
                                                r.Read();
                                                System.DateTimeOffset _instance = ((System.DateTimeOffset)(context.JsonContext.ReadElementUtil(r, typeof(System.DateTimeOffset), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("creationTimeModel", context.JsonContext, _retVal, context))));
                                                if ((_instance != null)) {
                                                    _retVal.CreationTime = _instance;
                                                }
                                            }
                                            else {
                                                if ("sequence".Equals(r.Value)) {
                                                    r.Read();
                                                    System.Nullable<decimal> _instance = ((System.Nullable<decimal>)(context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<decimal>), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("sequence", context.JsonContext, _retVal, context))));
                                                    if ((_instance != null)) {
                                                        _retVal.VersionSequence = _instance;
                                                    }
                                                }
                                                else {
                                                    if ("version".Equals(r.Value)) {
                                                        r.Read();
                                                        System.Nullable<System.Guid> _instance = ((System.Nullable<System.Guid>)(context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<System.Guid>), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("version", context.JsonContext, _retVal, context))));
                                                        if ((_instance != null)) {
                                                            _retVal.VersionKey = _instance;
                                                        }
                                                    }
                                                    else {
                                                        if ("previousVersion".Equals(r.Value)) {
                                                            r.Read();
                                                            System.Nullable<System.Guid> _instance = ((System.Nullable<System.Guid>)(context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<System.Guid>), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("previousVersion", context.JsonContext, _retVal, context))));
                                                            if ((_instance != null)) {
                                                                _retVal.PreviousVersionKey = _instance;
                                                            }
                                                        }
                                                        else {
                                                            if ("participation".Equals(r.Value)) {
                                                                r.Read();
                                                                System.Collections.Generic.List<OpenIZ.Core.Model.Acts.ActParticipation> _instance = ((System.Collections.Generic.List<OpenIZ.Core.Model.Acts.ActParticipation>)(context.JsonContext.ReadElementUtil(r, typeof(System.Collections.Generic.List<OpenIZ.Core.Model.Acts.ActParticipation>), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("participation", context.JsonContext, _retVal, context))));
                                                                if ((_instance != null)) {
                                                                    _retVal.Participations = _instance;
                                                                }
                                                            }
                                                            else {
                                                                if ("tag".Equals(r.Value)) {
                                                                    r.Read();
                                                                    System.Collections.Generic.List<OpenIZ.Core.Model.DataTypes.EntityTag> _instance = ((System.Collections.Generic.List<OpenIZ.Core.Model.DataTypes.EntityTag>)(context.JsonContext.ReadElementUtil(r, typeof(System.Collections.Generic.List<OpenIZ.Core.Model.DataTypes.EntityTag>), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("tag", context.JsonContext, _retVal, context))));
                                                                    if ((_instance != null)) {
                                                                        _retVal.Tags = _instance;
                                                                    }
                                                                }
                                                                else {
                                                                    if ("note".Equals(r.Value)) {
                                                                        r.Read();
                                                                        System.Collections.Generic.List<OpenIZ.Core.Model.DataTypes.EntityNote> _instance = ((System.Collections.Generic.List<OpenIZ.Core.Model.DataTypes.EntityNote>)(context.JsonContext.ReadElementUtil(r, typeof(System.Collections.Generic.List<OpenIZ.Core.Model.DataTypes.EntityNote>), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("note", context.JsonContext, _retVal, context))));
                                                                        if ((_instance != null)) {
                                                                            _retVal.Notes = _instance;
                                                                        }
                                                                    }
                                                                    else {
                                                                        if ("address".Equals(r.Value)) {
                                                                            r.Read();
                                                                            System.Collections.Generic.List<OpenIZ.Core.Model.Entities.EntityAddress> _instance = ((System.Collections.Generic.List<OpenIZ.Core.Model.Entities.EntityAddress>)(context.JsonContext.ReadElementUtil(r, typeof(System.Collections.Generic.List<OpenIZ.Core.Model.Entities.EntityAddress>), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("address", context.JsonContext, _retVal, context))));
                                                                            if ((_instance != null)) {
                                                                                _retVal.Addresses = _instance;
                                                                            }
                                                                        }
                                                                        else {
                                                                            if ("name".Equals(r.Value)) {
                                                                                r.Read();
                                                                                System.Collections.Generic.List<OpenIZ.Core.Model.Entities.EntityName> _instance = ((System.Collections.Generic.List<OpenIZ.Core.Model.Entities.EntityName>)(context.JsonContext.ReadElementUtil(r, typeof(System.Collections.Generic.List<OpenIZ.Core.Model.Entities.EntityName>), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("name", context.JsonContext, _retVal, context))));
                                                                                if ((_instance != null)) {
                                                                                    _retVal.Names = _instance;
                                                                                }
                                                                            }
                                                                            else {
                                                                                if ("extension".Equals(r.Value)) {
                                                                                    r.Read();
                                                                                    System.Collections.Generic.List<OpenIZ.Core.Model.DataTypes.EntityExtension> _instance = ((System.Collections.Generic.List<OpenIZ.Core.Model.DataTypes.EntityExtension>)(context.JsonContext.ReadElementUtil(r, typeof(System.Collections.Generic.List<OpenIZ.Core.Model.DataTypes.EntityExtension>), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("extension", context.JsonContext, _retVal, context))));
                                                                                    if ((_instance != null)) {
                                                                                        _retVal.Extensions = _instance;
                                                                                    }
                                                                                }
                                                                                else {
                                                                                    if ("telecom".Equals(r.Value)) {
                                                                                        r.Read();
                                                                                        System.Collections.Generic.List<OpenIZ.Core.Model.Entities.EntityTelecomAddress> _instance = ((System.Collections.Generic.List<OpenIZ.Core.Model.Entities.EntityTelecomAddress>)(context.JsonContext.ReadElementUtil(r, typeof(System.Collections.Generic.List<OpenIZ.Core.Model.Entities.EntityTelecomAddress>), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("telecom", context.JsonContext, _retVal, context))));
                                                                                        if ((_instance != null)) {
                                                                                            _retVal.Telecoms = _instance;
                                                                                        }
                                                                                    }
                                                                                    else {
                                                                                        if ("relationship".Equals(r.Value)) {
                                                                                            r.Read();
                                                                                            System.Collections.Generic.List<OpenIZ.Core.Model.Entities.EntityRelationship> _instance = ((System.Collections.Generic.List<OpenIZ.Core.Model.Entities.EntityRelationship>)(context.JsonContext.ReadElementUtil(r, typeof(System.Collections.Generic.List<OpenIZ.Core.Model.Entities.EntityRelationship>), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("relationship", context.JsonContext, _retVal, context))));
                                                                                            if ((_instance != null)) {
                                                                                                _retVal.Relationships = _instance;
                                                                                            }
                                                                                        }
                                                                                        else {
                                                                                            if ("identifier".Equals(r.Value)) {
                                                                                                r.Read();
                                                                                                System.Collections.Generic.List<OpenIZ.Core.Model.DataTypes.EntityIdentifier> _instance = ((System.Collections.Generic.List<OpenIZ.Core.Model.DataTypes.EntityIdentifier>)(context.JsonContext.ReadElementUtil(r, typeof(System.Collections.Generic.List<OpenIZ.Core.Model.DataTypes.EntityIdentifier>), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("identifier", context.JsonContext, _retVal, context))));
                                                                                                if ((_instance != null)) {
                                                                                                    _retVal.Identifiers = _instance;
                                                                                                }
                                                                                            }
                                                                                            else {
                                                                                                if ("typeConceptModel".Equals(r.Value)) {
                                                                                                    r.Read();
                                                                                                    OpenIZ.Core.Model.DataTypes.Concept _instance = ((OpenIZ.Core.Model.DataTypes.Concept)(context.JsonContext.ReadElementUtil(r, typeof(OpenIZ.Core.Model.DataTypes.Concept), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("typeConceptModel", context.JsonContext, _retVal, context))));
                                                                                                    if ((_instance != null)) {
                                                                                                        _retVal.TypeConcept = _instance;
                                                                                                    }
                                                                                                }
                                                                                                else {
                                                                                                    if ("creationActModel".Equals(r.Value)) {
                                                                                                        r.Read();
                                                                                                        OpenIZ.Core.Model.Acts.Act _instance = ((OpenIZ.Core.Model.Acts.Act)(context.JsonContext.ReadElementUtil(r, typeof(OpenIZ.Core.Model.Acts.Act), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("creationActModel", context.JsonContext, _retVal, context))));
                                                                                                        if ((_instance != null)) {
                                                                                                            _retVal.CreationAct = _instance;
                                                                                                        }
                                                                                                    }
                                                                                                    else {
                                                                                                        if ("statusConceptModel".Equals(r.Value)) {
                                                                                                            r.Read();
                                                                                                            OpenIZ.Core.Model.DataTypes.Concept _instance = ((OpenIZ.Core.Model.DataTypes.Concept)(context.JsonContext.ReadElementUtil(r, typeof(OpenIZ.Core.Model.DataTypes.Concept), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("statusConceptModel", context.JsonContext, _retVal, context))));
                                                                                                            if ((_instance != null)) {
                                                                                                                _retVal.StatusConcept = _instance;
                                                                                                            }
                                                                                                        }
                                                                                                        else {
                                                                                                            if ("determinerConceptModel".Equals(r.Value)) {
                                                                                                                r.Read();
                                                                                                                OpenIZ.Core.Model.DataTypes.Concept _instance = ((OpenIZ.Core.Model.DataTypes.Concept)(context.JsonContext.ReadElementUtil(r, typeof(OpenIZ.Core.Model.DataTypes.Concept), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("determinerConceptModel", context.JsonContext, _retVal, context))));
                                                                                                                if ((_instance != null)) {
                                                                                                                    _retVal.DeterminerConcept = _instance;
                                                                                                                }
                                                                                                            }
                                                                                                            else {
                                                                                                                if ("classConceptModel".Equals(r.Value)) {
                                                                                                                    r.Read();
                                                                                                                    OpenIZ.Core.Model.DataTypes.Concept _instance = ((OpenIZ.Core.Model.DataTypes.Concept)(context.JsonContext.ReadElementUtil(r, typeof(OpenIZ.Core.Model.DataTypes.Concept), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("classConceptModel", context.JsonContext, _retVal, context))));
                                                                                                                    if ((_instance != null)) {
                                                                                                                        _retVal.ClassConcept = _instance;
                                                                                                                    }
                                                                                                                }
                                                                                                                else {
                                                                                                                    if ("typeConcept".Equals(r.Value)) {
                                                                                                                        r.Read();
                                                                                                                        System.Nullable<System.Guid> _instance = ((System.Nullable<System.Guid>)(context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<System.Guid>), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("typeConcept", context.JsonContext, _retVal, context))));
                                                                                                                        if ((_instance != null)) {
                                                                                                                            _retVal.TypeConceptKey = _instance;
                                                                                                                        }
                                                                                                                    }
                                                                                                                    else {
                                                                                                                        if ("creationAct".Equals(r.Value)) {
                                                                                                                            r.Read();
                                                                                                                            System.Nullable<System.Guid> _instance = ((System.Nullable<System.Guid>)(context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<System.Guid>), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("creationAct", context.JsonContext, _retVal, context))));
                                                                                                                            if ((_instance != null)) {
                                                                                                                                _retVal.CreationActKey = _instance;
                                                                                                                            }
                                                                                                                        }
                                                                                                                        else {
                                                                                                                            if ("statusConcept".Equals(r.Value)) {
                                                                                                                                r.Read();
                                                                                                                                System.Nullable<System.Guid> _instance = ((System.Nullable<System.Guid>)(context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<System.Guid>), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("statusConcept", context.JsonContext, _retVal, context))));
                                                                                                                                if ((_instance != null)) {
                                                                                                                                    _retVal.StatusConceptKey = _instance;
                                                                                                                                }
                                                                                                                            }
                                                                                                                            else {
                                                                                                                                if ("determinerConcept".Equals(r.Value)) {
                                                                                                                                    r.Read();
                                                                                                                                    System.Nullable<System.Guid> _instance = ((System.Nullable<System.Guid>)(context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<System.Guid>), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("determinerConcept", context.JsonContext, _retVal, context))));
                                                                                                                                    if ((_instance != null)) {
                                                                                                                                        _retVal.DeterminerConceptKey = _instance;
                                                                                                                                    }
                                                                                                                                }
                                                                                                                                else {
                                                                                                                                    if ("classConcept".Equals(r.Value)) {
                                                                                                                                        r.Read();
                                                                                                                                        System.Nullable<System.Guid> _instance = ((System.Nullable<System.Guid>)(context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<System.Guid>), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("classConcept", context.JsonContext, _retVal, context))));
                                                                                                                                        if ((_instance != null)) {
                                                                                                                                            _retVal.ClassConceptKey = _instance;
                                                                                                                                        }
                                                                                                                                    }
                                                                                                                                    else {
                                                                                                                                        if ("template".Equals(r.Value)) {
                                                                                                                                            r.Read();
                                                                                                                                            OpenIZ.Core.Model.DataTypes.TemplateDefinition _instance = ((OpenIZ.Core.Model.DataTypes.TemplateDefinition)(context.JsonContext.ReadElementUtil(r, typeof(OpenIZ.Core.Model.DataTypes.TemplateDefinition), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("template", context.JsonContext, _retVal, context))));
                                                                                                                                            if ((_instance != null)) {
                                                                                                                                                _retVal.Template = _instance;
                                                                                                                                            }
                                                                                                                                        }
                                                                                                                                        else {
                                                                                                                                            if ("language".Equals(r.Value)) {
                                                                                                                                                r.Read();
                                                                                                                                                System.Collections.Generic.List<OpenIZ.Core.Model.Entities.PersonLanguageCommunication> _instance = ((System.Collections.Generic.List<OpenIZ.Core.Model.Entities.PersonLanguageCommunication>)(context.JsonContext.ReadElementUtil(r, typeof(System.Collections.Generic.List<OpenIZ.Core.Model.Entities.PersonLanguageCommunication>), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("language", context.JsonContext, _retVal, context))));
                                                                                                                                                if ((_instance != null)) {
                                                                                                                                                    _retVal.LanguageCommunication = _instance;
                                                                                                                                                }
                                                                                                                                            }
                                                                                                                                            else {
                                                                                                                                                if ("dateOfBirthPrecision".Equals(r.Value)) {
                                                                                                                                                    r.Read();
                                                                                                                                                    System.Nullable<OpenIZ.Core.Model.DataTypes.DatePrecision> _instance = ((System.Nullable<OpenIZ.Core.Model.DataTypes.DatePrecision>)(context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<OpenIZ.Core.Model.DataTypes.DatePrecision>), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("dateOfBirthPrecision", context.JsonContext, _retVal, context))));
                                                                                                                                                    if ((_instance != null)) {
                                                                                                                                                        _retVal.DateOfBirthPrecision = _instance;
                                                                                                                                                    }
                                                                                                                                                }
                                                                                                                                                else {
                                                                                                                                                    if ("dateOfBirth".Equals(r.Value)) {
                                                                                                                                                        r.Read();
                                                                                                                                                        System.Nullable<System.DateTime> _instance = ((System.Nullable<System.DateTime>)(context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<System.DateTime>), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("dateOfBirth", context.JsonContext, _retVal, context))));
                                                                                                                                                        if ((_instance != null)) {
                                                                                                                                                            _retVal.DateOfBirth = _instance;
                                                                                                                                                        }
                                                                                                                                                    }
                                                                                                                                                    else {
                                                                                                                                                        if ("securityUser".Equals(r.Value)) {
                                                                                                                                                            r.Read();
                                                                                                                                                            System.Nullable<System.Guid> _instance = ((System.Nullable<System.Guid>)(context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<System.Guid>), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("securityUser", context.JsonContext, _retVal, context))));
                                                                                                                                                            if ((_instance != null)) {
                                                                                                                                                                _retVal.SecurityUserKey = _instance;
                                                                                                                                                            }
                                                                                                                                                        }
                                                                                                                                                        else {
                                                                                                                                                            if ("$type".Equals(r.Value)) {
                                                                                                                                                                System.Type _type = this.m_binder.BindToType("OpenIZ.Core.Model, Version=0.6.14.21496, Culture=neutral, PublicKeyToken=null", r.ReadAsString());
                                                                                                                                                                if ((_type != typeof(OpenIZ.Core.Model.Entities.UserEntity))) {
                                                                                                                                                                    OpenIZ.Core.Model.Entities.UserEntity _nretVal = ((OpenIZ.Core.Model.Entities.UserEntity)(context.JsonContext.GetFormatter(_type).Deserialize(r, _type, context)));
                                                                                                                                                                    _nretVal.CopyObjectData(_retVal);
                                                                                                                                                                    return _nretVal;
                                                                                                                                                                }
                                                                                                                                                            }
                                                                                                                                                            else {
                                                                                                                                                                r.Skip();
                                                                                                                                                            }
                                                                                                                                                        }
                                                                                                                                                    }
                                                                                                                                                }
                                                                                                                                            }
                                                                                                                                        }
                                                                                                                                    }
                                                                                                                                }
                                                                                                                            }
                                                                                                                        }
                                                                                                                    }
                                                                                                                }
                                                                                                            }
                                                                                                        }
                                                                                                    }
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
                else {
                    if (((r.TokenType == Newtonsoft.Json.JsonToken.EndObject) 
                                && (r.Depth == _depth))) {
                        return _retVal;
                    }
                    else {
                        throw new Newtonsoft.Json.JsonSerializationException("JSON in invalid state");
                    }
                }
            }
            return _retVal;
        }
        
        public object FromSimpleValue(object o) {
            return null;
        }
        
        public object GetSimpleValue(object o) {
            return null;
        }
    }
    
    public class ApplicationEntityViewModelSerializer : OpenIZ.Core.Applets.ViewModel.Json.IJsonViewModelTypeFormatter {
        
        private OpenIZ.Core.Model.Serialization.ModelSerializationBinder m_binder = new OpenIZ.Core.Model.Serialization.ModelSerializationBinder();
        
        private OpenIZ.Core.Diagnostics.Tracer m_tracer = OpenIZ.Core.Diagnostics.Tracer.GetTracer(typeof(ApplicationEntityViewModelSerializer));
        
        public System.Type HandlesType {
            get {
                return typeof(OpenIZ.Core.Model.Entities.ApplicationEntity);
            }
        }
        
        public void Serialize(Newtonsoft.Json.JsonWriter w, OpenIZ.Core.Model.IdentifiedData o, OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext context) {
            if ((o == null)) {
                throw new System.ArgumentNullException("o");
            }
            OpenIZ.Core.Model.Entities.ApplicationEntity _strong = null;
            OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext _jsonContext = null;
            bool _loaded = false;
            try {
                _strong = ((OpenIZ.Core.Model.Entities.ApplicationEntity)(o));
            }
            catch (System.Exception e) {
                this.m_tracer.TraceError(string.Format("Casting Error: {0}", e));
                throw new System.ArgumentException(string.Format("Invalid type {0} provided, expected {1}", o.GetType(), typeof(OpenIZ.Core.Model.Entities.ApplicationEntity)));
            }
            if (context.ShouldSerialize("securityApplication")) {
                if ((_strong.SecurityApplicationKey == null)) {
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "securityApplication", _strong.SecurityApplicationKey, context);
                }
            }
            if (context.ShouldSerialize("securityApplicationModel")) {
                if ((_strong.SecurityApplication == null)) {
                    if ((_strong.Key.HasValue && context.ShouldForceLoad("securityApplicationModel", _strong.Key.Value))) {
                        OpenIZ.Core.Model.Security.SecurityApplication _delay = null;
                        _delay = context.JsonContext.LoadRelated<OpenIZ.Core.Model.Security.SecurityApplication>(_strong.SecurityApplicationKey);
                        _strong.SecurityApplication = _delay;
                        if ((_delay != null)) {
                            _loaded = true;
                            context.JsonContext.WritePropertyUtil(w, "securityApplicationModel", _strong.SecurityApplication, context);
                        }
                    }
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "securityApplicationModel", _strong.SecurityApplication, context);
                }
            }
            if (context.ShouldSerialize("softwareName")) {
                if ((_strong.SoftwareName == null)) {
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "softwareName", _strong.SoftwareName, context);
                }
            }
            if (context.ShouldSerialize("versionName")) {
                if ((_strong.VersionName == null)) {
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "versionName", _strong.VersionName, context);
                }
            }
            if (context.ShouldSerialize("vendorName")) {
                if ((_strong.VendorName == null)) {
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "vendorName", _strong.VendorName, context);
                }
            }
            if (context.ShouldSerialize("template")) {
                if ((_strong.Template == null)) {
                    if ((_strong.Key.HasValue && context.ShouldForceLoad("template", _strong.Key.Value))) {
                        OpenIZ.Core.Model.DataTypes.TemplateDefinition _delay = null;
                    }
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "template", _strong.Template, context);
                }
            }
            if (context.ShouldSerialize("classConcept")) {
                if ((_strong.ClassConceptKey == null)) {
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "classConcept", _strong.ClassConceptKey, context);
                }
            }
            if (context.ShouldSerialize("determinerConcept")) {
                if ((_strong.DeterminerConceptKey == null)) {
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "determinerConcept", _strong.DeterminerConceptKey, context);
                }
            }
            if (context.ShouldSerialize("statusConcept")) {
                if ((_strong.StatusConceptKey == null)) {
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "statusConcept", _strong.StatusConceptKey, context);
                }
            }
            if (context.ShouldSerialize("creationAct")) {
                if ((_strong.CreationActKey == null)) {
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "creationAct", _strong.CreationActKey, context);
                }
            }
            if (context.ShouldSerialize("typeConcept")) {
                if ((_strong.TypeConceptKey == null)) {
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "typeConcept", _strong.TypeConceptKey, context);
                }
            }
            if (context.ShouldSerialize("classConceptModel")) {
                if ((_strong.ClassConcept == null)) {
                    if ((_strong.Key.HasValue && context.ShouldForceLoad("classConceptModel", _strong.Key.Value))) {
                        OpenIZ.Core.Model.DataTypes.Concept _delay = null;
                        _delay = context.JsonContext.LoadRelated<OpenIZ.Core.Model.DataTypes.Concept>(_strong.ClassConceptKey);
                        _strong.ClassConcept = _delay;
                        if ((_delay != null)) {
                            _loaded = true;
                            context.JsonContext.WritePropertyUtil(w, "classConceptModel", _strong.ClassConcept, context);
                        }
                    }
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "classConceptModel", _strong.ClassConcept, context);
                }
            }
            if (context.ShouldSerialize("determinerConceptModel")) {
                if ((_strong.DeterminerConcept == null)) {
                    if ((_strong.Key.HasValue && context.ShouldForceLoad("determinerConceptModel", _strong.Key.Value))) {
                        OpenIZ.Core.Model.DataTypes.Concept _delay = null;
                        _delay = context.JsonContext.LoadRelated<OpenIZ.Core.Model.DataTypes.Concept>(_strong.DeterminerConceptKey);
                        _strong.DeterminerConcept = _delay;
                        if ((_delay != null)) {
                            _loaded = true;
                            context.JsonContext.WritePropertyUtil(w, "determinerConceptModel", _strong.DeterminerConcept, context);
                        }
                    }
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "determinerConceptModel", _strong.DeterminerConcept, context);
                }
            }
            if (context.ShouldSerialize("statusConceptModel")) {
                if ((_strong.StatusConcept == null)) {
                    if ((_strong.Key.HasValue && context.ShouldForceLoad("statusConceptModel", _strong.Key.Value))) {
                        OpenIZ.Core.Model.DataTypes.Concept _delay = null;
                        _delay = context.JsonContext.LoadRelated<OpenIZ.Core.Model.DataTypes.Concept>(_strong.StatusConceptKey);
                        _strong.StatusConcept = _delay;
                        if ((_delay != null)) {
                            _loaded = true;
                            context.JsonContext.WritePropertyUtil(w, "statusConceptModel", _strong.StatusConcept, context);
                        }
                    }
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "statusConceptModel", _strong.StatusConcept, context);
                }
            }
            if (context.ShouldSerialize("creationActModel")) {
                if ((_strong.CreationAct == null)) {
                    if ((_strong.Key.HasValue && context.ShouldForceLoad("creationActModel", _strong.Key.Value))) {
                        OpenIZ.Core.Model.Acts.Act _delay = null;
                        _delay = context.JsonContext.LoadRelated<OpenIZ.Core.Model.Acts.Act>(_strong.CreationActKey);
                        _strong.CreationAct = _delay;
                        if ((_delay != null)) {
                            _loaded = true;
                            context.JsonContext.WritePropertyUtil(w, "creationActModel", _strong.CreationAct, context);
                        }
                    }
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "creationActModel", _strong.CreationAct, context);
                }
            }
            if (context.ShouldSerialize("typeConceptModel")) {
                if ((_strong.TypeConcept == null)) {
                    if ((_strong.Key.HasValue && context.ShouldForceLoad("typeConceptModel", _strong.Key.Value))) {
                        OpenIZ.Core.Model.DataTypes.Concept _delay = null;
                        _delay = context.JsonContext.LoadRelated<OpenIZ.Core.Model.DataTypes.Concept>(_strong.TypeConceptKey);
                        _strong.TypeConcept = _delay;
                        if ((_delay != null)) {
                            _loaded = true;
                            context.JsonContext.WritePropertyUtil(w, "typeConceptModel", _strong.TypeConcept, context);
                        }
                    }
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "typeConceptModel", _strong.TypeConcept, context);
                }
            }
            if (context.ShouldSerialize("identifier")) {
                if (((_strong.Identifiers == null) 
                            || (_strong.Identifiers.Count == 0))) {
                    if ((_strong.Key.HasValue && context.ShouldForceLoad("identifier", _strong.Key.Value))) {
                        System.Collections.Generic.List<OpenIZ.Core.Model.DataTypes.EntityIdentifier> _delay = null;
                        _delay = new System.Collections.Generic.List<OpenIZ.Core.Model.DataTypes.EntityIdentifier>(context.JsonContext.LoadCollection<OpenIZ.Core.Model.DataTypes.EntityIdentifier>(_strong.Key.Value));
                        _strong.Identifiers = _delay;
                        if ((_delay.Count > 0)) {
                            _loaded = true;
                            context.JsonContext.WritePropertyUtil(w, "identifier", _strong.Identifiers, context);
                        }
                    }
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "identifier", _strong.Identifiers, context);
                }
            }
            if (context.ShouldSerialize("relationship")) {
                if (((_strong.Relationships == null) 
                            || (_strong.Relationships.Count == 0))) {
                    if ((_strong.Key.HasValue && context.ShouldForceLoad("relationship", _strong.Key.Value))) {
                        System.Collections.Generic.List<OpenIZ.Core.Model.Entities.EntityRelationship> _delay = null;
                        _delay = new System.Collections.Generic.List<OpenIZ.Core.Model.Entities.EntityRelationship>(context.JsonContext.LoadCollection<OpenIZ.Core.Model.Entities.EntityRelationship>(_strong.Key.Value));
                        _strong.Relationships = _delay;
                        if ((_delay.Count > 0)) {
                            _loaded = true;
                            context.JsonContext.WritePropertyUtil(w, "relationship", _strong.Relationships, context);
                        }
                    }
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "relationship", _strong.Relationships, context);
                }
            }
            if (context.ShouldSerialize("telecom")) {
                if (((_strong.Telecoms == null) 
                            || (_strong.Telecoms.Count == 0))) {
                    if ((_strong.Key.HasValue && context.ShouldForceLoad("telecom", _strong.Key.Value))) {
                        System.Collections.Generic.List<OpenIZ.Core.Model.Entities.EntityTelecomAddress> _delay = null;
                        _delay = new System.Collections.Generic.List<OpenIZ.Core.Model.Entities.EntityTelecomAddress>(context.JsonContext.LoadCollection<OpenIZ.Core.Model.Entities.EntityTelecomAddress>(_strong.Key.Value));
                        _strong.Telecoms = _delay;
                        if ((_delay.Count > 0)) {
                            _loaded = true;
                            context.JsonContext.WritePropertyUtil(w, "telecom", _strong.Telecoms, context);
                        }
                    }
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "telecom", _strong.Telecoms, context);
                }
            }
            if (context.ShouldSerialize("extension")) {
                if (((_strong.Extensions == null) 
                            || (_strong.Extensions.Count == 0))) {
                    if ((_strong.Key.HasValue && context.ShouldForceLoad("extension", _strong.Key.Value))) {
                        System.Collections.Generic.List<OpenIZ.Core.Model.DataTypes.EntityExtension> _delay = null;
                        _delay = new System.Collections.Generic.List<OpenIZ.Core.Model.DataTypes.EntityExtension>(context.JsonContext.LoadCollection<OpenIZ.Core.Model.DataTypes.EntityExtension>(_strong.Key.Value));
                        _strong.Extensions = _delay;
                        if ((_delay.Count > 0)) {
                            _loaded = true;
                            context.JsonContext.WritePropertyUtil(w, "extension", _strong.Extensions, context);
                        }
                    }
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "extension", _strong.Extensions, context);
                }
            }
            if (context.ShouldSerialize("name")) {
                if (((_strong.Names == null) 
                            || (_strong.Names.Count == 0))) {
                    if ((_strong.Key.HasValue && context.ShouldForceLoad("name", _strong.Key.Value))) {
                        System.Collections.Generic.List<OpenIZ.Core.Model.Entities.EntityName> _delay = null;
                        _delay = new System.Collections.Generic.List<OpenIZ.Core.Model.Entities.EntityName>(context.JsonContext.LoadCollection<OpenIZ.Core.Model.Entities.EntityName>(_strong.Key.Value));
                        _strong.Names = _delay;
                        if ((_delay.Count > 0)) {
                            _loaded = true;
                            context.JsonContext.WritePropertyUtil(w, "name", _strong.Names, context);
                        }
                    }
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "name", _strong.Names, context);
                }
            }
            if (context.ShouldSerialize("address")) {
                if (((_strong.Addresses == null) 
                            || (_strong.Addresses.Count == 0))) {
                    if ((_strong.Key.HasValue && context.ShouldForceLoad("address", _strong.Key.Value))) {
                        System.Collections.Generic.List<OpenIZ.Core.Model.Entities.EntityAddress> _delay = null;
                        _delay = new System.Collections.Generic.List<OpenIZ.Core.Model.Entities.EntityAddress>(context.JsonContext.LoadCollection<OpenIZ.Core.Model.Entities.EntityAddress>(_strong.Key.Value));
                        _strong.Addresses = _delay;
                        if ((_delay.Count > 0)) {
                            _loaded = true;
                            context.JsonContext.WritePropertyUtil(w, "address", _strong.Addresses, context);
                        }
                    }
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "address", _strong.Addresses, context);
                }
            }
            if (context.ShouldSerialize("note")) {
                if (((_strong.Notes == null) 
                            || (_strong.Notes.Count == 0))) {
                    if ((_strong.Key.HasValue && context.ShouldForceLoad("note", _strong.Key.Value))) {
                        System.Collections.Generic.List<OpenIZ.Core.Model.DataTypes.EntityNote> _delay = null;
                        _delay = new System.Collections.Generic.List<OpenIZ.Core.Model.DataTypes.EntityNote>(context.JsonContext.LoadCollection<OpenIZ.Core.Model.DataTypes.EntityNote>(_strong.Key.Value));
                        _strong.Notes = _delay;
                        if ((_delay.Count > 0)) {
                            _loaded = true;
                            context.JsonContext.WritePropertyUtil(w, "note", _strong.Notes, context);
                        }
                    }
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "note", _strong.Notes, context);
                }
            }
            if (context.ShouldSerialize("tag")) {
                if (((_strong.Tags == null) 
                            || (_strong.Tags.Count == 0))) {
                    if ((_strong.Key.HasValue && context.ShouldForceLoad("tag", _strong.Key.Value))) {
                        System.Collections.Generic.List<OpenIZ.Core.Model.DataTypes.EntityTag> _delay = null;
                        _delay = new System.Collections.Generic.List<OpenIZ.Core.Model.DataTypes.EntityTag>(context.JsonContext.LoadCollection<OpenIZ.Core.Model.DataTypes.EntityTag>(_strong.Key.Value));
                        _strong.Tags = _delay;
                        if ((_delay.Count > 0)) {
                            _loaded = true;
                            context.JsonContext.WritePropertyUtil(w, "tag", _strong.Tags, context);
                        }
                    }
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "tag", _strong.Tags, context);
                }
            }
            if (context.ShouldSerialize("participation")) {
                if (((_strong.Participations == null) 
                            || (_strong.Participations.Count == 0))) {
                    if ((_strong.Key.HasValue && context.ShouldForceLoad("participation", _strong.Key.Value))) {
                        System.Collections.Generic.List<OpenIZ.Core.Model.Acts.ActParticipation> _delay = null;
                        _delay = new System.Collections.Generic.List<OpenIZ.Core.Model.Acts.ActParticipation>(context.JsonContext.LoadCollection<OpenIZ.Core.Model.Acts.ActParticipation>(_strong.Key.Value));
                        _strong.Participations = _delay;
                        if ((_delay.Count > 0)) {
                            _loaded = true;
                            context.JsonContext.WritePropertyUtil(w, "participation", _strong.Participations, context);
                        }
                    }
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "participation", _strong.Participations, context);
                }
            }
            if (context.ShouldSerialize("etag")) {
                if ((_strong.Tag == null)) {
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "etag", _strong.Tag, context);
                }
            }
            if (context.ShouldSerialize("previousVersion")) {
                if ((_strong.PreviousVersionKey == null)) {
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "previousVersion", _strong.PreviousVersionKey, context);
                }
            }
            if (context.ShouldSerialize("version")) {
                if ((_strong.VersionKey == null)) {
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "version", _strong.VersionKey, context);
                }
            }
            if (context.ShouldSerialize("sequence")) {
                if ((_strong.VersionSequence == null)) {
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "sequence", _strong.VersionSequence, context);
                }
            }
            if (context.ShouldSerialize("creationTimeModel")) {
                if ((_strong.CreationTime == null)) {
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "creationTimeModel", _strong.CreationTime, context);
                }
            }
            if (context.ShouldSerialize("creationTime")) {
                if ((_strong.CreationTimeXml == null)) {
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "creationTime", _strong.CreationTimeXml, context);
                }
            }
            if (context.ShouldSerialize("obsoletionTimeModel")) {
                if ((_strong.ObsoletionTime == null)) {
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "obsoletionTimeModel", _strong.ObsoletionTime, context);
                }
            }
            if (context.ShouldSerialize("obsoletionTime")) {
                if ((_strong.ObsoletionTimeXml == null)) {
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "obsoletionTime", _strong.ObsoletionTimeXml, context);
                }
            }
            if (context.ShouldSerialize("createdBy")) {
                if ((_strong.CreatedByKey == null)) {
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "createdBy", _strong.CreatedByKey, context);
                }
            }
            if (context.ShouldSerialize("obsoletedBy")) {
                if ((_strong.ObsoletedByKey == null)) {
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "obsoletedBy", _strong.ObsoletedByKey, context);
                }
            }
            if (context.ShouldSerialize("id")) {
                if ((_strong.Key == null)) {
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "id", _strong.Key, context);
                }
            }
            if (((_loaded && _strong.Key.HasValue) 
                        && _strong.VersionKey.HasValue)) {
                ((OpenIZ.Core.Services.IDataCachingService)(OpenIZ.Core.ApplicationServiceContext.Current.GetService(typeof(OpenIZ.Core.Services.IDataCachingService)))).Add(_strong);
            }
        }
        
        public object Deserialize(Newtonsoft.Json.JsonReader r, System.Type asType, OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext context) {
            OpenIZ.Core.Model.Entities.ApplicationEntity _retVal = new OpenIZ.Core.Model.Entities.ApplicationEntity();
            int _depth = r.Depth;
            if ((r.TokenType != Newtonsoft.Json.JsonToken.StartObject)) {
                _depth = (_depth - 1);
            }
            for (
            ; r.Read(); 
            ) {
                if ((r.TokenType == Newtonsoft.Json.JsonToken.PropertyName)) {
                    if ("id".Equals(r.Value)) {
                        r.Read();
                        System.Nullable<System.Guid> _instance = ((System.Nullable<System.Guid>)(context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<System.Guid>), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("id", context.JsonContext, _retVal, context))));
                        if ((_instance != null)) {
                            _retVal.Key = _instance;
                        }
                    }
                    else {
                        if ("obsoletedBy".Equals(r.Value)) {
                            r.Read();
                            System.Nullable<System.Guid> _instance = ((System.Nullable<System.Guid>)(context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<System.Guid>), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("obsoletedBy", context.JsonContext, _retVal, context))));
                            if ((_instance != null)) {
                                _retVal.ObsoletedByKey = _instance;
                            }
                        }
                        else {
                            if ("createdBy".Equals(r.Value)) {
                                r.Read();
                                System.Nullable<System.Guid> _instance = ((System.Nullable<System.Guid>)(context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<System.Guid>), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("createdBy", context.JsonContext, _retVal, context))));
                                if ((_instance != null)) {
                                    _retVal.CreatedByKey = _instance;
                                }
                            }
                            else {
                                if ("obsoletionTime".Equals(r.Value)) {
                                    r.Read();
                                    string _instance = ((string)(context.JsonContext.ReadElementUtil(r, typeof(string), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("obsoletionTime", context.JsonContext, _retVal, context))));
                                    if ((_instance != null)) {
                                        _retVal.ObsoletionTimeXml = _instance;
                                    }
                                }
                                else {
                                    if ("obsoletionTimeModel".Equals(r.Value)) {
                                        r.Read();
                                        System.Nullable<System.DateTimeOffset> _instance = ((System.Nullable<System.DateTimeOffset>)(context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<System.DateTimeOffset>), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("obsoletionTimeModel", context.JsonContext, _retVal, context))));
                                        if ((_instance != null)) {
                                            _retVal.ObsoletionTime = _instance;
                                        }
                                    }
                                    else {
                                        if ("creationTime".Equals(r.Value)) {
                                            r.Read();
                                            string _instance = ((string)(context.JsonContext.ReadElementUtil(r, typeof(string), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("creationTime", context.JsonContext, _retVal, context))));
                                            if ((_instance != null)) {
                                                _retVal.CreationTimeXml = _instance;
                                            }
                                        }
                                        else {
                                            if ("creationTimeModel".Equals(r.Value)) {
                                                r.Read();
                                                System.DateTimeOffset _instance = ((System.DateTimeOffset)(context.JsonContext.ReadElementUtil(r, typeof(System.DateTimeOffset), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("creationTimeModel", context.JsonContext, _retVal, context))));
                                                if ((_instance != null)) {
                                                    _retVal.CreationTime = _instance;
                                                }
                                            }
                                            else {
                                                if ("sequence".Equals(r.Value)) {
                                                    r.Read();
                                                    System.Nullable<decimal> _instance = ((System.Nullable<decimal>)(context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<decimal>), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("sequence", context.JsonContext, _retVal, context))));
                                                    if ((_instance != null)) {
                                                        _retVal.VersionSequence = _instance;
                                                    }
                                                }
                                                else {
                                                    if ("version".Equals(r.Value)) {
                                                        r.Read();
                                                        System.Nullable<System.Guid> _instance = ((System.Nullable<System.Guid>)(context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<System.Guid>), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("version", context.JsonContext, _retVal, context))));
                                                        if ((_instance != null)) {
                                                            _retVal.VersionKey = _instance;
                                                        }
                                                    }
                                                    else {
                                                        if ("previousVersion".Equals(r.Value)) {
                                                            r.Read();
                                                            System.Nullable<System.Guid> _instance = ((System.Nullable<System.Guid>)(context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<System.Guid>), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("previousVersion", context.JsonContext, _retVal, context))));
                                                            if ((_instance != null)) {
                                                                _retVal.PreviousVersionKey = _instance;
                                                            }
                                                        }
                                                        else {
                                                            if ("participation".Equals(r.Value)) {
                                                                r.Read();
                                                                System.Collections.Generic.List<OpenIZ.Core.Model.Acts.ActParticipation> _instance = ((System.Collections.Generic.List<OpenIZ.Core.Model.Acts.ActParticipation>)(context.JsonContext.ReadElementUtil(r, typeof(System.Collections.Generic.List<OpenIZ.Core.Model.Acts.ActParticipation>), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("participation", context.JsonContext, _retVal, context))));
                                                                if ((_instance != null)) {
                                                                    _retVal.Participations = _instance;
                                                                }
                                                            }
                                                            else {
                                                                if ("tag".Equals(r.Value)) {
                                                                    r.Read();
                                                                    System.Collections.Generic.List<OpenIZ.Core.Model.DataTypes.EntityTag> _instance = ((System.Collections.Generic.List<OpenIZ.Core.Model.DataTypes.EntityTag>)(context.JsonContext.ReadElementUtil(r, typeof(System.Collections.Generic.List<OpenIZ.Core.Model.DataTypes.EntityTag>), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("tag", context.JsonContext, _retVal, context))));
                                                                    if ((_instance != null)) {
                                                                        _retVal.Tags = _instance;
                                                                    }
                                                                }
                                                                else {
                                                                    if ("note".Equals(r.Value)) {
                                                                        r.Read();
                                                                        System.Collections.Generic.List<OpenIZ.Core.Model.DataTypes.EntityNote> _instance = ((System.Collections.Generic.List<OpenIZ.Core.Model.DataTypes.EntityNote>)(context.JsonContext.ReadElementUtil(r, typeof(System.Collections.Generic.List<OpenIZ.Core.Model.DataTypes.EntityNote>), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("note", context.JsonContext, _retVal, context))));
                                                                        if ((_instance != null)) {
                                                                            _retVal.Notes = _instance;
                                                                        }
                                                                    }
                                                                    else {
                                                                        if ("address".Equals(r.Value)) {
                                                                            r.Read();
                                                                            System.Collections.Generic.List<OpenIZ.Core.Model.Entities.EntityAddress> _instance = ((System.Collections.Generic.List<OpenIZ.Core.Model.Entities.EntityAddress>)(context.JsonContext.ReadElementUtil(r, typeof(System.Collections.Generic.List<OpenIZ.Core.Model.Entities.EntityAddress>), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("address", context.JsonContext, _retVal, context))));
                                                                            if ((_instance != null)) {
                                                                                _retVal.Addresses = _instance;
                                                                            }
                                                                        }
                                                                        else {
                                                                            if ("name".Equals(r.Value)) {
                                                                                r.Read();
                                                                                System.Collections.Generic.List<OpenIZ.Core.Model.Entities.EntityName> _instance = ((System.Collections.Generic.List<OpenIZ.Core.Model.Entities.EntityName>)(context.JsonContext.ReadElementUtil(r, typeof(System.Collections.Generic.List<OpenIZ.Core.Model.Entities.EntityName>), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("name", context.JsonContext, _retVal, context))));
                                                                                if ((_instance != null)) {
                                                                                    _retVal.Names = _instance;
                                                                                }
                                                                            }
                                                                            else {
                                                                                if ("extension".Equals(r.Value)) {
                                                                                    r.Read();
                                                                                    System.Collections.Generic.List<OpenIZ.Core.Model.DataTypes.EntityExtension> _instance = ((System.Collections.Generic.List<OpenIZ.Core.Model.DataTypes.EntityExtension>)(context.JsonContext.ReadElementUtil(r, typeof(System.Collections.Generic.List<OpenIZ.Core.Model.DataTypes.EntityExtension>), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("extension", context.JsonContext, _retVal, context))));
                                                                                    if ((_instance != null)) {
                                                                                        _retVal.Extensions = _instance;
                                                                                    }
                                                                                }
                                                                                else {
                                                                                    if ("telecom".Equals(r.Value)) {
                                                                                        r.Read();
                                                                                        System.Collections.Generic.List<OpenIZ.Core.Model.Entities.EntityTelecomAddress> _instance = ((System.Collections.Generic.List<OpenIZ.Core.Model.Entities.EntityTelecomAddress>)(context.JsonContext.ReadElementUtil(r, typeof(System.Collections.Generic.List<OpenIZ.Core.Model.Entities.EntityTelecomAddress>), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("telecom", context.JsonContext, _retVal, context))));
                                                                                        if ((_instance != null)) {
                                                                                            _retVal.Telecoms = _instance;
                                                                                        }
                                                                                    }
                                                                                    else {
                                                                                        if ("relationship".Equals(r.Value)) {
                                                                                            r.Read();
                                                                                            System.Collections.Generic.List<OpenIZ.Core.Model.Entities.EntityRelationship> _instance = ((System.Collections.Generic.List<OpenIZ.Core.Model.Entities.EntityRelationship>)(context.JsonContext.ReadElementUtil(r, typeof(System.Collections.Generic.List<OpenIZ.Core.Model.Entities.EntityRelationship>), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("relationship", context.JsonContext, _retVal, context))));
                                                                                            if ((_instance != null)) {
                                                                                                _retVal.Relationships = _instance;
                                                                                            }
                                                                                        }
                                                                                        else {
                                                                                            if ("identifier".Equals(r.Value)) {
                                                                                                r.Read();
                                                                                                System.Collections.Generic.List<OpenIZ.Core.Model.DataTypes.EntityIdentifier> _instance = ((System.Collections.Generic.List<OpenIZ.Core.Model.DataTypes.EntityIdentifier>)(context.JsonContext.ReadElementUtil(r, typeof(System.Collections.Generic.List<OpenIZ.Core.Model.DataTypes.EntityIdentifier>), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("identifier", context.JsonContext, _retVal, context))));
                                                                                                if ((_instance != null)) {
                                                                                                    _retVal.Identifiers = _instance;
                                                                                                }
                                                                                            }
                                                                                            else {
                                                                                                if ("typeConceptModel".Equals(r.Value)) {
                                                                                                    r.Read();
                                                                                                    OpenIZ.Core.Model.DataTypes.Concept _instance = ((OpenIZ.Core.Model.DataTypes.Concept)(context.JsonContext.ReadElementUtil(r, typeof(OpenIZ.Core.Model.DataTypes.Concept), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("typeConceptModel", context.JsonContext, _retVal, context))));
                                                                                                    if ((_instance != null)) {
                                                                                                        _retVal.TypeConcept = _instance;
                                                                                                    }
                                                                                                }
                                                                                                else {
                                                                                                    if ("creationActModel".Equals(r.Value)) {
                                                                                                        r.Read();
                                                                                                        OpenIZ.Core.Model.Acts.Act _instance = ((OpenIZ.Core.Model.Acts.Act)(context.JsonContext.ReadElementUtil(r, typeof(OpenIZ.Core.Model.Acts.Act), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("creationActModel", context.JsonContext, _retVal, context))));
                                                                                                        if ((_instance != null)) {
                                                                                                            _retVal.CreationAct = _instance;
                                                                                                        }
                                                                                                    }
                                                                                                    else {
                                                                                                        if ("statusConceptModel".Equals(r.Value)) {
                                                                                                            r.Read();
                                                                                                            OpenIZ.Core.Model.DataTypes.Concept _instance = ((OpenIZ.Core.Model.DataTypes.Concept)(context.JsonContext.ReadElementUtil(r, typeof(OpenIZ.Core.Model.DataTypes.Concept), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("statusConceptModel", context.JsonContext, _retVal, context))));
                                                                                                            if ((_instance != null)) {
                                                                                                                _retVal.StatusConcept = _instance;
                                                                                                            }
                                                                                                        }
                                                                                                        else {
                                                                                                            if ("determinerConceptModel".Equals(r.Value)) {
                                                                                                                r.Read();
                                                                                                                OpenIZ.Core.Model.DataTypes.Concept _instance = ((OpenIZ.Core.Model.DataTypes.Concept)(context.JsonContext.ReadElementUtil(r, typeof(OpenIZ.Core.Model.DataTypes.Concept), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("determinerConceptModel", context.JsonContext, _retVal, context))));
                                                                                                                if ((_instance != null)) {
                                                                                                                    _retVal.DeterminerConcept = _instance;
                                                                                                                }
                                                                                                            }
                                                                                                            else {
                                                                                                                if ("classConceptModel".Equals(r.Value)) {
                                                                                                                    r.Read();
                                                                                                                    OpenIZ.Core.Model.DataTypes.Concept _instance = ((OpenIZ.Core.Model.DataTypes.Concept)(context.JsonContext.ReadElementUtil(r, typeof(OpenIZ.Core.Model.DataTypes.Concept), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("classConceptModel", context.JsonContext, _retVal, context))));
                                                                                                                    if ((_instance != null)) {
                                                                                                                        _retVal.ClassConcept = _instance;
                                                                                                                    }
                                                                                                                }
                                                                                                                else {
                                                                                                                    if ("typeConcept".Equals(r.Value)) {
                                                                                                                        r.Read();
                                                                                                                        System.Nullable<System.Guid> _instance = ((System.Nullable<System.Guid>)(context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<System.Guid>), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("typeConcept", context.JsonContext, _retVal, context))));
                                                                                                                        if ((_instance != null)) {
                                                                                                                            _retVal.TypeConceptKey = _instance;
                                                                                                                        }
                                                                                                                    }
                                                                                                                    else {
                                                                                                                        if ("creationAct".Equals(r.Value)) {
                                                                                                                            r.Read();
                                                                                                                            System.Nullable<System.Guid> _instance = ((System.Nullable<System.Guid>)(context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<System.Guid>), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("creationAct", context.JsonContext, _retVal, context))));
                                                                                                                            if ((_instance != null)) {
                                                                                                                                _retVal.CreationActKey = _instance;
                                                                                                                            }
                                                                                                                        }
                                                                                                                        else {
                                                                                                                            if ("statusConcept".Equals(r.Value)) {
                                                                                                                                r.Read();
                                                                                                                                System.Nullable<System.Guid> _instance = ((System.Nullable<System.Guid>)(context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<System.Guid>), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("statusConcept", context.JsonContext, _retVal, context))));
                                                                                                                                if ((_instance != null)) {
                                                                                                                                    _retVal.StatusConceptKey = _instance;
                                                                                                                                }
                                                                                                                            }
                                                                                                                            else {
                                                                                                                                if ("determinerConcept".Equals(r.Value)) {
                                                                                                                                    r.Read();
                                                                                                                                    System.Nullable<System.Guid> _instance = ((System.Nullable<System.Guid>)(context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<System.Guid>), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("determinerConcept", context.JsonContext, _retVal, context))));
                                                                                                                                    if ((_instance != null)) {
                                                                                                                                        _retVal.DeterminerConceptKey = _instance;
                                                                                                                                    }
                                                                                                                                }
                                                                                                                                else {
                                                                                                                                    if ("classConcept".Equals(r.Value)) {
                                                                                                                                        r.Read();
                                                                                                                                        System.Nullable<System.Guid> _instance = ((System.Nullable<System.Guid>)(context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<System.Guid>), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("classConcept", context.JsonContext, _retVal, context))));
                                                                                                                                        if ((_instance != null)) {
                                                                                                                                            _retVal.ClassConceptKey = _instance;
                                                                                                                                        }
                                                                                                                                    }
                                                                                                                                    else {
                                                                                                                                        if ("template".Equals(r.Value)) {
                                                                                                                                            r.Read();
                                                                                                                                            OpenIZ.Core.Model.DataTypes.TemplateDefinition _instance = ((OpenIZ.Core.Model.DataTypes.TemplateDefinition)(context.JsonContext.ReadElementUtil(r, typeof(OpenIZ.Core.Model.DataTypes.TemplateDefinition), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("template", context.JsonContext, _retVal, context))));
                                                                                                                                            if ((_instance != null)) {
                                                                                                                                                _retVal.Template = _instance;
                                                                                                                                            }
                                                                                                                                        }
                                                                                                                                        else {
                                                                                                                                            if ("vendorName".Equals(r.Value)) {
                                                                                                                                                r.Read();
                                                                                                                                                string _instance = ((string)(context.JsonContext.ReadElementUtil(r, typeof(string), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("vendorName", context.JsonContext, _retVal, context))));
                                                                                                                                                if ((_instance != null)) {
                                                                                                                                                    _retVal.VendorName = _instance;
                                                                                                                                                }
                                                                                                                                            }
                                                                                                                                            else {
                                                                                                                                                if ("versionName".Equals(r.Value)) {
                                                                                                                                                    r.Read();
                                                                                                                                                    string _instance = ((string)(context.JsonContext.ReadElementUtil(r, typeof(string), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("versionName", context.JsonContext, _retVal, context))));
                                                                                                                                                    if ((_instance != null)) {
                                                                                                                                                        _retVal.VersionName = _instance;
                                                                                                                                                    }
                                                                                                                                                }
                                                                                                                                                else {
                                                                                                                                                    if ("softwareName".Equals(r.Value)) {
                                                                                                                                                        r.Read();
                                                                                                                                                        string _instance = ((string)(context.JsonContext.ReadElementUtil(r, typeof(string), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("softwareName", context.JsonContext, _retVal, context))));
                                                                                                                                                        if ((_instance != null)) {
                                                                                                                                                            _retVal.SoftwareName = _instance;
                                                                                                                                                        }
                                                                                                                                                    }
                                                                                                                                                    else {
                                                                                                                                                        if ("securityApplicationModel".Equals(r.Value)) {
                                                                                                                                                            r.Read();
                                                                                                                                                            OpenIZ.Core.Model.Security.SecurityApplication _instance = ((OpenIZ.Core.Model.Security.SecurityApplication)(context.JsonContext.ReadElementUtil(r, typeof(OpenIZ.Core.Model.Security.SecurityApplication), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("securityApplicationModel", context.JsonContext, _retVal, context))));
                                                                                                                                                            if ((_instance != null)) {
                                                                                                                                                                _retVal.SecurityApplication = _instance;
                                                                                                                                                            }
                                                                                                                                                        }
                                                                                                                                                        else {
                                                                                                                                                            if ("securityApplication".Equals(r.Value)) {
                                                                                                                                                                r.Read();
                                                                                                                                                                System.Nullable<System.Guid> _instance = ((System.Nullable<System.Guid>)(context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<System.Guid>), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("securityApplication", context.JsonContext, _retVal, context))));
                                                                                                                                                                if ((_instance != null)) {
                                                                                                                                                                    _retVal.SecurityApplicationKey = _instance;
                                                                                                                                                                }
                                                                                                                                                            }
                                                                                                                                                            else {
                                                                                                                                                                if ("$type".Equals(r.Value)) {
                                                                                                                                                                    System.Type _type = this.m_binder.BindToType("OpenIZ.Core.Model, Version=0.6.14.21496, Culture=neutral, PublicKeyToken=null", r.ReadAsString());
                                                                                                                                                                    if ((_type != typeof(OpenIZ.Core.Model.Entities.ApplicationEntity))) {
                                                                                                                                                                        OpenIZ.Core.Model.Entities.ApplicationEntity _nretVal = ((OpenIZ.Core.Model.Entities.ApplicationEntity)(context.JsonContext.GetFormatter(_type).Deserialize(r, _type, context)));
                                                                                                                                                                        _nretVal.CopyObjectData(_retVal);
                                                                                                                                                                        return _nretVal;
                                                                                                                                                                    }
                                                                                                                                                                }
                                                                                                                                                                else {
                                                                                                                                                                    r.Skip();
                                                                                                                                                                }
                                                                                                                                                            }
                                                                                                                                                        }
                                                                                                                                                    }
                                                                                                                                                }
                                                                                                                                            }
                                                                                                                                        }
                                                                                                                                    }
                                                                                                                                }
                                                                                                                            }
                                                                                                                        }
                                                                                                                    }
                                                                                                                }
                                                                                                            }
                                                                                                        }
                                                                                                    }
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
                else {
                    if (((r.TokenType == Newtonsoft.Json.JsonToken.EndObject) 
                                && (r.Depth == _depth))) {
                        return _retVal;
                    }
                    else {
                        throw new Newtonsoft.Json.JsonSerializationException("JSON in invalid state");
                    }
                }
            }
            return _retVal;
        }
        
        public object FromSimpleValue(object o) {
            return null;
        }
        
        public object GetSimpleValue(object o) {
            return null;
        }
    }
    
    public class DeviceEntityViewModelSerializer : OpenIZ.Core.Applets.ViewModel.Json.IJsonViewModelTypeFormatter {
        
        private OpenIZ.Core.Model.Serialization.ModelSerializationBinder m_binder = new OpenIZ.Core.Model.Serialization.ModelSerializationBinder();
        
        private OpenIZ.Core.Diagnostics.Tracer m_tracer = OpenIZ.Core.Diagnostics.Tracer.GetTracer(typeof(DeviceEntityViewModelSerializer));
        
        public System.Type HandlesType {
            get {
                return typeof(OpenIZ.Core.Model.Entities.DeviceEntity);
            }
        }
        
        public void Serialize(Newtonsoft.Json.JsonWriter w, OpenIZ.Core.Model.IdentifiedData o, OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext context) {
            if ((o == null)) {
                throw new System.ArgumentNullException("o");
            }
            OpenIZ.Core.Model.Entities.DeviceEntity _strong = null;
            OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext _jsonContext = null;
            bool _loaded = false;
            try {
                _strong = ((OpenIZ.Core.Model.Entities.DeviceEntity)(o));
            }
            catch (System.Exception e) {
                this.m_tracer.TraceError(string.Format("Casting Error: {0}", e));
                throw new System.ArgumentException(string.Format("Invalid type {0} provided, expected {1}", o.GetType(), typeof(OpenIZ.Core.Model.Entities.DeviceEntity)));
            }
            if (context.ShouldSerialize("securityDevice")) {
                if ((_strong.SecurityDeviceKey == null)) {
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "securityDevice", _strong.SecurityDeviceKey, context);
                }
            }
            if (context.ShouldSerialize("securityDeviceModel")) {
                if ((_strong.SecurityDevice == null)) {
                    if ((_strong.Key.HasValue && context.ShouldForceLoad("securityDeviceModel", _strong.Key.Value))) {
                        OpenIZ.Core.Model.Security.SecurityDevice _delay = null;
                        _delay = context.JsonContext.LoadRelated<OpenIZ.Core.Model.Security.SecurityDevice>(_strong.SecurityDeviceKey);
                        _strong.SecurityDevice = _delay;
                        if ((_delay != null)) {
                            _loaded = true;
                            context.JsonContext.WritePropertyUtil(w, "securityDeviceModel", _strong.SecurityDevice, context);
                        }
                    }
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "securityDeviceModel", _strong.SecurityDevice, context);
                }
            }
            if (context.ShouldSerialize("manufacturerModelName")) {
                if ((_strong.ManufacturerModelName == null)) {
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "manufacturerModelName", _strong.ManufacturerModelName, context);
                }
            }
            if (context.ShouldSerialize("operatingSystemName")) {
                if ((_strong.OperatingSystemName == null)) {
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "operatingSystemName", _strong.OperatingSystemName, context);
                }
            }
            if (context.ShouldSerialize("template")) {
                if ((_strong.Template == null)) {
                    if ((_strong.Key.HasValue && context.ShouldForceLoad("template", _strong.Key.Value))) {
                        OpenIZ.Core.Model.DataTypes.TemplateDefinition _delay = null;
                    }
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "template", _strong.Template, context);
                }
            }
            if (context.ShouldSerialize("classConcept")) {
                if ((_strong.ClassConceptKey == null)) {
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "classConcept", _strong.ClassConceptKey, context);
                }
            }
            if (context.ShouldSerialize("determinerConcept")) {
                if ((_strong.DeterminerConceptKey == null)) {
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "determinerConcept", _strong.DeterminerConceptKey, context);
                }
            }
            if (context.ShouldSerialize("statusConcept")) {
                if ((_strong.StatusConceptKey == null)) {
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "statusConcept", _strong.StatusConceptKey, context);
                }
            }
            if (context.ShouldSerialize("creationAct")) {
                if ((_strong.CreationActKey == null)) {
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "creationAct", _strong.CreationActKey, context);
                }
            }
            if (context.ShouldSerialize("typeConcept")) {
                if ((_strong.TypeConceptKey == null)) {
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "typeConcept", _strong.TypeConceptKey, context);
                }
            }
            if (context.ShouldSerialize("classConceptModel")) {
                if ((_strong.ClassConcept == null)) {
                    if ((_strong.Key.HasValue && context.ShouldForceLoad("classConceptModel", _strong.Key.Value))) {
                        OpenIZ.Core.Model.DataTypes.Concept _delay = null;
                        _delay = context.JsonContext.LoadRelated<OpenIZ.Core.Model.DataTypes.Concept>(_strong.ClassConceptKey);
                        _strong.ClassConcept = _delay;
                        if ((_delay != null)) {
                            _loaded = true;
                            context.JsonContext.WritePropertyUtil(w, "classConceptModel", _strong.ClassConcept, context);
                        }
                    }
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "classConceptModel", _strong.ClassConcept, context);
                }
            }
            if (context.ShouldSerialize("determinerConceptModel")) {
                if ((_strong.DeterminerConcept == null)) {
                    if ((_strong.Key.HasValue && context.ShouldForceLoad("determinerConceptModel", _strong.Key.Value))) {
                        OpenIZ.Core.Model.DataTypes.Concept _delay = null;
                        _delay = context.JsonContext.LoadRelated<OpenIZ.Core.Model.DataTypes.Concept>(_strong.DeterminerConceptKey);
                        _strong.DeterminerConcept = _delay;
                        if ((_delay != null)) {
                            _loaded = true;
                            context.JsonContext.WritePropertyUtil(w, "determinerConceptModel", _strong.DeterminerConcept, context);
                        }
                    }
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "determinerConceptModel", _strong.DeterminerConcept, context);
                }
            }
            if (context.ShouldSerialize("statusConceptModel")) {
                if ((_strong.StatusConcept == null)) {
                    if ((_strong.Key.HasValue && context.ShouldForceLoad("statusConceptModel", _strong.Key.Value))) {
                        OpenIZ.Core.Model.DataTypes.Concept _delay = null;
                        _delay = context.JsonContext.LoadRelated<OpenIZ.Core.Model.DataTypes.Concept>(_strong.StatusConceptKey);
                        _strong.StatusConcept = _delay;
                        if ((_delay != null)) {
                            _loaded = true;
                            context.JsonContext.WritePropertyUtil(w, "statusConceptModel", _strong.StatusConcept, context);
                        }
                    }
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "statusConceptModel", _strong.StatusConcept, context);
                }
            }
            if (context.ShouldSerialize("creationActModel")) {
                if ((_strong.CreationAct == null)) {
                    if ((_strong.Key.HasValue && context.ShouldForceLoad("creationActModel", _strong.Key.Value))) {
                        OpenIZ.Core.Model.Acts.Act _delay = null;
                        _delay = context.JsonContext.LoadRelated<OpenIZ.Core.Model.Acts.Act>(_strong.CreationActKey);
                        _strong.CreationAct = _delay;
                        if ((_delay != null)) {
                            _loaded = true;
                            context.JsonContext.WritePropertyUtil(w, "creationActModel", _strong.CreationAct, context);
                        }
                    }
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "creationActModel", _strong.CreationAct, context);
                }
            }
            if (context.ShouldSerialize("typeConceptModel")) {
                if ((_strong.TypeConcept == null)) {
                    if ((_strong.Key.HasValue && context.ShouldForceLoad("typeConceptModel", _strong.Key.Value))) {
                        OpenIZ.Core.Model.DataTypes.Concept _delay = null;
                        _delay = context.JsonContext.LoadRelated<OpenIZ.Core.Model.DataTypes.Concept>(_strong.TypeConceptKey);
                        _strong.TypeConcept = _delay;
                        if ((_delay != null)) {
                            _loaded = true;
                            context.JsonContext.WritePropertyUtil(w, "typeConceptModel", _strong.TypeConcept, context);
                        }
                    }
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "typeConceptModel", _strong.TypeConcept, context);
                }
            }
            if (context.ShouldSerialize("identifier")) {
                if (((_strong.Identifiers == null) 
                            || (_strong.Identifiers.Count == 0))) {
                    if ((_strong.Key.HasValue && context.ShouldForceLoad("identifier", _strong.Key.Value))) {
                        System.Collections.Generic.List<OpenIZ.Core.Model.DataTypes.EntityIdentifier> _delay = null;
                        _delay = new System.Collections.Generic.List<OpenIZ.Core.Model.DataTypes.EntityIdentifier>(context.JsonContext.LoadCollection<OpenIZ.Core.Model.DataTypes.EntityIdentifier>(_strong.Key.Value));
                        _strong.Identifiers = _delay;
                        if ((_delay.Count > 0)) {
                            _loaded = true;
                            context.JsonContext.WritePropertyUtil(w, "identifier", _strong.Identifiers, context);
                        }
                    }
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "identifier", _strong.Identifiers, context);
                }
            }
            if (context.ShouldSerialize("relationship")) {
                if (((_strong.Relationships == null) 
                            || (_strong.Relationships.Count == 0))) {
                    if ((_strong.Key.HasValue && context.ShouldForceLoad("relationship", _strong.Key.Value))) {
                        System.Collections.Generic.List<OpenIZ.Core.Model.Entities.EntityRelationship> _delay = null;
                        _delay = new System.Collections.Generic.List<OpenIZ.Core.Model.Entities.EntityRelationship>(context.JsonContext.LoadCollection<OpenIZ.Core.Model.Entities.EntityRelationship>(_strong.Key.Value));
                        _strong.Relationships = _delay;
                        if ((_delay.Count > 0)) {
                            _loaded = true;
                            context.JsonContext.WritePropertyUtil(w, "relationship", _strong.Relationships, context);
                        }
                    }
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "relationship", _strong.Relationships, context);
                }
            }
            if (context.ShouldSerialize("telecom")) {
                if (((_strong.Telecoms == null) 
                            || (_strong.Telecoms.Count == 0))) {
                    if ((_strong.Key.HasValue && context.ShouldForceLoad("telecom", _strong.Key.Value))) {
                        System.Collections.Generic.List<OpenIZ.Core.Model.Entities.EntityTelecomAddress> _delay = null;
                        _delay = new System.Collections.Generic.List<OpenIZ.Core.Model.Entities.EntityTelecomAddress>(context.JsonContext.LoadCollection<OpenIZ.Core.Model.Entities.EntityTelecomAddress>(_strong.Key.Value));
                        _strong.Telecoms = _delay;
                        if ((_delay.Count > 0)) {
                            _loaded = true;
                            context.JsonContext.WritePropertyUtil(w, "telecom", _strong.Telecoms, context);
                        }
                    }
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "telecom", _strong.Telecoms, context);
                }
            }
            if (context.ShouldSerialize("extension")) {
                if (((_strong.Extensions == null) 
                            || (_strong.Extensions.Count == 0))) {
                    if ((_strong.Key.HasValue && context.ShouldForceLoad("extension", _strong.Key.Value))) {
                        System.Collections.Generic.List<OpenIZ.Core.Model.DataTypes.EntityExtension> _delay = null;
                        _delay = new System.Collections.Generic.List<OpenIZ.Core.Model.DataTypes.EntityExtension>(context.JsonContext.LoadCollection<OpenIZ.Core.Model.DataTypes.EntityExtension>(_strong.Key.Value));
                        _strong.Extensions = _delay;
                        if ((_delay.Count > 0)) {
                            _loaded = true;
                            context.JsonContext.WritePropertyUtil(w, "extension", _strong.Extensions, context);
                        }
                    }
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "extension", _strong.Extensions, context);
                }
            }
            if (context.ShouldSerialize("name")) {
                if (((_strong.Names == null) 
                            || (_strong.Names.Count == 0))) {
                    if ((_strong.Key.HasValue && context.ShouldForceLoad("name", _strong.Key.Value))) {
                        System.Collections.Generic.List<OpenIZ.Core.Model.Entities.EntityName> _delay = null;
                        _delay = new System.Collections.Generic.List<OpenIZ.Core.Model.Entities.EntityName>(context.JsonContext.LoadCollection<OpenIZ.Core.Model.Entities.EntityName>(_strong.Key.Value));
                        _strong.Names = _delay;
                        if ((_delay.Count > 0)) {
                            _loaded = true;
                            context.JsonContext.WritePropertyUtil(w, "name", _strong.Names, context);
                        }
                    }
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "name", _strong.Names, context);
                }
            }
            if (context.ShouldSerialize("address")) {
                if (((_strong.Addresses == null) 
                            || (_strong.Addresses.Count == 0))) {
                    if ((_strong.Key.HasValue && context.ShouldForceLoad("address", _strong.Key.Value))) {
                        System.Collections.Generic.List<OpenIZ.Core.Model.Entities.EntityAddress> _delay = null;
                        _delay = new System.Collections.Generic.List<OpenIZ.Core.Model.Entities.EntityAddress>(context.JsonContext.LoadCollection<OpenIZ.Core.Model.Entities.EntityAddress>(_strong.Key.Value));
                        _strong.Addresses = _delay;
                        if ((_delay.Count > 0)) {
                            _loaded = true;
                            context.JsonContext.WritePropertyUtil(w, "address", _strong.Addresses, context);
                        }
                    }
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "address", _strong.Addresses, context);
                }
            }
            if (context.ShouldSerialize("note")) {
                if (((_strong.Notes == null) 
                            || (_strong.Notes.Count == 0))) {
                    if ((_strong.Key.HasValue && context.ShouldForceLoad("note", _strong.Key.Value))) {
                        System.Collections.Generic.List<OpenIZ.Core.Model.DataTypes.EntityNote> _delay = null;
                        _delay = new System.Collections.Generic.List<OpenIZ.Core.Model.DataTypes.EntityNote>(context.JsonContext.LoadCollection<OpenIZ.Core.Model.DataTypes.EntityNote>(_strong.Key.Value));
                        _strong.Notes = _delay;
                        if ((_delay.Count > 0)) {
                            _loaded = true;
                            context.JsonContext.WritePropertyUtil(w, "note", _strong.Notes, context);
                        }
                    }
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "note", _strong.Notes, context);
                }
            }
            if (context.ShouldSerialize("tag")) {
                if (((_strong.Tags == null) 
                            || (_strong.Tags.Count == 0))) {
                    if ((_strong.Key.HasValue && context.ShouldForceLoad("tag", _strong.Key.Value))) {
                        System.Collections.Generic.List<OpenIZ.Core.Model.DataTypes.EntityTag> _delay = null;
                        _delay = new System.Collections.Generic.List<OpenIZ.Core.Model.DataTypes.EntityTag>(context.JsonContext.LoadCollection<OpenIZ.Core.Model.DataTypes.EntityTag>(_strong.Key.Value));
                        _strong.Tags = _delay;
                        if ((_delay.Count > 0)) {
                            _loaded = true;
                            context.JsonContext.WritePropertyUtil(w, "tag", _strong.Tags, context);
                        }
                    }
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "tag", _strong.Tags, context);
                }
            }
            if (context.ShouldSerialize("participation")) {
                if (((_strong.Participations == null) 
                            || (_strong.Participations.Count == 0))) {
                    if ((_strong.Key.HasValue && context.ShouldForceLoad("participation", _strong.Key.Value))) {
                        System.Collections.Generic.List<OpenIZ.Core.Model.Acts.ActParticipation> _delay = null;
                        _delay = new System.Collections.Generic.List<OpenIZ.Core.Model.Acts.ActParticipation>(context.JsonContext.LoadCollection<OpenIZ.Core.Model.Acts.ActParticipation>(_strong.Key.Value));
                        _strong.Participations = _delay;
                        if ((_delay.Count > 0)) {
                            _loaded = true;
                            context.JsonContext.WritePropertyUtil(w, "participation", _strong.Participations, context);
                        }
                    }
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "participation", _strong.Participations, context);
                }
            }
            if (context.ShouldSerialize("etag")) {
                if ((_strong.Tag == null)) {
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "etag", _strong.Tag, context);
                }
            }
            if (context.ShouldSerialize("previousVersion")) {
                if ((_strong.PreviousVersionKey == null)) {
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "previousVersion", _strong.PreviousVersionKey, context);
                }
            }
            if (context.ShouldSerialize("version")) {
                if ((_strong.VersionKey == null)) {
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "version", _strong.VersionKey, context);
                }
            }
            if (context.ShouldSerialize("sequence")) {
                if ((_strong.VersionSequence == null)) {
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "sequence", _strong.VersionSequence, context);
                }
            }
            if (context.ShouldSerialize("creationTimeModel")) {
                if ((_strong.CreationTime == null)) {
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "creationTimeModel", _strong.CreationTime, context);
                }
            }
            if (context.ShouldSerialize("creationTime")) {
                if ((_strong.CreationTimeXml == null)) {
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "creationTime", _strong.CreationTimeXml, context);
                }
            }
            if (context.ShouldSerialize("obsoletionTimeModel")) {
                if ((_strong.ObsoletionTime == null)) {
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "obsoletionTimeModel", _strong.ObsoletionTime, context);
                }
            }
            if (context.ShouldSerialize("obsoletionTime")) {
                if ((_strong.ObsoletionTimeXml == null)) {
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "obsoletionTime", _strong.ObsoletionTimeXml, context);
                }
            }
            if (context.ShouldSerialize("createdBy")) {
                if ((_strong.CreatedByKey == null)) {
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "createdBy", _strong.CreatedByKey, context);
                }
            }
            if (context.ShouldSerialize("obsoletedBy")) {
                if ((_strong.ObsoletedByKey == null)) {
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "obsoletedBy", _strong.ObsoletedByKey, context);
                }
            }
            if (context.ShouldSerialize("id")) {
                if ((_strong.Key == null)) {
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "id", _strong.Key, context);
                }
            }
            if (((_loaded && _strong.Key.HasValue) 
                        && _strong.VersionKey.HasValue)) {
                ((OpenIZ.Core.Services.IDataCachingService)(OpenIZ.Core.ApplicationServiceContext.Current.GetService(typeof(OpenIZ.Core.Services.IDataCachingService)))).Add(_strong);
            }
        }
        
        public object Deserialize(Newtonsoft.Json.JsonReader r, System.Type asType, OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext context) {
            OpenIZ.Core.Model.Entities.DeviceEntity _retVal = new OpenIZ.Core.Model.Entities.DeviceEntity();
            int _depth = r.Depth;
            if ((r.TokenType != Newtonsoft.Json.JsonToken.StartObject)) {
                _depth = (_depth - 1);
            }
            for (
            ; r.Read(); 
            ) {
                if ((r.TokenType == Newtonsoft.Json.JsonToken.PropertyName)) {
                    if ("id".Equals(r.Value)) {
                        r.Read();
                        System.Nullable<System.Guid> _instance = ((System.Nullable<System.Guid>)(context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<System.Guid>), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("id", context.JsonContext, _retVal, context))));
                        if ((_instance != null)) {
                            _retVal.Key = _instance;
                        }
                    }
                    else {
                        if ("obsoletedBy".Equals(r.Value)) {
                            r.Read();
                            System.Nullable<System.Guid> _instance = ((System.Nullable<System.Guid>)(context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<System.Guid>), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("obsoletedBy", context.JsonContext, _retVal, context))));
                            if ((_instance != null)) {
                                _retVal.ObsoletedByKey = _instance;
                            }
                        }
                        else {
                            if ("createdBy".Equals(r.Value)) {
                                r.Read();
                                System.Nullable<System.Guid> _instance = ((System.Nullable<System.Guid>)(context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<System.Guid>), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("createdBy", context.JsonContext, _retVal, context))));
                                if ((_instance != null)) {
                                    _retVal.CreatedByKey = _instance;
                                }
                            }
                            else {
                                if ("obsoletionTime".Equals(r.Value)) {
                                    r.Read();
                                    string _instance = ((string)(context.JsonContext.ReadElementUtil(r, typeof(string), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("obsoletionTime", context.JsonContext, _retVal, context))));
                                    if ((_instance != null)) {
                                        _retVal.ObsoletionTimeXml = _instance;
                                    }
                                }
                                else {
                                    if ("obsoletionTimeModel".Equals(r.Value)) {
                                        r.Read();
                                        System.Nullable<System.DateTimeOffset> _instance = ((System.Nullable<System.DateTimeOffset>)(context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<System.DateTimeOffset>), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("obsoletionTimeModel", context.JsonContext, _retVal, context))));
                                        if ((_instance != null)) {
                                            _retVal.ObsoletionTime = _instance;
                                        }
                                    }
                                    else {
                                        if ("creationTime".Equals(r.Value)) {
                                            r.Read();
                                            string _instance = ((string)(context.JsonContext.ReadElementUtil(r, typeof(string), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("creationTime", context.JsonContext, _retVal, context))));
                                            if ((_instance != null)) {
                                                _retVal.CreationTimeXml = _instance;
                                            }
                                        }
                                        else {
                                            if ("creationTimeModel".Equals(r.Value)) {
                                                r.Read();
                                                System.DateTimeOffset _instance = ((System.DateTimeOffset)(context.JsonContext.ReadElementUtil(r, typeof(System.DateTimeOffset), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("creationTimeModel", context.JsonContext, _retVal, context))));
                                                if ((_instance != null)) {
                                                    _retVal.CreationTime = _instance;
                                                }
                                            }
                                            else {
                                                if ("sequence".Equals(r.Value)) {
                                                    r.Read();
                                                    System.Nullable<decimal> _instance = ((System.Nullable<decimal>)(context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<decimal>), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("sequence", context.JsonContext, _retVal, context))));
                                                    if ((_instance != null)) {
                                                        _retVal.VersionSequence = _instance;
                                                    }
                                                }
                                                else {
                                                    if ("version".Equals(r.Value)) {
                                                        r.Read();
                                                        System.Nullable<System.Guid> _instance = ((System.Nullable<System.Guid>)(context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<System.Guid>), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("version", context.JsonContext, _retVal, context))));
                                                        if ((_instance != null)) {
                                                            _retVal.VersionKey = _instance;
                                                        }
                                                    }
                                                    else {
                                                        if ("previousVersion".Equals(r.Value)) {
                                                            r.Read();
                                                            System.Nullable<System.Guid> _instance = ((System.Nullable<System.Guid>)(context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<System.Guid>), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("previousVersion", context.JsonContext, _retVal, context))));
                                                            if ((_instance != null)) {
                                                                _retVal.PreviousVersionKey = _instance;
                                                            }
                                                        }
                                                        else {
                                                            if ("participation".Equals(r.Value)) {
                                                                r.Read();
                                                                System.Collections.Generic.List<OpenIZ.Core.Model.Acts.ActParticipation> _instance = ((System.Collections.Generic.List<OpenIZ.Core.Model.Acts.ActParticipation>)(context.JsonContext.ReadElementUtil(r, typeof(System.Collections.Generic.List<OpenIZ.Core.Model.Acts.ActParticipation>), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("participation", context.JsonContext, _retVal, context))));
                                                                if ((_instance != null)) {
                                                                    _retVal.Participations = _instance;
                                                                }
                                                            }
                                                            else {
                                                                if ("tag".Equals(r.Value)) {
                                                                    r.Read();
                                                                    System.Collections.Generic.List<OpenIZ.Core.Model.DataTypes.EntityTag> _instance = ((System.Collections.Generic.List<OpenIZ.Core.Model.DataTypes.EntityTag>)(context.JsonContext.ReadElementUtil(r, typeof(System.Collections.Generic.List<OpenIZ.Core.Model.DataTypes.EntityTag>), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("tag", context.JsonContext, _retVal, context))));
                                                                    if ((_instance != null)) {
                                                                        _retVal.Tags = _instance;
                                                                    }
                                                                }
                                                                else {
                                                                    if ("note".Equals(r.Value)) {
                                                                        r.Read();
                                                                        System.Collections.Generic.List<OpenIZ.Core.Model.DataTypes.EntityNote> _instance = ((System.Collections.Generic.List<OpenIZ.Core.Model.DataTypes.EntityNote>)(context.JsonContext.ReadElementUtil(r, typeof(System.Collections.Generic.List<OpenIZ.Core.Model.DataTypes.EntityNote>), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("note", context.JsonContext, _retVal, context))));
                                                                        if ((_instance != null)) {
                                                                            _retVal.Notes = _instance;
                                                                        }
                                                                    }
                                                                    else {
                                                                        if ("address".Equals(r.Value)) {
                                                                            r.Read();
                                                                            System.Collections.Generic.List<OpenIZ.Core.Model.Entities.EntityAddress> _instance = ((System.Collections.Generic.List<OpenIZ.Core.Model.Entities.EntityAddress>)(context.JsonContext.ReadElementUtil(r, typeof(System.Collections.Generic.List<OpenIZ.Core.Model.Entities.EntityAddress>), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("address", context.JsonContext, _retVal, context))));
                                                                            if ((_instance != null)) {
                                                                                _retVal.Addresses = _instance;
                                                                            }
                                                                        }
                                                                        else {
                                                                            if ("name".Equals(r.Value)) {
                                                                                r.Read();
                                                                                System.Collections.Generic.List<OpenIZ.Core.Model.Entities.EntityName> _instance = ((System.Collections.Generic.List<OpenIZ.Core.Model.Entities.EntityName>)(context.JsonContext.ReadElementUtil(r, typeof(System.Collections.Generic.List<OpenIZ.Core.Model.Entities.EntityName>), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("name", context.JsonContext, _retVal, context))));
                                                                                if ((_instance != null)) {
                                                                                    _retVal.Names = _instance;
                                                                                }
                                                                            }
                                                                            else {
                                                                                if ("extension".Equals(r.Value)) {
                                                                                    r.Read();
                                                                                    System.Collections.Generic.List<OpenIZ.Core.Model.DataTypes.EntityExtension> _instance = ((System.Collections.Generic.List<OpenIZ.Core.Model.DataTypes.EntityExtension>)(context.JsonContext.ReadElementUtil(r, typeof(System.Collections.Generic.List<OpenIZ.Core.Model.DataTypes.EntityExtension>), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("extension", context.JsonContext, _retVal, context))));
                                                                                    if ((_instance != null)) {
                                                                                        _retVal.Extensions = _instance;
                                                                                    }
                                                                                }
                                                                                else {
                                                                                    if ("telecom".Equals(r.Value)) {
                                                                                        r.Read();
                                                                                        System.Collections.Generic.List<OpenIZ.Core.Model.Entities.EntityTelecomAddress> _instance = ((System.Collections.Generic.List<OpenIZ.Core.Model.Entities.EntityTelecomAddress>)(context.JsonContext.ReadElementUtil(r, typeof(System.Collections.Generic.List<OpenIZ.Core.Model.Entities.EntityTelecomAddress>), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("telecom", context.JsonContext, _retVal, context))));
                                                                                        if ((_instance != null)) {
                                                                                            _retVal.Telecoms = _instance;
                                                                                        }
                                                                                    }
                                                                                    else {
                                                                                        if ("relationship".Equals(r.Value)) {
                                                                                            r.Read();
                                                                                            System.Collections.Generic.List<OpenIZ.Core.Model.Entities.EntityRelationship> _instance = ((System.Collections.Generic.List<OpenIZ.Core.Model.Entities.EntityRelationship>)(context.JsonContext.ReadElementUtil(r, typeof(System.Collections.Generic.List<OpenIZ.Core.Model.Entities.EntityRelationship>), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("relationship", context.JsonContext, _retVal, context))));
                                                                                            if ((_instance != null)) {
                                                                                                _retVal.Relationships = _instance;
                                                                                            }
                                                                                        }
                                                                                        else {
                                                                                            if ("identifier".Equals(r.Value)) {
                                                                                                r.Read();
                                                                                                System.Collections.Generic.List<OpenIZ.Core.Model.DataTypes.EntityIdentifier> _instance = ((System.Collections.Generic.List<OpenIZ.Core.Model.DataTypes.EntityIdentifier>)(context.JsonContext.ReadElementUtil(r, typeof(System.Collections.Generic.List<OpenIZ.Core.Model.DataTypes.EntityIdentifier>), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("identifier", context.JsonContext, _retVal, context))));
                                                                                                if ((_instance != null)) {
                                                                                                    _retVal.Identifiers = _instance;
                                                                                                }
                                                                                            }
                                                                                            else {
                                                                                                if ("typeConceptModel".Equals(r.Value)) {
                                                                                                    r.Read();
                                                                                                    OpenIZ.Core.Model.DataTypes.Concept _instance = ((OpenIZ.Core.Model.DataTypes.Concept)(context.JsonContext.ReadElementUtil(r, typeof(OpenIZ.Core.Model.DataTypes.Concept), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("typeConceptModel", context.JsonContext, _retVal, context))));
                                                                                                    if ((_instance != null)) {
                                                                                                        _retVal.TypeConcept = _instance;
                                                                                                    }
                                                                                                }
                                                                                                else {
                                                                                                    if ("creationActModel".Equals(r.Value)) {
                                                                                                        r.Read();
                                                                                                        OpenIZ.Core.Model.Acts.Act _instance = ((OpenIZ.Core.Model.Acts.Act)(context.JsonContext.ReadElementUtil(r, typeof(OpenIZ.Core.Model.Acts.Act), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("creationActModel", context.JsonContext, _retVal, context))));
                                                                                                        if ((_instance != null)) {
                                                                                                            _retVal.CreationAct = _instance;
                                                                                                        }
                                                                                                    }
                                                                                                    else {
                                                                                                        if ("statusConceptModel".Equals(r.Value)) {
                                                                                                            r.Read();
                                                                                                            OpenIZ.Core.Model.DataTypes.Concept _instance = ((OpenIZ.Core.Model.DataTypes.Concept)(context.JsonContext.ReadElementUtil(r, typeof(OpenIZ.Core.Model.DataTypes.Concept), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("statusConceptModel", context.JsonContext, _retVal, context))));
                                                                                                            if ((_instance != null)) {
                                                                                                                _retVal.StatusConcept = _instance;
                                                                                                            }
                                                                                                        }
                                                                                                        else {
                                                                                                            if ("determinerConceptModel".Equals(r.Value)) {
                                                                                                                r.Read();
                                                                                                                OpenIZ.Core.Model.DataTypes.Concept _instance = ((OpenIZ.Core.Model.DataTypes.Concept)(context.JsonContext.ReadElementUtil(r, typeof(OpenIZ.Core.Model.DataTypes.Concept), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("determinerConceptModel", context.JsonContext, _retVal, context))));
                                                                                                                if ((_instance != null)) {
                                                                                                                    _retVal.DeterminerConcept = _instance;
                                                                                                                }
                                                                                                            }
                                                                                                            else {
                                                                                                                if ("classConceptModel".Equals(r.Value)) {
                                                                                                                    r.Read();
                                                                                                                    OpenIZ.Core.Model.DataTypes.Concept _instance = ((OpenIZ.Core.Model.DataTypes.Concept)(context.JsonContext.ReadElementUtil(r, typeof(OpenIZ.Core.Model.DataTypes.Concept), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("classConceptModel", context.JsonContext, _retVal, context))));
                                                                                                                    if ((_instance != null)) {
                                                                                                                        _retVal.ClassConcept = _instance;
                                                                                                                    }
                                                                                                                }
                                                                                                                else {
                                                                                                                    if ("typeConcept".Equals(r.Value)) {
                                                                                                                        r.Read();
                                                                                                                        System.Nullable<System.Guid> _instance = ((System.Nullable<System.Guid>)(context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<System.Guid>), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("typeConcept", context.JsonContext, _retVal, context))));
                                                                                                                        if ((_instance != null)) {
                                                                                                                            _retVal.TypeConceptKey = _instance;
                                                                                                                        }
                                                                                                                    }
                                                                                                                    else {
                                                                                                                        if ("creationAct".Equals(r.Value)) {
                                                                                                                            r.Read();
                                                                                                                            System.Nullable<System.Guid> _instance = ((System.Nullable<System.Guid>)(context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<System.Guid>), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("creationAct", context.JsonContext, _retVal, context))));
                                                                                                                            if ((_instance != null)) {
                                                                                                                                _retVal.CreationActKey = _instance;
                                                                                                                            }
                                                                                                                        }
                                                                                                                        else {
                                                                                                                            if ("statusConcept".Equals(r.Value)) {
                                                                                                                                r.Read();
                                                                                                                                System.Nullable<System.Guid> _instance = ((System.Nullable<System.Guid>)(context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<System.Guid>), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("statusConcept", context.JsonContext, _retVal, context))));
                                                                                                                                if ((_instance != null)) {
                                                                                                                                    _retVal.StatusConceptKey = _instance;
                                                                                                                                }
                                                                                                                            }
                                                                                                                            else {
                                                                                                                                if ("determinerConcept".Equals(r.Value)) {
                                                                                                                                    r.Read();
                                                                                                                                    System.Nullable<System.Guid> _instance = ((System.Nullable<System.Guid>)(context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<System.Guid>), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("determinerConcept", context.JsonContext, _retVal, context))));
                                                                                                                                    if ((_instance != null)) {
                                                                                                                                        _retVal.DeterminerConceptKey = _instance;
                                                                                                                                    }
                                                                                                                                }
                                                                                                                                else {
                                                                                                                                    if ("classConcept".Equals(r.Value)) {
                                                                                                                                        r.Read();
                                                                                                                                        System.Nullable<System.Guid> _instance = ((System.Nullable<System.Guid>)(context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<System.Guid>), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("classConcept", context.JsonContext, _retVal, context))));
                                                                                                                                        if ((_instance != null)) {
                                                                                                                                            _retVal.ClassConceptKey = _instance;
                                                                                                                                        }
                                                                                                                                    }
                                                                                                                                    else {
                                                                                                                                        if ("template".Equals(r.Value)) {
                                                                                                                                            r.Read();
                                                                                                                                            OpenIZ.Core.Model.DataTypes.TemplateDefinition _instance = ((OpenIZ.Core.Model.DataTypes.TemplateDefinition)(context.JsonContext.ReadElementUtil(r, typeof(OpenIZ.Core.Model.DataTypes.TemplateDefinition), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("template", context.JsonContext, _retVal, context))));
                                                                                                                                            if ((_instance != null)) {
                                                                                                                                                _retVal.Template = _instance;
                                                                                                                                            }
                                                                                                                                        }
                                                                                                                                        else {
                                                                                                                                            if ("operatingSystemName".Equals(r.Value)) {
                                                                                                                                                r.Read();
                                                                                                                                                string _instance = ((string)(context.JsonContext.ReadElementUtil(r, typeof(string), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("operatingSystemName", context.JsonContext, _retVal, context))));
                                                                                                                                                if ((_instance != null)) {
                                                                                                                                                    _retVal.OperatingSystemName = _instance;
                                                                                                                                                }
                                                                                                                                            }
                                                                                                                                            else {
                                                                                                                                                if ("manufacturerModelName".Equals(r.Value)) {
                                                                                                                                                    r.Read();
                                                                                                                                                    string _instance = ((string)(context.JsonContext.ReadElementUtil(r, typeof(string), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("manufacturerModelName", context.JsonContext, _retVal, context))));
                                                                                                                                                    if ((_instance != null)) {
                                                                                                                                                        _retVal.ManufacturerModelName = _instance;
                                                                                                                                                    }
                                                                                                                                                }
                                                                                                                                                else {
                                                                                                                                                    if ("securityDeviceModel".Equals(r.Value)) {
                                                                                                                                                        r.Read();
                                                                                                                                                        OpenIZ.Core.Model.Security.SecurityDevice _instance = ((OpenIZ.Core.Model.Security.SecurityDevice)(context.JsonContext.ReadElementUtil(r, typeof(OpenIZ.Core.Model.Security.SecurityDevice), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("securityDeviceModel", context.JsonContext, _retVal, context))));
                                                                                                                                                        if ((_instance != null)) {
                                                                                                                                                            _retVal.SecurityDevice = _instance;
                                                                                                                                                        }
                                                                                                                                                    }
                                                                                                                                                    else {
                                                                                                                                                        if ("securityDevice".Equals(r.Value)) {
                                                                                                                                                            r.Read();
                                                                                                                                                            System.Nullable<System.Guid> _instance = ((System.Nullable<System.Guid>)(context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<System.Guid>), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("securityDevice", context.JsonContext, _retVal, context))));
                                                                                                                                                            if ((_instance != null)) {
                                                                                                                                                                _retVal.SecurityDeviceKey = _instance;
                                                                                                                                                            }
                                                                                                                                                        }
                                                                                                                                                        else {
                                                                                                                                                            if ("$type".Equals(r.Value)) {
                                                                                                                                                                System.Type _type = this.m_binder.BindToType("OpenIZ.Core.Model, Version=0.6.14.21496, Culture=neutral, PublicKeyToken=null", r.ReadAsString());
                                                                                                                                                                if ((_type != typeof(OpenIZ.Core.Model.Entities.DeviceEntity))) {
                                                                                                                                                                    OpenIZ.Core.Model.Entities.DeviceEntity _nretVal = ((OpenIZ.Core.Model.Entities.DeviceEntity)(context.JsonContext.GetFormatter(_type).Deserialize(r, _type, context)));
                                                                                                                                                                    _nretVal.CopyObjectData(_retVal);
                                                                                                                                                                    return _nretVal;
                                                                                                                                                                }
                                                                                                                                                            }
                                                                                                                                                            else {
                                                                                                                                                                r.Skip();
                                                                                                                                                            }
                                                                                                                                                        }
                                                                                                                                                    }
                                                                                                                                                }
                                                                                                                                            }
                                                                                                                                        }
                                                                                                                                    }
                                                                                                                                }
                                                                                                                            }
                                                                                                                        }
                                                                                                                    }
                                                                                                                }
                                                                                                            }
                                                                                                        }
                                                                                                    }
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
                else {
                    if (((r.TokenType == Newtonsoft.Json.JsonToken.EndObject) 
                                && (r.Depth == _depth))) {
                        return _retVal;
                    }
                    else {
                        throw new Newtonsoft.Json.JsonSerializationException("JSON in invalid state");
                    }
                }
            }
            return _retVal;
        }
        
        public object FromSimpleValue(object o) {
            return null;
        }
        
        public object GetSimpleValue(object o) {
            return null;
        }
    }
    
    public class EntityViewModelSerializer : OpenIZ.Core.Applets.ViewModel.Json.IJsonViewModelTypeFormatter {
        
        private OpenIZ.Core.Model.Serialization.ModelSerializationBinder m_binder = new OpenIZ.Core.Model.Serialization.ModelSerializationBinder();
        
        private OpenIZ.Core.Diagnostics.Tracer m_tracer = OpenIZ.Core.Diagnostics.Tracer.GetTracer(typeof(EntityViewModelSerializer));
        
        public System.Type HandlesType {
            get {
                return typeof(OpenIZ.Core.Model.Entities.Entity);
            }
        }
        
        public void Serialize(Newtonsoft.Json.JsonWriter w, OpenIZ.Core.Model.IdentifiedData o, OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext context) {
            if ((o == null)) {
                throw new System.ArgumentNullException("o");
            }
            OpenIZ.Core.Model.Entities.Entity _strong = null;
            OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext _jsonContext = null;
            bool _loaded = false;
            try {
                _strong = ((OpenIZ.Core.Model.Entities.Entity)(o));
            }
            catch (System.Exception e) {
                this.m_tracer.TraceError(string.Format("Casting Error: {0}", e));
                throw new System.ArgumentException(string.Format("Invalid type {0} provided, expected {1}", o.GetType(), typeof(OpenIZ.Core.Model.Entities.Entity)));
            }
            if (context.ShouldSerialize("template")) {
                if ((_strong.Template == null)) {
                    if ((_strong.Key.HasValue && context.ShouldForceLoad("template", _strong.Key.Value))) {
                        OpenIZ.Core.Model.DataTypes.TemplateDefinition _delay = null;
                    }
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "template", _strong.Template, context);
                }
            }
            if (context.ShouldSerialize("classConcept")) {
                if ((_strong.ClassConceptKey == null)) {
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "classConcept", _strong.ClassConceptKey, context);
                }
            }
            if (context.ShouldSerialize("determinerConcept")) {
                if ((_strong.DeterminerConceptKey == null)) {
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "determinerConcept", _strong.DeterminerConceptKey, context);
                }
            }
            if (context.ShouldSerialize("statusConcept")) {
                if ((_strong.StatusConceptKey == null)) {
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "statusConcept", _strong.StatusConceptKey, context);
                }
            }
            if (context.ShouldSerialize("creationAct")) {
                if ((_strong.CreationActKey == null)) {
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "creationAct", _strong.CreationActKey, context);
                }
            }
            if (context.ShouldSerialize("typeConcept")) {
                if ((_strong.TypeConceptKey == null)) {
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "typeConcept", _strong.TypeConceptKey, context);
                }
            }
            if (context.ShouldSerialize("classConceptModel")) {
                if ((_strong.ClassConcept == null)) {
                    if ((_strong.Key.HasValue && context.ShouldForceLoad("classConceptModel", _strong.Key.Value))) {
                        OpenIZ.Core.Model.DataTypes.Concept _delay = null;
                        _delay = context.JsonContext.LoadRelated<OpenIZ.Core.Model.DataTypes.Concept>(_strong.ClassConceptKey);
                        _strong.ClassConcept = _delay;
                        if ((_delay != null)) {
                            _loaded = true;
                            context.JsonContext.WritePropertyUtil(w, "classConceptModel", _strong.ClassConcept, context);
                        }
                    }
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "classConceptModel", _strong.ClassConcept, context);
                }
            }
            if (context.ShouldSerialize("determinerConceptModel")) {
                if ((_strong.DeterminerConcept == null)) {
                    if ((_strong.Key.HasValue && context.ShouldForceLoad("determinerConceptModel", _strong.Key.Value))) {
                        OpenIZ.Core.Model.DataTypes.Concept _delay = null;
                        _delay = context.JsonContext.LoadRelated<OpenIZ.Core.Model.DataTypes.Concept>(_strong.DeterminerConceptKey);
                        _strong.DeterminerConcept = _delay;
                        if ((_delay != null)) {
                            _loaded = true;
                            context.JsonContext.WritePropertyUtil(w, "determinerConceptModel", _strong.DeterminerConcept, context);
                        }
                    }
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "determinerConceptModel", _strong.DeterminerConcept, context);
                }
            }
            if (context.ShouldSerialize("statusConceptModel")) {
                if ((_strong.StatusConcept == null)) {
                    if ((_strong.Key.HasValue && context.ShouldForceLoad("statusConceptModel", _strong.Key.Value))) {
                        OpenIZ.Core.Model.DataTypes.Concept _delay = null;
                        _delay = context.JsonContext.LoadRelated<OpenIZ.Core.Model.DataTypes.Concept>(_strong.StatusConceptKey);
                        _strong.StatusConcept = _delay;
                        if ((_delay != null)) {
                            _loaded = true;
                            context.JsonContext.WritePropertyUtil(w, "statusConceptModel", _strong.StatusConcept, context);
                        }
                    }
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "statusConceptModel", _strong.StatusConcept, context);
                }
            }
            if (context.ShouldSerialize("creationActModel")) {
                if ((_strong.CreationAct == null)) {
                    if ((_strong.Key.HasValue && context.ShouldForceLoad("creationActModel", _strong.Key.Value))) {
                        OpenIZ.Core.Model.Acts.Act _delay = null;
                        _delay = context.JsonContext.LoadRelated<OpenIZ.Core.Model.Acts.Act>(_strong.CreationActKey);
                        _strong.CreationAct = _delay;
                        if ((_delay != null)) {
                            _loaded = true;
                            context.JsonContext.WritePropertyUtil(w, "creationActModel", _strong.CreationAct, context);
                        }
                    }
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "creationActModel", _strong.CreationAct, context);
                }
            }
            if (context.ShouldSerialize("typeConceptModel")) {
                if ((_strong.TypeConcept == null)) {
                    if ((_strong.Key.HasValue && context.ShouldForceLoad("typeConceptModel", _strong.Key.Value))) {
                        OpenIZ.Core.Model.DataTypes.Concept _delay = null;
                        _delay = context.JsonContext.LoadRelated<OpenIZ.Core.Model.DataTypes.Concept>(_strong.TypeConceptKey);
                        _strong.TypeConcept = _delay;
                        if ((_delay != null)) {
                            _loaded = true;
                            context.JsonContext.WritePropertyUtil(w, "typeConceptModel", _strong.TypeConcept, context);
                        }
                    }
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "typeConceptModel", _strong.TypeConcept, context);
                }
            }
            if (context.ShouldSerialize("identifier")) {
                if (((_strong.Identifiers == null) 
                            || (_strong.Identifiers.Count == 0))) {
                    if ((_strong.Key.HasValue && context.ShouldForceLoad("identifier", _strong.Key.Value))) {
                        System.Collections.Generic.List<OpenIZ.Core.Model.DataTypes.EntityIdentifier> _delay = null;
                        _delay = new System.Collections.Generic.List<OpenIZ.Core.Model.DataTypes.EntityIdentifier>(context.JsonContext.LoadCollection<OpenIZ.Core.Model.DataTypes.EntityIdentifier>(_strong.Key.Value));
                        _strong.Identifiers = _delay;
                        if ((_delay.Count > 0)) {
                            _loaded = true;
                            context.JsonContext.WritePropertyUtil(w, "identifier", _strong.Identifiers, context);
                        }
                    }
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "identifier", _strong.Identifiers, context);
                }
            }
            if (context.ShouldSerialize("relationship")) {
                if (((_strong.Relationships == null) 
                            || (_strong.Relationships.Count == 0))) {
                    if ((_strong.Key.HasValue && context.ShouldForceLoad("relationship", _strong.Key.Value))) {
                        System.Collections.Generic.List<OpenIZ.Core.Model.Entities.EntityRelationship> _delay = null;
                        _delay = new System.Collections.Generic.List<OpenIZ.Core.Model.Entities.EntityRelationship>(context.JsonContext.LoadCollection<OpenIZ.Core.Model.Entities.EntityRelationship>(_strong.Key.Value));
                        _strong.Relationships = _delay;
                        if ((_delay.Count > 0)) {
                            _loaded = true;
                            context.JsonContext.WritePropertyUtil(w, "relationship", _strong.Relationships, context);
                        }
                    }
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "relationship", _strong.Relationships, context);
                }
            }
            if (context.ShouldSerialize("telecom")) {
                if (((_strong.Telecoms == null) 
                            || (_strong.Telecoms.Count == 0))) {
                    if ((_strong.Key.HasValue && context.ShouldForceLoad("telecom", _strong.Key.Value))) {
                        System.Collections.Generic.List<OpenIZ.Core.Model.Entities.EntityTelecomAddress> _delay = null;
                        _delay = new System.Collections.Generic.List<OpenIZ.Core.Model.Entities.EntityTelecomAddress>(context.JsonContext.LoadCollection<OpenIZ.Core.Model.Entities.EntityTelecomAddress>(_strong.Key.Value));
                        _strong.Telecoms = _delay;
                        if ((_delay.Count > 0)) {
                            _loaded = true;
                            context.JsonContext.WritePropertyUtil(w, "telecom", _strong.Telecoms, context);
                        }
                    }
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "telecom", _strong.Telecoms, context);
                }
            }
            if (context.ShouldSerialize("extension")) {
                if (((_strong.Extensions == null) 
                            || (_strong.Extensions.Count == 0))) {
                    if ((_strong.Key.HasValue && context.ShouldForceLoad("extension", _strong.Key.Value))) {
                        System.Collections.Generic.List<OpenIZ.Core.Model.DataTypes.EntityExtension> _delay = null;
                        _delay = new System.Collections.Generic.List<OpenIZ.Core.Model.DataTypes.EntityExtension>(context.JsonContext.LoadCollection<OpenIZ.Core.Model.DataTypes.EntityExtension>(_strong.Key.Value));
                        _strong.Extensions = _delay;
                        if ((_delay.Count > 0)) {
                            _loaded = true;
                            context.JsonContext.WritePropertyUtil(w, "extension", _strong.Extensions, context);
                        }
                    }
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "extension", _strong.Extensions, context);
                }
            }
            if (context.ShouldSerialize("name")) {
                if (((_strong.Names == null) 
                            || (_strong.Names.Count == 0))) {
                    if ((_strong.Key.HasValue && context.ShouldForceLoad("name", _strong.Key.Value))) {
                        System.Collections.Generic.List<OpenIZ.Core.Model.Entities.EntityName> _delay = null;
                        _delay = new System.Collections.Generic.List<OpenIZ.Core.Model.Entities.EntityName>(context.JsonContext.LoadCollection<OpenIZ.Core.Model.Entities.EntityName>(_strong.Key.Value));
                        _strong.Names = _delay;
                        if ((_delay.Count > 0)) {
                            _loaded = true;
                            context.JsonContext.WritePropertyUtil(w, "name", _strong.Names, context);
                        }
                    }
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "name", _strong.Names, context);
                }
            }
            if (context.ShouldSerialize("address")) {
                if (((_strong.Addresses == null) 
                            || (_strong.Addresses.Count == 0))) {
                    if ((_strong.Key.HasValue && context.ShouldForceLoad("address", _strong.Key.Value))) {
                        System.Collections.Generic.List<OpenIZ.Core.Model.Entities.EntityAddress> _delay = null;
                        _delay = new System.Collections.Generic.List<OpenIZ.Core.Model.Entities.EntityAddress>(context.JsonContext.LoadCollection<OpenIZ.Core.Model.Entities.EntityAddress>(_strong.Key.Value));
                        _strong.Addresses = _delay;
                        if ((_delay.Count > 0)) {
                            _loaded = true;
                            context.JsonContext.WritePropertyUtil(w, "address", _strong.Addresses, context);
                        }
                    }
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "address", _strong.Addresses, context);
                }
            }
            if (context.ShouldSerialize("note")) {
                if (((_strong.Notes == null) 
                            || (_strong.Notes.Count == 0))) {
                    if ((_strong.Key.HasValue && context.ShouldForceLoad("note", _strong.Key.Value))) {
                        System.Collections.Generic.List<OpenIZ.Core.Model.DataTypes.EntityNote> _delay = null;
                        _delay = new System.Collections.Generic.List<OpenIZ.Core.Model.DataTypes.EntityNote>(context.JsonContext.LoadCollection<OpenIZ.Core.Model.DataTypes.EntityNote>(_strong.Key.Value));
                        _strong.Notes = _delay;
                        if ((_delay.Count > 0)) {
                            _loaded = true;
                            context.JsonContext.WritePropertyUtil(w, "note", _strong.Notes, context);
                        }
                    }
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "note", _strong.Notes, context);
                }
            }
            if (context.ShouldSerialize("tag")) {
                if (((_strong.Tags == null) 
                            || (_strong.Tags.Count == 0))) {
                    if ((_strong.Key.HasValue && context.ShouldForceLoad("tag", _strong.Key.Value))) {
                        System.Collections.Generic.List<OpenIZ.Core.Model.DataTypes.EntityTag> _delay = null;
                        _delay = new System.Collections.Generic.List<OpenIZ.Core.Model.DataTypes.EntityTag>(context.JsonContext.LoadCollection<OpenIZ.Core.Model.DataTypes.EntityTag>(_strong.Key.Value));
                        _strong.Tags = _delay;
                        if ((_delay.Count > 0)) {
                            _loaded = true;
                            context.JsonContext.WritePropertyUtil(w, "tag", _strong.Tags, context);
                        }
                    }
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "tag", _strong.Tags, context);
                }
            }
            if (context.ShouldSerialize("participation")) {
                if (((_strong.Participations == null) 
                            || (_strong.Participations.Count == 0))) {
                    if ((_strong.Key.HasValue && context.ShouldForceLoad("participation", _strong.Key.Value))) {
                        System.Collections.Generic.List<OpenIZ.Core.Model.Acts.ActParticipation> _delay = null;
                        _delay = new System.Collections.Generic.List<OpenIZ.Core.Model.Acts.ActParticipation>(context.JsonContext.LoadCollection<OpenIZ.Core.Model.Acts.ActParticipation>(_strong.Key.Value));
                        _strong.Participations = _delay;
                        if ((_delay.Count > 0)) {
                            _loaded = true;
                            context.JsonContext.WritePropertyUtil(w, "participation", _strong.Participations, context);
                        }
                    }
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "participation", _strong.Participations, context);
                }
            }
            if (context.ShouldSerialize("etag")) {
                if ((_strong.Tag == null)) {
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "etag", _strong.Tag, context);
                }
            }
            if (context.ShouldSerialize("previousVersion")) {
                if ((_strong.PreviousVersionKey == null)) {
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "previousVersion", _strong.PreviousVersionKey, context);
                }
            }
            if (context.ShouldSerialize("version")) {
                if ((_strong.VersionKey == null)) {
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "version", _strong.VersionKey, context);
                }
            }
            if (context.ShouldSerialize("sequence")) {
                if ((_strong.VersionSequence == null)) {
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "sequence", _strong.VersionSequence, context);
                }
            }
            if (context.ShouldSerialize("creationTimeModel")) {
                if ((_strong.CreationTime == null)) {
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "creationTimeModel", _strong.CreationTime, context);
                }
            }
            if (context.ShouldSerialize("creationTime")) {
                if ((_strong.CreationTimeXml == null)) {
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "creationTime", _strong.CreationTimeXml, context);
                }
            }
            if (context.ShouldSerialize("obsoletionTimeModel")) {
                if ((_strong.ObsoletionTime == null)) {
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "obsoletionTimeModel", _strong.ObsoletionTime, context);
                }
            }
            if (context.ShouldSerialize("obsoletionTime")) {
                if ((_strong.ObsoletionTimeXml == null)) {
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "obsoletionTime", _strong.ObsoletionTimeXml, context);
                }
            }
            if (context.ShouldSerialize("createdBy")) {
                if ((_strong.CreatedByKey == null)) {
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "createdBy", _strong.CreatedByKey, context);
                }
            }
            if (context.ShouldSerialize("obsoletedBy")) {
                if ((_strong.ObsoletedByKey == null)) {
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "obsoletedBy", _strong.ObsoletedByKey, context);
                }
            }
            if (context.ShouldSerialize("id")) {
                if ((_strong.Key == null)) {
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "id", _strong.Key, context);
                }
            }
            if (((_loaded && _strong.Key.HasValue) 
                        && _strong.VersionKey.HasValue)) {
                ((OpenIZ.Core.Services.IDataCachingService)(OpenIZ.Core.ApplicationServiceContext.Current.GetService(typeof(OpenIZ.Core.Services.IDataCachingService)))).Add(_strong);
            }
        }
        
        public object Deserialize(Newtonsoft.Json.JsonReader r, System.Type asType, OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext context) {
            OpenIZ.Core.Model.Entities.Entity _retVal = new OpenIZ.Core.Model.Entities.Entity();
            int _depth = r.Depth;
            if ((r.TokenType != Newtonsoft.Json.JsonToken.StartObject)) {
                _depth = (_depth - 1);
            }
            for (
            ; r.Read(); 
            ) {
                if ((r.TokenType == Newtonsoft.Json.JsonToken.PropertyName)) {
                    if ("id".Equals(r.Value)) {
                        r.Read();
                        System.Nullable<System.Guid> _instance = ((System.Nullable<System.Guid>)(context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<System.Guid>), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("id", context.JsonContext, _retVal, context))));
                        if ((_instance != null)) {
                            _retVal.Key = _instance;
                        }
                    }
                    else {
                        if ("obsoletedBy".Equals(r.Value)) {
                            r.Read();
                            System.Nullable<System.Guid> _instance = ((System.Nullable<System.Guid>)(context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<System.Guid>), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("obsoletedBy", context.JsonContext, _retVal, context))));
                            if ((_instance != null)) {
                                _retVal.ObsoletedByKey = _instance;
                            }
                        }
                        else {
                            if ("createdBy".Equals(r.Value)) {
                                r.Read();
                                System.Nullable<System.Guid> _instance = ((System.Nullable<System.Guid>)(context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<System.Guid>), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("createdBy", context.JsonContext, _retVal, context))));
                                if ((_instance != null)) {
                                    _retVal.CreatedByKey = _instance;
                                }
                            }
                            else {
                                if ("obsoletionTime".Equals(r.Value)) {
                                    r.Read();
                                    string _instance = ((string)(context.JsonContext.ReadElementUtil(r, typeof(string), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("obsoletionTime", context.JsonContext, _retVal, context))));
                                    if ((_instance != null)) {
                                        _retVal.ObsoletionTimeXml = _instance;
                                    }
                                }
                                else {
                                    if ("obsoletionTimeModel".Equals(r.Value)) {
                                        r.Read();
                                        System.Nullable<System.DateTimeOffset> _instance = ((System.Nullable<System.DateTimeOffset>)(context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<System.DateTimeOffset>), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("obsoletionTimeModel", context.JsonContext, _retVal, context))));
                                        if ((_instance != null)) {
                                            _retVal.ObsoletionTime = _instance;
                                        }
                                    }
                                    else {
                                        if ("creationTime".Equals(r.Value)) {
                                            r.Read();
                                            string _instance = ((string)(context.JsonContext.ReadElementUtil(r, typeof(string), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("creationTime", context.JsonContext, _retVal, context))));
                                            if ((_instance != null)) {
                                                _retVal.CreationTimeXml = _instance;
                                            }
                                        }
                                        else {
                                            if ("creationTimeModel".Equals(r.Value)) {
                                                r.Read();
                                                System.DateTimeOffset _instance = ((System.DateTimeOffset)(context.JsonContext.ReadElementUtil(r, typeof(System.DateTimeOffset), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("creationTimeModel", context.JsonContext, _retVal, context))));
                                                if ((_instance != null)) {
                                                    _retVal.CreationTime = _instance;
                                                }
                                            }
                                            else {
                                                if ("sequence".Equals(r.Value)) {
                                                    r.Read();
                                                    System.Nullable<decimal> _instance = ((System.Nullable<decimal>)(context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<decimal>), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("sequence", context.JsonContext, _retVal, context))));
                                                    if ((_instance != null)) {
                                                        _retVal.VersionSequence = _instance;
                                                    }
                                                }
                                                else {
                                                    if ("version".Equals(r.Value)) {
                                                        r.Read();
                                                        System.Nullable<System.Guid> _instance = ((System.Nullable<System.Guid>)(context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<System.Guid>), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("version", context.JsonContext, _retVal, context))));
                                                        if ((_instance != null)) {
                                                            _retVal.VersionKey = _instance;
                                                        }
                                                    }
                                                    else {
                                                        if ("previousVersion".Equals(r.Value)) {
                                                            r.Read();
                                                            System.Nullable<System.Guid> _instance = ((System.Nullable<System.Guid>)(context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<System.Guid>), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("previousVersion", context.JsonContext, _retVal, context))));
                                                            if ((_instance != null)) {
                                                                _retVal.PreviousVersionKey = _instance;
                                                            }
                                                        }
                                                        else {
                                                            if ("participation".Equals(r.Value)) {
                                                                r.Read();
                                                                System.Collections.Generic.List<OpenIZ.Core.Model.Acts.ActParticipation> _instance = ((System.Collections.Generic.List<OpenIZ.Core.Model.Acts.ActParticipation>)(context.JsonContext.ReadElementUtil(r, typeof(System.Collections.Generic.List<OpenIZ.Core.Model.Acts.ActParticipation>), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("participation", context.JsonContext, _retVal, context))));
                                                                if ((_instance != null)) {
                                                                    _retVal.Participations = _instance;
                                                                }
                                                            }
                                                            else {
                                                                if ("tag".Equals(r.Value)) {
                                                                    r.Read();
                                                                    System.Collections.Generic.List<OpenIZ.Core.Model.DataTypes.EntityTag> _instance = ((System.Collections.Generic.List<OpenIZ.Core.Model.DataTypes.EntityTag>)(context.JsonContext.ReadElementUtil(r, typeof(System.Collections.Generic.List<OpenIZ.Core.Model.DataTypes.EntityTag>), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("tag", context.JsonContext, _retVal, context))));
                                                                    if ((_instance != null)) {
                                                                        _retVal.Tags = _instance;
                                                                    }
                                                                }
                                                                else {
                                                                    if ("note".Equals(r.Value)) {
                                                                        r.Read();
                                                                        System.Collections.Generic.List<OpenIZ.Core.Model.DataTypes.EntityNote> _instance = ((System.Collections.Generic.List<OpenIZ.Core.Model.DataTypes.EntityNote>)(context.JsonContext.ReadElementUtil(r, typeof(System.Collections.Generic.List<OpenIZ.Core.Model.DataTypes.EntityNote>), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("note", context.JsonContext, _retVal, context))));
                                                                        if ((_instance != null)) {
                                                                            _retVal.Notes = _instance;
                                                                        }
                                                                    }
                                                                    else {
                                                                        if ("address".Equals(r.Value)) {
                                                                            r.Read();
                                                                            System.Collections.Generic.List<OpenIZ.Core.Model.Entities.EntityAddress> _instance = ((System.Collections.Generic.List<OpenIZ.Core.Model.Entities.EntityAddress>)(context.JsonContext.ReadElementUtil(r, typeof(System.Collections.Generic.List<OpenIZ.Core.Model.Entities.EntityAddress>), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("address", context.JsonContext, _retVal, context))));
                                                                            if ((_instance != null)) {
                                                                                _retVal.Addresses = _instance;
                                                                            }
                                                                        }
                                                                        else {
                                                                            if ("name".Equals(r.Value)) {
                                                                                r.Read();
                                                                                System.Collections.Generic.List<OpenIZ.Core.Model.Entities.EntityName> _instance = ((System.Collections.Generic.List<OpenIZ.Core.Model.Entities.EntityName>)(context.JsonContext.ReadElementUtil(r, typeof(System.Collections.Generic.List<OpenIZ.Core.Model.Entities.EntityName>), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("name", context.JsonContext, _retVal, context))));
                                                                                if ((_instance != null)) {
                                                                                    _retVal.Names = _instance;
                                                                                }
                                                                            }
                                                                            else {
                                                                                if ("extension".Equals(r.Value)) {
                                                                                    r.Read();
                                                                                    System.Collections.Generic.List<OpenIZ.Core.Model.DataTypes.EntityExtension> _instance = ((System.Collections.Generic.List<OpenIZ.Core.Model.DataTypes.EntityExtension>)(context.JsonContext.ReadElementUtil(r, typeof(System.Collections.Generic.List<OpenIZ.Core.Model.DataTypes.EntityExtension>), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("extension", context.JsonContext, _retVal, context))));
                                                                                    if ((_instance != null)) {
                                                                                        _retVal.Extensions = _instance;
                                                                                    }
                                                                                }
                                                                                else {
                                                                                    if ("telecom".Equals(r.Value)) {
                                                                                        r.Read();
                                                                                        System.Collections.Generic.List<OpenIZ.Core.Model.Entities.EntityTelecomAddress> _instance = ((System.Collections.Generic.List<OpenIZ.Core.Model.Entities.EntityTelecomAddress>)(context.JsonContext.ReadElementUtil(r, typeof(System.Collections.Generic.List<OpenIZ.Core.Model.Entities.EntityTelecomAddress>), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("telecom", context.JsonContext, _retVal, context))));
                                                                                        if ((_instance != null)) {
                                                                                            _retVal.Telecoms = _instance;
                                                                                        }
                                                                                    }
                                                                                    else {
                                                                                        if ("relationship".Equals(r.Value)) {
                                                                                            r.Read();
                                                                                            System.Collections.Generic.List<OpenIZ.Core.Model.Entities.EntityRelationship> _instance = ((System.Collections.Generic.List<OpenIZ.Core.Model.Entities.EntityRelationship>)(context.JsonContext.ReadElementUtil(r, typeof(System.Collections.Generic.List<OpenIZ.Core.Model.Entities.EntityRelationship>), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("relationship", context.JsonContext, _retVal, context))));
                                                                                            if ((_instance != null)) {
                                                                                                _retVal.Relationships = _instance;
                                                                                            }
                                                                                        }
                                                                                        else {
                                                                                            if ("identifier".Equals(r.Value)) {
                                                                                                r.Read();
                                                                                                System.Collections.Generic.List<OpenIZ.Core.Model.DataTypes.EntityIdentifier> _instance = ((System.Collections.Generic.List<OpenIZ.Core.Model.DataTypes.EntityIdentifier>)(context.JsonContext.ReadElementUtil(r, typeof(System.Collections.Generic.List<OpenIZ.Core.Model.DataTypes.EntityIdentifier>), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("identifier", context.JsonContext, _retVal, context))));
                                                                                                if ((_instance != null)) {
                                                                                                    _retVal.Identifiers = _instance;
                                                                                                }
                                                                                            }
                                                                                            else {
                                                                                                if ("typeConceptModel".Equals(r.Value)) {
                                                                                                    r.Read();
                                                                                                    OpenIZ.Core.Model.DataTypes.Concept _instance = ((OpenIZ.Core.Model.DataTypes.Concept)(context.JsonContext.ReadElementUtil(r, typeof(OpenIZ.Core.Model.DataTypes.Concept), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("typeConceptModel", context.JsonContext, _retVal, context))));
                                                                                                    if ((_instance != null)) {
                                                                                                        _retVal.TypeConcept = _instance;
                                                                                                    }
                                                                                                }
                                                                                                else {
                                                                                                    if ("creationActModel".Equals(r.Value)) {
                                                                                                        r.Read();
                                                                                                        OpenIZ.Core.Model.Acts.Act _instance = ((OpenIZ.Core.Model.Acts.Act)(context.JsonContext.ReadElementUtil(r, typeof(OpenIZ.Core.Model.Acts.Act), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("creationActModel", context.JsonContext, _retVal, context))));
                                                                                                        if ((_instance != null)) {
                                                                                                            _retVal.CreationAct = _instance;
                                                                                                        }
                                                                                                    }
                                                                                                    else {
                                                                                                        if ("statusConceptModel".Equals(r.Value)) {
                                                                                                            r.Read();
                                                                                                            OpenIZ.Core.Model.DataTypes.Concept _instance = ((OpenIZ.Core.Model.DataTypes.Concept)(context.JsonContext.ReadElementUtil(r, typeof(OpenIZ.Core.Model.DataTypes.Concept), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("statusConceptModel", context.JsonContext, _retVal, context))));
                                                                                                            if ((_instance != null)) {
                                                                                                                _retVal.StatusConcept = _instance;
                                                                                                            }
                                                                                                        }
                                                                                                        else {
                                                                                                            if ("determinerConceptModel".Equals(r.Value)) {
                                                                                                                r.Read();
                                                                                                                OpenIZ.Core.Model.DataTypes.Concept _instance = ((OpenIZ.Core.Model.DataTypes.Concept)(context.JsonContext.ReadElementUtil(r, typeof(OpenIZ.Core.Model.DataTypes.Concept), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("determinerConceptModel", context.JsonContext, _retVal, context))));
                                                                                                                if ((_instance != null)) {
                                                                                                                    _retVal.DeterminerConcept = _instance;
                                                                                                                }
                                                                                                            }
                                                                                                            else {
                                                                                                                if ("classConceptModel".Equals(r.Value)) {
                                                                                                                    r.Read();
                                                                                                                    OpenIZ.Core.Model.DataTypes.Concept _instance = ((OpenIZ.Core.Model.DataTypes.Concept)(context.JsonContext.ReadElementUtil(r, typeof(OpenIZ.Core.Model.DataTypes.Concept), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("classConceptModel", context.JsonContext, _retVal, context))));
                                                                                                                    if ((_instance != null)) {
                                                                                                                        _retVal.ClassConcept = _instance;
                                                                                                                    }
                                                                                                                }
                                                                                                                else {
                                                                                                                    if ("template".Equals(r.Value)) {
                                                                                                                        r.Read();
                                                                                                                        OpenIZ.Core.Model.DataTypes.TemplateDefinition _instance = ((OpenIZ.Core.Model.DataTypes.TemplateDefinition)(context.JsonContext.ReadElementUtil(r, typeof(OpenIZ.Core.Model.DataTypes.TemplateDefinition), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("template", context.JsonContext, _retVal, context))));
                                                                                                                        if ((_instance != null)) {
                                                                                                                            _retVal.Template = _instance;
                                                                                                                        }
                                                                                                                    }
                                                                                                                    else {
                                                                                                                        if ("typeConcept".Equals(r.Value)) {
                                                                                                                            r.Read();
                                                                                                                            System.Nullable<System.Guid> _instance = ((System.Nullable<System.Guid>)(context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<System.Guid>), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("typeConcept", context.JsonContext, _retVal, context))));
                                                                                                                            if ((_instance != null)) {
                                                                                                                                _retVal.TypeConceptKey = _instance;
                                                                                                                            }
                                                                                                                        }
                                                                                                                        else {
                                                                                                                            if ("creationAct".Equals(r.Value)) {
                                                                                                                                r.Read();
                                                                                                                                System.Nullable<System.Guid> _instance = ((System.Nullable<System.Guid>)(context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<System.Guid>), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("creationAct", context.JsonContext, _retVal, context))));
                                                                                                                                if ((_instance != null)) {
                                                                                                                                    _retVal.CreationActKey = _instance;
                                                                                                                                }
                                                                                                                            }
                                                                                                                            else {
                                                                                                                                if ("statusConcept".Equals(r.Value)) {
                                                                                                                                    r.Read();
                                                                                                                                    System.Nullable<System.Guid> _instance = ((System.Nullable<System.Guid>)(context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<System.Guid>), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("statusConcept", context.JsonContext, _retVal, context))));
                                                                                                                                    if ((_instance != null)) {
                                                                                                                                        _retVal.StatusConceptKey = _instance;
                                                                                                                                    }
                                                                                                                                }
                                                                                                                                else {
                                                                                                                                    if ("determinerConcept".Equals(r.Value)) {
                                                                                                                                        r.Read();
                                                                                                                                        System.Nullable<System.Guid> _instance = ((System.Nullable<System.Guid>)(context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<System.Guid>), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("determinerConcept", context.JsonContext, _retVal, context))));
                                                                                                                                        if ((_instance != null)) {
                                                                                                                                            _retVal.DeterminerConceptKey = _instance;
                                                                                                                                        }
                                                                                                                                    }
                                                                                                                                    else {
                                                                                                                                        if ("classConcept".Equals(r.Value)) {
                                                                                                                                            r.Read();
                                                                                                                                            System.Nullable<System.Guid> _instance = ((System.Nullable<System.Guid>)(context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<System.Guid>), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("classConcept", context.JsonContext, _retVal, context))));
                                                                                                                                            if ((_instance != null)) {
                                                                                                                                                _retVal.ClassConceptKey = _instance;
                                                                                                                                            }
                                                                                                                                        }
                                                                                                                                        else {
                                                                                                                                            if ("$type".Equals(r.Value)) {
                                                                                                                                                System.Type _type = this.m_binder.BindToType("OpenIZ.Core.Model, Version=0.6.14.21496, Culture=neutral, PublicKeyToken=null", r.ReadAsString());
                                                                                                                                                if ((_type != typeof(OpenIZ.Core.Model.Entities.Entity))) {
                                                                                                                                                    OpenIZ.Core.Model.Entities.Entity _nretVal = ((OpenIZ.Core.Model.Entities.Entity)(context.JsonContext.GetFormatter(_type).Deserialize(r, _type, context)));
                                                                                                                                                    _nretVal.CopyObjectData(_retVal);
                                                                                                                                                    return _nretVal;
                                                                                                                                                }
                                                                                                                                            }
                                                                                                                                            else {
                                                                                                                                                r.Skip();
                                                                                                                                            }
                                                                                                                                        }
                                                                                                                                    }
                                                                                                                                }
                                                                                                                            }
                                                                                                                        }
                                                                                                                    }
                                                                                                                }
                                                                                                            }
                                                                                                        }
                                                                                                    }
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
                else {
                    if (((r.TokenType == Newtonsoft.Json.JsonToken.EndObject) 
                                && (r.Depth == _depth))) {
                        return _retVal;
                    }
                    else {
                        throw new Newtonsoft.Json.JsonSerializationException("JSON in invalid state");
                    }
                }
            }
            return _retVal;
        }
        
        public object FromSimpleValue(object o) {
            return null;
        }
        
        public object GetSimpleValue(object o) {
            return null;
        }
    }
    
    public class EntityAddressViewModelSerializer : OpenIZ.Core.Applets.ViewModel.Json.IJsonViewModelTypeFormatter {
        
        private OpenIZ.Core.Model.Serialization.ModelSerializationBinder m_binder = new OpenIZ.Core.Model.Serialization.ModelSerializationBinder();
        
        private OpenIZ.Core.Diagnostics.Tracer m_tracer = OpenIZ.Core.Diagnostics.Tracer.GetTracer(typeof(EntityAddressViewModelSerializer));
        
        public System.Type HandlesType {
            get {
                return typeof(OpenIZ.Core.Model.Entities.EntityAddress);
            }
        }
        
        public void Serialize(Newtonsoft.Json.JsonWriter w, OpenIZ.Core.Model.IdentifiedData o, OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext context) {
            if ((o == null)) {
                throw new System.ArgumentNullException("o");
            }
            OpenIZ.Core.Model.Entities.EntityAddress _strong = null;
            OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext _jsonContext = null;
            bool _loaded = false;
            try {
                _strong = ((OpenIZ.Core.Model.Entities.EntityAddress)(o));
            }
            catch (System.Exception e) {
                this.m_tracer.TraceError(string.Format("Casting Error: {0}", e));
                throw new System.ArgumentException(string.Format("Invalid type {0} provided, expected {1}", o.GetType(), typeof(OpenIZ.Core.Model.Entities.EntityAddress)));
            }
            if (context.ShouldSerialize("use")) {
                if ((_strong.AddressUseKey == null)) {
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "use", _strong.AddressUseKey, context);
                }
            }
            if (context.ShouldSerialize("useModel")) {
                if ((_strong.AddressUse == null)) {
                    if ((_strong.Key.HasValue && context.ShouldForceLoad("useModel", _strong.Key.Value))) {
                        OpenIZ.Core.Model.DataTypes.Concept _delay = null;
                        _delay = context.JsonContext.LoadRelated<OpenIZ.Core.Model.DataTypes.Concept>(_strong.AddressUseKey);
                        _strong.AddressUse = _delay;
                        if ((_delay != null)) {
                            _loaded = true;
                            context.JsonContext.WritePropertyUtil(w, "useModel", _strong.AddressUse, context);
                        }
                    }
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "useModel", _strong.AddressUse, context);
                }
            }
            if (context.ShouldSerialize("component")) {
                if (((_strong.Component == null) 
                            || (_strong.Component.Count == 0))) {
                    if ((_strong.Key.HasValue && context.ShouldForceLoad("component", _strong.Key.Value))) {
                        System.Collections.Generic.List<OpenIZ.Core.Model.Entities.EntityAddressComponent> _delay = null;
                        _delay = new System.Collections.Generic.List<OpenIZ.Core.Model.Entities.EntityAddressComponent>(context.JsonContext.LoadCollection<OpenIZ.Core.Model.Entities.EntityAddressComponent>(_strong.Key.Value));
                        _strong.Component = _delay;
                        if ((_delay.Count > 0)) {
                            _loaded = true;
                            context.JsonContext.WritePropertyUtil(w, "component", _strong.Component, context);
                        }
                    }
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "component", _strong.Component, context);
                }
            }
            if (context.ShouldSerialize("effectiveVersionSequence")) {
                if ((_strong.EffectiveVersionSequenceId == null)) {
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "effectiveVersionSequence", _strong.EffectiveVersionSequenceId, context);
                }
            }
            if (context.ShouldSerialize("obsoleteVersionSequence")) {
                if ((_strong.ObsoleteVersionSequenceId == null)) {
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "obsoleteVersionSequence", _strong.ObsoleteVersionSequenceId, context);
                }
            }
            if (context.ShouldSerialize("modifiedOn")) {
                if ((_strong.ModifiedOn == null)) {
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "modifiedOn", _strong.ModifiedOn, context);
                }
            }
            if (context.ShouldSerialize("source")) {
                if ((_strong.SourceEntityKey == null)) {
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "source", _strong.SourceEntityKey, context);
                }
            }
            if (context.ShouldSerialize("id")) {
                if ((_strong.Key == null)) {
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "id", _strong.Key, context);
                }
            }
            if (context.ShouldSerialize("etag")) {
                if ((_strong.Tag == null)) {
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "etag", _strong.Tag, context);
                }
            }
            if ((_loaded && _strong.Key.HasValue)) {
                ((OpenIZ.Core.Services.IDataCachingService)(OpenIZ.Core.ApplicationServiceContext.Current.GetService(typeof(OpenIZ.Core.Services.IDataCachingService)))).Add(_strong);
            }
        }
        
        public object Deserialize(Newtonsoft.Json.JsonReader r, System.Type asType, OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext context) {
            OpenIZ.Core.Model.Entities.EntityAddress _retVal = new OpenIZ.Core.Model.Entities.EntityAddress();
            int _depth = r.Depth;
            if ((r.TokenType != Newtonsoft.Json.JsonToken.StartObject)) {
                _depth = (_depth - 1);
            }
            for (
            ; r.Read(); 
            ) {
                if ((r.TokenType == Newtonsoft.Json.JsonToken.PropertyName)) {
                    if ("id".Equals(r.Value)) {
                        r.Read();
                        System.Nullable<System.Guid> _instance = ((System.Nullable<System.Guid>)(context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<System.Guid>), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("id", context.JsonContext, _retVal, context))));
                        if ((_instance != null)) {
                            _retVal.Key = _instance;
                        }
                    }
                    else {
                        if ("source".Equals(r.Value)) {
                            r.Read();
                            System.Nullable<System.Guid> _instance = ((System.Nullable<System.Guid>)(context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<System.Guid>), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("source", context.JsonContext, _retVal, context))));
                            if ((_instance != null)) {
                                _retVal.SourceEntityKey = _instance;
                            }
                        }
                        else {
                            if ("obsoleteVersionSequence".Equals(r.Value)) {
                                r.Read();
                                System.Nullable<decimal> _instance = ((System.Nullable<decimal>)(context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<decimal>), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("obsoleteVersionSequence", context.JsonContext, _retVal, context))));
                                if ((_instance != null)) {
                                    _retVal.ObsoleteVersionSequenceId = _instance;
                                }
                            }
                            else {
                                if ("effectiveVersionSequence".Equals(r.Value)) {
                                    r.Read();
                                    System.Nullable<decimal> _instance = ((System.Nullable<decimal>)(context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<decimal>), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("effectiveVersionSequence", context.JsonContext, _retVal, context))));
                                    if ((_instance != null)) {
                                        _retVal.EffectiveVersionSequenceId = _instance;
                                    }
                                }
                                else {
                                    if ("component".Equals(r.Value)) {
                                        r.Read();
                                        System.Collections.Generic.List<OpenIZ.Core.Model.Entities.EntityAddressComponent> _instance = ((System.Collections.Generic.List<OpenIZ.Core.Model.Entities.EntityAddressComponent>)(context.JsonContext.ReadElementUtil(r, typeof(System.Collections.Generic.List<OpenIZ.Core.Model.Entities.EntityAddressComponent>), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("component", context.JsonContext, _retVal, context))));
                                        if ((_instance != null)) {
                                            _retVal.Component = _instance;
                                        }
                                    }
                                    else {
                                        if ("useModel".Equals(r.Value)) {
                                            r.Read();
                                            OpenIZ.Core.Model.DataTypes.Concept _instance = ((OpenIZ.Core.Model.DataTypes.Concept)(context.JsonContext.ReadElementUtil(r, typeof(OpenIZ.Core.Model.DataTypes.Concept), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("useModel", context.JsonContext, _retVal, context))));
                                            if ((_instance != null)) {
                                                _retVal.AddressUse = _instance;
                                            }
                                        }
                                        else {
                                            if ("use".Equals(r.Value)) {
                                                r.Read();
                                                System.Nullable<System.Guid> _instance = ((System.Nullable<System.Guid>)(context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<System.Guid>), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("use", context.JsonContext, _retVal, context))));
                                                if ((_instance != null)) {
                                                    _retVal.AddressUseKey = _instance;
                                                }
                                            }
                                            else {
                                                if ("$type".Equals(r.Value)) {
                                                    System.Type _type = this.m_binder.BindToType("OpenIZ.Core.Model, Version=0.6.14.21496, Culture=neutral, PublicKeyToken=null", r.ReadAsString());
                                                    if ((_type != typeof(OpenIZ.Core.Model.Entities.EntityAddress))) {
                                                        OpenIZ.Core.Model.Entities.EntityAddress _nretVal = ((OpenIZ.Core.Model.Entities.EntityAddress)(context.JsonContext.GetFormatter(_type).Deserialize(r, _type, context)));
                                                        _nretVal.CopyObjectData(_retVal);
                                                        return _nretVal;
                                                    }
                                                }
                                                else {
                                                    r.Skip();
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
                else {
                    if (((r.TokenType == Newtonsoft.Json.JsonToken.EndObject) 
                                && (r.Depth == _depth))) {
                        return _retVal;
                    }
                    else {
                        throw new Newtonsoft.Json.JsonSerializationException("JSON in invalid state");
                    }
                }
            }
            return _retVal;
        }
        
        public object FromSimpleValue(object o) {
            return null;
        }
        
        public object GetSimpleValue(object o) {
            return null;
        }
    }
    
    public class AddressComponentViewModelSerializer : OpenIZ.Core.Applets.ViewModel.Json.IJsonViewModelTypeFormatter {
        
        private OpenIZ.Core.Model.Serialization.ModelSerializationBinder m_binder = new OpenIZ.Core.Model.Serialization.ModelSerializationBinder();
        
        private OpenIZ.Core.Diagnostics.Tracer m_tracer = OpenIZ.Core.Diagnostics.Tracer.GetTracer(typeof(AddressComponentViewModelSerializer));
        
        public System.Type HandlesType {
            get {
                return typeof(OpenIZ.Core.Model.Entities.EntityAddressComponent);
            }
        }
        
        public void Serialize(Newtonsoft.Json.JsonWriter w, OpenIZ.Core.Model.IdentifiedData o, OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext context) {
            if ((o == null)) {
                throw new System.ArgumentNullException("o");
            }
            OpenIZ.Core.Model.Entities.EntityAddressComponent _strong = null;
            OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext _jsonContext = null;
            bool _loaded = false;
            try {
                _strong = ((OpenIZ.Core.Model.Entities.EntityAddressComponent)(o));
            }
            catch (System.Exception e) {
                this.m_tracer.TraceError(string.Format("Casting Error: {0}", e));
                throw new System.ArgumentException(string.Format("Invalid type {0} provided, expected {1}", o.GetType(), typeof(OpenIZ.Core.Model.Entities.EntityAddressComponent)));
            }
            if (context.ShouldSerialize("type")) {
                if ((_strong.ComponentTypeKey == null)) {
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "type", _strong.ComponentTypeKey, context);
                }
            }
            if (context.ShouldSerialize("typeModel")) {
                if ((_strong.ComponentType == null)) {
                    if ((_strong.Key.HasValue && context.ShouldForceLoad("typeModel", _strong.Key.Value))) {
                        OpenIZ.Core.Model.DataTypes.Concept _delay = null;
                        _delay = context.JsonContext.LoadRelated<OpenIZ.Core.Model.DataTypes.Concept>(_strong.ComponentTypeKey);
                        _strong.ComponentType = _delay;
                        if ((_delay != null)) {
                            _loaded = true;
                            context.JsonContext.WritePropertyUtil(w, "typeModel", _strong.ComponentType, context);
                        }
                    }
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "typeModel", _strong.ComponentType, context);
                }
            }
            if (context.ShouldSerialize("value")) {
                if ((_strong.Value == null)) {
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "value", _strong.Value, context);
                }
            }
            if (context.ShouldSerialize("modifiedOn")) {
                if ((_strong.ModifiedOn == null)) {
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "modifiedOn", _strong.ModifiedOn, context);
                }
            }
            if (context.ShouldSerialize("source")) {
                if ((_strong.SourceEntityKey == null)) {
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "source", _strong.SourceEntityKey, context);
                }
            }
            if (context.ShouldSerialize("id")) {
                if ((_strong.Key == null)) {
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "id", _strong.Key, context);
                }
            }
            if (context.ShouldSerialize("etag")) {
                if ((_strong.Tag == null)) {
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "etag", _strong.Tag, context);
                }
            }
            if ((_loaded && _strong.Key.HasValue)) {
                ((OpenIZ.Core.Services.IDataCachingService)(OpenIZ.Core.ApplicationServiceContext.Current.GetService(typeof(OpenIZ.Core.Services.IDataCachingService)))).Add(_strong);
            }
        }
        
        public object Deserialize(Newtonsoft.Json.JsonReader r, System.Type asType, OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext context) {
            OpenIZ.Core.Model.Entities.EntityAddressComponent _retVal = new OpenIZ.Core.Model.Entities.EntityAddressComponent();
            int _depth = r.Depth;
            if ((r.TokenType != Newtonsoft.Json.JsonToken.StartObject)) {
                _depth = (_depth - 1);
            }
            for (
            ; r.Read(); 
            ) {
                if ((r.TokenType == Newtonsoft.Json.JsonToken.PropertyName)) {
                    if ("id".Equals(r.Value)) {
                        r.Read();
                        System.Nullable<System.Guid> _instance = ((System.Nullable<System.Guid>)(context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<System.Guid>), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("id", context.JsonContext, _retVal, context))));
                        if ((_instance != null)) {
                            _retVal.Key = _instance;
                        }
                    }
                    else {
                        if ("source".Equals(r.Value)) {
                            r.Read();
                            System.Nullable<System.Guid> _instance = ((System.Nullable<System.Guid>)(context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<System.Guid>), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("source", context.JsonContext, _retVal, context))));
                            if ((_instance != null)) {
                                _retVal.SourceEntityKey = _instance;
                            }
                        }
                        else {
                            if ("value".Equals(r.Value)) {
                                r.Read();
                                string _instance = ((string)(context.JsonContext.ReadElementUtil(r, typeof(string), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("value", context.JsonContext, _retVal, context))));
                                if ((_instance != null)) {
                                    _retVal.Value = _instance;
                                }
                            }
                            else {
                                if ("typeModel".Equals(r.Value)) {
                                    r.Read();
                                    OpenIZ.Core.Model.DataTypes.Concept _instance = ((OpenIZ.Core.Model.DataTypes.Concept)(context.JsonContext.ReadElementUtil(r, typeof(OpenIZ.Core.Model.DataTypes.Concept), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("typeModel", context.JsonContext, _retVal, context))));
                                    if ((_instance != null)) {
                                        _retVal.ComponentType = _instance;
                                    }
                                }
                                else {
                                    if ("type".Equals(r.Value)) {
                                        r.Read();
                                        System.Nullable<System.Guid> _instance = ((System.Nullable<System.Guid>)(context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<System.Guid>), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("type", context.JsonContext, _retVal, context))));
                                        if ((_instance != null)) {
                                            _retVal.ComponentTypeKey = _instance;
                                        }
                                    }
                                    else {
                                        if ("$type".Equals(r.Value)) {
                                            System.Type _type = this.m_binder.BindToType("OpenIZ.Core.Model, Version=0.6.14.21496, Culture=neutral, PublicKeyToken=null", r.ReadAsString());
                                            if ((_type != typeof(OpenIZ.Core.Model.Entities.EntityAddressComponent))) {
                                                OpenIZ.Core.Model.Entities.EntityAddressComponent _nretVal = ((OpenIZ.Core.Model.Entities.EntityAddressComponent)(context.JsonContext.GetFormatter(_type).Deserialize(r, _type, context)));
                                                _nretVal.CopyObjectData(_retVal);
                                                return _nretVal;
                                            }
                                        }
                                        else {
                                            r.Skip();
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
                else {
                    if (((r.TokenType == Newtonsoft.Json.JsonToken.EndObject) 
                                && (r.Depth == _depth))) {
                        return _retVal;
                    }
                    else {
                        throw new Newtonsoft.Json.JsonSerializationException("JSON in invalid state");
                    }
                }
            }
            return _retVal;
        }
        
        public object FromSimpleValue(object o) {
            string _strong = null;
            if ((o == null)) {
                return null;
            }
            try {
                _strong = o.ToString();
            }
            catch (System.Exception e) {
                this.m_tracer.TraceError(string.Format("Casting Error: {0}", e));
                return null;
            }
            OpenIZ.Core.Model.Entities.EntityAddressComponent _retVal = new OpenIZ.Core.Model.Entities.EntityAddressComponent();
            _retVal.Value = _strong;
            return _retVal;
        }
        
        public object GetSimpleValue(object o) {
            if ((o == null)) {
                return null;
            }
            OpenIZ.Core.Model.Entities.EntityAddressComponent _strong = null;
            try {
                _strong = ((OpenIZ.Core.Model.Entities.EntityAddressComponent)(o));
            }
            catch (System.Exception e) {
                this.m_tracer.TraceError(string.Format("Casting Error: {0}", e));
                return null;
            }
            return _strong.Value;
        }
    }
    
    public class EntityNameViewModelSerializer : OpenIZ.Core.Applets.ViewModel.Json.IJsonViewModelTypeFormatter {
        
        private OpenIZ.Core.Model.Serialization.ModelSerializationBinder m_binder = new OpenIZ.Core.Model.Serialization.ModelSerializationBinder();
        
        private OpenIZ.Core.Diagnostics.Tracer m_tracer = OpenIZ.Core.Diagnostics.Tracer.GetTracer(typeof(EntityNameViewModelSerializer));
        
        public System.Type HandlesType {
            get {
                return typeof(OpenIZ.Core.Model.Entities.EntityName);
            }
        }
        
        public void Serialize(Newtonsoft.Json.JsonWriter w, OpenIZ.Core.Model.IdentifiedData o, OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext context) {
            if ((o == null)) {
                throw new System.ArgumentNullException("o");
            }
            OpenIZ.Core.Model.Entities.EntityName _strong = null;
            OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext _jsonContext = null;
            bool _loaded = false;
            try {
                _strong = ((OpenIZ.Core.Model.Entities.EntityName)(o));
            }
            catch (System.Exception e) {
                this.m_tracer.TraceError(string.Format("Casting Error: {0}", e));
                throw new System.ArgumentException(string.Format("Invalid type {0} provided, expected {1}", o.GetType(), typeof(OpenIZ.Core.Model.Entities.EntityName)));
            }
            if (context.ShouldSerialize("use")) {
                if ((_strong.NameUseKey == null)) {
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "use", _strong.NameUseKey, context);
                }
            }
            if (context.ShouldSerialize("useModel")) {
                if ((_strong.NameUse == null)) {
                    if ((_strong.Key.HasValue && context.ShouldForceLoad("useModel", _strong.Key.Value))) {
                        OpenIZ.Core.Model.DataTypes.Concept _delay = null;
                        _delay = context.JsonContext.LoadRelated<OpenIZ.Core.Model.DataTypes.Concept>(_strong.NameUseKey);
                        _strong.NameUse = _delay;
                        if ((_delay != null)) {
                            _loaded = true;
                            context.JsonContext.WritePropertyUtil(w, "useModel", _strong.NameUse, context);
                        }
                    }
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "useModel", _strong.NameUse, context);
                }
            }
            if (context.ShouldSerialize("component")) {
                if (((_strong.Component == null) 
                            || (_strong.Component.Count == 0))) {
                    if ((_strong.Key.HasValue && context.ShouldForceLoad("component", _strong.Key.Value))) {
                        System.Collections.Generic.List<OpenIZ.Core.Model.Entities.EntityNameComponent> _delay = null;
                        _delay = new System.Collections.Generic.List<OpenIZ.Core.Model.Entities.EntityNameComponent>(context.JsonContext.LoadCollection<OpenIZ.Core.Model.Entities.EntityNameComponent>(_strong.Key.Value));
                        _strong.Component = _delay;
                        if ((_delay.Count > 0)) {
                            _loaded = true;
                            context.JsonContext.WritePropertyUtil(w, "component", _strong.Component, context);
                        }
                    }
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "component", _strong.Component, context);
                }
            }
            if (context.ShouldSerialize("effectiveVersionSequence")) {
                if ((_strong.EffectiveVersionSequenceId == null)) {
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "effectiveVersionSequence", _strong.EffectiveVersionSequenceId, context);
                }
            }
            if (context.ShouldSerialize("obsoleteVersionSequence")) {
                if ((_strong.ObsoleteVersionSequenceId == null)) {
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "obsoleteVersionSequence", _strong.ObsoleteVersionSequenceId, context);
                }
            }
            if (context.ShouldSerialize("modifiedOn")) {
                if ((_strong.ModifiedOn == null)) {
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "modifiedOn", _strong.ModifiedOn, context);
                }
            }
            if (context.ShouldSerialize("source")) {
                if ((_strong.SourceEntityKey == null)) {
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "source", _strong.SourceEntityKey, context);
                }
            }
            if (context.ShouldSerialize("id")) {
                if ((_strong.Key == null)) {
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "id", _strong.Key, context);
                }
            }
            if (context.ShouldSerialize("etag")) {
                if ((_strong.Tag == null)) {
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "etag", _strong.Tag, context);
                }
            }
            if ((_loaded && _strong.Key.HasValue)) {
                ((OpenIZ.Core.Services.IDataCachingService)(OpenIZ.Core.ApplicationServiceContext.Current.GetService(typeof(OpenIZ.Core.Services.IDataCachingService)))).Add(_strong);
            }
        }
        
        public object Deserialize(Newtonsoft.Json.JsonReader r, System.Type asType, OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext context) {
            OpenIZ.Core.Model.Entities.EntityName _retVal = new OpenIZ.Core.Model.Entities.EntityName();
            int _depth = r.Depth;
            if ((r.TokenType != Newtonsoft.Json.JsonToken.StartObject)) {
                _depth = (_depth - 1);
            }
            for (
            ; r.Read(); 
            ) {
                if ((r.TokenType == Newtonsoft.Json.JsonToken.PropertyName)) {
                    if ("id".Equals(r.Value)) {
                        r.Read();
                        System.Nullable<System.Guid> _instance = ((System.Nullable<System.Guid>)(context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<System.Guid>), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("id", context.JsonContext, _retVal, context))));
                        if ((_instance != null)) {
                            _retVal.Key = _instance;
                        }
                    }
                    else {
                        if ("source".Equals(r.Value)) {
                            r.Read();
                            System.Nullable<System.Guid> _instance = ((System.Nullable<System.Guid>)(context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<System.Guid>), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("source", context.JsonContext, _retVal, context))));
                            if ((_instance != null)) {
                                _retVal.SourceEntityKey = _instance;
                            }
                        }
                        else {
                            if ("obsoleteVersionSequence".Equals(r.Value)) {
                                r.Read();
                                System.Nullable<decimal> _instance = ((System.Nullable<decimal>)(context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<decimal>), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("obsoleteVersionSequence", context.JsonContext, _retVal, context))));
                                if ((_instance != null)) {
                                    _retVal.ObsoleteVersionSequenceId = _instance;
                                }
                            }
                            else {
                                if ("effectiveVersionSequence".Equals(r.Value)) {
                                    r.Read();
                                    System.Nullable<decimal> _instance = ((System.Nullable<decimal>)(context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<decimal>), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("effectiveVersionSequence", context.JsonContext, _retVal, context))));
                                    if ((_instance != null)) {
                                        _retVal.EffectiveVersionSequenceId = _instance;
                                    }
                                }
                                else {
                                    if ("component".Equals(r.Value)) {
                                        r.Read();
                                        System.Collections.Generic.List<OpenIZ.Core.Model.Entities.EntityNameComponent> _instance = ((System.Collections.Generic.List<OpenIZ.Core.Model.Entities.EntityNameComponent>)(context.JsonContext.ReadElementUtil(r, typeof(System.Collections.Generic.List<OpenIZ.Core.Model.Entities.EntityNameComponent>), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("component", context.JsonContext, _retVal, context))));
                                        if ((_instance != null)) {
                                            _retVal.Component = _instance;
                                        }
                                    }
                                    else {
                                        if ("useModel".Equals(r.Value)) {
                                            r.Read();
                                            OpenIZ.Core.Model.DataTypes.Concept _instance = ((OpenIZ.Core.Model.DataTypes.Concept)(context.JsonContext.ReadElementUtil(r, typeof(OpenIZ.Core.Model.DataTypes.Concept), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("useModel", context.JsonContext, _retVal, context))));
                                            if ((_instance != null)) {
                                                _retVal.NameUse = _instance;
                                            }
                                        }
                                        else {
                                            if ("use".Equals(r.Value)) {
                                                r.Read();
                                                System.Nullable<System.Guid> _instance = ((System.Nullable<System.Guid>)(context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<System.Guid>), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("use", context.JsonContext, _retVal, context))));
                                                if ((_instance != null)) {
                                                    _retVal.NameUseKey = _instance;
                                                }
                                            }
                                            else {
                                                if ("$type".Equals(r.Value)) {
                                                    System.Type _type = this.m_binder.BindToType("OpenIZ.Core.Model, Version=0.6.14.21496, Culture=neutral, PublicKeyToken=null", r.ReadAsString());
                                                    if ((_type != typeof(OpenIZ.Core.Model.Entities.EntityName))) {
                                                        OpenIZ.Core.Model.Entities.EntityName _nretVal = ((OpenIZ.Core.Model.Entities.EntityName)(context.JsonContext.GetFormatter(_type).Deserialize(r, _type, context)));
                                                        _nretVal.CopyObjectData(_retVal);
                                                        return _nretVal;
                                                    }
                                                }
                                                else {
                                                    r.Skip();
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
                else {
                    if (((r.TokenType == Newtonsoft.Json.JsonToken.EndObject) 
                                && (r.Depth == _depth))) {
                        return _retVal;
                    }
                    else {
                        throw new Newtonsoft.Json.JsonSerializationException("JSON in invalid state");
                    }
                }
            }
            return _retVal;
        }
        
        public object FromSimpleValue(object o) {
            return null;
        }
        
        public object GetSimpleValue(object o) {
            return null;
        }
    }
    
    public class EntityNameComponentViewModelSerializer : OpenIZ.Core.Applets.ViewModel.Json.IJsonViewModelTypeFormatter {
        
        private OpenIZ.Core.Model.Serialization.ModelSerializationBinder m_binder = new OpenIZ.Core.Model.Serialization.ModelSerializationBinder();
        
        private OpenIZ.Core.Diagnostics.Tracer m_tracer = OpenIZ.Core.Diagnostics.Tracer.GetTracer(typeof(EntityNameComponentViewModelSerializer));
        
        public System.Type HandlesType {
            get {
                return typeof(OpenIZ.Core.Model.Entities.EntityNameComponent);
            }
        }
        
        public void Serialize(Newtonsoft.Json.JsonWriter w, OpenIZ.Core.Model.IdentifiedData o, OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext context) {
            if ((o == null)) {
                throw new System.ArgumentNullException("o");
            }
            OpenIZ.Core.Model.Entities.EntityNameComponent _strong = null;
            OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext _jsonContext = null;
            bool _loaded = false;
            try {
                _strong = ((OpenIZ.Core.Model.Entities.EntityNameComponent)(o));
            }
            catch (System.Exception e) {
                this.m_tracer.TraceError(string.Format("Casting Error: {0}", e));
                throw new System.ArgumentException(string.Format("Invalid type {0} provided, expected {1}", o.GetType(), typeof(OpenIZ.Core.Model.Entities.EntityNameComponent)));
            }
            if (context.ShouldSerialize("phoneticCode")) {
                if ((_strong.PhoneticCode == null)) {
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "phoneticCode", _strong.PhoneticCode, context);
                }
            }
            if (context.ShouldSerialize("type")) {
                if ((_strong.ComponentTypeKey == null)) {
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "type", _strong.ComponentTypeKey, context);
                }
            }
            if (context.ShouldSerialize("phoneticAlgorithm")) {
                if ((_strong.PhoneticAlgorithmKey == null)) {
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "phoneticAlgorithm", _strong.PhoneticAlgorithmKey, context);
                }
            }
            if (context.ShouldSerialize("phoneticAlgorithmModel")) {
                if ((_strong.PhoneticAlgorithm == null)) {
                    if ((_strong.Key.HasValue && context.ShouldForceLoad("phoneticAlgorithmModel", _strong.Key.Value))) {
                        OpenIZ.Core.Model.DataTypes.PhoneticAlgorithm _delay = null;
                        _delay = context.JsonContext.LoadRelated<OpenIZ.Core.Model.DataTypes.PhoneticAlgorithm>(_strong.PhoneticAlgorithmKey);
                        _strong.PhoneticAlgorithm = _delay;
                        if ((_delay != null)) {
                            _loaded = true;
                            context.JsonContext.WritePropertyUtil(w, "phoneticAlgorithmModel", _strong.PhoneticAlgorithm, context);
                        }
                    }
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "phoneticAlgorithmModel", _strong.PhoneticAlgorithm, context);
                }
            }
            if (context.ShouldSerialize("typeModel")) {
                if ((_strong.ComponentType == null)) {
                    if ((_strong.Key.HasValue && context.ShouldForceLoad("typeModel", _strong.Key.Value))) {
                        OpenIZ.Core.Model.DataTypes.Concept _delay = null;
                        _delay = context.JsonContext.LoadRelated<OpenIZ.Core.Model.DataTypes.Concept>(_strong.ComponentTypeKey);
                        _strong.ComponentType = _delay;
                        if ((_delay != null)) {
                            _loaded = true;
                            context.JsonContext.WritePropertyUtil(w, "typeModel", _strong.ComponentType, context);
                        }
                    }
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "typeModel", _strong.ComponentType, context);
                }
            }
            if (context.ShouldSerialize("value")) {
                if ((_strong.Value == null)) {
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "value", _strong.Value, context);
                }
            }
            if (context.ShouldSerialize("modifiedOn")) {
                if ((_strong.ModifiedOn == null)) {
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "modifiedOn", _strong.ModifiedOn, context);
                }
            }
            if (context.ShouldSerialize("source")) {
                if ((_strong.SourceEntityKey == null)) {
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "source", _strong.SourceEntityKey, context);
                }
            }
            if (context.ShouldSerialize("id")) {
                if ((_strong.Key == null)) {
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "id", _strong.Key, context);
                }
            }
            if (context.ShouldSerialize("etag")) {
                if ((_strong.Tag == null)) {
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "etag", _strong.Tag, context);
                }
            }
            if ((_loaded && _strong.Key.HasValue)) {
                ((OpenIZ.Core.Services.IDataCachingService)(OpenIZ.Core.ApplicationServiceContext.Current.GetService(typeof(OpenIZ.Core.Services.IDataCachingService)))).Add(_strong);
            }
        }
        
        public object Deserialize(Newtonsoft.Json.JsonReader r, System.Type asType, OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext context) {
            OpenIZ.Core.Model.Entities.EntityNameComponent _retVal = new OpenIZ.Core.Model.Entities.EntityNameComponent();
            int _depth = r.Depth;
            if ((r.TokenType != Newtonsoft.Json.JsonToken.StartObject)) {
                _depth = (_depth - 1);
            }
            for (
            ; r.Read(); 
            ) {
                if ((r.TokenType == Newtonsoft.Json.JsonToken.PropertyName)) {
                    if ("id".Equals(r.Value)) {
                        r.Read();
                        System.Nullable<System.Guid> _instance = ((System.Nullable<System.Guid>)(context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<System.Guid>), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("id", context.JsonContext, _retVal, context))));
                        if ((_instance != null)) {
                            _retVal.Key = _instance;
                        }
                    }
                    else {
                        if ("source".Equals(r.Value)) {
                            r.Read();
                            System.Nullable<System.Guid> _instance = ((System.Nullable<System.Guid>)(context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<System.Guid>), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("source", context.JsonContext, _retVal, context))));
                            if ((_instance != null)) {
                                _retVal.SourceEntityKey = _instance;
                            }
                        }
                        else {
                            if ("value".Equals(r.Value)) {
                                r.Read();
                                string _instance = ((string)(context.JsonContext.ReadElementUtil(r, typeof(string), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("value", context.JsonContext, _retVal, context))));
                                if ((_instance != null)) {
                                    _retVal.Value = _instance;
                                }
                            }
                            else {
                                if ("typeModel".Equals(r.Value)) {
                                    r.Read();
                                    OpenIZ.Core.Model.DataTypes.Concept _instance = ((OpenIZ.Core.Model.DataTypes.Concept)(context.JsonContext.ReadElementUtil(r, typeof(OpenIZ.Core.Model.DataTypes.Concept), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("typeModel", context.JsonContext, _retVal, context))));
                                    if ((_instance != null)) {
                                        _retVal.ComponentType = _instance;
                                    }
                                }
                                else {
                                    if ("phoneticAlgorithmModel".Equals(r.Value)) {
                                        r.Read();
                                        OpenIZ.Core.Model.DataTypes.PhoneticAlgorithm _instance = ((OpenIZ.Core.Model.DataTypes.PhoneticAlgorithm)(context.JsonContext.ReadElementUtil(r, typeof(OpenIZ.Core.Model.DataTypes.PhoneticAlgorithm), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("phoneticAlgorithmModel", context.JsonContext, _retVal, context))));
                                        if ((_instance != null)) {
                                            _retVal.PhoneticAlgorithm = _instance;
                                        }
                                    }
                                    else {
                                        if ("phoneticAlgorithm".Equals(r.Value)) {
                                            r.Read();
                                            System.Nullable<System.Guid> _instance = ((System.Nullable<System.Guid>)(context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<System.Guid>), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("phoneticAlgorithm", context.JsonContext, _retVal, context))));
                                            if ((_instance != null)) {
                                                _retVal.PhoneticAlgorithmKey = _instance;
                                            }
                                        }
                                        else {
                                            if ("type".Equals(r.Value)) {
                                                r.Read();
                                                System.Nullable<System.Guid> _instance = ((System.Nullable<System.Guid>)(context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<System.Guid>), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("type", context.JsonContext, _retVal, context))));
                                                if ((_instance != null)) {
                                                    _retVal.ComponentTypeKey = _instance;
                                                }
                                            }
                                            else {
                                                if ("phoneticCode".Equals(r.Value)) {
                                                    r.Read();
                                                    string _instance = ((string)(context.JsonContext.ReadElementUtil(r, typeof(string), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("phoneticCode", context.JsonContext, _retVal, context))));
                                                    if ((_instance != null)) {
                                                        _retVal.PhoneticCode = _instance;
                                                    }
                                                }
                                                else {
                                                    if ("$type".Equals(r.Value)) {
                                                        System.Type _type = this.m_binder.BindToType("OpenIZ.Core.Model, Version=0.6.14.21496, Culture=neutral, PublicKeyToken=null", r.ReadAsString());
                                                        if ((_type != typeof(OpenIZ.Core.Model.Entities.EntityNameComponent))) {
                                                            OpenIZ.Core.Model.Entities.EntityNameComponent _nretVal = ((OpenIZ.Core.Model.Entities.EntityNameComponent)(context.JsonContext.GetFormatter(_type).Deserialize(r, _type, context)));
                                                            _nretVal.CopyObjectData(_retVal);
                                                            return _nretVal;
                                                        }
                                                    }
                                                    else {
                                                        r.Skip();
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
                else {
                    if (((r.TokenType == Newtonsoft.Json.JsonToken.EndObject) 
                                && (r.Depth == _depth))) {
                        return _retVal;
                    }
                    else {
                        throw new Newtonsoft.Json.JsonSerializationException("JSON in invalid state");
                    }
                }
            }
            return _retVal;
        }
        
        public object FromSimpleValue(object o) {
            string _strong = null;
            if ((o == null)) {
                return null;
            }
            try {
                _strong = o.ToString();
            }
            catch (System.Exception e) {
                this.m_tracer.TraceError(string.Format("Casting Error: {0}", e));
                return null;
            }
            OpenIZ.Core.Model.Entities.EntityNameComponent _retVal = new OpenIZ.Core.Model.Entities.EntityNameComponent();
            _retVal.Value = _strong;
            return _retVal;
        }
        
        public object GetSimpleValue(object o) {
            if ((o == null)) {
                return null;
            }
            OpenIZ.Core.Model.Entities.EntityNameComponent _strong = null;
            try {
                _strong = ((OpenIZ.Core.Model.Entities.EntityNameComponent)(o));
            }
            catch (System.Exception e) {
                this.m_tracer.TraceError(string.Format("Casting Error: {0}", e));
                return null;
            }
            return _strong.Value;
        }
    }
    
    public class EntityRelationshipViewModelSerializer : OpenIZ.Core.Applets.ViewModel.Json.IJsonViewModelTypeFormatter {
        
        private OpenIZ.Core.Model.Serialization.ModelSerializationBinder m_binder = new OpenIZ.Core.Model.Serialization.ModelSerializationBinder();
        
        private OpenIZ.Core.Diagnostics.Tracer m_tracer = OpenIZ.Core.Diagnostics.Tracer.GetTracer(typeof(EntityRelationshipViewModelSerializer));
        
        public System.Type HandlesType {
            get {
                return typeof(OpenIZ.Core.Model.Entities.EntityRelationship);
            }
        }
        
        public void Serialize(Newtonsoft.Json.JsonWriter w, OpenIZ.Core.Model.IdentifiedData o, OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext context) {
            if ((o == null)) {
                throw new System.ArgumentNullException("o");
            }
            OpenIZ.Core.Model.Entities.EntityRelationship _strong = null;
            OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext _jsonContext = null;
            bool _loaded = false;
            try {
                _strong = ((OpenIZ.Core.Model.Entities.EntityRelationship)(o));
            }
            catch (System.Exception e) {
                this.m_tracer.TraceError(string.Format("Casting Error: {0}", e));
                throw new System.ArgumentException(string.Format("Invalid type {0} provided, expected {1}", o.GetType(), typeof(OpenIZ.Core.Model.Entities.EntityRelationship)));
            }
            if (context.ShouldSerialize("target")) {
                if ((_strong.TargetEntityKey == null)) {
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "target", _strong.TargetEntityKey, context);
                }
            }
            if (context.ShouldSerialize("holder")) {
                if ((_strong.HolderKey == null)) {
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "holder", _strong.HolderKey, context);
                }
            }
            if (context.ShouldSerialize("targetModel")) {
                if ((_strong.TargetEntity == null)) {
                    if ((_strong.Key.HasValue && context.ShouldForceLoad("targetModel", _strong.Key.Value))) {
                        OpenIZ.Core.Model.Entities.Entity _delay = null;
                        _delay = context.JsonContext.LoadRelated<OpenIZ.Core.Model.Entities.Entity>(_strong.TargetEntityKey);
                        _strong.TargetEntity = _delay;
                        if ((_delay != null)) {
                            _loaded = true;
                            context.JsonContext.WritePropertyUtil(w, "targetModel", _strong.TargetEntity, context);
                        }
                    }
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "targetModel", _strong.TargetEntity, context);
                }
            }
            if (context.ShouldSerialize("relationshipType")) {
                if ((_strong.RelationshipTypeKey == null)) {
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "relationshipType", _strong.RelationshipTypeKey, context);
                }
            }
            if (context.ShouldSerialize("inversionInd")) {
                if ((_strong.InversionIndicator == null)) {
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "inversionInd", _strong.InversionIndicator, context);
                }
            }
            if (context.ShouldSerialize("relationshipTypeModel")) {
                if ((_strong.RelationshipType == null)) {
                    if ((_strong.Key.HasValue && context.ShouldForceLoad("relationshipTypeModel", _strong.Key.Value))) {
                        OpenIZ.Core.Model.DataTypes.Concept _delay = null;
                        _delay = context.JsonContext.LoadRelated<OpenIZ.Core.Model.DataTypes.Concept>(_strong.RelationshipTypeKey);
                        _strong.RelationshipType = _delay;
                        if ((_delay != null)) {
                            _loaded = true;
                            context.JsonContext.WritePropertyUtil(w, "relationshipTypeModel", _strong.RelationshipType, context);
                        }
                    }
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "relationshipTypeModel", _strong.RelationshipType, context);
                }
            }
            if (context.ShouldSerialize("quantity")) {
                if ((_strong.Quantity == null)) {
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "quantity", _strong.Quantity, context);
                }
            }
            if (context.ShouldSerialize("effectiveVersionSequence")) {
                if ((_strong.EffectiveVersionSequenceId == null)) {
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "effectiveVersionSequence", _strong.EffectiveVersionSequenceId, context);
                }
            }
            if (context.ShouldSerialize("obsoleteVersionSequence")) {
                if ((_strong.ObsoleteVersionSequenceId == null)) {
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "obsoleteVersionSequence", _strong.ObsoleteVersionSequenceId, context);
                }
            }
            if (context.ShouldSerialize("modifiedOn")) {
                if ((_strong.ModifiedOn == null)) {
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "modifiedOn", _strong.ModifiedOn, context);
                }
            }
            if (context.ShouldSerialize("source")) {
                if ((_strong.SourceEntityKey == null)) {
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "source", _strong.SourceEntityKey, context);
                }
            }
            if (context.ShouldSerialize("id")) {
                if ((_strong.Key == null)) {
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "id", _strong.Key, context);
                }
            }
            if (context.ShouldSerialize("etag")) {
                if ((_strong.Tag == null)) {
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "etag", _strong.Tag, context);
                }
            }
            if ((_loaded && _strong.Key.HasValue)) {
                ((OpenIZ.Core.Services.IDataCachingService)(OpenIZ.Core.ApplicationServiceContext.Current.GetService(typeof(OpenIZ.Core.Services.IDataCachingService)))).Add(_strong);
            }
        }
        
        public object Deserialize(Newtonsoft.Json.JsonReader r, System.Type asType, OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext context) {
            OpenIZ.Core.Model.Entities.EntityRelationship _retVal = new OpenIZ.Core.Model.Entities.EntityRelationship();
            int _depth = r.Depth;
            if ((r.TokenType != Newtonsoft.Json.JsonToken.StartObject)) {
                _depth = (_depth - 1);
            }
            for (
            ; r.Read(); 
            ) {
                if ((r.TokenType == Newtonsoft.Json.JsonToken.PropertyName)) {
                    if ("id".Equals(r.Value)) {
                        r.Read();
                        System.Nullable<System.Guid> _instance = ((System.Nullable<System.Guid>)(context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<System.Guid>), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("id", context.JsonContext, _retVal, context))));
                        if ((_instance != null)) {
                            _retVal.Key = _instance;
                        }
                    }
                    else {
                        if ("source".Equals(r.Value)) {
                            r.Read();
                            System.Nullable<System.Guid> _instance = ((System.Nullable<System.Guid>)(context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<System.Guid>), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("source", context.JsonContext, _retVal, context))));
                            if ((_instance != null)) {
                                _retVal.SourceEntityKey = _instance;
                            }
                        }
                        else {
                            if ("obsoleteVersionSequence".Equals(r.Value)) {
                                r.Read();
                                System.Nullable<decimal> _instance = ((System.Nullable<decimal>)(context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<decimal>), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("obsoleteVersionSequence", context.JsonContext, _retVal, context))));
                                if ((_instance != null)) {
                                    _retVal.ObsoleteVersionSequenceId = _instance;
                                }
                            }
                            else {
                                if ("effectiveVersionSequence".Equals(r.Value)) {
                                    r.Read();
                                    System.Nullable<decimal> _instance = ((System.Nullable<decimal>)(context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<decimal>), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("effectiveVersionSequence", context.JsonContext, _retVal, context))));
                                    if ((_instance != null)) {
                                        _retVal.EffectiveVersionSequenceId = _instance;
                                    }
                                }
                                else {
                                    if ("quantity".Equals(r.Value)) {
                                        r.Read();
                                        int _instance = ((int)(context.JsonContext.ReadElementUtil(r, typeof(int), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("quantity", context.JsonContext, _retVal, context))));
                                        if ((_instance != null)) {
                                            _retVal.Quantity = _instance;
                                        }
                                    }
                                    else {
                                        if ("relationshipTypeModel".Equals(r.Value)) {
                                            r.Read();
                                            OpenIZ.Core.Model.DataTypes.Concept _instance = ((OpenIZ.Core.Model.DataTypes.Concept)(context.JsonContext.ReadElementUtil(r, typeof(OpenIZ.Core.Model.DataTypes.Concept), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("relationshipTypeModel", context.JsonContext, _retVal, context))));
                                            if ((_instance != null)) {
                                                _retVal.RelationshipType = _instance;
                                            }
                                        }
                                        else {
                                            if ("inversionInd".Equals(r.Value)) {
                                                r.Read();
                                                bool _instance = ((bool)(context.JsonContext.ReadElementUtil(r, typeof(bool), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("inversionInd", context.JsonContext, _retVal, context))));
                                                if ((_instance != null)) {
                                                    _retVal.InversionIndicator = _instance;
                                                }
                                            }
                                            else {
                                                if ("relationshipType".Equals(r.Value)) {
                                                    r.Read();
                                                    System.Nullable<System.Guid> _instance = ((System.Nullable<System.Guid>)(context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<System.Guid>), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("relationshipType", context.JsonContext, _retVal, context))));
                                                    if ((_instance != null)) {
                                                        _retVal.RelationshipTypeKey = _instance;
                                                    }
                                                }
                                                else {
                                                    if ("targetModel".Equals(r.Value)) {
                                                        r.Read();
                                                        OpenIZ.Core.Model.Entities.Entity _instance = ((OpenIZ.Core.Model.Entities.Entity)(context.JsonContext.ReadElementUtil(r, typeof(OpenIZ.Core.Model.Entities.Entity), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("targetModel", context.JsonContext, _retVal, context))));
                                                        if ((_instance != null)) {
                                                            _retVal.TargetEntity = _instance;
                                                        }
                                                    }
                                                    else {
                                                        if ("holder".Equals(r.Value)) {
                                                            r.Read();
                                                            System.Nullable<System.Guid> _instance = ((System.Nullable<System.Guid>)(context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<System.Guid>), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("holder", context.JsonContext, _retVal, context))));
                                                            if ((_instance != null)) {
                                                                _retVal.HolderKey = _instance;
                                                            }
                                                        }
                                                        else {
                                                            if ("target".Equals(r.Value)) {
                                                                r.Read();
                                                                System.Nullable<System.Guid> _instance = ((System.Nullable<System.Guid>)(context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<System.Guid>), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("target", context.JsonContext, _retVal, context))));
                                                                if ((_instance != null)) {
                                                                    _retVal.TargetEntityKey = _instance;
                                                                }
                                                            }
                                                            else {
                                                                if ("$type".Equals(r.Value)) {
                                                                    System.Type _type = this.m_binder.BindToType("OpenIZ.Core.Model, Version=0.6.14.21496, Culture=neutral, PublicKeyToken=null", r.ReadAsString());
                                                                    if ((_type != typeof(OpenIZ.Core.Model.Entities.EntityRelationship))) {
                                                                        OpenIZ.Core.Model.Entities.EntityRelationship _nretVal = ((OpenIZ.Core.Model.Entities.EntityRelationship)(context.JsonContext.GetFormatter(_type).Deserialize(r, _type, context)));
                                                                        _nretVal.CopyObjectData(_retVal);
                                                                        return _nretVal;
                                                                    }
                                                                }
                                                                else {
                                                                    r.Skip();
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
                else {
                    if (((r.TokenType == Newtonsoft.Json.JsonToken.EndObject) 
                                && (r.Depth == _depth))) {
                        return _retVal;
                    }
                    else {
                        throw new Newtonsoft.Json.JsonSerializationException("JSON in invalid state");
                    }
                }
            }
            return _retVal;
        }
        
        public object FromSimpleValue(object o) {
            return null;
        }
        
        public object GetSimpleValue(object o) {
            return null;
        }
    }
    
    public class EntityTelecomAddressViewModelSerializer : OpenIZ.Core.Applets.ViewModel.Json.IJsonViewModelTypeFormatter {
        
        private OpenIZ.Core.Model.Serialization.ModelSerializationBinder m_binder = new OpenIZ.Core.Model.Serialization.ModelSerializationBinder();
        
        private OpenIZ.Core.Diagnostics.Tracer m_tracer = OpenIZ.Core.Diagnostics.Tracer.GetTracer(typeof(EntityTelecomAddressViewModelSerializer));
        
        public System.Type HandlesType {
            get {
                return typeof(OpenIZ.Core.Model.Entities.EntityTelecomAddress);
            }
        }
        
        public void Serialize(Newtonsoft.Json.JsonWriter w, OpenIZ.Core.Model.IdentifiedData o, OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext context) {
            if ((o == null)) {
                throw new System.ArgumentNullException("o");
            }
            OpenIZ.Core.Model.Entities.EntityTelecomAddress _strong = null;
            OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext _jsonContext = null;
            bool _loaded = false;
            try {
                _strong = ((OpenIZ.Core.Model.Entities.EntityTelecomAddress)(o));
            }
            catch (System.Exception e) {
                this.m_tracer.TraceError(string.Format("Casting Error: {0}", e));
                throw new System.ArgumentException(string.Format("Invalid type {0} provided, expected {1}", o.GetType(), typeof(OpenIZ.Core.Model.Entities.EntityTelecomAddress)));
            }
            if (context.ShouldSerialize("use")) {
                if ((_strong.AddressUseKey == null)) {
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "use", _strong.AddressUseKey, context);
                }
            }
            if (context.ShouldSerialize("useModel")) {
                if ((_strong.AddressUse == null)) {
                    if ((_strong.Key.HasValue && context.ShouldForceLoad("useModel", _strong.Key.Value))) {
                        OpenIZ.Core.Model.DataTypes.Concept _delay = null;
                        _delay = context.JsonContext.LoadRelated<OpenIZ.Core.Model.DataTypes.Concept>(_strong.AddressUseKey);
                        _strong.AddressUse = _delay;
                        if ((_delay != null)) {
                            _loaded = true;
                            context.JsonContext.WritePropertyUtil(w, "useModel", _strong.AddressUse, context);
                        }
                    }
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "useModel", _strong.AddressUse, context);
                }
            }
            if (context.ShouldSerialize("value")) {
                if ((_strong.Value == null)) {
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "value", _strong.Value, context);
                }
            }
            if (context.ShouldSerialize("effectiveVersionSequence")) {
                if ((_strong.EffectiveVersionSequenceId == null)) {
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "effectiveVersionSequence", _strong.EffectiveVersionSequenceId, context);
                }
            }
            if (context.ShouldSerialize("obsoleteVersionSequence")) {
                if ((_strong.ObsoleteVersionSequenceId == null)) {
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "obsoleteVersionSequence", _strong.ObsoleteVersionSequenceId, context);
                }
            }
            if (context.ShouldSerialize("modifiedOn")) {
                if ((_strong.ModifiedOn == null)) {
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "modifiedOn", _strong.ModifiedOn, context);
                }
            }
            if (context.ShouldSerialize("source")) {
                if ((_strong.SourceEntityKey == null)) {
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "source", _strong.SourceEntityKey, context);
                }
            }
            if (context.ShouldSerialize("id")) {
                if ((_strong.Key == null)) {
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "id", _strong.Key, context);
                }
            }
            if (context.ShouldSerialize("etag")) {
                if ((_strong.Tag == null)) {
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "etag", _strong.Tag, context);
                }
            }
            if ((_loaded && _strong.Key.HasValue)) {
                ((OpenIZ.Core.Services.IDataCachingService)(OpenIZ.Core.ApplicationServiceContext.Current.GetService(typeof(OpenIZ.Core.Services.IDataCachingService)))).Add(_strong);
            }
        }
        
        public object Deserialize(Newtonsoft.Json.JsonReader r, System.Type asType, OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext context) {
            OpenIZ.Core.Model.Entities.EntityTelecomAddress _retVal = new OpenIZ.Core.Model.Entities.EntityTelecomAddress();
            int _depth = r.Depth;
            if ((r.TokenType != Newtonsoft.Json.JsonToken.StartObject)) {
                _depth = (_depth - 1);
            }
            for (
            ; r.Read(); 
            ) {
                if ((r.TokenType == Newtonsoft.Json.JsonToken.PropertyName)) {
                    if ("id".Equals(r.Value)) {
                        r.Read();
                        System.Nullable<System.Guid> _instance = ((System.Nullable<System.Guid>)(context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<System.Guid>), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("id", context.JsonContext, _retVal, context))));
                        if ((_instance != null)) {
                            _retVal.Key = _instance;
                        }
                    }
                    else {
                        if ("source".Equals(r.Value)) {
                            r.Read();
                            System.Nullable<System.Guid> _instance = ((System.Nullable<System.Guid>)(context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<System.Guid>), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("source", context.JsonContext, _retVal, context))));
                            if ((_instance != null)) {
                                _retVal.SourceEntityKey = _instance;
                            }
                        }
                        else {
                            if ("obsoleteVersionSequence".Equals(r.Value)) {
                                r.Read();
                                System.Nullable<decimal> _instance = ((System.Nullable<decimal>)(context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<decimal>), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("obsoleteVersionSequence", context.JsonContext, _retVal, context))));
                                if ((_instance != null)) {
                                    _retVal.ObsoleteVersionSequenceId = _instance;
                                }
                            }
                            else {
                                if ("effectiveVersionSequence".Equals(r.Value)) {
                                    r.Read();
                                    System.Nullable<decimal> _instance = ((System.Nullable<decimal>)(context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<decimal>), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("effectiveVersionSequence", context.JsonContext, _retVal, context))));
                                    if ((_instance != null)) {
                                        _retVal.EffectiveVersionSequenceId = _instance;
                                    }
                                }
                                else {
                                    if ("value".Equals(r.Value)) {
                                        r.Read();
                                        string _instance = ((string)(context.JsonContext.ReadElementUtil(r, typeof(string), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("value", context.JsonContext, _retVal, context))));
                                        if ((_instance != null)) {
                                            _retVal.Value = _instance;
                                        }
                                    }
                                    else {
                                        if ("useModel".Equals(r.Value)) {
                                            r.Read();
                                            OpenIZ.Core.Model.DataTypes.Concept _instance = ((OpenIZ.Core.Model.DataTypes.Concept)(context.JsonContext.ReadElementUtil(r, typeof(OpenIZ.Core.Model.DataTypes.Concept), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("useModel", context.JsonContext, _retVal, context))));
                                            if ((_instance != null)) {
                                                _retVal.AddressUse = _instance;
                                            }
                                        }
                                        else {
                                            if ("use".Equals(r.Value)) {
                                                r.Read();
                                                System.Nullable<System.Guid> _instance = ((System.Nullable<System.Guid>)(context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<System.Guid>), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("use", context.JsonContext, _retVal, context))));
                                                if ((_instance != null)) {
                                                    _retVal.AddressUseKey = _instance;
                                                }
                                            }
                                            else {
                                                if ("$type".Equals(r.Value)) {
                                                    System.Type _type = this.m_binder.BindToType("OpenIZ.Core.Model, Version=0.6.14.21496, Culture=neutral, PublicKeyToken=null", r.ReadAsString());
                                                    if ((_type != typeof(OpenIZ.Core.Model.Entities.EntityTelecomAddress))) {
                                                        OpenIZ.Core.Model.Entities.EntityTelecomAddress _nretVal = ((OpenIZ.Core.Model.Entities.EntityTelecomAddress)(context.JsonContext.GetFormatter(_type).Deserialize(r, _type, context)));
                                                        _nretVal.CopyObjectData(_retVal);
                                                        return _nretVal;
                                                    }
                                                }
                                                else {
                                                    r.Skip();
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
                else {
                    if (((r.TokenType == Newtonsoft.Json.JsonToken.EndObject) 
                                && (r.Depth == _depth))) {
                        return _retVal;
                    }
                    else {
                        throw new Newtonsoft.Json.JsonSerializationException("JSON in invalid state");
                    }
                }
            }
            return _retVal;
        }
        
        public object FromSimpleValue(object o) {
            return null;
        }
        
        public object GetSimpleValue(object o) {
            return null;
        }
    }
    
    public class ManufacturedMaterialViewModelSerializer : OpenIZ.Core.Applets.ViewModel.Json.IJsonViewModelTypeFormatter {
        
        private OpenIZ.Core.Model.Serialization.ModelSerializationBinder m_binder = new OpenIZ.Core.Model.Serialization.ModelSerializationBinder();
        
        private OpenIZ.Core.Diagnostics.Tracer m_tracer = OpenIZ.Core.Diagnostics.Tracer.GetTracer(typeof(ManufacturedMaterialViewModelSerializer));
        
        public System.Type HandlesType {
            get {
                return typeof(OpenIZ.Core.Model.Entities.ManufacturedMaterial);
            }
        }
        
        public void Serialize(Newtonsoft.Json.JsonWriter w, OpenIZ.Core.Model.IdentifiedData o, OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext context) {
            if ((o == null)) {
                throw new System.ArgumentNullException("o");
            }
            OpenIZ.Core.Model.Entities.ManufacturedMaterial _strong = null;
            OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext _jsonContext = null;
            bool _loaded = false;
            try {
                _strong = ((OpenIZ.Core.Model.Entities.ManufacturedMaterial)(o));
            }
            catch (System.Exception e) {
                this.m_tracer.TraceError(string.Format("Casting Error: {0}", e));
                throw new System.ArgumentException(string.Format("Invalid type {0} provided, expected {1}", o.GetType(), typeof(OpenIZ.Core.Model.Entities.ManufacturedMaterial)));
            }
            if (context.ShouldSerialize("lotNumber")) {
                if ((_strong.LotNumber == null)) {
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "lotNumber", _strong.LotNumber, context);
                }
            }
            if (context.ShouldSerialize("quantity")) {
                if ((_strong.Quantity == null)) {
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "quantity", _strong.Quantity, context);
                }
            }
            if (context.ShouldSerialize("formConcept")) {
                if ((_strong.FormConceptKey == null)) {
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "formConcept", _strong.FormConceptKey, context);
                }
            }
            if (context.ShouldSerialize("quantityConcept")) {
                if ((_strong.QuantityConceptKey == null)) {
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "quantityConcept", _strong.QuantityConceptKey, context);
                }
            }
            if (context.ShouldSerialize("formConceptModel")) {
                if ((_strong.FormConcept == null)) {
                    if ((_strong.Key.HasValue && context.ShouldForceLoad("formConceptModel", _strong.Key.Value))) {
                        OpenIZ.Core.Model.DataTypes.Concept _delay = null;
                        _delay = context.JsonContext.LoadRelated<OpenIZ.Core.Model.DataTypes.Concept>(_strong.FormConceptKey);
                        _strong.FormConcept = _delay;
                        if ((_delay != null)) {
                            _loaded = true;
                            context.JsonContext.WritePropertyUtil(w, "formConceptModel", _strong.FormConcept, context);
                        }
                    }
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "formConceptModel", _strong.FormConcept, context);
                }
            }
            if (context.ShouldSerialize("quantityConceptModel")) {
                if ((_strong.QuantityConcept == null)) {
                    if ((_strong.Key.HasValue && context.ShouldForceLoad("quantityConceptModel", _strong.Key.Value))) {
                        OpenIZ.Core.Model.DataTypes.Concept _delay = null;
                        _delay = context.JsonContext.LoadRelated<OpenIZ.Core.Model.DataTypes.Concept>(_strong.QuantityConceptKey);
                        _strong.QuantityConcept = _delay;
                        if ((_delay != null)) {
                            _loaded = true;
                            context.JsonContext.WritePropertyUtil(w, "quantityConceptModel", _strong.QuantityConcept, context);
                        }
                    }
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "quantityConceptModel", _strong.QuantityConcept, context);
                }
            }
            if (context.ShouldSerialize("expiryDate")) {
                if ((_strong.ExpiryDate == null)) {
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "expiryDate", _strong.ExpiryDate, context);
                }
            }
            if (context.ShouldSerialize("isAdministrative")) {
                if ((_strong.IsAdministrative == null)) {
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "isAdministrative", _strong.IsAdministrative, context);
                }
            }
            if (context.ShouldSerialize("template")) {
                if ((_strong.Template == null)) {
                    if ((_strong.Key.HasValue && context.ShouldForceLoad("template", _strong.Key.Value))) {
                        OpenIZ.Core.Model.DataTypes.TemplateDefinition _delay = null;
                    }
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "template", _strong.Template, context);
                }
            }
            if (context.ShouldSerialize("classConcept")) {
                if ((_strong.ClassConceptKey == null)) {
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "classConcept", _strong.ClassConceptKey, context);
                }
            }
            if (context.ShouldSerialize("determinerConcept")) {
                if ((_strong.DeterminerConceptKey == null)) {
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "determinerConcept", _strong.DeterminerConceptKey, context);
                }
            }
            if (context.ShouldSerialize("statusConcept")) {
                if ((_strong.StatusConceptKey == null)) {
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "statusConcept", _strong.StatusConceptKey, context);
                }
            }
            if (context.ShouldSerialize("creationAct")) {
                if ((_strong.CreationActKey == null)) {
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "creationAct", _strong.CreationActKey, context);
                }
            }
            if (context.ShouldSerialize("typeConcept")) {
                if ((_strong.TypeConceptKey == null)) {
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "typeConcept", _strong.TypeConceptKey, context);
                }
            }
            if (context.ShouldSerialize("classConceptModel")) {
                if ((_strong.ClassConcept == null)) {
                    if ((_strong.Key.HasValue && context.ShouldForceLoad("classConceptModel", _strong.Key.Value))) {
                        OpenIZ.Core.Model.DataTypes.Concept _delay = null;
                        _delay = context.JsonContext.LoadRelated<OpenIZ.Core.Model.DataTypes.Concept>(_strong.ClassConceptKey);
                        _strong.ClassConcept = _delay;
                        if ((_delay != null)) {
                            _loaded = true;
                            context.JsonContext.WritePropertyUtil(w, "classConceptModel", _strong.ClassConcept, context);
                        }
                    }
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "classConceptModel", _strong.ClassConcept, context);
                }
            }
            if (context.ShouldSerialize("determinerConceptModel")) {
                if ((_strong.DeterminerConcept == null)) {
                    if ((_strong.Key.HasValue && context.ShouldForceLoad("determinerConceptModel", _strong.Key.Value))) {
                        OpenIZ.Core.Model.DataTypes.Concept _delay = null;
                        _delay = context.JsonContext.LoadRelated<OpenIZ.Core.Model.DataTypes.Concept>(_strong.DeterminerConceptKey);
                        _strong.DeterminerConcept = _delay;
                        if ((_delay != null)) {
                            _loaded = true;
                            context.JsonContext.WritePropertyUtil(w, "determinerConceptModel", _strong.DeterminerConcept, context);
                        }
                    }
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "determinerConceptModel", _strong.DeterminerConcept, context);
                }
            }
            if (context.ShouldSerialize("statusConceptModel")) {
                if ((_strong.StatusConcept == null)) {
                    if ((_strong.Key.HasValue && context.ShouldForceLoad("statusConceptModel", _strong.Key.Value))) {
                        OpenIZ.Core.Model.DataTypes.Concept _delay = null;
                        _delay = context.JsonContext.LoadRelated<OpenIZ.Core.Model.DataTypes.Concept>(_strong.StatusConceptKey);
                        _strong.StatusConcept = _delay;
                        if ((_delay != null)) {
                            _loaded = true;
                            context.JsonContext.WritePropertyUtil(w, "statusConceptModel", _strong.StatusConcept, context);
                        }
                    }
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "statusConceptModel", _strong.StatusConcept, context);
                }
            }
            if (context.ShouldSerialize("creationActModel")) {
                if ((_strong.CreationAct == null)) {
                    if ((_strong.Key.HasValue && context.ShouldForceLoad("creationActModel", _strong.Key.Value))) {
                        OpenIZ.Core.Model.Acts.Act _delay = null;
                        _delay = context.JsonContext.LoadRelated<OpenIZ.Core.Model.Acts.Act>(_strong.CreationActKey);
                        _strong.CreationAct = _delay;
                        if ((_delay != null)) {
                            _loaded = true;
                            context.JsonContext.WritePropertyUtil(w, "creationActModel", _strong.CreationAct, context);
                        }
                    }
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "creationActModel", _strong.CreationAct, context);
                }
            }
            if (context.ShouldSerialize("typeConceptModel")) {
                if ((_strong.TypeConcept == null)) {
                    if ((_strong.Key.HasValue && context.ShouldForceLoad("typeConceptModel", _strong.Key.Value))) {
                        OpenIZ.Core.Model.DataTypes.Concept _delay = null;
                        _delay = context.JsonContext.LoadRelated<OpenIZ.Core.Model.DataTypes.Concept>(_strong.TypeConceptKey);
                        _strong.TypeConcept = _delay;
                        if ((_delay != null)) {
                            _loaded = true;
                            context.JsonContext.WritePropertyUtil(w, "typeConceptModel", _strong.TypeConcept, context);
                        }
                    }
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "typeConceptModel", _strong.TypeConcept, context);
                }
            }
            if (context.ShouldSerialize("identifier")) {
                if (((_strong.Identifiers == null) 
                            || (_strong.Identifiers.Count == 0))) {
                    if ((_strong.Key.HasValue && context.ShouldForceLoad("identifier", _strong.Key.Value))) {
                        System.Collections.Generic.List<OpenIZ.Core.Model.DataTypes.EntityIdentifier> _delay = null;
                        _delay = new System.Collections.Generic.List<OpenIZ.Core.Model.DataTypes.EntityIdentifier>(context.JsonContext.LoadCollection<OpenIZ.Core.Model.DataTypes.EntityIdentifier>(_strong.Key.Value));
                        _strong.Identifiers = _delay;
                        if ((_delay.Count > 0)) {
                            _loaded = true;
                            context.JsonContext.WritePropertyUtil(w, "identifier", _strong.Identifiers, context);
                        }
                    }
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "identifier", _strong.Identifiers, context);
                }
            }
            if (context.ShouldSerialize("relationship")) {
                if (((_strong.Relationships == null) 
                            || (_strong.Relationships.Count == 0))) {
                    if ((_strong.Key.HasValue && context.ShouldForceLoad("relationship", _strong.Key.Value))) {
                        System.Collections.Generic.List<OpenIZ.Core.Model.Entities.EntityRelationship> _delay = null;
                        _delay = new System.Collections.Generic.List<OpenIZ.Core.Model.Entities.EntityRelationship>(context.JsonContext.LoadCollection<OpenIZ.Core.Model.Entities.EntityRelationship>(_strong.Key.Value));
                        _strong.Relationships = _delay;
                        if ((_delay.Count > 0)) {
                            _loaded = true;
                            context.JsonContext.WritePropertyUtil(w, "relationship", _strong.Relationships, context);
                        }
                    }
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "relationship", _strong.Relationships, context);
                }
            }
            if (context.ShouldSerialize("telecom")) {
                if (((_strong.Telecoms == null) 
                            || (_strong.Telecoms.Count == 0))) {
                    if ((_strong.Key.HasValue && context.ShouldForceLoad("telecom", _strong.Key.Value))) {
                        System.Collections.Generic.List<OpenIZ.Core.Model.Entities.EntityTelecomAddress> _delay = null;
                        _delay = new System.Collections.Generic.List<OpenIZ.Core.Model.Entities.EntityTelecomAddress>(context.JsonContext.LoadCollection<OpenIZ.Core.Model.Entities.EntityTelecomAddress>(_strong.Key.Value));
                        _strong.Telecoms = _delay;
                        if ((_delay.Count > 0)) {
                            _loaded = true;
                            context.JsonContext.WritePropertyUtil(w, "telecom", _strong.Telecoms, context);
                        }
                    }
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "telecom", _strong.Telecoms, context);
                }
            }
            if (context.ShouldSerialize("extension")) {
                if (((_strong.Extensions == null) 
                            || (_strong.Extensions.Count == 0))) {
                    if ((_strong.Key.HasValue && context.ShouldForceLoad("extension", _strong.Key.Value))) {
                        System.Collections.Generic.List<OpenIZ.Core.Model.DataTypes.EntityExtension> _delay = null;
                        _delay = new System.Collections.Generic.List<OpenIZ.Core.Model.DataTypes.EntityExtension>(context.JsonContext.LoadCollection<OpenIZ.Core.Model.DataTypes.EntityExtension>(_strong.Key.Value));
                        _strong.Extensions = _delay;
                        if ((_delay.Count > 0)) {
                            _loaded = true;
                            context.JsonContext.WritePropertyUtil(w, "extension", _strong.Extensions, context);
                        }
                    }
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "extension", _strong.Extensions, context);
                }
            }
            if (context.ShouldSerialize("name")) {
                if (((_strong.Names == null) 
                            || (_strong.Names.Count == 0))) {
                    if ((_strong.Key.HasValue && context.ShouldForceLoad("name", _strong.Key.Value))) {
                        System.Collections.Generic.List<OpenIZ.Core.Model.Entities.EntityName> _delay = null;
                        _delay = new System.Collections.Generic.List<OpenIZ.Core.Model.Entities.EntityName>(context.JsonContext.LoadCollection<OpenIZ.Core.Model.Entities.EntityName>(_strong.Key.Value));
                        _strong.Names = _delay;
                        if ((_delay.Count > 0)) {
                            _loaded = true;
                            context.JsonContext.WritePropertyUtil(w, "name", _strong.Names, context);
                        }
                    }
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "name", _strong.Names, context);
                }
            }
            if (context.ShouldSerialize("address")) {
                if (((_strong.Addresses == null) 
                            || (_strong.Addresses.Count == 0))) {
                    if ((_strong.Key.HasValue && context.ShouldForceLoad("address", _strong.Key.Value))) {
                        System.Collections.Generic.List<OpenIZ.Core.Model.Entities.EntityAddress> _delay = null;
                        _delay = new System.Collections.Generic.List<OpenIZ.Core.Model.Entities.EntityAddress>(context.JsonContext.LoadCollection<OpenIZ.Core.Model.Entities.EntityAddress>(_strong.Key.Value));
                        _strong.Addresses = _delay;
                        if ((_delay.Count > 0)) {
                            _loaded = true;
                            context.JsonContext.WritePropertyUtil(w, "address", _strong.Addresses, context);
                        }
                    }
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "address", _strong.Addresses, context);
                }
            }
            if (context.ShouldSerialize("note")) {
                if (((_strong.Notes == null) 
                            || (_strong.Notes.Count == 0))) {
                    if ((_strong.Key.HasValue && context.ShouldForceLoad("note", _strong.Key.Value))) {
                        System.Collections.Generic.List<OpenIZ.Core.Model.DataTypes.EntityNote> _delay = null;
                        _delay = new System.Collections.Generic.List<OpenIZ.Core.Model.DataTypes.EntityNote>(context.JsonContext.LoadCollection<OpenIZ.Core.Model.DataTypes.EntityNote>(_strong.Key.Value));
                        _strong.Notes = _delay;
                        if ((_delay.Count > 0)) {
                            _loaded = true;
                            context.JsonContext.WritePropertyUtil(w, "note", _strong.Notes, context);
                        }
                    }
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "note", _strong.Notes, context);
                }
            }
            if (context.ShouldSerialize("tag")) {
                if (((_strong.Tags == null) 
                            || (_strong.Tags.Count == 0))) {
                    if ((_strong.Key.HasValue && context.ShouldForceLoad("tag", _strong.Key.Value))) {
                        System.Collections.Generic.List<OpenIZ.Core.Model.DataTypes.EntityTag> _delay = null;
                        _delay = new System.Collections.Generic.List<OpenIZ.Core.Model.DataTypes.EntityTag>(context.JsonContext.LoadCollection<OpenIZ.Core.Model.DataTypes.EntityTag>(_strong.Key.Value));
                        _strong.Tags = _delay;
                        if ((_delay.Count > 0)) {
                            _loaded = true;
                            context.JsonContext.WritePropertyUtil(w, "tag", _strong.Tags, context);
                        }
                    }
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "tag", _strong.Tags, context);
                }
            }
            if (context.ShouldSerialize("participation")) {
                if (((_strong.Participations == null) 
                            || (_strong.Participations.Count == 0))) {
                    if ((_strong.Key.HasValue && context.ShouldForceLoad("participation", _strong.Key.Value))) {
                        System.Collections.Generic.List<OpenIZ.Core.Model.Acts.ActParticipation> _delay = null;
                        _delay = new System.Collections.Generic.List<OpenIZ.Core.Model.Acts.ActParticipation>(context.JsonContext.LoadCollection<OpenIZ.Core.Model.Acts.ActParticipation>(_strong.Key.Value));
                        _strong.Participations = _delay;
                        if ((_delay.Count > 0)) {
                            _loaded = true;
                            context.JsonContext.WritePropertyUtil(w, "participation", _strong.Participations, context);
                        }
                    }
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "participation", _strong.Participations, context);
                }
            }
            if (context.ShouldSerialize("etag")) {
                if ((_strong.Tag == null)) {
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "etag", _strong.Tag, context);
                }
            }
            if (context.ShouldSerialize("previousVersion")) {
                if ((_strong.PreviousVersionKey == null)) {
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "previousVersion", _strong.PreviousVersionKey, context);
                }
            }
            if (context.ShouldSerialize("version")) {
                if ((_strong.VersionKey == null)) {
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "version", _strong.VersionKey, context);
                }
            }
            if (context.ShouldSerialize("sequence")) {
                if ((_strong.VersionSequence == null)) {
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "sequence", _strong.VersionSequence, context);
                }
            }
            if (context.ShouldSerialize("creationTimeModel")) {
                if ((_strong.CreationTime == null)) {
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "creationTimeModel", _strong.CreationTime, context);
                }
            }
            if (context.ShouldSerialize("creationTime")) {
                if ((_strong.CreationTimeXml == null)) {
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "creationTime", _strong.CreationTimeXml, context);
                }
            }
            if (context.ShouldSerialize("obsoletionTimeModel")) {
                if ((_strong.ObsoletionTime == null)) {
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "obsoletionTimeModel", _strong.ObsoletionTime, context);
                }
            }
            if (context.ShouldSerialize("obsoletionTime")) {
                if ((_strong.ObsoletionTimeXml == null)) {
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "obsoletionTime", _strong.ObsoletionTimeXml, context);
                }
            }
            if (context.ShouldSerialize("createdBy")) {
                if ((_strong.CreatedByKey == null)) {
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "createdBy", _strong.CreatedByKey, context);
                }
            }
            if (context.ShouldSerialize("obsoletedBy")) {
                if ((_strong.ObsoletedByKey == null)) {
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "obsoletedBy", _strong.ObsoletedByKey, context);
                }
            }
            if (context.ShouldSerialize("id")) {
                if ((_strong.Key == null)) {
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "id", _strong.Key, context);
                }
            }
            if (((_loaded && _strong.Key.HasValue) 
                        && _strong.VersionKey.HasValue)) {
                ((OpenIZ.Core.Services.IDataCachingService)(OpenIZ.Core.ApplicationServiceContext.Current.GetService(typeof(OpenIZ.Core.Services.IDataCachingService)))).Add(_strong);
            }
        }
        
        public object Deserialize(Newtonsoft.Json.JsonReader r, System.Type asType, OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext context) {
            OpenIZ.Core.Model.Entities.ManufacturedMaterial _retVal = new OpenIZ.Core.Model.Entities.ManufacturedMaterial();
            int _depth = r.Depth;
            if ((r.TokenType != Newtonsoft.Json.JsonToken.StartObject)) {
                _depth = (_depth - 1);
            }
            for (
            ; r.Read(); 
            ) {
                if ((r.TokenType == Newtonsoft.Json.JsonToken.PropertyName)) {
                    if ("id".Equals(r.Value)) {
                        r.Read();
                        System.Nullable<System.Guid> _instance = ((System.Nullable<System.Guid>)(context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<System.Guid>), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("id", context.JsonContext, _retVal, context))));
                        if ((_instance != null)) {
                            _retVal.Key = _instance;
                        }
                    }
                    else {
                        if ("obsoletedBy".Equals(r.Value)) {
                            r.Read();
                            System.Nullable<System.Guid> _instance = ((System.Nullable<System.Guid>)(context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<System.Guid>), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("obsoletedBy", context.JsonContext, _retVal, context))));
                            if ((_instance != null)) {
                                _retVal.ObsoletedByKey = _instance;
                            }
                        }
                        else {
                            if ("createdBy".Equals(r.Value)) {
                                r.Read();
                                System.Nullable<System.Guid> _instance = ((System.Nullable<System.Guid>)(context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<System.Guid>), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("createdBy", context.JsonContext, _retVal, context))));
                                if ((_instance != null)) {
                                    _retVal.CreatedByKey = _instance;
                                }
                            }
                            else {
                                if ("obsoletionTime".Equals(r.Value)) {
                                    r.Read();
                                    string _instance = ((string)(context.JsonContext.ReadElementUtil(r, typeof(string), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("obsoletionTime", context.JsonContext, _retVal, context))));
                                    if ((_instance != null)) {
                                        _retVal.ObsoletionTimeXml = _instance;
                                    }
                                }
                                else {
                                    if ("obsoletionTimeModel".Equals(r.Value)) {
                                        r.Read();
                                        System.Nullable<System.DateTimeOffset> _instance = ((System.Nullable<System.DateTimeOffset>)(context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<System.DateTimeOffset>), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("obsoletionTimeModel", context.JsonContext, _retVal, context))));
                                        if ((_instance != null)) {
                                            _retVal.ObsoletionTime = _instance;
                                        }
                                    }
                                    else {
                                        if ("creationTime".Equals(r.Value)) {
                                            r.Read();
                                            string _instance = ((string)(context.JsonContext.ReadElementUtil(r, typeof(string), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("creationTime", context.JsonContext, _retVal, context))));
                                            if ((_instance != null)) {
                                                _retVal.CreationTimeXml = _instance;
                                            }
                                        }
                                        else {
                                            if ("creationTimeModel".Equals(r.Value)) {
                                                r.Read();
                                                System.DateTimeOffset _instance = ((System.DateTimeOffset)(context.JsonContext.ReadElementUtil(r, typeof(System.DateTimeOffset), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("creationTimeModel", context.JsonContext, _retVal, context))));
                                                if ((_instance != null)) {
                                                    _retVal.CreationTime = _instance;
                                                }
                                            }
                                            else {
                                                if ("sequence".Equals(r.Value)) {
                                                    r.Read();
                                                    System.Nullable<decimal> _instance = ((System.Nullable<decimal>)(context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<decimal>), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("sequence", context.JsonContext, _retVal, context))));
                                                    if ((_instance != null)) {
                                                        _retVal.VersionSequence = _instance;
                                                    }
                                                }
                                                else {
                                                    if ("version".Equals(r.Value)) {
                                                        r.Read();
                                                        System.Nullable<System.Guid> _instance = ((System.Nullable<System.Guid>)(context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<System.Guid>), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("version", context.JsonContext, _retVal, context))));
                                                        if ((_instance != null)) {
                                                            _retVal.VersionKey = _instance;
                                                        }
                                                    }
                                                    else {
                                                        if ("previousVersion".Equals(r.Value)) {
                                                            r.Read();
                                                            System.Nullable<System.Guid> _instance = ((System.Nullable<System.Guid>)(context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<System.Guid>), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("previousVersion", context.JsonContext, _retVal, context))));
                                                            if ((_instance != null)) {
                                                                _retVal.PreviousVersionKey = _instance;
                                                            }
                                                        }
                                                        else {
                                                            if ("participation".Equals(r.Value)) {
                                                                r.Read();
                                                                System.Collections.Generic.List<OpenIZ.Core.Model.Acts.ActParticipation> _instance = ((System.Collections.Generic.List<OpenIZ.Core.Model.Acts.ActParticipation>)(context.JsonContext.ReadElementUtil(r, typeof(System.Collections.Generic.List<OpenIZ.Core.Model.Acts.ActParticipation>), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("participation", context.JsonContext, _retVal, context))));
                                                                if ((_instance != null)) {
                                                                    _retVal.Participations = _instance;
                                                                }
                                                            }
                                                            else {
                                                                if ("tag".Equals(r.Value)) {
                                                                    r.Read();
                                                                    System.Collections.Generic.List<OpenIZ.Core.Model.DataTypes.EntityTag> _instance = ((System.Collections.Generic.List<OpenIZ.Core.Model.DataTypes.EntityTag>)(context.JsonContext.ReadElementUtil(r, typeof(System.Collections.Generic.List<OpenIZ.Core.Model.DataTypes.EntityTag>), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("tag", context.JsonContext, _retVal, context))));
                                                                    if ((_instance != null)) {
                                                                        _retVal.Tags = _instance;
                                                                    }
                                                                }
                                                                else {
                                                                    if ("note".Equals(r.Value)) {
                                                                        r.Read();
                                                                        System.Collections.Generic.List<OpenIZ.Core.Model.DataTypes.EntityNote> _instance = ((System.Collections.Generic.List<OpenIZ.Core.Model.DataTypes.EntityNote>)(context.JsonContext.ReadElementUtil(r, typeof(System.Collections.Generic.List<OpenIZ.Core.Model.DataTypes.EntityNote>), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("note", context.JsonContext, _retVal, context))));
                                                                        if ((_instance != null)) {
                                                                            _retVal.Notes = _instance;
                                                                        }
                                                                    }
                                                                    else {
                                                                        if ("address".Equals(r.Value)) {
                                                                            r.Read();
                                                                            System.Collections.Generic.List<OpenIZ.Core.Model.Entities.EntityAddress> _instance = ((System.Collections.Generic.List<OpenIZ.Core.Model.Entities.EntityAddress>)(context.JsonContext.ReadElementUtil(r, typeof(System.Collections.Generic.List<OpenIZ.Core.Model.Entities.EntityAddress>), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("address", context.JsonContext, _retVal, context))));
                                                                            if ((_instance != null)) {
                                                                                _retVal.Addresses = _instance;
                                                                            }
                                                                        }
                                                                        else {
                                                                            if ("name".Equals(r.Value)) {
                                                                                r.Read();
                                                                                System.Collections.Generic.List<OpenIZ.Core.Model.Entities.EntityName> _instance = ((System.Collections.Generic.List<OpenIZ.Core.Model.Entities.EntityName>)(context.JsonContext.ReadElementUtil(r, typeof(System.Collections.Generic.List<OpenIZ.Core.Model.Entities.EntityName>), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("name", context.JsonContext, _retVal, context))));
                                                                                if ((_instance != null)) {
                                                                                    _retVal.Names = _instance;
                                                                                }
                                                                            }
                                                                            else {
                                                                                if ("extension".Equals(r.Value)) {
                                                                                    r.Read();
                                                                                    System.Collections.Generic.List<OpenIZ.Core.Model.DataTypes.EntityExtension> _instance = ((System.Collections.Generic.List<OpenIZ.Core.Model.DataTypes.EntityExtension>)(context.JsonContext.ReadElementUtil(r, typeof(System.Collections.Generic.List<OpenIZ.Core.Model.DataTypes.EntityExtension>), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("extension", context.JsonContext, _retVal, context))));
                                                                                    if ((_instance != null)) {
                                                                                        _retVal.Extensions = _instance;
                                                                                    }
                                                                                }
                                                                                else {
                                                                                    if ("telecom".Equals(r.Value)) {
                                                                                        r.Read();
                                                                                        System.Collections.Generic.List<OpenIZ.Core.Model.Entities.EntityTelecomAddress> _instance = ((System.Collections.Generic.List<OpenIZ.Core.Model.Entities.EntityTelecomAddress>)(context.JsonContext.ReadElementUtil(r, typeof(System.Collections.Generic.List<OpenIZ.Core.Model.Entities.EntityTelecomAddress>), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("telecom", context.JsonContext, _retVal, context))));
                                                                                        if ((_instance != null)) {
                                                                                            _retVal.Telecoms = _instance;
                                                                                        }
                                                                                    }
                                                                                    else {
                                                                                        if ("relationship".Equals(r.Value)) {
                                                                                            r.Read();
                                                                                            System.Collections.Generic.List<OpenIZ.Core.Model.Entities.EntityRelationship> _instance = ((System.Collections.Generic.List<OpenIZ.Core.Model.Entities.EntityRelationship>)(context.JsonContext.ReadElementUtil(r, typeof(System.Collections.Generic.List<OpenIZ.Core.Model.Entities.EntityRelationship>), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("relationship", context.JsonContext, _retVal, context))));
                                                                                            if ((_instance != null)) {
                                                                                                _retVal.Relationships = _instance;
                                                                                            }
                                                                                        }
                                                                                        else {
                                                                                            if ("identifier".Equals(r.Value)) {
                                                                                                r.Read();
                                                                                                System.Collections.Generic.List<OpenIZ.Core.Model.DataTypes.EntityIdentifier> _instance = ((System.Collections.Generic.List<OpenIZ.Core.Model.DataTypes.EntityIdentifier>)(context.JsonContext.ReadElementUtil(r, typeof(System.Collections.Generic.List<OpenIZ.Core.Model.DataTypes.EntityIdentifier>), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("identifier", context.JsonContext, _retVal, context))));
                                                                                                if ((_instance != null)) {
                                                                                                    _retVal.Identifiers = _instance;
                                                                                                }
                                                                                            }
                                                                                            else {
                                                                                                if ("typeConceptModel".Equals(r.Value)) {
                                                                                                    r.Read();
                                                                                                    OpenIZ.Core.Model.DataTypes.Concept _instance = ((OpenIZ.Core.Model.DataTypes.Concept)(context.JsonContext.ReadElementUtil(r, typeof(OpenIZ.Core.Model.DataTypes.Concept), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("typeConceptModel", context.JsonContext, _retVal, context))));
                                                                                                    if ((_instance != null)) {
                                                                                                        _retVal.TypeConcept = _instance;
                                                                                                    }
                                                                                                }
                                                                                                else {
                                                                                                    if ("creationActModel".Equals(r.Value)) {
                                                                                                        r.Read();
                                                                                                        OpenIZ.Core.Model.Acts.Act _instance = ((OpenIZ.Core.Model.Acts.Act)(context.JsonContext.ReadElementUtil(r, typeof(OpenIZ.Core.Model.Acts.Act), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("creationActModel", context.JsonContext, _retVal, context))));
                                                                                                        if ((_instance != null)) {
                                                                                                            _retVal.CreationAct = _instance;
                                                                                                        }
                                                                                                    }
                                                                                                    else {
                                                                                                        if ("statusConceptModel".Equals(r.Value)) {
                                                                                                            r.Read();
                                                                                                            OpenIZ.Core.Model.DataTypes.Concept _instance = ((OpenIZ.Core.Model.DataTypes.Concept)(context.JsonContext.ReadElementUtil(r, typeof(OpenIZ.Core.Model.DataTypes.Concept), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("statusConceptModel", context.JsonContext, _retVal, context))));
                                                                                                            if ((_instance != null)) {
                                                                                                                _retVal.StatusConcept = _instance;
                                                                                                            }
                                                                                                        }
                                                                                                        else {
                                                                                                            if ("determinerConceptModel".Equals(r.Value)) {
                                                                                                                r.Read();
                                                                                                                OpenIZ.Core.Model.DataTypes.Concept _instance = ((OpenIZ.Core.Model.DataTypes.Concept)(context.JsonContext.ReadElementUtil(r, typeof(OpenIZ.Core.Model.DataTypes.Concept), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("determinerConceptModel", context.JsonContext, _retVal, context))));
                                                                                                                if ((_instance != null)) {
                                                                                                                    _retVal.DeterminerConcept = _instance;
                                                                                                                }
                                                                                                            }
                                                                                                            else {
                                                                                                                if ("classConceptModel".Equals(r.Value)) {
                                                                                                                    r.Read();
                                                                                                                    OpenIZ.Core.Model.DataTypes.Concept _instance = ((OpenIZ.Core.Model.DataTypes.Concept)(context.JsonContext.ReadElementUtil(r, typeof(OpenIZ.Core.Model.DataTypes.Concept), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("classConceptModel", context.JsonContext, _retVal, context))));
                                                                                                                    if ((_instance != null)) {
                                                                                                                        _retVal.ClassConcept = _instance;
                                                                                                                    }
                                                                                                                }
                                                                                                                else {
                                                                                                                    if ("typeConcept".Equals(r.Value)) {
                                                                                                                        r.Read();
                                                                                                                        System.Nullable<System.Guid> _instance = ((System.Nullable<System.Guid>)(context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<System.Guid>), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("typeConcept", context.JsonContext, _retVal, context))));
                                                                                                                        if ((_instance != null)) {
                                                                                                                            _retVal.TypeConceptKey = _instance;
                                                                                                                        }
                                                                                                                    }
                                                                                                                    else {
                                                                                                                        if ("creationAct".Equals(r.Value)) {
                                                                                                                            r.Read();
                                                                                                                            System.Nullable<System.Guid> _instance = ((System.Nullable<System.Guid>)(context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<System.Guid>), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("creationAct", context.JsonContext, _retVal, context))));
                                                                                                                            if ((_instance != null)) {
                                                                                                                                _retVal.CreationActKey = _instance;
                                                                                                                            }
                                                                                                                        }
                                                                                                                        else {
                                                                                                                            if ("statusConcept".Equals(r.Value)) {
                                                                                                                                r.Read();
                                                                                                                                System.Nullable<System.Guid> _instance = ((System.Nullable<System.Guid>)(context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<System.Guid>), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("statusConcept", context.JsonContext, _retVal, context))));
                                                                                                                                if ((_instance != null)) {
                                                                                                                                    _retVal.StatusConceptKey = _instance;
                                                                                                                                }
                                                                                                                            }
                                                                                                                            else {
                                                                                                                                if ("determinerConcept".Equals(r.Value)) {
                                                                                                                                    r.Read();
                                                                                                                                    System.Nullable<System.Guid> _instance = ((System.Nullable<System.Guid>)(context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<System.Guid>), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("determinerConcept", context.JsonContext, _retVal, context))));
                                                                                                                                    if ((_instance != null)) {
                                                                                                                                        _retVal.DeterminerConceptKey = _instance;
                                                                                                                                    }
                                                                                                                                }
                                                                                                                                else {
                                                                                                                                    if ("classConcept".Equals(r.Value)) {
                                                                                                                                        r.Read();
                                                                                                                                        System.Nullable<System.Guid> _instance = ((System.Nullable<System.Guid>)(context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<System.Guid>), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("classConcept", context.JsonContext, _retVal, context))));
                                                                                                                                        if ((_instance != null)) {
                                                                                                                                            _retVal.ClassConceptKey = _instance;
                                                                                                                                        }
                                                                                                                                    }
                                                                                                                                    else {
                                                                                                                                        if ("template".Equals(r.Value)) {
                                                                                                                                            r.Read();
                                                                                                                                            OpenIZ.Core.Model.DataTypes.TemplateDefinition _instance = ((OpenIZ.Core.Model.DataTypes.TemplateDefinition)(context.JsonContext.ReadElementUtil(r, typeof(OpenIZ.Core.Model.DataTypes.TemplateDefinition), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("template", context.JsonContext, _retVal, context))));
                                                                                                                                            if ((_instance != null)) {
                                                                                                                                                _retVal.Template = _instance;
                                                                                                                                            }
                                                                                                                                        }
                                                                                                                                        else {
                                                                                                                                            if ("isAdministrative".Equals(r.Value)) {
                                                                                                                                                r.Read();
                                                                                                                                                bool _instance = ((bool)(context.JsonContext.ReadElementUtil(r, typeof(bool), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("isAdministrative", context.JsonContext, _retVal, context))));
                                                                                                                                                if ((_instance != null)) {
                                                                                                                                                    _retVal.IsAdministrative = _instance;
                                                                                                                                                }
                                                                                                                                            }
                                                                                                                                            else {
                                                                                                                                                if ("expiryDate".Equals(r.Value)) {
                                                                                                                                                    r.Read();
                                                                                                                                                    System.Nullable<System.DateTime> _instance = ((System.Nullable<System.DateTime>)(context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<System.DateTime>), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("expiryDate", context.JsonContext, _retVal, context))));
                                                                                                                                                    if ((_instance != null)) {
                                                                                                                                                        _retVal.ExpiryDate = _instance;
                                                                                                                                                    }
                                                                                                                                                }
                                                                                                                                                else {
                                                                                                                                                    if ("quantityConceptModel".Equals(r.Value)) {
                                                                                                                                                        r.Read();
                                                                                                                                                        OpenIZ.Core.Model.DataTypes.Concept _instance = ((OpenIZ.Core.Model.DataTypes.Concept)(context.JsonContext.ReadElementUtil(r, typeof(OpenIZ.Core.Model.DataTypes.Concept), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("quantityConceptModel", context.JsonContext, _retVal, context))));
                                                                                                                                                        if ((_instance != null)) {
                                                                                                                                                            _retVal.QuantityConcept = _instance;
                                                                                                                                                        }
                                                                                                                                                    }
                                                                                                                                                    else {
                                                                                                                                                        if ("formConceptModel".Equals(r.Value)) {
                                                                                                                                                            r.Read();
                                                                                                                                                            OpenIZ.Core.Model.DataTypes.Concept _instance = ((OpenIZ.Core.Model.DataTypes.Concept)(context.JsonContext.ReadElementUtil(r, typeof(OpenIZ.Core.Model.DataTypes.Concept), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("formConceptModel", context.JsonContext, _retVal, context))));
                                                                                                                                                            if ((_instance != null)) {
                                                                                                                                                                _retVal.FormConcept = _instance;
                                                                                                                                                            }
                                                                                                                                                        }
                                                                                                                                                        else {
                                                                                                                                                            if ("quantityConcept".Equals(r.Value)) {
                                                                                                                                                                r.Read();
                                                                                                                                                                System.Nullable<System.Guid> _instance = ((System.Nullable<System.Guid>)(context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<System.Guid>), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("quantityConcept", context.JsonContext, _retVal, context))));
                                                                                                                                                                if ((_instance != null)) {
                                                                                                                                                                    _retVal.QuantityConceptKey = _instance;
                                                                                                                                                                }
                                                                                                                                                            }
                                                                                                                                                            else {
                                                                                                                                                                if ("formConcept".Equals(r.Value)) {
                                                                                                                                                                    r.Read();
                                                                                                                                                                    System.Nullable<System.Guid> _instance = ((System.Nullable<System.Guid>)(context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<System.Guid>), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("formConcept", context.JsonContext, _retVal, context))));
                                                                                                                                                                    if ((_instance != null)) {
                                                                                                                                                                        _retVal.FormConceptKey = _instance;
                                                                                                                                                                    }
                                                                                                                                                                }
                                                                                                                                                                else {
                                                                                                                                                                    if ("quantity".Equals(r.Value)) {
                                                                                                                                                                        r.Read();
                                                                                                                                                                        System.Nullable<decimal> _instance = ((System.Nullable<decimal>)(context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<decimal>), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("quantity", context.JsonContext, _retVal, context))));
                                                                                                                                                                        if ((_instance != null)) {
                                                                                                                                                                            _retVal.Quantity = _instance;
                                                                                                                                                                        }
                                                                                                                                                                    }
                                                                                                                                                                    else {
                                                                                                                                                                        if ("lotNumber".Equals(r.Value)) {
                                                                                                                                                                            r.Read();
                                                                                                                                                                            string _instance = ((string)(context.JsonContext.ReadElementUtil(r, typeof(string), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("lotNumber", context.JsonContext, _retVal, context))));
                                                                                                                                                                            if ((_instance != null)) {
                                                                                                                                                                                _retVal.LotNumber = _instance;
                                                                                                                                                                            }
                                                                                                                                                                        }
                                                                                                                                                                        else {
                                                                                                                                                                            if ("$type".Equals(r.Value)) {
                                                                                                                                                                                System.Type _type = this.m_binder.BindToType("OpenIZ.Core.Model, Version=0.6.14.21496, Culture=neutral, PublicKeyToken=null", r.ReadAsString());
                                                                                                                                                                                if ((_type != typeof(OpenIZ.Core.Model.Entities.ManufacturedMaterial))) {
                                                                                                                                                                                    OpenIZ.Core.Model.Entities.ManufacturedMaterial _nretVal = ((OpenIZ.Core.Model.Entities.ManufacturedMaterial)(context.JsonContext.GetFormatter(_type).Deserialize(r, _type, context)));
                                                                                                                                                                                    _nretVal.CopyObjectData(_retVal);
                                                                                                                                                                                    return _nretVal;
                                                                                                                                                                                }
                                                                                                                                                                            }
                                                                                                                                                                            else {
                                                                                                                                                                                r.Skip();
                                                                                                                                                                            }
                                                                                                                                                                        }
                                                                                                                                                                    }
                                                                                                                                                                }
                                                                                                                                                            }
                                                                                                                                                        }
                                                                                                                                                    }
                                                                                                                                                }
                                                                                                                                            }
                                                                                                                                        }
                                                                                                                                    }
                                                                                                                                }
                                                                                                                            }
                                                                                                                        }
                                                                                                                    }
                                                                                                                }
                                                                                                            }
                                                                                                        }
                                                                                                    }
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
                else {
                    if (((r.TokenType == Newtonsoft.Json.JsonToken.EndObject) 
                                && (r.Depth == _depth))) {
                        return _retVal;
                    }
                    else {
                        throw new Newtonsoft.Json.JsonSerializationException("JSON in invalid state");
                    }
                }
            }
            return _retVal;
        }
        
        public object FromSimpleValue(object o) {
            return null;
        }
        
        public object GetSimpleValue(object o) {
            return null;
        }
    }
    
    public class MaterialViewModelSerializer : OpenIZ.Core.Applets.ViewModel.Json.IJsonViewModelTypeFormatter {
        
        private OpenIZ.Core.Model.Serialization.ModelSerializationBinder m_binder = new OpenIZ.Core.Model.Serialization.ModelSerializationBinder();
        
        private OpenIZ.Core.Diagnostics.Tracer m_tracer = OpenIZ.Core.Diagnostics.Tracer.GetTracer(typeof(MaterialViewModelSerializer));
        
        public System.Type HandlesType {
            get {
                return typeof(OpenIZ.Core.Model.Entities.Material);
            }
        }
        
        public void Serialize(Newtonsoft.Json.JsonWriter w, OpenIZ.Core.Model.IdentifiedData o, OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext context) {
            if ((o == null)) {
                throw new System.ArgumentNullException("o");
            }
            OpenIZ.Core.Model.Entities.Material _strong = null;
            OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext _jsonContext = null;
            bool _loaded = false;
            try {
                _strong = ((OpenIZ.Core.Model.Entities.Material)(o));
            }
            catch (System.Exception e) {
                this.m_tracer.TraceError(string.Format("Casting Error: {0}", e));
                throw new System.ArgumentException(string.Format("Invalid type {0} provided, expected {1}", o.GetType(), typeof(OpenIZ.Core.Model.Entities.Material)));
            }
            if (context.ShouldSerialize("quantity")) {
                if ((_strong.Quantity == null)) {
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "quantity", _strong.Quantity, context);
                }
            }
            if (context.ShouldSerialize("formConcept")) {
                if ((_strong.FormConceptKey == null)) {
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "formConcept", _strong.FormConceptKey, context);
                }
            }
            if (context.ShouldSerialize("quantityConcept")) {
                if ((_strong.QuantityConceptKey == null)) {
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "quantityConcept", _strong.QuantityConceptKey, context);
                }
            }
            if (context.ShouldSerialize("formConceptModel")) {
                if ((_strong.FormConcept == null)) {
                    if ((_strong.Key.HasValue && context.ShouldForceLoad("formConceptModel", _strong.Key.Value))) {
                        OpenIZ.Core.Model.DataTypes.Concept _delay = null;
                        _delay = context.JsonContext.LoadRelated<OpenIZ.Core.Model.DataTypes.Concept>(_strong.FormConceptKey);
                        _strong.FormConcept = _delay;
                        if ((_delay != null)) {
                            _loaded = true;
                            context.JsonContext.WritePropertyUtil(w, "formConceptModel", _strong.FormConcept, context);
                        }
                    }
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "formConceptModel", _strong.FormConcept, context);
                }
            }
            if (context.ShouldSerialize("quantityConceptModel")) {
                if ((_strong.QuantityConcept == null)) {
                    if ((_strong.Key.HasValue && context.ShouldForceLoad("quantityConceptModel", _strong.Key.Value))) {
                        OpenIZ.Core.Model.DataTypes.Concept _delay = null;
                        _delay = context.JsonContext.LoadRelated<OpenIZ.Core.Model.DataTypes.Concept>(_strong.QuantityConceptKey);
                        _strong.QuantityConcept = _delay;
                        if ((_delay != null)) {
                            _loaded = true;
                            context.JsonContext.WritePropertyUtil(w, "quantityConceptModel", _strong.QuantityConcept, context);
                        }
                    }
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "quantityConceptModel", _strong.QuantityConcept, context);
                }
            }
            if (context.ShouldSerialize("expiryDate")) {
                if ((_strong.ExpiryDate == null)) {
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "expiryDate", _strong.ExpiryDate, context);
                }
            }
            if (context.ShouldSerialize("isAdministrative")) {
                if ((_strong.IsAdministrative == null)) {
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "isAdministrative", _strong.IsAdministrative, context);
                }
            }
            if (context.ShouldSerialize("template")) {
                if ((_strong.Template == null)) {
                    if ((_strong.Key.HasValue && context.ShouldForceLoad("template", _strong.Key.Value))) {
                        OpenIZ.Core.Model.DataTypes.TemplateDefinition _delay = null;
                    }
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "template", _strong.Template, context);
                }
            }
            if (context.ShouldSerialize("classConcept")) {
                if ((_strong.ClassConceptKey == null)) {
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "classConcept", _strong.ClassConceptKey, context);
                }
            }
            if (context.ShouldSerialize("determinerConcept")) {
                if ((_strong.DeterminerConceptKey == null)) {
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "determinerConcept", _strong.DeterminerConceptKey, context);
                }
            }
            if (context.ShouldSerialize("statusConcept")) {
                if ((_strong.StatusConceptKey == null)) {
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "statusConcept", _strong.StatusConceptKey, context);
                }
            }
            if (context.ShouldSerialize("creationAct")) {
                if ((_strong.CreationActKey == null)) {
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "creationAct", _strong.CreationActKey, context);
                }
            }
            if (context.ShouldSerialize("typeConcept")) {
                if ((_strong.TypeConceptKey == null)) {
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "typeConcept", _strong.TypeConceptKey, context);
                }
            }
            if (context.ShouldSerialize("classConceptModel")) {
                if ((_strong.ClassConcept == null)) {
                    if ((_strong.Key.HasValue && context.ShouldForceLoad("classConceptModel", _strong.Key.Value))) {
                        OpenIZ.Core.Model.DataTypes.Concept _delay = null;
                        _delay = context.JsonContext.LoadRelated<OpenIZ.Core.Model.DataTypes.Concept>(_strong.ClassConceptKey);
                        _strong.ClassConcept = _delay;
                        if ((_delay != null)) {
                            _loaded = true;
                            context.JsonContext.WritePropertyUtil(w, "classConceptModel", _strong.ClassConcept, context);
                        }
                    }
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "classConceptModel", _strong.ClassConcept, context);
                }
            }
            if (context.ShouldSerialize("determinerConceptModel")) {
                if ((_strong.DeterminerConcept == null)) {
                    if ((_strong.Key.HasValue && context.ShouldForceLoad("determinerConceptModel", _strong.Key.Value))) {
                        OpenIZ.Core.Model.DataTypes.Concept _delay = null;
                        _delay = context.JsonContext.LoadRelated<OpenIZ.Core.Model.DataTypes.Concept>(_strong.DeterminerConceptKey);
                        _strong.DeterminerConcept = _delay;
                        if ((_delay != null)) {
                            _loaded = true;
                            context.JsonContext.WritePropertyUtil(w, "determinerConceptModel", _strong.DeterminerConcept, context);
                        }
                    }
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "determinerConceptModel", _strong.DeterminerConcept, context);
                }
            }
            if (context.ShouldSerialize("statusConceptModel")) {
                if ((_strong.StatusConcept == null)) {
                    if ((_strong.Key.HasValue && context.ShouldForceLoad("statusConceptModel", _strong.Key.Value))) {
                        OpenIZ.Core.Model.DataTypes.Concept _delay = null;
                        _delay = context.JsonContext.LoadRelated<OpenIZ.Core.Model.DataTypes.Concept>(_strong.StatusConceptKey);
                        _strong.StatusConcept = _delay;
                        if ((_delay != null)) {
                            _loaded = true;
                            context.JsonContext.WritePropertyUtil(w, "statusConceptModel", _strong.StatusConcept, context);
                        }
                    }
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "statusConceptModel", _strong.StatusConcept, context);
                }
            }
            if (context.ShouldSerialize("creationActModel")) {
                if ((_strong.CreationAct == null)) {
                    if ((_strong.Key.HasValue && context.ShouldForceLoad("creationActModel", _strong.Key.Value))) {
                        OpenIZ.Core.Model.Acts.Act _delay = null;
                        _delay = context.JsonContext.LoadRelated<OpenIZ.Core.Model.Acts.Act>(_strong.CreationActKey);
                        _strong.CreationAct = _delay;
                        if ((_delay != null)) {
                            _loaded = true;
                            context.JsonContext.WritePropertyUtil(w, "creationActModel", _strong.CreationAct, context);
                        }
                    }
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "creationActModel", _strong.CreationAct, context);
                }
            }
            if (context.ShouldSerialize("typeConceptModel")) {
                if ((_strong.TypeConcept == null)) {
                    if ((_strong.Key.HasValue && context.ShouldForceLoad("typeConceptModel", _strong.Key.Value))) {
                        OpenIZ.Core.Model.DataTypes.Concept _delay = null;
                        _delay = context.JsonContext.LoadRelated<OpenIZ.Core.Model.DataTypes.Concept>(_strong.TypeConceptKey);
                        _strong.TypeConcept = _delay;
                        if ((_delay != null)) {
                            _loaded = true;
                            context.JsonContext.WritePropertyUtil(w, "typeConceptModel", _strong.TypeConcept, context);
                        }
                    }
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "typeConceptModel", _strong.TypeConcept, context);
                }
            }
            if (context.ShouldSerialize("identifier")) {
                if (((_strong.Identifiers == null) 
                            || (_strong.Identifiers.Count == 0))) {
                    if ((_strong.Key.HasValue && context.ShouldForceLoad("identifier", _strong.Key.Value))) {
                        System.Collections.Generic.List<OpenIZ.Core.Model.DataTypes.EntityIdentifier> _delay = null;
                        _delay = new System.Collections.Generic.List<OpenIZ.Core.Model.DataTypes.EntityIdentifier>(context.JsonContext.LoadCollection<OpenIZ.Core.Model.DataTypes.EntityIdentifier>(_strong.Key.Value));
                        _strong.Identifiers = _delay;
                        if ((_delay.Count > 0)) {
                            _loaded = true;
                            context.JsonContext.WritePropertyUtil(w, "identifier", _strong.Identifiers, context);
                        }
                    }
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "identifier", _strong.Identifiers, context);
                }
            }
            if (context.ShouldSerialize("relationship")) {
                if (((_strong.Relationships == null) 
                            || (_strong.Relationships.Count == 0))) {
                    if ((_strong.Key.HasValue && context.ShouldForceLoad("relationship", _strong.Key.Value))) {
                        System.Collections.Generic.List<OpenIZ.Core.Model.Entities.EntityRelationship> _delay = null;
                        _delay = new System.Collections.Generic.List<OpenIZ.Core.Model.Entities.EntityRelationship>(context.JsonContext.LoadCollection<OpenIZ.Core.Model.Entities.EntityRelationship>(_strong.Key.Value));
                        _strong.Relationships = _delay;
                        if ((_delay.Count > 0)) {
                            _loaded = true;
                            context.JsonContext.WritePropertyUtil(w, "relationship", _strong.Relationships, context);
                        }
                    }
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "relationship", _strong.Relationships, context);
                }
            }
            if (context.ShouldSerialize("telecom")) {
                if (((_strong.Telecoms == null) 
                            || (_strong.Telecoms.Count == 0))) {
                    if ((_strong.Key.HasValue && context.ShouldForceLoad("telecom", _strong.Key.Value))) {
                        System.Collections.Generic.List<OpenIZ.Core.Model.Entities.EntityTelecomAddress> _delay = null;
                        _delay = new System.Collections.Generic.List<OpenIZ.Core.Model.Entities.EntityTelecomAddress>(context.JsonContext.LoadCollection<OpenIZ.Core.Model.Entities.EntityTelecomAddress>(_strong.Key.Value));
                        _strong.Telecoms = _delay;
                        if ((_delay.Count > 0)) {
                            _loaded = true;
                            context.JsonContext.WritePropertyUtil(w, "telecom", _strong.Telecoms, context);
                        }
                    }
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "telecom", _strong.Telecoms, context);
                }
            }
            if (context.ShouldSerialize("extension")) {
                if (((_strong.Extensions == null) 
                            || (_strong.Extensions.Count == 0))) {
                    if ((_strong.Key.HasValue && context.ShouldForceLoad("extension", _strong.Key.Value))) {
                        System.Collections.Generic.List<OpenIZ.Core.Model.DataTypes.EntityExtension> _delay = null;
                        _delay = new System.Collections.Generic.List<OpenIZ.Core.Model.DataTypes.EntityExtension>(context.JsonContext.LoadCollection<OpenIZ.Core.Model.DataTypes.EntityExtension>(_strong.Key.Value));
                        _strong.Extensions = _delay;
                        if ((_delay.Count > 0)) {
                            _loaded = true;
                            context.JsonContext.WritePropertyUtil(w, "extension", _strong.Extensions, context);
                        }
                    }
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "extension", _strong.Extensions, context);
                }
            }
            if (context.ShouldSerialize("name")) {
                if (((_strong.Names == null) 
                            || (_strong.Names.Count == 0))) {
                    if ((_strong.Key.HasValue && context.ShouldForceLoad("name", _strong.Key.Value))) {
                        System.Collections.Generic.List<OpenIZ.Core.Model.Entities.EntityName> _delay = null;
                        _delay = new System.Collections.Generic.List<OpenIZ.Core.Model.Entities.EntityName>(context.JsonContext.LoadCollection<OpenIZ.Core.Model.Entities.EntityName>(_strong.Key.Value));
                        _strong.Names = _delay;
                        if ((_delay.Count > 0)) {
                            _loaded = true;
                            context.JsonContext.WritePropertyUtil(w, "name", _strong.Names, context);
                        }
                    }
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "name", _strong.Names, context);
                }
            }
            if (context.ShouldSerialize("address")) {
                if (((_strong.Addresses == null) 
                            || (_strong.Addresses.Count == 0))) {
                    if ((_strong.Key.HasValue && context.ShouldForceLoad("address", _strong.Key.Value))) {
                        System.Collections.Generic.List<OpenIZ.Core.Model.Entities.EntityAddress> _delay = null;
                        _delay = new System.Collections.Generic.List<OpenIZ.Core.Model.Entities.EntityAddress>(context.JsonContext.LoadCollection<OpenIZ.Core.Model.Entities.EntityAddress>(_strong.Key.Value));
                        _strong.Addresses = _delay;
                        if ((_delay.Count > 0)) {
                            _loaded = true;
                            context.JsonContext.WritePropertyUtil(w, "address", _strong.Addresses, context);
                        }
                    }
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "address", _strong.Addresses, context);
                }
            }
            if (context.ShouldSerialize("note")) {
                if (((_strong.Notes == null) 
                            || (_strong.Notes.Count == 0))) {
                    if ((_strong.Key.HasValue && context.ShouldForceLoad("note", _strong.Key.Value))) {
                        System.Collections.Generic.List<OpenIZ.Core.Model.DataTypes.EntityNote> _delay = null;
                        _delay = new System.Collections.Generic.List<OpenIZ.Core.Model.DataTypes.EntityNote>(context.JsonContext.LoadCollection<OpenIZ.Core.Model.DataTypes.EntityNote>(_strong.Key.Value));
                        _strong.Notes = _delay;
                        if ((_delay.Count > 0)) {
                            _loaded = true;
                            context.JsonContext.WritePropertyUtil(w, "note", _strong.Notes, context);
                        }
                    }
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "note", _strong.Notes, context);
                }
            }
            if (context.ShouldSerialize("tag")) {
                if (((_strong.Tags == null) 
                            || (_strong.Tags.Count == 0))) {
                    if ((_strong.Key.HasValue && context.ShouldForceLoad("tag", _strong.Key.Value))) {
                        System.Collections.Generic.List<OpenIZ.Core.Model.DataTypes.EntityTag> _delay = null;
                        _delay = new System.Collections.Generic.List<OpenIZ.Core.Model.DataTypes.EntityTag>(context.JsonContext.LoadCollection<OpenIZ.Core.Model.DataTypes.EntityTag>(_strong.Key.Value));
                        _strong.Tags = _delay;
                        if ((_delay.Count > 0)) {
                            _loaded = true;
                            context.JsonContext.WritePropertyUtil(w, "tag", _strong.Tags, context);
                        }
                    }
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "tag", _strong.Tags, context);
                }
            }
            if (context.ShouldSerialize("participation")) {
                if (((_strong.Participations == null) 
                            || (_strong.Participations.Count == 0))) {
                    if ((_strong.Key.HasValue && context.ShouldForceLoad("participation", _strong.Key.Value))) {
                        System.Collections.Generic.List<OpenIZ.Core.Model.Acts.ActParticipation> _delay = null;
                        _delay = new System.Collections.Generic.List<OpenIZ.Core.Model.Acts.ActParticipation>(context.JsonContext.LoadCollection<OpenIZ.Core.Model.Acts.ActParticipation>(_strong.Key.Value));
                        _strong.Participations = _delay;
                        if ((_delay.Count > 0)) {
                            _loaded = true;
                            context.JsonContext.WritePropertyUtil(w, "participation", _strong.Participations, context);
                        }
                    }
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "participation", _strong.Participations, context);
                }
            }
            if (context.ShouldSerialize("etag")) {
                if ((_strong.Tag == null)) {
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "etag", _strong.Tag, context);
                }
            }
            if (context.ShouldSerialize("previousVersion")) {
                if ((_strong.PreviousVersionKey == null)) {
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "previousVersion", _strong.PreviousVersionKey, context);
                }
            }
            if (context.ShouldSerialize("version")) {
                if ((_strong.VersionKey == null)) {
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "version", _strong.VersionKey, context);
                }
            }
            if (context.ShouldSerialize("sequence")) {
                if ((_strong.VersionSequence == null)) {
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "sequence", _strong.VersionSequence, context);
                }
            }
            if (context.ShouldSerialize("creationTimeModel")) {
                if ((_strong.CreationTime == null)) {
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "creationTimeModel", _strong.CreationTime, context);
                }
            }
            if (context.ShouldSerialize("creationTime")) {
                if ((_strong.CreationTimeXml == null)) {
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "creationTime", _strong.CreationTimeXml, context);
                }
            }
            if (context.ShouldSerialize("obsoletionTimeModel")) {
                if ((_strong.ObsoletionTime == null)) {
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "obsoletionTimeModel", _strong.ObsoletionTime, context);
                }
            }
            if (context.ShouldSerialize("obsoletionTime")) {
                if ((_strong.ObsoletionTimeXml == null)) {
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "obsoletionTime", _strong.ObsoletionTimeXml, context);
                }
            }
            if (context.ShouldSerialize("createdBy")) {
                if ((_strong.CreatedByKey == null)) {
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "createdBy", _strong.CreatedByKey, context);
                }
            }
            if (context.ShouldSerialize("obsoletedBy")) {
                if ((_strong.ObsoletedByKey == null)) {
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "obsoletedBy", _strong.ObsoletedByKey, context);
                }
            }
            if (context.ShouldSerialize("id")) {
                if ((_strong.Key == null)) {
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "id", _strong.Key, context);
                }
            }
            if (((_loaded && _strong.Key.HasValue) 
                        && _strong.VersionKey.HasValue)) {
                ((OpenIZ.Core.Services.IDataCachingService)(OpenIZ.Core.ApplicationServiceContext.Current.GetService(typeof(OpenIZ.Core.Services.IDataCachingService)))).Add(_strong);
            }
        }
        
        public object Deserialize(Newtonsoft.Json.JsonReader r, System.Type asType, OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext context) {
            OpenIZ.Core.Model.Entities.Material _retVal = new OpenIZ.Core.Model.Entities.Material();
            int _depth = r.Depth;
            if ((r.TokenType != Newtonsoft.Json.JsonToken.StartObject)) {
                _depth = (_depth - 1);
            }
            for (
            ; r.Read(); 
            ) {
                if ((r.TokenType == Newtonsoft.Json.JsonToken.PropertyName)) {
                    if ("id".Equals(r.Value)) {
                        r.Read();
                        System.Nullable<System.Guid> _instance = ((System.Nullable<System.Guid>)(context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<System.Guid>), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("id", context.JsonContext, _retVal, context))));
                        if ((_instance != null)) {
                            _retVal.Key = _instance;
                        }
                    }
                    else {
                        if ("obsoletedBy".Equals(r.Value)) {
                            r.Read();
                            System.Nullable<System.Guid> _instance = ((System.Nullable<System.Guid>)(context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<System.Guid>), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("obsoletedBy", context.JsonContext, _retVal, context))));
                            if ((_instance != null)) {
                                _retVal.ObsoletedByKey = _instance;
                            }
                        }
                        else {
                            if ("createdBy".Equals(r.Value)) {
                                r.Read();
                                System.Nullable<System.Guid> _instance = ((System.Nullable<System.Guid>)(context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<System.Guid>), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("createdBy", context.JsonContext, _retVal, context))));
                                if ((_instance != null)) {
                                    _retVal.CreatedByKey = _instance;
                                }
                            }
                            else {
                                if ("obsoletionTime".Equals(r.Value)) {
                                    r.Read();
                                    string _instance = ((string)(context.JsonContext.ReadElementUtil(r, typeof(string), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("obsoletionTime", context.JsonContext, _retVal, context))));
                                    if ((_instance != null)) {
                                        _retVal.ObsoletionTimeXml = _instance;
                                    }
                                }
                                else {
                                    if ("obsoletionTimeModel".Equals(r.Value)) {
                                        r.Read();
                                        System.Nullable<System.DateTimeOffset> _instance = ((System.Nullable<System.DateTimeOffset>)(context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<System.DateTimeOffset>), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("obsoletionTimeModel", context.JsonContext, _retVal, context))));
                                        if ((_instance != null)) {
                                            _retVal.ObsoletionTime = _instance;
                                        }
                                    }
                                    else {
                                        if ("creationTime".Equals(r.Value)) {
                                            r.Read();
                                            string _instance = ((string)(context.JsonContext.ReadElementUtil(r, typeof(string), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("creationTime", context.JsonContext, _retVal, context))));
                                            if ((_instance != null)) {
                                                _retVal.CreationTimeXml = _instance;
                                            }
                                        }
                                        else {
                                            if ("creationTimeModel".Equals(r.Value)) {
                                                r.Read();
                                                System.DateTimeOffset _instance = ((System.DateTimeOffset)(context.JsonContext.ReadElementUtil(r, typeof(System.DateTimeOffset), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("creationTimeModel", context.JsonContext, _retVal, context))));
                                                if ((_instance != null)) {
                                                    _retVal.CreationTime = _instance;
                                                }
                                            }
                                            else {
                                                if ("sequence".Equals(r.Value)) {
                                                    r.Read();
                                                    System.Nullable<decimal> _instance = ((System.Nullable<decimal>)(context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<decimal>), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("sequence", context.JsonContext, _retVal, context))));
                                                    if ((_instance != null)) {
                                                        _retVal.VersionSequence = _instance;
                                                    }
                                                }
                                                else {
                                                    if ("version".Equals(r.Value)) {
                                                        r.Read();
                                                        System.Nullable<System.Guid> _instance = ((System.Nullable<System.Guid>)(context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<System.Guid>), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("version", context.JsonContext, _retVal, context))));
                                                        if ((_instance != null)) {
                                                            _retVal.VersionKey = _instance;
                                                        }
                                                    }
                                                    else {
                                                        if ("previousVersion".Equals(r.Value)) {
                                                            r.Read();
                                                            System.Nullable<System.Guid> _instance = ((System.Nullable<System.Guid>)(context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<System.Guid>), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("previousVersion", context.JsonContext, _retVal, context))));
                                                            if ((_instance != null)) {
                                                                _retVal.PreviousVersionKey = _instance;
                                                            }
                                                        }
                                                        else {
                                                            if ("participation".Equals(r.Value)) {
                                                                r.Read();
                                                                System.Collections.Generic.List<OpenIZ.Core.Model.Acts.ActParticipation> _instance = ((System.Collections.Generic.List<OpenIZ.Core.Model.Acts.ActParticipation>)(context.JsonContext.ReadElementUtil(r, typeof(System.Collections.Generic.List<OpenIZ.Core.Model.Acts.ActParticipation>), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("participation", context.JsonContext, _retVal, context))));
                                                                if ((_instance != null)) {
                                                                    _retVal.Participations = _instance;
                                                                }
                                                            }
                                                            else {
                                                                if ("tag".Equals(r.Value)) {
                                                                    r.Read();
                                                                    System.Collections.Generic.List<OpenIZ.Core.Model.DataTypes.EntityTag> _instance = ((System.Collections.Generic.List<OpenIZ.Core.Model.DataTypes.EntityTag>)(context.JsonContext.ReadElementUtil(r, typeof(System.Collections.Generic.List<OpenIZ.Core.Model.DataTypes.EntityTag>), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("tag", context.JsonContext, _retVal, context))));
                                                                    if ((_instance != null)) {
                                                                        _retVal.Tags = _instance;
                                                                    }
                                                                }
                                                                else {
                                                                    if ("note".Equals(r.Value)) {
                                                                        r.Read();
                                                                        System.Collections.Generic.List<OpenIZ.Core.Model.DataTypes.EntityNote> _instance = ((System.Collections.Generic.List<OpenIZ.Core.Model.DataTypes.EntityNote>)(context.JsonContext.ReadElementUtil(r, typeof(System.Collections.Generic.List<OpenIZ.Core.Model.DataTypes.EntityNote>), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("note", context.JsonContext, _retVal, context))));
                                                                        if ((_instance != null)) {
                                                                            _retVal.Notes = _instance;
                                                                        }
                                                                    }
                                                                    else {
                                                                        if ("address".Equals(r.Value)) {
                                                                            r.Read();
                                                                            System.Collections.Generic.List<OpenIZ.Core.Model.Entities.EntityAddress> _instance = ((System.Collections.Generic.List<OpenIZ.Core.Model.Entities.EntityAddress>)(context.JsonContext.ReadElementUtil(r, typeof(System.Collections.Generic.List<OpenIZ.Core.Model.Entities.EntityAddress>), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("address", context.JsonContext, _retVal, context))));
                                                                            if ((_instance != null)) {
                                                                                _retVal.Addresses = _instance;
                                                                            }
                                                                        }
                                                                        else {
                                                                            if ("name".Equals(r.Value)) {
                                                                                r.Read();
                                                                                System.Collections.Generic.List<OpenIZ.Core.Model.Entities.EntityName> _instance = ((System.Collections.Generic.List<OpenIZ.Core.Model.Entities.EntityName>)(context.JsonContext.ReadElementUtil(r, typeof(System.Collections.Generic.List<OpenIZ.Core.Model.Entities.EntityName>), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("name", context.JsonContext, _retVal, context))));
                                                                                if ((_instance != null)) {
                                                                                    _retVal.Names = _instance;
                                                                                }
                                                                            }
                                                                            else {
                                                                                if ("extension".Equals(r.Value)) {
                                                                                    r.Read();
                                                                                    System.Collections.Generic.List<OpenIZ.Core.Model.DataTypes.EntityExtension> _instance = ((System.Collections.Generic.List<OpenIZ.Core.Model.DataTypes.EntityExtension>)(context.JsonContext.ReadElementUtil(r, typeof(System.Collections.Generic.List<OpenIZ.Core.Model.DataTypes.EntityExtension>), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("extension", context.JsonContext, _retVal, context))));
                                                                                    if ((_instance != null)) {
                                                                                        _retVal.Extensions = _instance;
                                                                                    }
                                                                                }
                                                                                else {
                                                                                    if ("telecom".Equals(r.Value)) {
                                                                                        r.Read();
                                                                                        System.Collections.Generic.List<OpenIZ.Core.Model.Entities.EntityTelecomAddress> _instance = ((System.Collections.Generic.List<OpenIZ.Core.Model.Entities.EntityTelecomAddress>)(context.JsonContext.ReadElementUtil(r, typeof(System.Collections.Generic.List<OpenIZ.Core.Model.Entities.EntityTelecomAddress>), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("telecom", context.JsonContext, _retVal, context))));
                                                                                        if ((_instance != null)) {
                                                                                            _retVal.Telecoms = _instance;
                                                                                        }
                                                                                    }
                                                                                    else {
                                                                                        if ("relationship".Equals(r.Value)) {
                                                                                            r.Read();
                                                                                            System.Collections.Generic.List<OpenIZ.Core.Model.Entities.EntityRelationship> _instance = ((System.Collections.Generic.List<OpenIZ.Core.Model.Entities.EntityRelationship>)(context.JsonContext.ReadElementUtil(r, typeof(System.Collections.Generic.List<OpenIZ.Core.Model.Entities.EntityRelationship>), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("relationship", context.JsonContext, _retVal, context))));
                                                                                            if ((_instance != null)) {
                                                                                                _retVal.Relationships = _instance;
                                                                                            }
                                                                                        }
                                                                                        else {
                                                                                            if ("identifier".Equals(r.Value)) {
                                                                                                r.Read();
                                                                                                System.Collections.Generic.List<OpenIZ.Core.Model.DataTypes.EntityIdentifier> _instance = ((System.Collections.Generic.List<OpenIZ.Core.Model.DataTypes.EntityIdentifier>)(context.JsonContext.ReadElementUtil(r, typeof(System.Collections.Generic.List<OpenIZ.Core.Model.DataTypes.EntityIdentifier>), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("identifier", context.JsonContext, _retVal, context))));
                                                                                                if ((_instance != null)) {
                                                                                                    _retVal.Identifiers = _instance;
                                                                                                }
                                                                                            }
                                                                                            else {
                                                                                                if ("typeConceptModel".Equals(r.Value)) {
                                                                                                    r.Read();
                                                                                                    OpenIZ.Core.Model.DataTypes.Concept _instance = ((OpenIZ.Core.Model.DataTypes.Concept)(context.JsonContext.ReadElementUtil(r, typeof(OpenIZ.Core.Model.DataTypes.Concept), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("typeConceptModel", context.JsonContext, _retVal, context))));
                                                                                                    if ((_instance != null)) {
                                                                                                        _retVal.TypeConcept = _instance;
                                                                                                    }
                                                                                                }
                                                                                                else {
                                                                                                    if ("creationActModel".Equals(r.Value)) {
                                                                                                        r.Read();
                                                                                                        OpenIZ.Core.Model.Acts.Act _instance = ((OpenIZ.Core.Model.Acts.Act)(context.JsonContext.ReadElementUtil(r, typeof(OpenIZ.Core.Model.Acts.Act), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("creationActModel", context.JsonContext, _retVal, context))));
                                                                                                        if ((_instance != null)) {
                                                                                                            _retVal.CreationAct = _instance;
                                                                                                        }
                                                                                                    }
                                                                                                    else {
                                                                                                        if ("statusConceptModel".Equals(r.Value)) {
                                                                                                            r.Read();
                                                                                                            OpenIZ.Core.Model.DataTypes.Concept _instance = ((OpenIZ.Core.Model.DataTypes.Concept)(context.JsonContext.ReadElementUtil(r, typeof(OpenIZ.Core.Model.DataTypes.Concept), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("statusConceptModel", context.JsonContext, _retVal, context))));
                                                                                                            if ((_instance != null)) {
                                                                                                                _retVal.StatusConcept = _instance;
                                                                                                            }
                                                                                                        }
                                                                                                        else {
                                                                                                            if ("determinerConceptModel".Equals(r.Value)) {
                                                                                                                r.Read();
                                                                                                                OpenIZ.Core.Model.DataTypes.Concept _instance = ((OpenIZ.Core.Model.DataTypes.Concept)(context.JsonContext.ReadElementUtil(r, typeof(OpenIZ.Core.Model.DataTypes.Concept), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("determinerConceptModel", context.JsonContext, _retVal, context))));
                                                                                                                if ((_instance != null)) {
                                                                                                                    _retVal.DeterminerConcept = _instance;
                                                                                                                }
                                                                                                            }
                                                                                                            else {
                                                                                                                if ("classConceptModel".Equals(r.Value)) {
                                                                                                                    r.Read();
                                                                                                                    OpenIZ.Core.Model.DataTypes.Concept _instance = ((OpenIZ.Core.Model.DataTypes.Concept)(context.JsonContext.ReadElementUtil(r, typeof(OpenIZ.Core.Model.DataTypes.Concept), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("classConceptModel", context.JsonContext, _retVal, context))));
                                                                                                                    if ((_instance != null)) {
                                                                                                                        _retVal.ClassConcept = _instance;
                                                                                                                    }
                                                                                                                }
                                                                                                                else {
                                                                                                                    if ("typeConcept".Equals(r.Value)) {
                                                                                                                        r.Read();
                                                                                                                        System.Nullable<System.Guid> _instance = ((System.Nullable<System.Guid>)(context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<System.Guid>), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("typeConcept", context.JsonContext, _retVal, context))));
                                                                                                                        if ((_instance != null)) {
                                                                                                                            _retVal.TypeConceptKey = _instance;
                                                                                                                        }
                                                                                                                    }
                                                                                                                    else {
                                                                                                                        if ("creationAct".Equals(r.Value)) {
                                                                                                                            r.Read();
                                                                                                                            System.Nullable<System.Guid> _instance = ((System.Nullable<System.Guid>)(context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<System.Guid>), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("creationAct", context.JsonContext, _retVal, context))));
                                                                                                                            if ((_instance != null)) {
                                                                                                                                _retVal.CreationActKey = _instance;
                                                                                                                            }
                                                                                                                        }
                                                                                                                        else {
                                                                                                                            if ("statusConcept".Equals(r.Value)) {
                                                                                                                                r.Read();
                                                                                                                                System.Nullable<System.Guid> _instance = ((System.Nullable<System.Guid>)(context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<System.Guid>), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("statusConcept", context.JsonContext, _retVal, context))));
                                                                                                                                if ((_instance != null)) {
                                                                                                                                    _retVal.StatusConceptKey = _instance;
                                                                                                                                }
                                                                                                                            }
                                                                                                                            else {
                                                                                                                                if ("determinerConcept".Equals(r.Value)) {
                                                                                                                                    r.Read();
                                                                                                                                    System.Nullable<System.Guid> _instance = ((System.Nullable<System.Guid>)(context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<System.Guid>), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("determinerConcept", context.JsonContext, _retVal, context))));
                                                                                                                                    if ((_instance != null)) {
                                                                                                                                        _retVal.DeterminerConceptKey = _instance;
                                                                                                                                    }
                                                                                                                                }
                                                                                                                                else {
                                                                                                                                    if ("classConcept".Equals(r.Value)) {
                                                                                                                                        r.Read();
                                                                                                                                        System.Nullable<System.Guid> _instance = ((System.Nullable<System.Guid>)(context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<System.Guid>), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("classConcept", context.JsonContext, _retVal, context))));
                                                                                                                                        if ((_instance != null)) {
                                                                                                                                            _retVal.ClassConceptKey = _instance;
                                                                                                                                        }
                                                                                                                                    }
                                                                                                                                    else {
                                                                                                                                        if ("template".Equals(r.Value)) {
                                                                                                                                            r.Read();
                                                                                                                                            OpenIZ.Core.Model.DataTypes.TemplateDefinition _instance = ((OpenIZ.Core.Model.DataTypes.TemplateDefinition)(context.JsonContext.ReadElementUtil(r, typeof(OpenIZ.Core.Model.DataTypes.TemplateDefinition), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("template", context.JsonContext, _retVal, context))));
                                                                                                                                            if ((_instance != null)) {
                                                                                                                                                _retVal.Template = _instance;
                                                                                                                                            }
                                                                                                                                        }
                                                                                                                                        else {
                                                                                                                                            if ("isAdministrative".Equals(r.Value)) {
                                                                                                                                                r.Read();
                                                                                                                                                bool _instance = ((bool)(context.JsonContext.ReadElementUtil(r, typeof(bool), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("isAdministrative", context.JsonContext, _retVal, context))));
                                                                                                                                                if ((_instance != null)) {
                                                                                                                                                    _retVal.IsAdministrative = _instance;
                                                                                                                                                }
                                                                                                                                            }
                                                                                                                                            else {
                                                                                                                                                if ("expiryDate".Equals(r.Value)) {
                                                                                                                                                    r.Read();
                                                                                                                                                    System.Nullable<System.DateTime> _instance = ((System.Nullable<System.DateTime>)(context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<System.DateTime>), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("expiryDate", context.JsonContext, _retVal, context))));
                                                                                                                                                    if ((_instance != null)) {
                                                                                                                                                        _retVal.ExpiryDate = _instance;
                                                                                                                                                    }
                                                                                                                                                }
                                                                                                                                                else {
                                                                                                                                                    if ("quantityConceptModel".Equals(r.Value)) {
                                                                                                                                                        r.Read();
                                                                                                                                                        OpenIZ.Core.Model.DataTypes.Concept _instance = ((OpenIZ.Core.Model.DataTypes.Concept)(context.JsonContext.ReadElementUtil(r, typeof(OpenIZ.Core.Model.DataTypes.Concept), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("quantityConceptModel", context.JsonContext, _retVal, context))));
                                                                                                                                                        if ((_instance != null)) {
                                                                                                                                                            _retVal.QuantityConcept = _instance;
                                                                                                                                                        }
                                                                                                                                                    }
                                                                                                                                                    else {
                                                                                                                                                        if ("formConceptModel".Equals(r.Value)) {
                                                                                                                                                            r.Read();
                                                                                                                                                            OpenIZ.Core.Model.DataTypes.Concept _instance = ((OpenIZ.Core.Model.DataTypes.Concept)(context.JsonContext.ReadElementUtil(r, typeof(OpenIZ.Core.Model.DataTypes.Concept), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("formConceptModel", context.JsonContext, _retVal, context))));
                                                                                                                                                            if ((_instance != null)) {
                                                                                                                                                                _retVal.FormConcept = _instance;
                                                                                                                                                            }
                                                                                                                                                        }
                                                                                                                                                        else {
                                                                                                                                                            if ("quantity".Equals(r.Value)) {
                                                                                                                                                                r.Read();
                                                                                                                                                                System.Nullable<decimal> _instance = ((System.Nullable<decimal>)(context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<decimal>), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("quantity", context.JsonContext, _retVal, context))));
                                                                                                                                                                if ((_instance != null)) {
                                                                                                                                                                    _retVal.Quantity = _instance;
                                                                                                                                                                }
                                                                                                                                                            }
                                                                                                                                                            else {
                                                                                                                                                                if ("quantityConcept".Equals(r.Value)) {
                                                                                                                                                                    r.Read();
                                                                                                                                                                    System.Nullable<System.Guid> _instance = ((System.Nullable<System.Guid>)(context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<System.Guid>), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("quantityConcept", context.JsonContext, _retVal, context))));
                                                                                                                                                                    if ((_instance != null)) {
                                                                                                                                                                        _retVal.QuantityConceptKey = _instance;
                                                                                                                                                                    }
                                                                                                                                                                }
                                                                                                                                                                else {
                                                                                                                                                                    if ("formConcept".Equals(r.Value)) {
                                                                                                                                                                        r.Read();
                                                                                                                                                                        System.Nullable<System.Guid> _instance = ((System.Nullable<System.Guid>)(context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<System.Guid>), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("formConcept", context.JsonContext, _retVal, context))));
                                                                                                                                                                        if ((_instance != null)) {
                                                                                                                                                                            _retVal.FormConceptKey = _instance;
                                                                                                                                                                        }
                                                                                                                                                                    }
                                                                                                                                                                    else {
                                                                                                                                                                        if ("$type".Equals(r.Value)) {
                                                                                                                                                                            System.Type _type = this.m_binder.BindToType("OpenIZ.Core.Model, Version=0.6.14.21496, Culture=neutral, PublicKeyToken=null", r.ReadAsString());
                                                                                                                                                                            if ((_type != typeof(OpenIZ.Core.Model.Entities.Material))) {
                                                                                                                                                                                OpenIZ.Core.Model.Entities.Material _nretVal = ((OpenIZ.Core.Model.Entities.Material)(context.JsonContext.GetFormatter(_type).Deserialize(r, _type, context)));
                                                                                                                                                                                _nretVal.CopyObjectData(_retVal);
                                                                                                                                                                                return _nretVal;
                                                                                                                                                                            }
                                                                                                                                                                        }
                                                                                                                                                                        else {
                                                                                                                                                                            r.Skip();
                                                                                                                                                                        }
                                                                                                                                                                    }
                                                                                                                                                                }
                                                                                                                                                            }
                                                                                                                                                        }
                                                                                                                                                    }
                                                                                                                                                }
                                                                                                                                            }
                                                                                                                                        }
                                                                                                                                    }
                                                                                                                                }
                                                                                                                            }
                                                                                                                        }
                                                                                                                    }
                                                                                                                }
                                                                                                            }
                                                                                                        }
                                                                                                    }
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
                else {
                    if (((r.TokenType == Newtonsoft.Json.JsonToken.EndObject) 
                                && (r.Depth == _depth))) {
                        return _retVal;
                    }
                    else {
                        throw new Newtonsoft.Json.JsonSerializationException("JSON in invalid state");
                    }
                }
            }
            return _retVal;
        }
        
        public object FromSimpleValue(object o) {
            return null;
        }
        
        public object GetSimpleValue(object o) {
            return null;
        }
    }
    
    public class OrganizationViewModelSerializer : OpenIZ.Core.Applets.ViewModel.Json.IJsonViewModelTypeFormatter {
        
        private OpenIZ.Core.Model.Serialization.ModelSerializationBinder m_binder = new OpenIZ.Core.Model.Serialization.ModelSerializationBinder();
        
        private OpenIZ.Core.Diagnostics.Tracer m_tracer = OpenIZ.Core.Diagnostics.Tracer.GetTracer(typeof(OrganizationViewModelSerializer));
        
        public System.Type HandlesType {
            get {
                return typeof(OpenIZ.Core.Model.Entities.Organization);
            }
        }
        
        public void Serialize(Newtonsoft.Json.JsonWriter w, OpenIZ.Core.Model.IdentifiedData o, OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext context) {
            if ((o == null)) {
                throw new System.ArgumentNullException("o");
            }
            OpenIZ.Core.Model.Entities.Organization _strong = null;
            OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext _jsonContext = null;
            bool _loaded = false;
            try {
                _strong = ((OpenIZ.Core.Model.Entities.Organization)(o));
            }
            catch (System.Exception e) {
                this.m_tracer.TraceError(string.Format("Casting Error: {0}", e));
                throw new System.ArgumentException(string.Format("Invalid type {0} provided, expected {1}", o.GetType(), typeof(OpenIZ.Core.Model.Entities.Organization)));
            }
            if (context.ShouldSerialize("industryConcept")) {
                if ((_strong.IndustryConceptKey == null)) {
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "industryConcept", _strong.IndustryConceptKey, context);
                }
            }
            if (context.ShouldSerialize("industryConceptModel")) {
                if ((_strong.IndustryConcept == null)) {
                    if ((_strong.Key.HasValue && context.ShouldForceLoad("industryConceptModel", _strong.Key.Value))) {
                        OpenIZ.Core.Model.DataTypes.Concept _delay = null;
                        _delay = context.JsonContext.LoadRelated<OpenIZ.Core.Model.DataTypes.Concept>(_strong.IndustryConceptKey);
                        _strong.IndustryConcept = _delay;
                        if ((_delay != null)) {
                            _loaded = true;
                            context.JsonContext.WritePropertyUtil(w, "industryConceptModel", _strong.IndustryConcept, context);
                        }
                    }
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "industryConceptModel", _strong.IndustryConcept, context);
                }
            }
            if (context.ShouldSerialize("template")) {
                if ((_strong.Template == null)) {
                    if ((_strong.Key.HasValue && context.ShouldForceLoad("template", _strong.Key.Value))) {
                        OpenIZ.Core.Model.DataTypes.TemplateDefinition _delay = null;
                    }
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "template", _strong.Template, context);
                }
            }
            if (context.ShouldSerialize("classConcept")) {
                if ((_strong.ClassConceptKey == null)) {
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "classConcept", _strong.ClassConceptKey, context);
                }
            }
            if (context.ShouldSerialize("determinerConcept")) {
                if ((_strong.DeterminerConceptKey == null)) {
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "determinerConcept", _strong.DeterminerConceptKey, context);
                }
            }
            if (context.ShouldSerialize("statusConcept")) {
                if ((_strong.StatusConceptKey == null)) {
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "statusConcept", _strong.StatusConceptKey, context);
                }
            }
            if (context.ShouldSerialize("creationAct")) {
                if ((_strong.CreationActKey == null)) {
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "creationAct", _strong.CreationActKey, context);
                }
            }
            if (context.ShouldSerialize("typeConcept")) {
                if ((_strong.TypeConceptKey == null)) {
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "typeConcept", _strong.TypeConceptKey, context);
                }
            }
            if (context.ShouldSerialize("classConceptModel")) {
                if ((_strong.ClassConcept == null)) {
                    if ((_strong.Key.HasValue && context.ShouldForceLoad("classConceptModel", _strong.Key.Value))) {
                        OpenIZ.Core.Model.DataTypes.Concept _delay = null;
                        _delay = context.JsonContext.LoadRelated<OpenIZ.Core.Model.DataTypes.Concept>(_strong.ClassConceptKey);
                        _strong.ClassConcept = _delay;
                        if ((_delay != null)) {
                            _loaded = true;
                            context.JsonContext.WritePropertyUtil(w, "classConceptModel", _strong.ClassConcept, context);
                        }
                    }
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "classConceptModel", _strong.ClassConcept, context);
                }
            }
            if (context.ShouldSerialize("determinerConceptModel")) {
                if ((_strong.DeterminerConcept == null)) {
                    if ((_strong.Key.HasValue && context.ShouldForceLoad("determinerConceptModel", _strong.Key.Value))) {
                        OpenIZ.Core.Model.DataTypes.Concept _delay = null;
                        _delay = context.JsonContext.LoadRelated<OpenIZ.Core.Model.DataTypes.Concept>(_strong.DeterminerConceptKey);
                        _strong.DeterminerConcept = _delay;
                        if ((_delay != null)) {
                            _loaded = true;
                            context.JsonContext.WritePropertyUtil(w, "determinerConceptModel", _strong.DeterminerConcept, context);
                        }
                    }
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "determinerConceptModel", _strong.DeterminerConcept, context);
                }
            }
            if (context.ShouldSerialize("statusConceptModel")) {
                if ((_strong.StatusConcept == null)) {
                    if ((_strong.Key.HasValue && context.ShouldForceLoad("statusConceptModel", _strong.Key.Value))) {
                        OpenIZ.Core.Model.DataTypes.Concept _delay = null;
                        _delay = context.JsonContext.LoadRelated<OpenIZ.Core.Model.DataTypes.Concept>(_strong.StatusConceptKey);
                        _strong.StatusConcept = _delay;
                        if ((_delay != null)) {
                            _loaded = true;
                            context.JsonContext.WritePropertyUtil(w, "statusConceptModel", _strong.StatusConcept, context);
                        }
                    }
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "statusConceptModel", _strong.StatusConcept, context);
                }
            }
            if (context.ShouldSerialize("creationActModel")) {
                if ((_strong.CreationAct == null)) {
                    if ((_strong.Key.HasValue && context.ShouldForceLoad("creationActModel", _strong.Key.Value))) {
                        OpenIZ.Core.Model.Acts.Act _delay = null;
                        _delay = context.JsonContext.LoadRelated<OpenIZ.Core.Model.Acts.Act>(_strong.CreationActKey);
                        _strong.CreationAct = _delay;
                        if ((_delay != null)) {
                            _loaded = true;
                            context.JsonContext.WritePropertyUtil(w, "creationActModel", _strong.CreationAct, context);
                        }
                    }
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "creationActModel", _strong.CreationAct, context);
                }
            }
            if (context.ShouldSerialize("typeConceptModel")) {
                if ((_strong.TypeConcept == null)) {
                    if ((_strong.Key.HasValue && context.ShouldForceLoad("typeConceptModel", _strong.Key.Value))) {
                        OpenIZ.Core.Model.DataTypes.Concept _delay = null;
                        _delay = context.JsonContext.LoadRelated<OpenIZ.Core.Model.DataTypes.Concept>(_strong.TypeConceptKey);
                        _strong.TypeConcept = _delay;
                        if ((_delay != null)) {
                            _loaded = true;
                            context.JsonContext.WritePropertyUtil(w, "typeConceptModel", _strong.TypeConcept, context);
                        }
                    }
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "typeConceptModel", _strong.TypeConcept, context);
                }
            }
            if (context.ShouldSerialize("identifier")) {
                if (((_strong.Identifiers == null) 
                            || (_strong.Identifiers.Count == 0))) {
                    if ((_strong.Key.HasValue && context.ShouldForceLoad("identifier", _strong.Key.Value))) {
                        System.Collections.Generic.List<OpenIZ.Core.Model.DataTypes.EntityIdentifier> _delay = null;
                        _delay = new System.Collections.Generic.List<OpenIZ.Core.Model.DataTypes.EntityIdentifier>(context.JsonContext.LoadCollection<OpenIZ.Core.Model.DataTypes.EntityIdentifier>(_strong.Key.Value));
                        _strong.Identifiers = _delay;
                        if ((_delay.Count > 0)) {
                            _loaded = true;
                            context.JsonContext.WritePropertyUtil(w, "identifier", _strong.Identifiers, context);
                        }
                    }
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "identifier", _strong.Identifiers, context);
                }
            }
            if (context.ShouldSerialize("relationship")) {
                if (((_strong.Relationships == null) 
                            || (_strong.Relationships.Count == 0))) {
                    if ((_strong.Key.HasValue && context.ShouldForceLoad("relationship", _strong.Key.Value))) {
                        System.Collections.Generic.List<OpenIZ.Core.Model.Entities.EntityRelationship> _delay = null;
                        _delay = new System.Collections.Generic.List<OpenIZ.Core.Model.Entities.EntityRelationship>(context.JsonContext.LoadCollection<OpenIZ.Core.Model.Entities.EntityRelationship>(_strong.Key.Value));
                        _strong.Relationships = _delay;
                        if ((_delay.Count > 0)) {
                            _loaded = true;
                            context.JsonContext.WritePropertyUtil(w, "relationship", _strong.Relationships, context);
                        }
                    }
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "relationship", _strong.Relationships, context);
                }
            }
            if (context.ShouldSerialize("telecom")) {
                if (((_strong.Telecoms == null) 
                            || (_strong.Telecoms.Count == 0))) {
                    if ((_strong.Key.HasValue && context.ShouldForceLoad("telecom", _strong.Key.Value))) {
                        System.Collections.Generic.List<OpenIZ.Core.Model.Entities.EntityTelecomAddress> _delay = null;
                        _delay = new System.Collections.Generic.List<OpenIZ.Core.Model.Entities.EntityTelecomAddress>(context.JsonContext.LoadCollection<OpenIZ.Core.Model.Entities.EntityTelecomAddress>(_strong.Key.Value));
                        _strong.Telecoms = _delay;
                        if ((_delay.Count > 0)) {
                            _loaded = true;
                            context.JsonContext.WritePropertyUtil(w, "telecom", _strong.Telecoms, context);
                        }
                    }
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "telecom", _strong.Telecoms, context);
                }
            }
            if (context.ShouldSerialize("extension")) {
                if (((_strong.Extensions == null) 
                            || (_strong.Extensions.Count == 0))) {
                    if ((_strong.Key.HasValue && context.ShouldForceLoad("extension", _strong.Key.Value))) {
                        System.Collections.Generic.List<OpenIZ.Core.Model.DataTypes.EntityExtension> _delay = null;
                        _delay = new System.Collections.Generic.List<OpenIZ.Core.Model.DataTypes.EntityExtension>(context.JsonContext.LoadCollection<OpenIZ.Core.Model.DataTypes.EntityExtension>(_strong.Key.Value));
                        _strong.Extensions = _delay;
                        if ((_delay.Count > 0)) {
                            _loaded = true;
                            context.JsonContext.WritePropertyUtil(w, "extension", _strong.Extensions, context);
                        }
                    }
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "extension", _strong.Extensions, context);
                }
            }
            if (context.ShouldSerialize("name")) {
                if (((_strong.Names == null) 
                            || (_strong.Names.Count == 0))) {
                    if ((_strong.Key.HasValue && context.ShouldForceLoad("name", _strong.Key.Value))) {
                        System.Collections.Generic.List<OpenIZ.Core.Model.Entities.EntityName> _delay = null;
                        _delay = new System.Collections.Generic.List<OpenIZ.Core.Model.Entities.EntityName>(context.JsonContext.LoadCollection<OpenIZ.Core.Model.Entities.EntityName>(_strong.Key.Value));
                        _strong.Names = _delay;
                        if ((_delay.Count > 0)) {
                            _loaded = true;
                            context.JsonContext.WritePropertyUtil(w, "name", _strong.Names, context);
                        }
                    }
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "name", _strong.Names, context);
                }
            }
            if (context.ShouldSerialize("address")) {
                if (((_strong.Addresses == null) 
                            || (_strong.Addresses.Count == 0))) {
                    if ((_strong.Key.HasValue && context.ShouldForceLoad("address", _strong.Key.Value))) {
                        System.Collections.Generic.List<OpenIZ.Core.Model.Entities.EntityAddress> _delay = null;
                        _delay = new System.Collections.Generic.List<OpenIZ.Core.Model.Entities.EntityAddress>(context.JsonContext.LoadCollection<OpenIZ.Core.Model.Entities.EntityAddress>(_strong.Key.Value));
                        _strong.Addresses = _delay;
                        if ((_delay.Count > 0)) {
                            _loaded = true;
                            context.JsonContext.WritePropertyUtil(w, "address", _strong.Addresses, context);
                        }
                    }
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "address", _strong.Addresses, context);
                }
            }
            if (context.ShouldSerialize("note")) {
                if (((_strong.Notes == null) 
                            || (_strong.Notes.Count == 0))) {
                    if ((_strong.Key.HasValue && context.ShouldForceLoad("note", _strong.Key.Value))) {
                        System.Collections.Generic.List<OpenIZ.Core.Model.DataTypes.EntityNote> _delay = null;
                        _delay = new System.Collections.Generic.List<OpenIZ.Core.Model.DataTypes.EntityNote>(context.JsonContext.LoadCollection<OpenIZ.Core.Model.DataTypes.EntityNote>(_strong.Key.Value));
                        _strong.Notes = _delay;
                        if ((_delay.Count > 0)) {
                            _loaded = true;
                            context.JsonContext.WritePropertyUtil(w, "note", _strong.Notes, context);
                        }
                    }
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "note", _strong.Notes, context);
                }
            }
            if (context.ShouldSerialize("tag")) {
                if (((_strong.Tags == null) 
                            || (_strong.Tags.Count == 0))) {
                    if ((_strong.Key.HasValue && context.ShouldForceLoad("tag", _strong.Key.Value))) {
                        System.Collections.Generic.List<OpenIZ.Core.Model.DataTypes.EntityTag> _delay = null;
                        _delay = new System.Collections.Generic.List<OpenIZ.Core.Model.DataTypes.EntityTag>(context.JsonContext.LoadCollection<OpenIZ.Core.Model.DataTypes.EntityTag>(_strong.Key.Value));
                        _strong.Tags = _delay;
                        if ((_delay.Count > 0)) {
                            _loaded = true;
                            context.JsonContext.WritePropertyUtil(w, "tag", _strong.Tags, context);
                        }
                    }
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "tag", _strong.Tags, context);
                }
            }
            if (context.ShouldSerialize("participation")) {
                if (((_strong.Participations == null) 
                            || (_strong.Participations.Count == 0))) {
                    if ((_strong.Key.HasValue && context.ShouldForceLoad("participation", _strong.Key.Value))) {
                        System.Collections.Generic.List<OpenIZ.Core.Model.Acts.ActParticipation> _delay = null;
                        _delay = new System.Collections.Generic.List<OpenIZ.Core.Model.Acts.ActParticipation>(context.JsonContext.LoadCollection<OpenIZ.Core.Model.Acts.ActParticipation>(_strong.Key.Value));
                        _strong.Participations = _delay;
                        if ((_delay.Count > 0)) {
                            _loaded = true;
                            context.JsonContext.WritePropertyUtil(w, "participation", _strong.Participations, context);
                        }
                    }
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "participation", _strong.Participations, context);
                }
            }
            if (context.ShouldSerialize("etag")) {
                if ((_strong.Tag == null)) {
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "etag", _strong.Tag, context);
                }
            }
            if (context.ShouldSerialize("previousVersion")) {
                if ((_strong.PreviousVersionKey == null)) {
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "previousVersion", _strong.PreviousVersionKey, context);
                }
            }
            if (context.ShouldSerialize("version")) {
                if ((_strong.VersionKey == null)) {
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "version", _strong.VersionKey, context);
                }
            }
            if (context.ShouldSerialize("sequence")) {
                if ((_strong.VersionSequence == null)) {
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "sequence", _strong.VersionSequence, context);
                }
            }
            if (context.ShouldSerialize("creationTimeModel")) {
                if ((_strong.CreationTime == null)) {
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "creationTimeModel", _strong.CreationTime, context);
                }
            }
            if (context.ShouldSerialize("creationTime")) {
                if ((_strong.CreationTimeXml == null)) {
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "creationTime", _strong.CreationTimeXml, context);
                }
            }
            if (context.ShouldSerialize("obsoletionTimeModel")) {
                if ((_strong.ObsoletionTime == null)) {
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "obsoletionTimeModel", _strong.ObsoletionTime, context);
                }
            }
            if (context.ShouldSerialize("obsoletionTime")) {
                if ((_strong.ObsoletionTimeXml == null)) {
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "obsoletionTime", _strong.ObsoletionTimeXml, context);
                }
            }
            if (context.ShouldSerialize("createdBy")) {
                if ((_strong.CreatedByKey == null)) {
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "createdBy", _strong.CreatedByKey, context);
                }
            }
            if (context.ShouldSerialize("obsoletedBy")) {
                if ((_strong.ObsoletedByKey == null)) {
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "obsoletedBy", _strong.ObsoletedByKey, context);
                }
            }
            if (context.ShouldSerialize("id")) {
                if ((_strong.Key == null)) {
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "id", _strong.Key, context);
                }
            }
            if (((_loaded && _strong.Key.HasValue) 
                        && _strong.VersionKey.HasValue)) {
                ((OpenIZ.Core.Services.IDataCachingService)(OpenIZ.Core.ApplicationServiceContext.Current.GetService(typeof(OpenIZ.Core.Services.IDataCachingService)))).Add(_strong);
            }
        }
        
        public object Deserialize(Newtonsoft.Json.JsonReader r, System.Type asType, OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext context) {
            OpenIZ.Core.Model.Entities.Organization _retVal = new OpenIZ.Core.Model.Entities.Organization();
            int _depth = r.Depth;
            if ((r.TokenType != Newtonsoft.Json.JsonToken.StartObject)) {
                _depth = (_depth - 1);
            }
            for (
            ; r.Read(); 
            ) {
                if ((r.TokenType == Newtonsoft.Json.JsonToken.PropertyName)) {
                    if ("id".Equals(r.Value)) {
                        r.Read();
                        System.Nullable<System.Guid> _instance = ((System.Nullable<System.Guid>)(context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<System.Guid>), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("id", context.JsonContext, _retVal, context))));
                        if ((_instance != null)) {
                            _retVal.Key = _instance;
                        }
                    }
                    else {
                        if ("obsoletedBy".Equals(r.Value)) {
                            r.Read();
                            System.Nullable<System.Guid> _instance = ((System.Nullable<System.Guid>)(context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<System.Guid>), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("obsoletedBy", context.JsonContext, _retVal, context))));
                            if ((_instance != null)) {
                                _retVal.ObsoletedByKey = _instance;
                            }
                        }
                        else {
                            if ("createdBy".Equals(r.Value)) {
                                r.Read();
                                System.Nullable<System.Guid> _instance = ((System.Nullable<System.Guid>)(context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<System.Guid>), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("createdBy", context.JsonContext, _retVal, context))));
                                if ((_instance != null)) {
                                    _retVal.CreatedByKey = _instance;
                                }
                            }
                            else {
                                if ("obsoletionTime".Equals(r.Value)) {
                                    r.Read();
                                    string _instance = ((string)(context.JsonContext.ReadElementUtil(r, typeof(string), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("obsoletionTime", context.JsonContext, _retVal, context))));
                                    if ((_instance != null)) {
                                        _retVal.ObsoletionTimeXml = _instance;
                                    }
                                }
                                else {
                                    if ("obsoletionTimeModel".Equals(r.Value)) {
                                        r.Read();
                                        System.Nullable<System.DateTimeOffset> _instance = ((System.Nullable<System.DateTimeOffset>)(context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<System.DateTimeOffset>), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("obsoletionTimeModel", context.JsonContext, _retVal, context))));
                                        if ((_instance != null)) {
                                            _retVal.ObsoletionTime = _instance;
                                        }
                                    }
                                    else {
                                        if ("creationTime".Equals(r.Value)) {
                                            r.Read();
                                            string _instance = ((string)(context.JsonContext.ReadElementUtil(r, typeof(string), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("creationTime", context.JsonContext, _retVal, context))));
                                            if ((_instance != null)) {
                                                _retVal.CreationTimeXml = _instance;
                                            }
                                        }
                                        else {
                                            if ("creationTimeModel".Equals(r.Value)) {
                                                r.Read();
                                                System.DateTimeOffset _instance = ((System.DateTimeOffset)(context.JsonContext.ReadElementUtil(r, typeof(System.DateTimeOffset), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("creationTimeModel", context.JsonContext, _retVal, context))));
                                                if ((_instance != null)) {
                                                    _retVal.CreationTime = _instance;
                                                }
                                            }
                                            else {
                                                if ("sequence".Equals(r.Value)) {
                                                    r.Read();
                                                    System.Nullable<decimal> _instance = ((System.Nullable<decimal>)(context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<decimal>), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("sequence", context.JsonContext, _retVal, context))));
                                                    if ((_instance != null)) {
                                                        _retVal.VersionSequence = _instance;
                                                    }
                                                }
                                                else {
                                                    if ("version".Equals(r.Value)) {
                                                        r.Read();
                                                        System.Nullable<System.Guid> _instance = ((System.Nullable<System.Guid>)(context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<System.Guid>), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("version", context.JsonContext, _retVal, context))));
                                                        if ((_instance != null)) {
                                                            _retVal.VersionKey = _instance;
                                                        }
                                                    }
                                                    else {
                                                        if ("previousVersion".Equals(r.Value)) {
                                                            r.Read();
                                                            System.Nullable<System.Guid> _instance = ((System.Nullable<System.Guid>)(context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<System.Guid>), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("previousVersion", context.JsonContext, _retVal, context))));
                                                            if ((_instance != null)) {
                                                                _retVal.PreviousVersionKey = _instance;
                                                            }
                                                        }
                                                        else {
                                                            if ("participation".Equals(r.Value)) {
                                                                r.Read();
                                                                System.Collections.Generic.List<OpenIZ.Core.Model.Acts.ActParticipation> _instance = ((System.Collections.Generic.List<OpenIZ.Core.Model.Acts.ActParticipation>)(context.JsonContext.ReadElementUtil(r, typeof(System.Collections.Generic.List<OpenIZ.Core.Model.Acts.ActParticipation>), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("participation", context.JsonContext, _retVal, context))));
                                                                if ((_instance != null)) {
                                                                    _retVal.Participations = _instance;
                                                                }
                                                            }
                                                            else {
                                                                if ("tag".Equals(r.Value)) {
                                                                    r.Read();
                                                                    System.Collections.Generic.List<OpenIZ.Core.Model.DataTypes.EntityTag> _instance = ((System.Collections.Generic.List<OpenIZ.Core.Model.DataTypes.EntityTag>)(context.JsonContext.ReadElementUtil(r, typeof(System.Collections.Generic.List<OpenIZ.Core.Model.DataTypes.EntityTag>), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("tag", context.JsonContext, _retVal, context))));
                                                                    if ((_instance != null)) {
                                                                        _retVal.Tags = _instance;
                                                                    }
                                                                }
                                                                else {
                                                                    if ("note".Equals(r.Value)) {
                                                                        r.Read();
                                                                        System.Collections.Generic.List<OpenIZ.Core.Model.DataTypes.EntityNote> _instance = ((System.Collections.Generic.List<OpenIZ.Core.Model.DataTypes.EntityNote>)(context.JsonContext.ReadElementUtil(r, typeof(System.Collections.Generic.List<OpenIZ.Core.Model.DataTypes.EntityNote>), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("note", context.JsonContext, _retVal, context))));
                                                                        if ((_instance != null)) {
                                                                            _retVal.Notes = _instance;
                                                                        }
                                                                    }
                                                                    else {
                                                                        if ("address".Equals(r.Value)) {
                                                                            r.Read();
                                                                            System.Collections.Generic.List<OpenIZ.Core.Model.Entities.EntityAddress> _instance = ((System.Collections.Generic.List<OpenIZ.Core.Model.Entities.EntityAddress>)(context.JsonContext.ReadElementUtil(r, typeof(System.Collections.Generic.List<OpenIZ.Core.Model.Entities.EntityAddress>), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("address", context.JsonContext, _retVal, context))));
                                                                            if ((_instance != null)) {
                                                                                _retVal.Addresses = _instance;
                                                                            }
                                                                        }
                                                                        else {
                                                                            if ("name".Equals(r.Value)) {
                                                                                r.Read();
                                                                                System.Collections.Generic.List<OpenIZ.Core.Model.Entities.EntityName> _instance = ((System.Collections.Generic.List<OpenIZ.Core.Model.Entities.EntityName>)(context.JsonContext.ReadElementUtil(r, typeof(System.Collections.Generic.List<OpenIZ.Core.Model.Entities.EntityName>), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("name", context.JsonContext, _retVal, context))));
                                                                                if ((_instance != null)) {
                                                                                    _retVal.Names = _instance;
                                                                                }
                                                                            }
                                                                            else {
                                                                                if ("extension".Equals(r.Value)) {
                                                                                    r.Read();
                                                                                    System.Collections.Generic.List<OpenIZ.Core.Model.DataTypes.EntityExtension> _instance = ((System.Collections.Generic.List<OpenIZ.Core.Model.DataTypes.EntityExtension>)(context.JsonContext.ReadElementUtil(r, typeof(System.Collections.Generic.List<OpenIZ.Core.Model.DataTypes.EntityExtension>), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("extension", context.JsonContext, _retVal, context))));
                                                                                    if ((_instance != null)) {
                                                                                        _retVal.Extensions = _instance;
                                                                                    }
                                                                                }
                                                                                else {
                                                                                    if ("telecom".Equals(r.Value)) {
                                                                                        r.Read();
                                                                                        System.Collections.Generic.List<OpenIZ.Core.Model.Entities.EntityTelecomAddress> _instance = ((System.Collections.Generic.List<OpenIZ.Core.Model.Entities.EntityTelecomAddress>)(context.JsonContext.ReadElementUtil(r, typeof(System.Collections.Generic.List<OpenIZ.Core.Model.Entities.EntityTelecomAddress>), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("telecom", context.JsonContext, _retVal, context))));
                                                                                        if ((_instance != null)) {
                                                                                            _retVal.Telecoms = _instance;
                                                                                        }
                                                                                    }
                                                                                    else {
                                                                                        if ("relationship".Equals(r.Value)) {
                                                                                            r.Read();
                                                                                            System.Collections.Generic.List<OpenIZ.Core.Model.Entities.EntityRelationship> _instance = ((System.Collections.Generic.List<OpenIZ.Core.Model.Entities.EntityRelationship>)(context.JsonContext.ReadElementUtil(r, typeof(System.Collections.Generic.List<OpenIZ.Core.Model.Entities.EntityRelationship>), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("relationship", context.JsonContext, _retVal, context))));
                                                                                            if ((_instance != null)) {
                                                                                                _retVal.Relationships = _instance;
                                                                                            }
                                                                                        }
                                                                                        else {
                                                                                            if ("identifier".Equals(r.Value)) {
                                                                                                r.Read();
                                                                                                System.Collections.Generic.List<OpenIZ.Core.Model.DataTypes.EntityIdentifier> _instance = ((System.Collections.Generic.List<OpenIZ.Core.Model.DataTypes.EntityIdentifier>)(context.JsonContext.ReadElementUtil(r, typeof(System.Collections.Generic.List<OpenIZ.Core.Model.DataTypes.EntityIdentifier>), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("identifier", context.JsonContext, _retVal, context))));
                                                                                                if ((_instance != null)) {
                                                                                                    _retVal.Identifiers = _instance;
                                                                                                }
                                                                                            }
                                                                                            else {
                                                                                                if ("typeConceptModel".Equals(r.Value)) {
                                                                                                    r.Read();
                                                                                                    OpenIZ.Core.Model.DataTypes.Concept _instance = ((OpenIZ.Core.Model.DataTypes.Concept)(context.JsonContext.ReadElementUtil(r, typeof(OpenIZ.Core.Model.DataTypes.Concept), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("typeConceptModel", context.JsonContext, _retVal, context))));
                                                                                                    if ((_instance != null)) {
                                                                                                        _retVal.TypeConcept = _instance;
                                                                                                    }
                                                                                                }
                                                                                                else {
                                                                                                    if ("creationActModel".Equals(r.Value)) {
                                                                                                        r.Read();
                                                                                                        OpenIZ.Core.Model.Acts.Act _instance = ((OpenIZ.Core.Model.Acts.Act)(context.JsonContext.ReadElementUtil(r, typeof(OpenIZ.Core.Model.Acts.Act), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("creationActModel", context.JsonContext, _retVal, context))));
                                                                                                        if ((_instance != null)) {
                                                                                                            _retVal.CreationAct = _instance;
                                                                                                        }
                                                                                                    }
                                                                                                    else {
                                                                                                        if ("statusConceptModel".Equals(r.Value)) {
                                                                                                            r.Read();
                                                                                                            OpenIZ.Core.Model.DataTypes.Concept _instance = ((OpenIZ.Core.Model.DataTypes.Concept)(context.JsonContext.ReadElementUtil(r, typeof(OpenIZ.Core.Model.DataTypes.Concept), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("statusConceptModel", context.JsonContext, _retVal, context))));
                                                                                                            if ((_instance != null)) {
                                                                                                                _retVal.StatusConcept = _instance;
                                                                                                            }
                                                                                                        }
                                                                                                        else {
                                                                                                            if ("determinerConceptModel".Equals(r.Value)) {
                                                                                                                r.Read();
                                                                                                                OpenIZ.Core.Model.DataTypes.Concept _instance = ((OpenIZ.Core.Model.DataTypes.Concept)(context.JsonContext.ReadElementUtil(r, typeof(OpenIZ.Core.Model.DataTypes.Concept), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("determinerConceptModel", context.JsonContext, _retVal, context))));
                                                                                                                if ((_instance != null)) {
                                                                                                                    _retVal.DeterminerConcept = _instance;
                                                                                                                }
                                                                                                            }
                                                                                                            else {
                                                                                                                if ("classConceptModel".Equals(r.Value)) {
                                                                                                                    r.Read();
                                                                                                                    OpenIZ.Core.Model.DataTypes.Concept _instance = ((OpenIZ.Core.Model.DataTypes.Concept)(context.JsonContext.ReadElementUtil(r, typeof(OpenIZ.Core.Model.DataTypes.Concept), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("classConceptModel", context.JsonContext, _retVal, context))));
                                                                                                                    if ((_instance != null)) {
                                                                                                                        _retVal.ClassConcept = _instance;
                                                                                                                    }
                                                                                                                }
                                                                                                                else {
                                                                                                                    if ("typeConcept".Equals(r.Value)) {
                                                                                                                        r.Read();
                                                                                                                        System.Nullable<System.Guid> _instance = ((System.Nullable<System.Guid>)(context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<System.Guid>), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("typeConcept", context.JsonContext, _retVal, context))));
                                                                                                                        if ((_instance != null)) {
                                                                                                                            _retVal.TypeConceptKey = _instance;
                                                                                                                        }
                                                                                                                    }
                                                                                                                    else {
                                                                                                                        if ("creationAct".Equals(r.Value)) {
                                                                                                                            r.Read();
                                                                                                                            System.Nullable<System.Guid> _instance = ((System.Nullable<System.Guid>)(context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<System.Guid>), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("creationAct", context.JsonContext, _retVal, context))));
                                                                                                                            if ((_instance != null)) {
                                                                                                                                _retVal.CreationActKey = _instance;
                                                                                                                            }
                                                                                                                        }
                                                                                                                        else {
                                                                                                                            if ("statusConcept".Equals(r.Value)) {
                                                                                                                                r.Read();
                                                                                                                                System.Nullable<System.Guid> _instance = ((System.Nullable<System.Guid>)(context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<System.Guid>), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("statusConcept", context.JsonContext, _retVal, context))));
                                                                                                                                if ((_instance != null)) {
                                                                                                                                    _retVal.StatusConceptKey = _instance;
                                                                                                                                }
                                                                                                                            }
                                                                                                                            else {
                                                                                                                                if ("determinerConcept".Equals(r.Value)) {
                                                                                                                                    r.Read();
                                                                                                                                    System.Nullable<System.Guid> _instance = ((System.Nullable<System.Guid>)(context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<System.Guid>), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("determinerConcept", context.JsonContext, _retVal, context))));
                                                                                                                                    if ((_instance != null)) {
                                                                                                                                        _retVal.DeterminerConceptKey = _instance;
                                                                                                                                    }
                                                                                                                                }
                                                                                                                                else {
                                                                                                                                    if ("classConcept".Equals(r.Value)) {
                                                                                                                                        r.Read();
                                                                                                                                        System.Nullable<System.Guid> _instance = ((System.Nullable<System.Guid>)(context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<System.Guid>), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("classConcept", context.JsonContext, _retVal, context))));
                                                                                                                                        if ((_instance != null)) {
                                                                                                                                            _retVal.ClassConceptKey = _instance;
                                                                                                                                        }
                                                                                                                                    }
                                                                                                                                    else {
                                                                                                                                        if ("template".Equals(r.Value)) {
                                                                                                                                            r.Read();
                                                                                                                                            OpenIZ.Core.Model.DataTypes.TemplateDefinition _instance = ((OpenIZ.Core.Model.DataTypes.TemplateDefinition)(context.JsonContext.ReadElementUtil(r, typeof(OpenIZ.Core.Model.DataTypes.TemplateDefinition), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("template", context.JsonContext, _retVal, context))));
                                                                                                                                            if ((_instance != null)) {
                                                                                                                                                _retVal.Template = _instance;
                                                                                                                                            }
                                                                                                                                        }
                                                                                                                                        else {
                                                                                                                                            if ("industryConceptModel".Equals(r.Value)) {
                                                                                                                                                r.Read();
                                                                                                                                                OpenIZ.Core.Model.DataTypes.Concept _instance = ((OpenIZ.Core.Model.DataTypes.Concept)(context.JsonContext.ReadElementUtil(r, typeof(OpenIZ.Core.Model.DataTypes.Concept), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("industryConceptModel", context.JsonContext, _retVal, context))));
                                                                                                                                                if ((_instance != null)) {
                                                                                                                                                    _retVal.IndustryConcept = _instance;
                                                                                                                                                }
                                                                                                                                            }
                                                                                                                                            else {
                                                                                                                                                if ("industryConcept".Equals(r.Value)) {
                                                                                                                                                    r.Read();
                                                                                                                                                    System.Nullable<System.Guid> _instance = ((System.Nullable<System.Guid>)(context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<System.Guid>), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("industryConcept", context.JsonContext, _retVal, context))));
                                                                                                                                                    if ((_instance != null)) {
                                                                                                                                                        _retVal.IndustryConceptKey = _instance;
                                                                                                                                                    }
                                                                                                                                                }
                                                                                                                                                else {
                                                                                                                                                    if ("$type".Equals(r.Value)) {
                                                                                                                                                        System.Type _type = this.m_binder.BindToType("OpenIZ.Core.Model, Version=0.6.14.21496, Culture=neutral, PublicKeyToken=null", r.ReadAsString());
                                                                                                                                                        if ((_type != typeof(OpenIZ.Core.Model.Entities.Organization))) {
                                                                                                                                                            OpenIZ.Core.Model.Entities.Organization _nretVal = ((OpenIZ.Core.Model.Entities.Organization)(context.JsonContext.GetFormatter(_type).Deserialize(r, _type, context)));
                                                                                                                                                            _nretVal.CopyObjectData(_retVal);
                                                                                                                                                            return _nretVal;
                                                                                                                                                        }
                                                                                                                                                    }
                                                                                                                                                    else {
                                                                                                                                                        r.Skip();
                                                                                                                                                    }
                                                                                                                                                }
                                                                                                                                            }
                                                                                                                                        }
                                                                                                                                    }
                                                                                                                                }
                                                                                                                            }
                                                                                                                        }
                                                                                                                    }
                                                                                                                }
                                                                                                            }
                                                                                                        }
                                                                                                    }
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
                else {
                    if (((r.TokenType == Newtonsoft.Json.JsonToken.EndObject) 
                                && (r.Depth == _depth))) {
                        return _retVal;
                    }
                    else {
                        throw new Newtonsoft.Json.JsonSerializationException("JSON in invalid state");
                    }
                }
            }
            return _retVal;
        }
        
        public object FromSimpleValue(object o) {
            return null;
        }
        
        public object GetSimpleValue(object o) {
            return null;
        }
    }
    
    public class PersonViewModelSerializer : OpenIZ.Core.Applets.ViewModel.Json.IJsonViewModelTypeFormatter {
        
        private OpenIZ.Core.Model.Serialization.ModelSerializationBinder m_binder = new OpenIZ.Core.Model.Serialization.ModelSerializationBinder();
        
        private OpenIZ.Core.Diagnostics.Tracer m_tracer = OpenIZ.Core.Diagnostics.Tracer.GetTracer(typeof(PersonViewModelSerializer));
        
        public System.Type HandlesType {
            get {
                return typeof(OpenIZ.Core.Model.Entities.Person);
            }
        }
        
        public void Serialize(Newtonsoft.Json.JsonWriter w, OpenIZ.Core.Model.IdentifiedData o, OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext context) {
            if ((o == null)) {
                throw new System.ArgumentNullException("o");
            }
            OpenIZ.Core.Model.Entities.Person _strong = null;
            OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext _jsonContext = null;
            bool _loaded = false;
            try {
                _strong = ((OpenIZ.Core.Model.Entities.Person)(o));
            }
            catch (System.Exception e) {
                this.m_tracer.TraceError(string.Format("Casting Error: {0}", e));
                throw new System.ArgumentException(string.Format("Invalid type {0} provided, expected {1}", o.GetType(), typeof(OpenIZ.Core.Model.Entities.Person)));
            }
            if (context.ShouldSerialize("dateOfBirth")) {
                if ((_strong.DateOfBirth == null)) {
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "dateOfBirth", _strong.DateOfBirth, context);
                }
            }
            if (context.ShouldSerialize("dateOfBirthPrecision")) {
                if ((_strong.DateOfBirthPrecision == null)) {
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "dateOfBirthPrecision", _strong.DateOfBirthPrecision, context);
                }
            }
            if (context.ShouldSerialize("language")) {
                if (((_strong.LanguageCommunication == null) 
                            || (_strong.LanguageCommunication.Count == 0))) {
                    if ((_strong.Key.HasValue && context.ShouldForceLoad("language", _strong.Key.Value))) {
                        System.Collections.Generic.List<OpenIZ.Core.Model.Entities.PersonLanguageCommunication> _delay = null;
                        _delay = new System.Collections.Generic.List<OpenIZ.Core.Model.Entities.PersonLanguageCommunication>(context.JsonContext.LoadCollection<OpenIZ.Core.Model.Entities.PersonLanguageCommunication>(_strong.Key.Value));
                        _strong.LanguageCommunication = _delay;
                        if ((_delay.Count > 0)) {
                            _loaded = true;
                            context.JsonContext.WritePropertyUtil(w, "language", _strong.LanguageCommunication, context);
                        }
                    }
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "language", _strong.LanguageCommunication, context);
                }
            }
            if (context.ShouldSerialize("template")) {
                if ((_strong.Template == null)) {
                    if ((_strong.Key.HasValue && context.ShouldForceLoad("template", _strong.Key.Value))) {
                        OpenIZ.Core.Model.DataTypes.TemplateDefinition _delay = null;
                    }
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "template", _strong.Template, context);
                }
            }
            if (context.ShouldSerialize("classConcept")) {
                if ((_strong.ClassConceptKey == null)) {
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "classConcept", _strong.ClassConceptKey, context);
                }
            }
            if (context.ShouldSerialize("determinerConcept")) {
                if ((_strong.DeterminerConceptKey == null)) {
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "determinerConcept", _strong.DeterminerConceptKey, context);
                }
            }
            if (context.ShouldSerialize("statusConcept")) {
                if ((_strong.StatusConceptKey == null)) {
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "statusConcept", _strong.StatusConceptKey, context);
                }
            }
            if (context.ShouldSerialize("creationAct")) {
                if ((_strong.CreationActKey == null)) {
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "creationAct", _strong.CreationActKey, context);
                }
            }
            if (context.ShouldSerialize("typeConcept")) {
                if ((_strong.TypeConceptKey == null)) {
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "typeConcept", _strong.TypeConceptKey, context);
                }
            }
            if (context.ShouldSerialize("classConceptModel")) {
                if ((_strong.ClassConcept == null)) {
                    if ((_strong.Key.HasValue && context.ShouldForceLoad("classConceptModel", _strong.Key.Value))) {
                        OpenIZ.Core.Model.DataTypes.Concept _delay = null;
                        _delay = context.JsonContext.LoadRelated<OpenIZ.Core.Model.DataTypes.Concept>(_strong.ClassConceptKey);
                        _strong.ClassConcept = _delay;
                        if ((_delay != null)) {
                            _loaded = true;
                            context.JsonContext.WritePropertyUtil(w, "classConceptModel", _strong.ClassConcept, context);
                        }
                    }
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "classConceptModel", _strong.ClassConcept, context);
                }
            }
            if (context.ShouldSerialize("determinerConceptModel")) {
                if ((_strong.DeterminerConcept == null)) {
                    if ((_strong.Key.HasValue && context.ShouldForceLoad("determinerConceptModel", _strong.Key.Value))) {
                        OpenIZ.Core.Model.DataTypes.Concept _delay = null;
                        _delay = context.JsonContext.LoadRelated<OpenIZ.Core.Model.DataTypes.Concept>(_strong.DeterminerConceptKey);
                        _strong.DeterminerConcept = _delay;
                        if ((_delay != null)) {
                            _loaded = true;
                            context.JsonContext.WritePropertyUtil(w, "determinerConceptModel", _strong.DeterminerConcept, context);
                        }
                    }
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "determinerConceptModel", _strong.DeterminerConcept, context);
                }
            }
            if (context.ShouldSerialize("statusConceptModel")) {
                if ((_strong.StatusConcept == null)) {
                    if ((_strong.Key.HasValue && context.ShouldForceLoad("statusConceptModel", _strong.Key.Value))) {
                        OpenIZ.Core.Model.DataTypes.Concept _delay = null;
                        _delay = context.JsonContext.LoadRelated<OpenIZ.Core.Model.DataTypes.Concept>(_strong.StatusConceptKey);
                        _strong.StatusConcept = _delay;
                        if ((_delay != null)) {
                            _loaded = true;
                            context.JsonContext.WritePropertyUtil(w, "statusConceptModel", _strong.StatusConcept, context);
                        }
                    }
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "statusConceptModel", _strong.StatusConcept, context);
                }
            }
            if (context.ShouldSerialize("creationActModel")) {
                if ((_strong.CreationAct == null)) {
                    if ((_strong.Key.HasValue && context.ShouldForceLoad("creationActModel", _strong.Key.Value))) {
                        OpenIZ.Core.Model.Acts.Act _delay = null;
                        _delay = context.JsonContext.LoadRelated<OpenIZ.Core.Model.Acts.Act>(_strong.CreationActKey);
                        _strong.CreationAct = _delay;
                        if ((_delay != null)) {
                            _loaded = true;
                            context.JsonContext.WritePropertyUtil(w, "creationActModel", _strong.CreationAct, context);
                        }
                    }
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "creationActModel", _strong.CreationAct, context);
                }
            }
            if (context.ShouldSerialize("typeConceptModel")) {
                if ((_strong.TypeConcept == null)) {
                    if ((_strong.Key.HasValue && context.ShouldForceLoad("typeConceptModel", _strong.Key.Value))) {
                        OpenIZ.Core.Model.DataTypes.Concept _delay = null;
                        _delay = context.JsonContext.LoadRelated<OpenIZ.Core.Model.DataTypes.Concept>(_strong.TypeConceptKey);
                        _strong.TypeConcept = _delay;
                        if ((_delay != null)) {
                            _loaded = true;
                            context.JsonContext.WritePropertyUtil(w, "typeConceptModel", _strong.TypeConcept, context);
                        }
                    }
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "typeConceptModel", _strong.TypeConcept, context);
                }
            }
            if (context.ShouldSerialize("identifier")) {
                if (((_strong.Identifiers == null) 
                            || (_strong.Identifiers.Count == 0))) {
                    if ((_strong.Key.HasValue && context.ShouldForceLoad("identifier", _strong.Key.Value))) {
                        System.Collections.Generic.List<OpenIZ.Core.Model.DataTypes.EntityIdentifier> _delay = null;
                        _delay = new System.Collections.Generic.List<OpenIZ.Core.Model.DataTypes.EntityIdentifier>(context.JsonContext.LoadCollection<OpenIZ.Core.Model.DataTypes.EntityIdentifier>(_strong.Key.Value));
                        _strong.Identifiers = _delay;
                        if ((_delay.Count > 0)) {
                            _loaded = true;
                            context.JsonContext.WritePropertyUtil(w, "identifier", _strong.Identifiers, context);
                        }
                    }
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "identifier", _strong.Identifiers, context);
                }
            }
            if (context.ShouldSerialize("relationship")) {
                if (((_strong.Relationships == null) 
                            || (_strong.Relationships.Count == 0))) {
                    if ((_strong.Key.HasValue && context.ShouldForceLoad("relationship", _strong.Key.Value))) {
                        System.Collections.Generic.List<OpenIZ.Core.Model.Entities.EntityRelationship> _delay = null;
                        _delay = new System.Collections.Generic.List<OpenIZ.Core.Model.Entities.EntityRelationship>(context.JsonContext.LoadCollection<OpenIZ.Core.Model.Entities.EntityRelationship>(_strong.Key.Value));
                        _strong.Relationships = _delay;
                        if ((_delay.Count > 0)) {
                            _loaded = true;
                            context.JsonContext.WritePropertyUtil(w, "relationship", _strong.Relationships, context);
                        }
                    }
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "relationship", _strong.Relationships, context);
                }
            }
            if (context.ShouldSerialize("telecom")) {
                if (((_strong.Telecoms == null) 
                            || (_strong.Telecoms.Count == 0))) {
                    if ((_strong.Key.HasValue && context.ShouldForceLoad("telecom", _strong.Key.Value))) {
                        System.Collections.Generic.List<OpenIZ.Core.Model.Entities.EntityTelecomAddress> _delay = null;
                        _delay = new System.Collections.Generic.List<OpenIZ.Core.Model.Entities.EntityTelecomAddress>(context.JsonContext.LoadCollection<OpenIZ.Core.Model.Entities.EntityTelecomAddress>(_strong.Key.Value));
                        _strong.Telecoms = _delay;
                        if ((_delay.Count > 0)) {
                            _loaded = true;
                            context.JsonContext.WritePropertyUtil(w, "telecom", _strong.Telecoms, context);
                        }
                    }
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "telecom", _strong.Telecoms, context);
                }
            }
            if (context.ShouldSerialize("extension")) {
                if (((_strong.Extensions == null) 
                            || (_strong.Extensions.Count == 0))) {
                    if ((_strong.Key.HasValue && context.ShouldForceLoad("extension", _strong.Key.Value))) {
                        System.Collections.Generic.List<OpenIZ.Core.Model.DataTypes.EntityExtension> _delay = null;
                        _delay = new System.Collections.Generic.List<OpenIZ.Core.Model.DataTypes.EntityExtension>(context.JsonContext.LoadCollection<OpenIZ.Core.Model.DataTypes.EntityExtension>(_strong.Key.Value));
                        _strong.Extensions = _delay;
                        if ((_delay.Count > 0)) {
                            _loaded = true;
                            context.JsonContext.WritePropertyUtil(w, "extension", _strong.Extensions, context);
                        }
                    }
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "extension", _strong.Extensions, context);
                }
            }
            if (context.ShouldSerialize("name")) {
                if (((_strong.Names == null) 
                            || (_strong.Names.Count == 0))) {
                    if ((_strong.Key.HasValue && context.ShouldForceLoad("name", _strong.Key.Value))) {
                        System.Collections.Generic.List<OpenIZ.Core.Model.Entities.EntityName> _delay = null;
                        _delay = new System.Collections.Generic.List<OpenIZ.Core.Model.Entities.EntityName>(context.JsonContext.LoadCollection<OpenIZ.Core.Model.Entities.EntityName>(_strong.Key.Value));
                        _strong.Names = _delay;
                        if ((_delay.Count > 0)) {
                            _loaded = true;
                            context.JsonContext.WritePropertyUtil(w, "name", _strong.Names, context);
                        }
                    }
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "name", _strong.Names, context);
                }
            }
            if (context.ShouldSerialize("address")) {
                if (((_strong.Addresses == null) 
                            || (_strong.Addresses.Count == 0))) {
                    if ((_strong.Key.HasValue && context.ShouldForceLoad("address", _strong.Key.Value))) {
                        System.Collections.Generic.List<OpenIZ.Core.Model.Entities.EntityAddress> _delay = null;
                        _delay = new System.Collections.Generic.List<OpenIZ.Core.Model.Entities.EntityAddress>(context.JsonContext.LoadCollection<OpenIZ.Core.Model.Entities.EntityAddress>(_strong.Key.Value));
                        _strong.Addresses = _delay;
                        if ((_delay.Count > 0)) {
                            _loaded = true;
                            context.JsonContext.WritePropertyUtil(w, "address", _strong.Addresses, context);
                        }
                    }
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "address", _strong.Addresses, context);
                }
            }
            if (context.ShouldSerialize("note")) {
                if (((_strong.Notes == null) 
                            || (_strong.Notes.Count == 0))) {
                    if ((_strong.Key.HasValue && context.ShouldForceLoad("note", _strong.Key.Value))) {
                        System.Collections.Generic.List<OpenIZ.Core.Model.DataTypes.EntityNote> _delay = null;
                        _delay = new System.Collections.Generic.List<OpenIZ.Core.Model.DataTypes.EntityNote>(context.JsonContext.LoadCollection<OpenIZ.Core.Model.DataTypes.EntityNote>(_strong.Key.Value));
                        _strong.Notes = _delay;
                        if ((_delay.Count > 0)) {
                            _loaded = true;
                            context.JsonContext.WritePropertyUtil(w, "note", _strong.Notes, context);
                        }
                    }
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "note", _strong.Notes, context);
                }
            }
            if (context.ShouldSerialize("tag")) {
                if (((_strong.Tags == null) 
                            || (_strong.Tags.Count == 0))) {
                    if ((_strong.Key.HasValue && context.ShouldForceLoad("tag", _strong.Key.Value))) {
                        System.Collections.Generic.List<OpenIZ.Core.Model.DataTypes.EntityTag> _delay = null;
                        _delay = new System.Collections.Generic.List<OpenIZ.Core.Model.DataTypes.EntityTag>(context.JsonContext.LoadCollection<OpenIZ.Core.Model.DataTypes.EntityTag>(_strong.Key.Value));
                        _strong.Tags = _delay;
                        if ((_delay.Count > 0)) {
                            _loaded = true;
                            context.JsonContext.WritePropertyUtil(w, "tag", _strong.Tags, context);
                        }
                    }
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "tag", _strong.Tags, context);
                }
            }
            if (context.ShouldSerialize("participation")) {
                if (((_strong.Participations == null) 
                            || (_strong.Participations.Count == 0))) {
                    if ((_strong.Key.HasValue && context.ShouldForceLoad("participation", _strong.Key.Value))) {
                        System.Collections.Generic.List<OpenIZ.Core.Model.Acts.ActParticipation> _delay = null;
                        _delay = new System.Collections.Generic.List<OpenIZ.Core.Model.Acts.ActParticipation>(context.JsonContext.LoadCollection<OpenIZ.Core.Model.Acts.ActParticipation>(_strong.Key.Value));
                        _strong.Participations = _delay;
                        if ((_delay.Count > 0)) {
                            _loaded = true;
                            context.JsonContext.WritePropertyUtil(w, "participation", _strong.Participations, context);
                        }
                    }
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "participation", _strong.Participations, context);
                }
            }
            if (context.ShouldSerialize("etag")) {
                if ((_strong.Tag == null)) {
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "etag", _strong.Tag, context);
                }
            }
            if (context.ShouldSerialize("previousVersion")) {
                if ((_strong.PreviousVersionKey == null)) {
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "previousVersion", _strong.PreviousVersionKey, context);
                }
            }
            if (context.ShouldSerialize("version")) {
                if ((_strong.VersionKey == null)) {
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "version", _strong.VersionKey, context);
                }
            }
            if (context.ShouldSerialize("sequence")) {
                if ((_strong.VersionSequence == null)) {
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "sequence", _strong.VersionSequence, context);
                }
            }
            if (context.ShouldSerialize("creationTimeModel")) {
                if ((_strong.CreationTime == null)) {
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "creationTimeModel", _strong.CreationTime, context);
                }
            }
            if (context.ShouldSerialize("creationTime")) {
                if ((_strong.CreationTimeXml == null)) {
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "creationTime", _strong.CreationTimeXml, context);
                }
            }
            if (context.ShouldSerialize("obsoletionTimeModel")) {
                if ((_strong.ObsoletionTime == null)) {
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "obsoletionTimeModel", _strong.ObsoletionTime, context);
                }
            }
            if (context.ShouldSerialize("obsoletionTime")) {
                if ((_strong.ObsoletionTimeXml == null)) {
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "obsoletionTime", _strong.ObsoletionTimeXml, context);
                }
            }
            if (context.ShouldSerialize("createdBy")) {
                if ((_strong.CreatedByKey == null)) {
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "createdBy", _strong.CreatedByKey, context);
                }
            }
            if (context.ShouldSerialize("obsoletedBy")) {
                if ((_strong.ObsoletedByKey == null)) {
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "obsoletedBy", _strong.ObsoletedByKey, context);
                }
            }
            if (context.ShouldSerialize("id")) {
                if ((_strong.Key == null)) {
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "id", _strong.Key, context);
                }
            }
            if (((_loaded && _strong.Key.HasValue) 
                        && _strong.VersionKey.HasValue)) {
                ((OpenIZ.Core.Services.IDataCachingService)(OpenIZ.Core.ApplicationServiceContext.Current.GetService(typeof(OpenIZ.Core.Services.IDataCachingService)))).Add(_strong);
            }
        }
        
        public object Deserialize(Newtonsoft.Json.JsonReader r, System.Type asType, OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext context) {
            OpenIZ.Core.Model.Entities.Person _retVal = new OpenIZ.Core.Model.Entities.Person();
            int _depth = r.Depth;
            if ((r.TokenType != Newtonsoft.Json.JsonToken.StartObject)) {
                _depth = (_depth - 1);
            }
            for (
            ; r.Read(); 
            ) {
                if ((r.TokenType == Newtonsoft.Json.JsonToken.PropertyName)) {
                    if ("id".Equals(r.Value)) {
                        r.Read();
                        System.Nullable<System.Guid> _instance = ((System.Nullable<System.Guid>)(context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<System.Guid>), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("id", context.JsonContext, _retVal, context))));
                        if ((_instance != null)) {
                            _retVal.Key = _instance;
                        }
                    }
                    else {
                        if ("obsoletedBy".Equals(r.Value)) {
                            r.Read();
                            System.Nullable<System.Guid> _instance = ((System.Nullable<System.Guid>)(context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<System.Guid>), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("obsoletedBy", context.JsonContext, _retVal, context))));
                            if ((_instance != null)) {
                                _retVal.ObsoletedByKey = _instance;
                            }
                        }
                        else {
                            if ("createdBy".Equals(r.Value)) {
                                r.Read();
                                System.Nullable<System.Guid> _instance = ((System.Nullable<System.Guid>)(context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<System.Guid>), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("createdBy", context.JsonContext, _retVal, context))));
                                if ((_instance != null)) {
                                    _retVal.CreatedByKey = _instance;
                                }
                            }
                            else {
                                if ("obsoletionTime".Equals(r.Value)) {
                                    r.Read();
                                    string _instance = ((string)(context.JsonContext.ReadElementUtil(r, typeof(string), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("obsoletionTime", context.JsonContext, _retVal, context))));
                                    if ((_instance != null)) {
                                        _retVal.ObsoletionTimeXml = _instance;
                                    }
                                }
                                else {
                                    if ("obsoletionTimeModel".Equals(r.Value)) {
                                        r.Read();
                                        System.Nullable<System.DateTimeOffset> _instance = ((System.Nullable<System.DateTimeOffset>)(context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<System.DateTimeOffset>), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("obsoletionTimeModel", context.JsonContext, _retVal, context))));
                                        if ((_instance != null)) {
                                            _retVal.ObsoletionTime = _instance;
                                        }
                                    }
                                    else {
                                        if ("creationTime".Equals(r.Value)) {
                                            r.Read();
                                            string _instance = ((string)(context.JsonContext.ReadElementUtil(r, typeof(string), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("creationTime", context.JsonContext, _retVal, context))));
                                            if ((_instance != null)) {
                                                _retVal.CreationTimeXml = _instance;
                                            }
                                        }
                                        else {
                                            if ("creationTimeModel".Equals(r.Value)) {
                                                r.Read();
                                                System.DateTimeOffset _instance = ((System.DateTimeOffset)(context.JsonContext.ReadElementUtil(r, typeof(System.DateTimeOffset), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("creationTimeModel", context.JsonContext, _retVal, context))));
                                                if ((_instance != null)) {
                                                    _retVal.CreationTime = _instance;
                                                }
                                            }
                                            else {
                                                if ("sequence".Equals(r.Value)) {
                                                    r.Read();
                                                    System.Nullable<decimal> _instance = ((System.Nullable<decimal>)(context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<decimal>), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("sequence", context.JsonContext, _retVal, context))));
                                                    if ((_instance != null)) {
                                                        _retVal.VersionSequence = _instance;
                                                    }
                                                }
                                                else {
                                                    if ("version".Equals(r.Value)) {
                                                        r.Read();
                                                        System.Nullable<System.Guid> _instance = ((System.Nullable<System.Guid>)(context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<System.Guid>), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("version", context.JsonContext, _retVal, context))));
                                                        if ((_instance != null)) {
                                                            _retVal.VersionKey = _instance;
                                                        }
                                                    }
                                                    else {
                                                        if ("previousVersion".Equals(r.Value)) {
                                                            r.Read();
                                                            System.Nullable<System.Guid> _instance = ((System.Nullable<System.Guid>)(context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<System.Guid>), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("previousVersion", context.JsonContext, _retVal, context))));
                                                            if ((_instance != null)) {
                                                                _retVal.PreviousVersionKey = _instance;
                                                            }
                                                        }
                                                        else {
                                                            if ("participation".Equals(r.Value)) {
                                                                r.Read();
                                                                System.Collections.Generic.List<OpenIZ.Core.Model.Acts.ActParticipation> _instance = ((System.Collections.Generic.List<OpenIZ.Core.Model.Acts.ActParticipation>)(context.JsonContext.ReadElementUtil(r, typeof(System.Collections.Generic.List<OpenIZ.Core.Model.Acts.ActParticipation>), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("participation", context.JsonContext, _retVal, context))));
                                                                if ((_instance != null)) {
                                                                    _retVal.Participations = _instance;
                                                                }
                                                            }
                                                            else {
                                                                if ("tag".Equals(r.Value)) {
                                                                    r.Read();
                                                                    System.Collections.Generic.List<OpenIZ.Core.Model.DataTypes.EntityTag> _instance = ((System.Collections.Generic.List<OpenIZ.Core.Model.DataTypes.EntityTag>)(context.JsonContext.ReadElementUtil(r, typeof(System.Collections.Generic.List<OpenIZ.Core.Model.DataTypes.EntityTag>), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("tag", context.JsonContext, _retVal, context))));
                                                                    if ((_instance != null)) {
                                                                        _retVal.Tags = _instance;
                                                                    }
                                                                }
                                                                else {
                                                                    if ("note".Equals(r.Value)) {
                                                                        r.Read();
                                                                        System.Collections.Generic.List<OpenIZ.Core.Model.DataTypes.EntityNote> _instance = ((System.Collections.Generic.List<OpenIZ.Core.Model.DataTypes.EntityNote>)(context.JsonContext.ReadElementUtil(r, typeof(System.Collections.Generic.List<OpenIZ.Core.Model.DataTypes.EntityNote>), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("note", context.JsonContext, _retVal, context))));
                                                                        if ((_instance != null)) {
                                                                            _retVal.Notes = _instance;
                                                                        }
                                                                    }
                                                                    else {
                                                                        if ("address".Equals(r.Value)) {
                                                                            r.Read();
                                                                            System.Collections.Generic.List<OpenIZ.Core.Model.Entities.EntityAddress> _instance = ((System.Collections.Generic.List<OpenIZ.Core.Model.Entities.EntityAddress>)(context.JsonContext.ReadElementUtil(r, typeof(System.Collections.Generic.List<OpenIZ.Core.Model.Entities.EntityAddress>), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("address", context.JsonContext, _retVal, context))));
                                                                            if ((_instance != null)) {
                                                                                _retVal.Addresses = _instance;
                                                                            }
                                                                        }
                                                                        else {
                                                                            if ("name".Equals(r.Value)) {
                                                                                r.Read();
                                                                                System.Collections.Generic.List<OpenIZ.Core.Model.Entities.EntityName> _instance = ((System.Collections.Generic.List<OpenIZ.Core.Model.Entities.EntityName>)(context.JsonContext.ReadElementUtil(r, typeof(System.Collections.Generic.List<OpenIZ.Core.Model.Entities.EntityName>), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("name", context.JsonContext, _retVal, context))));
                                                                                if ((_instance != null)) {
                                                                                    _retVal.Names = _instance;
                                                                                }
                                                                            }
                                                                            else {
                                                                                if ("extension".Equals(r.Value)) {
                                                                                    r.Read();
                                                                                    System.Collections.Generic.List<OpenIZ.Core.Model.DataTypes.EntityExtension> _instance = ((System.Collections.Generic.List<OpenIZ.Core.Model.DataTypes.EntityExtension>)(context.JsonContext.ReadElementUtil(r, typeof(System.Collections.Generic.List<OpenIZ.Core.Model.DataTypes.EntityExtension>), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("extension", context.JsonContext, _retVal, context))));
                                                                                    if ((_instance != null)) {
                                                                                        _retVal.Extensions = _instance;
                                                                                    }
                                                                                }
                                                                                else {
                                                                                    if ("telecom".Equals(r.Value)) {
                                                                                        r.Read();
                                                                                        System.Collections.Generic.List<OpenIZ.Core.Model.Entities.EntityTelecomAddress> _instance = ((System.Collections.Generic.List<OpenIZ.Core.Model.Entities.EntityTelecomAddress>)(context.JsonContext.ReadElementUtil(r, typeof(System.Collections.Generic.List<OpenIZ.Core.Model.Entities.EntityTelecomAddress>), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("telecom", context.JsonContext, _retVal, context))));
                                                                                        if ((_instance != null)) {
                                                                                            _retVal.Telecoms = _instance;
                                                                                        }
                                                                                    }
                                                                                    else {
                                                                                        if ("relationship".Equals(r.Value)) {
                                                                                            r.Read();
                                                                                            System.Collections.Generic.List<OpenIZ.Core.Model.Entities.EntityRelationship> _instance = ((System.Collections.Generic.List<OpenIZ.Core.Model.Entities.EntityRelationship>)(context.JsonContext.ReadElementUtil(r, typeof(System.Collections.Generic.List<OpenIZ.Core.Model.Entities.EntityRelationship>), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("relationship", context.JsonContext, _retVal, context))));
                                                                                            if ((_instance != null)) {
                                                                                                _retVal.Relationships = _instance;
                                                                                            }
                                                                                        }
                                                                                        else {
                                                                                            if ("identifier".Equals(r.Value)) {
                                                                                                r.Read();
                                                                                                System.Collections.Generic.List<OpenIZ.Core.Model.DataTypes.EntityIdentifier> _instance = ((System.Collections.Generic.List<OpenIZ.Core.Model.DataTypes.EntityIdentifier>)(context.JsonContext.ReadElementUtil(r, typeof(System.Collections.Generic.List<OpenIZ.Core.Model.DataTypes.EntityIdentifier>), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("identifier", context.JsonContext, _retVal, context))));
                                                                                                if ((_instance != null)) {
                                                                                                    _retVal.Identifiers = _instance;
                                                                                                }
                                                                                            }
                                                                                            else {
                                                                                                if ("typeConceptModel".Equals(r.Value)) {
                                                                                                    r.Read();
                                                                                                    OpenIZ.Core.Model.DataTypes.Concept _instance = ((OpenIZ.Core.Model.DataTypes.Concept)(context.JsonContext.ReadElementUtil(r, typeof(OpenIZ.Core.Model.DataTypes.Concept), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("typeConceptModel", context.JsonContext, _retVal, context))));
                                                                                                    if ((_instance != null)) {
                                                                                                        _retVal.TypeConcept = _instance;
                                                                                                    }
                                                                                                }
                                                                                                else {
                                                                                                    if ("creationActModel".Equals(r.Value)) {
                                                                                                        r.Read();
                                                                                                        OpenIZ.Core.Model.Acts.Act _instance = ((OpenIZ.Core.Model.Acts.Act)(context.JsonContext.ReadElementUtil(r, typeof(OpenIZ.Core.Model.Acts.Act), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("creationActModel", context.JsonContext, _retVal, context))));
                                                                                                        if ((_instance != null)) {
                                                                                                            _retVal.CreationAct = _instance;
                                                                                                        }
                                                                                                    }
                                                                                                    else {
                                                                                                        if ("statusConceptModel".Equals(r.Value)) {
                                                                                                            r.Read();
                                                                                                            OpenIZ.Core.Model.DataTypes.Concept _instance = ((OpenIZ.Core.Model.DataTypes.Concept)(context.JsonContext.ReadElementUtil(r, typeof(OpenIZ.Core.Model.DataTypes.Concept), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("statusConceptModel", context.JsonContext, _retVal, context))));
                                                                                                            if ((_instance != null)) {
                                                                                                                _retVal.StatusConcept = _instance;
                                                                                                            }
                                                                                                        }
                                                                                                        else {
                                                                                                            if ("determinerConceptModel".Equals(r.Value)) {
                                                                                                                r.Read();
                                                                                                                OpenIZ.Core.Model.DataTypes.Concept _instance = ((OpenIZ.Core.Model.DataTypes.Concept)(context.JsonContext.ReadElementUtil(r, typeof(OpenIZ.Core.Model.DataTypes.Concept), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("determinerConceptModel", context.JsonContext, _retVal, context))));
                                                                                                                if ((_instance != null)) {
                                                                                                                    _retVal.DeterminerConcept = _instance;
                                                                                                                }
                                                                                                            }
                                                                                                            else {
                                                                                                                if ("classConceptModel".Equals(r.Value)) {
                                                                                                                    r.Read();
                                                                                                                    OpenIZ.Core.Model.DataTypes.Concept _instance = ((OpenIZ.Core.Model.DataTypes.Concept)(context.JsonContext.ReadElementUtil(r, typeof(OpenIZ.Core.Model.DataTypes.Concept), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("classConceptModel", context.JsonContext, _retVal, context))));
                                                                                                                    if ((_instance != null)) {
                                                                                                                        _retVal.ClassConcept = _instance;
                                                                                                                    }
                                                                                                                }
                                                                                                                else {
                                                                                                                    if ("typeConcept".Equals(r.Value)) {
                                                                                                                        r.Read();
                                                                                                                        System.Nullable<System.Guid> _instance = ((System.Nullable<System.Guid>)(context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<System.Guid>), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("typeConcept", context.JsonContext, _retVal, context))));
                                                                                                                        if ((_instance != null)) {
                                                                                                                            _retVal.TypeConceptKey = _instance;
                                                                                                                        }
                                                                                                                    }
                                                                                                                    else {
                                                                                                                        if ("creationAct".Equals(r.Value)) {
                                                                                                                            r.Read();
                                                                                                                            System.Nullable<System.Guid> _instance = ((System.Nullable<System.Guid>)(context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<System.Guid>), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("creationAct", context.JsonContext, _retVal, context))));
                                                                                                                            if ((_instance != null)) {
                                                                                                                                _retVal.CreationActKey = _instance;
                                                                                                                            }
                                                                                                                        }
                                                                                                                        else {
                                                                                                                            if ("statusConcept".Equals(r.Value)) {
                                                                                                                                r.Read();
                                                                                                                                System.Nullable<System.Guid> _instance = ((System.Nullable<System.Guid>)(context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<System.Guid>), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("statusConcept", context.JsonContext, _retVal, context))));
                                                                                                                                if ((_instance != null)) {
                                                                                                                                    _retVal.StatusConceptKey = _instance;
                                                                                                                                }
                                                                                                                            }
                                                                                                                            else {
                                                                                                                                if ("determinerConcept".Equals(r.Value)) {
                                                                                                                                    r.Read();
                                                                                                                                    System.Nullable<System.Guid> _instance = ((System.Nullable<System.Guid>)(context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<System.Guid>), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("determinerConcept", context.JsonContext, _retVal, context))));
                                                                                                                                    if ((_instance != null)) {
                                                                                                                                        _retVal.DeterminerConceptKey = _instance;
                                                                                                                                    }
                                                                                                                                }
                                                                                                                                else {
                                                                                                                                    if ("classConcept".Equals(r.Value)) {
                                                                                                                                        r.Read();
                                                                                                                                        System.Nullable<System.Guid> _instance = ((System.Nullable<System.Guid>)(context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<System.Guid>), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("classConcept", context.JsonContext, _retVal, context))));
                                                                                                                                        if ((_instance != null)) {
                                                                                                                                            _retVal.ClassConceptKey = _instance;
                                                                                                                                        }
                                                                                                                                    }
                                                                                                                                    else {
                                                                                                                                        if ("template".Equals(r.Value)) {
                                                                                                                                            r.Read();
                                                                                                                                            OpenIZ.Core.Model.DataTypes.TemplateDefinition _instance = ((OpenIZ.Core.Model.DataTypes.TemplateDefinition)(context.JsonContext.ReadElementUtil(r, typeof(OpenIZ.Core.Model.DataTypes.TemplateDefinition), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("template", context.JsonContext, _retVal, context))));
                                                                                                                                            if ((_instance != null)) {
                                                                                                                                                _retVal.Template = _instance;
                                                                                                                                            }
                                                                                                                                        }
                                                                                                                                        else {
                                                                                                                                            if ("language".Equals(r.Value)) {
                                                                                                                                                r.Read();
                                                                                                                                                System.Collections.Generic.List<OpenIZ.Core.Model.Entities.PersonLanguageCommunication> _instance = ((System.Collections.Generic.List<OpenIZ.Core.Model.Entities.PersonLanguageCommunication>)(context.JsonContext.ReadElementUtil(r, typeof(System.Collections.Generic.List<OpenIZ.Core.Model.Entities.PersonLanguageCommunication>), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("language", context.JsonContext, _retVal, context))));
                                                                                                                                                if ((_instance != null)) {
                                                                                                                                                    _retVal.LanguageCommunication = _instance;
                                                                                                                                                }
                                                                                                                                            }
                                                                                                                                            else {
                                                                                                                                                if ("dateOfBirthPrecision".Equals(r.Value)) {
                                                                                                                                                    r.Read();
                                                                                                                                                    System.Nullable<OpenIZ.Core.Model.DataTypes.DatePrecision> _instance = ((System.Nullable<OpenIZ.Core.Model.DataTypes.DatePrecision>)(context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<OpenIZ.Core.Model.DataTypes.DatePrecision>), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("dateOfBirthPrecision", context.JsonContext, _retVal, context))));
                                                                                                                                                    if ((_instance != null)) {
                                                                                                                                                        _retVal.DateOfBirthPrecision = _instance;
                                                                                                                                                    }
                                                                                                                                                }
                                                                                                                                                else {
                                                                                                                                                    if ("dateOfBirth".Equals(r.Value)) {
                                                                                                                                                        r.Read();
                                                                                                                                                        System.Nullable<System.DateTime> _instance = ((System.Nullable<System.DateTime>)(context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<System.DateTime>), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("dateOfBirth", context.JsonContext, _retVal, context))));
                                                                                                                                                        if ((_instance != null)) {
                                                                                                                                                            _retVal.DateOfBirth = _instance;
                                                                                                                                                        }
                                                                                                                                                    }
                                                                                                                                                    else {
                                                                                                                                                        if ("$type".Equals(r.Value)) {
                                                                                                                                                            System.Type _type = this.m_binder.BindToType("OpenIZ.Core.Model, Version=0.6.14.21496, Culture=neutral, PublicKeyToken=null", r.ReadAsString());
                                                                                                                                                            if ((_type != typeof(OpenIZ.Core.Model.Entities.Person))) {
                                                                                                                                                                OpenIZ.Core.Model.Entities.Person _nretVal = ((OpenIZ.Core.Model.Entities.Person)(context.JsonContext.GetFormatter(_type).Deserialize(r, _type, context)));
                                                                                                                                                                _nretVal.CopyObjectData(_retVal);
                                                                                                                                                                return _nretVal;
                                                                                                                                                            }
                                                                                                                                                        }
                                                                                                                                                        else {
                                                                                                                                                            r.Skip();
                                                                                                                                                        }
                                                                                                                                                    }
                                                                                                                                                }
                                                                                                                                            }
                                                                                                                                        }
                                                                                                                                    }
                                                                                                                                }
                                                                                                                            }
                                                                                                                        }
                                                                                                                    }
                                                                                                                }
                                                                                                            }
                                                                                                        }
                                                                                                    }
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
                else {
                    if (((r.TokenType == Newtonsoft.Json.JsonToken.EndObject) 
                                && (r.Depth == _depth))) {
                        return _retVal;
                    }
                    else {
                        throw new Newtonsoft.Json.JsonSerializationException("JSON in invalid state");
                    }
                }
            }
            return _retVal;
        }
        
        public object FromSimpleValue(object o) {
            return null;
        }
        
        public object GetSimpleValue(object o) {
            return null;
        }
    }
    
    public class PersonLanguageCommunicationViewModelSerializer : OpenIZ.Core.Applets.ViewModel.Json.IJsonViewModelTypeFormatter {
        
        private OpenIZ.Core.Model.Serialization.ModelSerializationBinder m_binder = new OpenIZ.Core.Model.Serialization.ModelSerializationBinder();
        
        private OpenIZ.Core.Diagnostics.Tracer m_tracer = OpenIZ.Core.Diagnostics.Tracer.GetTracer(typeof(PersonLanguageCommunicationViewModelSerializer));
        
        public System.Type HandlesType {
            get {
                return typeof(OpenIZ.Core.Model.Entities.PersonLanguageCommunication);
            }
        }
        
        public void Serialize(Newtonsoft.Json.JsonWriter w, OpenIZ.Core.Model.IdentifiedData o, OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext context) {
            if ((o == null)) {
                throw new System.ArgumentNullException("o");
            }
            OpenIZ.Core.Model.Entities.PersonLanguageCommunication _strong = null;
            OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext _jsonContext = null;
            bool _loaded = false;
            try {
                _strong = ((OpenIZ.Core.Model.Entities.PersonLanguageCommunication)(o));
            }
            catch (System.Exception e) {
                this.m_tracer.TraceError(string.Format("Casting Error: {0}", e));
                throw new System.ArgumentException(string.Format("Invalid type {0} provided, expected {1}", o.GetType(), typeof(OpenIZ.Core.Model.Entities.PersonLanguageCommunication)));
            }
            if (context.ShouldSerialize("languageCode")) {
                if ((_strong.LanguageCode == null)) {
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "languageCode", _strong.LanguageCode, context);
                }
            }
            if (context.ShouldSerialize("isPreferred")) {
                if ((_strong.IsPreferred == null)) {
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "isPreferred", _strong.IsPreferred, context);
                }
            }
            if (context.ShouldSerialize("effectiveVersionSequence")) {
                if ((_strong.EffectiveVersionSequenceId == null)) {
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "effectiveVersionSequence", _strong.EffectiveVersionSequenceId, context);
                }
            }
            if (context.ShouldSerialize("obsoleteVersionSequence")) {
                if ((_strong.ObsoleteVersionSequenceId == null)) {
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "obsoleteVersionSequence", _strong.ObsoleteVersionSequenceId, context);
                }
            }
            if (context.ShouldSerialize("modifiedOn")) {
                if ((_strong.ModifiedOn == null)) {
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "modifiedOn", _strong.ModifiedOn, context);
                }
            }
            if (context.ShouldSerialize("source")) {
                if ((_strong.SourceEntityKey == null)) {
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "source", _strong.SourceEntityKey, context);
                }
            }
            if (context.ShouldSerialize("id")) {
                if ((_strong.Key == null)) {
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "id", _strong.Key, context);
                }
            }
            if (context.ShouldSerialize("etag")) {
                if ((_strong.Tag == null)) {
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "etag", _strong.Tag, context);
                }
            }
            if ((_loaded && _strong.Key.HasValue)) {
                ((OpenIZ.Core.Services.IDataCachingService)(OpenIZ.Core.ApplicationServiceContext.Current.GetService(typeof(OpenIZ.Core.Services.IDataCachingService)))).Add(_strong);
            }
        }
        
        public object Deserialize(Newtonsoft.Json.JsonReader r, System.Type asType, OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext context) {
            OpenIZ.Core.Model.Entities.PersonLanguageCommunication _retVal = new OpenIZ.Core.Model.Entities.PersonLanguageCommunication();
            int _depth = r.Depth;
            if ((r.TokenType != Newtonsoft.Json.JsonToken.StartObject)) {
                _depth = (_depth - 1);
            }
            for (
            ; r.Read(); 
            ) {
                if ((r.TokenType == Newtonsoft.Json.JsonToken.PropertyName)) {
                    if ("id".Equals(r.Value)) {
                        r.Read();
                        System.Nullable<System.Guid> _instance = ((System.Nullable<System.Guid>)(context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<System.Guid>), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("id", context.JsonContext, _retVal, context))));
                        if ((_instance != null)) {
                            _retVal.Key = _instance;
                        }
                    }
                    else {
                        if ("source".Equals(r.Value)) {
                            r.Read();
                            System.Nullable<System.Guid> _instance = ((System.Nullable<System.Guid>)(context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<System.Guid>), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("source", context.JsonContext, _retVal, context))));
                            if ((_instance != null)) {
                                _retVal.SourceEntityKey = _instance;
                            }
                        }
                        else {
                            if ("obsoleteVersionSequence".Equals(r.Value)) {
                                r.Read();
                                System.Nullable<decimal> _instance = ((System.Nullable<decimal>)(context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<decimal>), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("obsoleteVersionSequence", context.JsonContext, _retVal, context))));
                                if ((_instance != null)) {
                                    _retVal.ObsoleteVersionSequenceId = _instance;
                                }
                            }
                            else {
                                if ("effectiveVersionSequence".Equals(r.Value)) {
                                    r.Read();
                                    System.Nullable<decimal> _instance = ((System.Nullable<decimal>)(context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<decimal>), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("effectiveVersionSequence", context.JsonContext, _retVal, context))));
                                    if ((_instance != null)) {
                                        _retVal.EffectiveVersionSequenceId = _instance;
                                    }
                                }
                                else {
                                    if ("isPreferred".Equals(r.Value)) {
                                        r.Read();
                                        bool _instance = ((bool)(context.JsonContext.ReadElementUtil(r, typeof(bool), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("isPreferred", context.JsonContext, _retVal, context))));
                                        if ((_instance != null)) {
                                            _retVal.IsPreferred = _instance;
                                        }
                                    }
                                    else {
                                        if ("languageCode".Equals(r.Value)) {
                                            r.Read();
                                            string _instance = ((string)(context.JsonContext.ReadElementUtil(r, typeof(string), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("languageCode", context.JsonContext, _retVal, context))));
                                            if ((_instance != null)) {
                                                _retVal.LanguageCode = _instance;
                                            }
                                        }
                                        else {
                                            if ("$type".Equals(r.Value)) {
                                                System.Type _type = this.m_binder.BindToType("OpenIZ.Core.Model, Version=0.6.14.21496, Culture=neutral, PublicKeyToken=null", r.ReadAsString());
                                                if ((_type != typeof(OpenIZ.Core.Model.Entities.PersonLanguageCommunication))) {
                                                    OpenIZ.Core.Model.Entities.PersonLanguageCommunication _nretVal = ((OpenIZ.Core.Model.Entities.PersonLanguageCommunication)(context.JsonContext.GetFormatter(_type).Deserialize(r, _type, context)));
                                                    _nretVal.CopyObjectData(_retVal);
                                                    return _nretVal;
                                                }
                                            }
                                            else {
                                                r.Skip();
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
                else {
                    if (((r.TokenType == Newtonsoft.Json.JsonToken.EndObject) 
                                && (r.Depth == _depth))) {
                        return _retVal;
                    }
                    else {
                        throw new Newtonsoft.Json.JsonSerializationException("JSON in invalid state");
                    }
                }
            }
            return _retVal;
        }
        
        public object FromSimpleValue(object o) {
            return null;
        }
        
        public object GetSimpleValue(object o) {
            return null;
        }
    }
    
    public class PlaceViewModelSerializer : OpenIZ.Core.Applets.ViewModel.Json.IJsonViewModelTypeFormatter {
        
        private OpenIZ.Core.Model.Serialization.ModelSerializationBinder m_binder = new OpenIZ.Core.Model.Serialization.ModelSerializationBinder();
        
        private OpenIZ.Core.Diagnostics.Tracer m_tracer = OpenIZ.Core.Diagnostics.Tracer.GetTracer(typeof(PlaceViewModelSerializer));
        
        public System.Type HandlesType {
            get {
                return typeof(OpenIZ.Core.Model.Entities.Place);
            }
        }
        
        public void Serialize(Newtonsoft.Json.JsonWriter w, OpenIZ.Core.Model.IdentifiedData o, OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext context) {
            if ((o == null)) {
                throw new System.ArgumentNullException("o");
            }
            OpenIZ.Core.Model.Entities.Place _strong = null;
            OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext _jsonContext = null;
            bool _loaded = false;
            try {
                _strong = ((OpenIZ.Core.Model.Entities.Place)(o));
            }
            catch (System.Exception e) {
                this.m_tracer.TraceError(string.Format("Casting Error: {0}", e));
                throw new System.ArgumentException(string.Format("Invalid type {0} provided, expected {1}", o.GetType(), typeof(OpenIZ.Core.Model.Entities.Place)));
            }
            if (context.ShouldSerialize("classConcept")) {
                if ((_strong.ClassConceptKey == null)) {
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "classConcept", _strong.ClassConceptKey, context);
                }
            }
            if (context.ShouldSerialize("isMobile")) {
                if ((_strong.IsMobile == null)) {
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "isMobile", _strong.IsMobile, context);
                }
            }
            if (context.ShouldSerialize("lat")) {
                if ((_strong.Lat == null)) {
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "lat", _strong.Lat, context);
                }
            }
            if (context.ShouldSerialize("lng")) {
                if ((_strong.Lng == null)) {
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "lng", _strong.Lng, context);
                }
            }
            if (context.ShouldSerialize("service")) {
                if (((_strong.Services == null) 
                            || (_strong.Services.Count == 0))) {
                    if ((_strong.Key.HasValue && context.ShouldForceLoad("service", _strong.Key.Value))) {
                        System.Collections.Generic.List<OpenIZ.Core.Model.Entities.PlaceService> _delay = null;
                        _delay = new System.Collections.Generic.List<OpenIZ.Core.Model.Entities.PlaceService>(context.JsonContext.LoadCollection<OpenIZ.Core.Model.Entities.PlaceService>(_strong.Key.Value));
                        _strong.Services = _delay;
                        if ((_delay.Count > 0)) {
                            _loaded = true;
                            context.JsonContext.WritePropertyUtil(w, "service", _strong.Services, context);
                        }
                    }
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "service", _strong.Services, context);
                }
            }
            if (context.ShouldSerialize("template")) {
                if ((_strong.Template == null)) {
                    if ((_strong.Key.HasValue && context.ShouldForceLoad("template", _strong.Key.Value))) {
                        OpenIZ.Core.Model.DataTypes.TemplateDefinition _delay = null;
                    }
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "template", _strong.Template, context);
                }
            }
            if (context.ShouldSerialize("determinerConcept")) {
                if ((_strong.DeterminerConceptKey == null)) {
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "determinerConcept", _strong.DeterminerConceptKey, context);
                }
            }
            if (context.ShouldSerialize("statusConcept")) {
                if ((_strong.StatusConceptKey == null)) {
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "statusConcept", _strong.StatusConceptKey, context);
                }
            }
            if (context.ShouldSerialize("creationAct")) {
                if ((_strong.CreationActKey == null)) {
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "creationAct", _strong.CreationActKey, context);
                }
            }
            if (context.ShouldSerialize("typeConcept")) {
                if ((_strong.TypeConceptKey == null)) {
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "typeConcept", _strong.TypeConceptKey, context);
                }
            }
            if (context.ShouldSerialize("classConceptModel")) {
                if ((_strong.ClassConcept == null)) {
                    if ((_strong.Key.HasValue && context.ShouldForceLoad("classConceptModel", _strong.Key.Value))) {
                        OpenIZ.Core.Model.DataTypes.Concept _delay = null;
                        _delay = context.JsonContext.LoadRelated<OpenIZ.Core.Model.DataTypes.Concept>(_strong.ClassConceptKey);
                        _strong.ClassConcept = _delay;
                        if ((_delay != null)) {
                            _loaded = true;
                            context.JsonContext.WritePropertyUtil(w, "classConceptModel", _strong.ClassConcept, context);
                        }
                    }
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "classConceptModel", _strong.ClassConcept, context);
                }
            }
            if (context.ShouldSerialize("determinerConceptModel")) {
                if ((_strong.DeterminerConcept == null)) {
                    if ((_strong.Key.HasValue && context.ShouldForceLoad("determinerConceptModel", _strong.Key.Value))) {
                        OpenIZ.Core.Model.DataTypes.Concept _delay = null;
                        _delay = context.JsonContext.LoadRelated<OpenIZ.Core.Model.DataTypes.Concept>(_strong.DeterminerConceptKey);
                        _strong.DeterminerConcept = _delay;
                        if ((_delay != null)) {
                            _loaded = true;
                            context.JsonContext.WritePropertyUtil(w, "determinerConceptModel", _strong.DeterminerConcept, context);
                        }
                    }
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "determinerConceptModel", _strong.DeterminerConcept, context);
                }
            }
            if (context.ShouldSerialize("statusConceptModel")) {
                if ((_strong.StatusConcept == null)) {
                    if ((_strong.Key.HasValue && context.ShouldForceLoad("statusConceptModel", _strong.Key.Value))) {
                        OpenIZ.Core.Model.DataTypes.Concept _delay = null;
                        _delay = context.JsonContext.LoadRelated<OpenIZ.Core.Model.DataTypes.Concept>(_strong.StatusConceptKey);
                        _strong.StatusConcept = _delay;
                        if ((_delay != null)) {
                            _loaded = true;
                            context.JsonContext.WritePropertyUtil(w, "statusConceptModel", _strong.StatusConcept, context);
                        }
                    }
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "statusConceptModel", _strong.StatusConcept, context);
                }
            }
            if (context.ShouldSerialize("creationActModel")) {
                if ((_strong.CreationAct == null)) {
                    if ((_strong.Key.HasValue && context.ShouldForceLoad("creationActModel", _strong.Key.Value))) {
                        OpenIZ.Core.Model.Acts.Act _delay = null;
                        _delay = context.JsonContext.LoadRelated<OpenIZ.Core.Model.Acts.Act>(_strong.CreationActKey);
                        _strong.CreationAct = _delay;
                        if ((_delay != null)) {
                            _loaded = true;
                            context.JsonContext.WritePropertyUtil(w, "creationActModel", _strong.CreationAct, context);
                        }
                    }
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "creationActModel", _strong.CreationAct, context);
                }
            }
            if (context.ShouldSerialize("typeConceptModel")) {
                if ((_strong.TypeConcept == null)) {
                    if ((_strong.Key.HasValue && context.ShouldForceLoad("typeConceptModel", _strong.Key.Value))) {
                        OpenIZ.Core.Model.DataTypes.Concept _delay = null;
                        _delay = context.JsonContext.LoadRelated<OpenIZ.Core.Model.DataTypes.Concept>(_strong.TypeConceptKey);
                        _strong.TypeConcept = _delay;
                        if ((_delay != null)) {
                            _loaded = true;
                            context.JsonContext.WritePropertyUtil(w, "typeConceptModel", _strong.TypeConcept, context);
                        }
                    }
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "typeConceptModel", _strong.TypeConcept, context);
                }
            }
            if (context.ShouldSerialize("identifier")) {
                if (((_strong.Identifiers == null) 
                            || (_strong.Identifiers.Count == 0))) {
                    if ((_strong.Key.HasValue && context.ShouldForceLoad("identifier", _strong.Key.Value))) {
                        System.Collections.Generic.List<OpenIZ.Core.Model.DataTypes.EntityIdentifier> _delay = null;
                        _delay = new System.Collections.Generic.List<OpenIZ.Core.Model.DataTypes.EntityIdentifier>(context.JsonContext.LoadCollection<OpenIZ.Core.Model.DataTypes.EntityIdentifier>(_strong.Key.Value));
                        _strong.Identifiers = _delay;
                        if ((_delay.Count > 0)) {
                            _loaded = true;
                            context.JsonContext.WritePropertyUtil(w, "identifier", _strong.Identifiers, context);
                        }
                    }
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "identifier", _strong.Identifiers, context);
                }
            }
            if (context.ShouldSerialize("relationship")) {
                if (((_strong.Relationships == null) 
                            || (_strong.Relationships.Count == 0))) {
                    if ((_strong.Key.HasValue && context.ShouldForceLoad("relationship", _strong.Key.Value))) {
                        System.Collections.Generic.List<OpenIZ.Core.Model.Entities.EntityRelationship> _delay = null;
                        _delay = new System.Collections.Generic.List<OpenIZ.Core.Model.Entities.EntityRelationship>(context.JsonContext.LoadCollection<OpenIZ.Core.Model.Entities.EntityRelationship>(_strong.Key.Value));
                        _strong.Relationships = _delay;
                        if ((_delay.Count > 0)) {
                            _loaded = true;
                            context.JsonContext.WritePropertyUtil(w, "relationship", _strong.Relationships, context);
                        }
                    }
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "relationship", _strong.Relationships, context);
                }
            }
            if (context.ShouldSerialize("telecom")) {
                if (((_strong.Telecoms == null) 
                            || (_strong.Telecoms.Count == 0))) {
                    if ((_strong.Key.HasValue && context.ShouldForceLoad("telecom", _strong.Key.Value))) {
                        System.Collections.Generic.List<OpenIZ.Core.Model.Entities.EntityTelecomAddress> _delay = null;
                        _delay = new System.Collections.Generic.List<OpenIZ.Core.Model.Entities.EntityTelecomAddress>(context.JsonContext.LoadCollection<OpenIZ.Core.Model.Entities.EntityTelecomAddress>(_strong.Key.Value));
                        _strong.Telecoms = _delay;
                        if ((_delay.Count > 0)) {
                            _loaded = true;
                            context.JsonContext.WritePropertyUtil(w, "telecom", _strong.Telecoms, context);
                        }
                    }
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "telecom", _strong.Telecoms, context);
                }
            }
            if (context.ShouldSerialize("extension")) {
                if (((_strong.Extensions == null) 
                            || (_strong.Extensions.Count == 0))) {
                    if ((_strong.Key.HasValue && context.ShouldForceLoad("extension", _strong.Key.Value))) {
                        System.Collections.Generic.List<OpenIZ.Core.Model.DataTypes.EntityExtension> _delay = null;
                        _delay = new System.Collections.Generic.List<OpenIZ.Core.Model.DataTypes.EntityExtension>(context.JsonContext.LoadCollection<OpenIZ.Core.Model.DataTypes.EntityExtension>(_strong.Key.Value));
                        _strong.Extensions = _delay;
                        if ((_delay.Count > 0)) {
                            _loaded = true;
                            context.JsonContext.WritePropertyUtil(w, "extension", _strong.Extensions, context);
                        }
                    }
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "extension", _strong.Extensions, context);
                }
            }
            if (context.ShouldSerialize("name")) {
                if (((_strong.Names == null) 
                            || (_strong.Names.Count == 0))) {
                    if ((_strong.Key.HasValue && context.ShouldForceLoad("name", _strong.Key.Value))) {
                        System.Collections.Generic.List<OpenIZ.Core.Model.Entities.EntityName> _delay = null;
                        _delay = new System.Collections.Generic.List<OpenIZ.Core.Model.Entities.EntityName>(context.JsonContext.LoadCollection<OpenIZ.Core.Model.Entities.EntityName>(_strong.Key.Value));
                        _strong.Names = _delay;
                        if ((_delay.Count > 0)) {
                            _loaded = true;
                            context.JsonContext.WritePropertyUtil(w, "name", _strong.Names, context);
                        }
                    }
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "name", _strong.Names, context);
                }
            }
            if (context.ShouldSerialize("address")) {
                if (((_strong.Addresses == null) 
                            || (_strong.Addresses.Count == 0))) {
                    if ((_strong.Key.HasValue && context.ShouldForceLoad("address", _strong.Key.Value))) {
                        System.Collections.Generic.List<OpenIZ.Core.Model.Entities.EntityAddress> _delay = null;
                        _delay = new System.Collections.Generic.List<OpenIZ.Core.Model.Entities.EntityAddress>(context.JsonContext.LoadCollection<OpenIZ.Core.Model.Entities.EntityAddress>(_strong.Key.Value));
                        _strong.Addresses = _delay;
                        if ((_delay.Count > 0)) {
                            _loaded = true;
                            context.JsonContext.WritePropertyUtil(w, "address", _strong.Addresses, context);
                        }
                    }
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "address", _strong.Addresses, context);
                }
            }
            if (context.ShouldSerialize("note")) {
                if (((_strong.Notes == null) 
                            || (_strong.Notes.Count == 0))) {
                    if ((_strong.Key.HasValue && context.ShouldForceLoad("note", _strong.Key.Value))) {
                        System.Collections.Generic.List<OpenIZ.Core.Model.DataTypes.EntityNote> _delay = null;
                        _delay = new System.Collections.Generic.List<OpenIZ.Core.Model.DataTypes.EntityNote>(context.JsonContext.LoadCollection<OpenIZ.Core.Model.DataTypes.EntityNote>(_strong.Key.Value));
                        _strong.Notes = _delay;
                        if ((_delay.Count > 0)) {
                            _loaded = true;
                            context.JsonContext.WritePropertyUtil(w, "note", _strong.Notes, context);
                        }
                    }
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "note", _strong.Notes, context);
                }
            }
            if (context.ShouldSerialize("tag")) {
                if (((_strong.Tags == null) 
                            || (_strong.Tags.Count == 0))) {
                    if ((_strong.Key.HasValue && context.ShouldForceLoad("tag", _strong.Key.Value))) {
                        System.Collections.Generic.List<OpenIZ.Core.Model.DataTypes.EntityTag> _delay = null;
                        _delay = new System.Collections.Generic.List<OpenIZ.Core.Model.DataTypes.EntityTag>(context.JsonContext.LoadCollection<OpenIZ.Core.Model.DataTypes.EntityTag>(_strong.Key.Value));
                        _strong.Tags = _delay;
                        if ((_delay.Count > 0)) {
                            _loaded = true;
                            context.JsonContext.WritePropertyUtil(w, "tag", _strong.Tags, context);
                        }
                    }
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "tag", _strong.Tags, context);
                }
            }
            if (context.ShouldSerialize("participation")) {
                if (((_strong.Participations == null) 
                            || (_strong.Participations.Count == 0))) {
                    if ((_strong.Key.HasValue && context.ShouldForceLoad("participation", _strong.Key.Value))) {
                        System.Collections.Generic.List<OpenIZ.Core.Model.Acts.ActParticipation> _delay = null;
                        _delay = new System.Collections.Generic.List<OpenIZ.Core.Model.Acts.ActParticipation>(context.JsonContext.LoadCollection<OpenIZ.Core.Model.Acts.ActParticipation>(_strong.Key.Value));
                        _strong.Participations = _delay;
                        if ((_delay.Count > 0)) {
                            _loaded = true;
                            context.JsonContext.WritePropertyUtil(w, "participation", _strong.Participations, context);
                        }
                    }
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "participation", _strong.Participations, context);
                }
            }
            if (context.ShouldSerialize("etag")) {
                if ((_strong.Tag == null)) {
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "etag", _strong.Tag, context);
                }
            }
            if (context.ShouldSerialize("previousVersion")) {
                if ((_strong.PreviousVersionKey == null)) {
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "previousVersion", _strong.PreviousVersionKey, context);
                }
            }
            if (context.ShouldSerialize("version")) {
                if ((_strong.VersionKey == null)) {
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "version", _strong.VersionKey, context);
                }
            }
            if (context.ShouldSerialize("sequence")) {
                if ((_strong.VersionSequence == null)) {
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "sequence", _strong.VersionSequence, context);
                }
            }
            if (context.ShouldSerialize("creationTimeModel")) {
                if ((_strong.CreationTime == null)) {
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "creationTimeModel", _strong.CreationTime, context);
                }
            }
            if (context.ShouldSerialize("creationTime")) {
                if ((_strong.CreationTimeXml == null)) {
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "creationTime", _strong.CreationTimeXml, context);
                }
            }
            if (context.ShouldSerialize("obsoletionTimeModel")) {
                if ((_strong.ObsoletionTime == null)) {
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "obsoletionTimeModel", _strong.ObsoletionTime, context);
                }
            }
            if (context.ShouldSerialize("obsoletionTime")) {
                if ((_strong.ObsoletionTimeXml == null)) {
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "obsoletionTime", _strong.ObsoletionTimeXml, context);
                }
            }
            if (context.ShouldSerialize("createdBy")) {
                if ((_strong.CreatedByKey == null)) {
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "createdBy", _strong.CreatedByKey, context);
                }
            }
            if (context.ShouldSerialize("obsoletedBy")) {
                if ((_strong.ObsoletedByKey == null)) {
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "obsoletedBy", _strong.ObsoletedByKey, context);
                }
            }
            if (context.ShouldSerialize("id")) {
                if ((_strong.Key == null)) {
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "id", _strong.Key, context);
                }
            }
            if (((_loaded && _strong.Key.HasValue) 
                        && _strong.VersionKey.HasValue)) {
                ((OpenIZ.Core.Services.IDataCachingService)(OpenIZ.Core.ApplicationServiceContext.Current.GetService(typeof(OpenIZ.Core.Services.IDataCachingService)))).Add(_strong);
            }
        }
        
        public object Deserialize(Newtonsoft.Json.JsonReader r, System.Type asType, OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext context) {
            OpenIZ.Core.Model.Entities.Place _retVal = new OpenIZ.Core.Model.Entities.Place();
            int _depth = r.Depth;
            if ((r.TokenType != Newtonsoft.Json.JsonToken.StartObject)) {
                _depth = (_depth - 1);
            }
            for (
            ; r.Read(); 
            ) {
                if ((r.TokenType == Newtonsoft.Json.JsonToken.PropertyName)) {
                    if ("id".Equals(r.Value)) {
                        r.Read();
                        System.Nullable<System.Guid> _instance = ((System.Nullable<System.Guid>)(context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<System.Guid>), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("id", context.JsonContext, _retVal, context))));
                        if ((_instance != null)) {
                            _retVal.Key = _instance;
                        }
                    }
                    else {
                        if ("obsoletedBy".Equals(r.Value)) {
                            r.Read();
                            System.Nullable<System.Guid> _instance = ((System.Nullable<System.Guid>)(context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<System.Guid>), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("obsoletedBy", context.JsonContext, _retVal, context))));
                            if ((_instance != null)) {
                                _retVal.ObsoletedByKey = _instance;
                            }
                        }
                        else {
                            if ("createdBy".Equals(r.Value)) {
                                r.Read();
                                System.Nullable<System.Guid> _instance = ((System.Nullable<System.Guid>)(context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<System.Guid>), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("createdBy", context.JsonContext, _retVal, context))));
                                if ((_instance != null)) {
                                    _retVal.CreatedByKey = _instance;
                                }
                            }
                            else {
                                if ("obsoletionTime".Equals(r.Value)) {
                                    r.Read();
                                    string _instance = ((string)(context.JsonContext.ReadElementUtil(r, typeof(string), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("obsoletionTime", context.JsonContext, _retVal, context))));
                                    if ((_instance != null)) {
                                        _retVal.ObsoletionTimeXml = _instance;
                                    }
                                }
                                else {
                                    if ("obsoletionTimeModel".Equals(r.Value)) {
                                        r.Read();
                                        System.Nullable<System.DateTimeOffset> _instance = ((System.Nullable<System.DateTimeOffset>)(context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<System.DateTimeOffset>), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("obsoletionTimeModel", context.JsonContext, _retVal, context))));
                                        if ((_instance != null)) {
                                            _retVal.ObsoletionTime = _instance;
                                        }
                                    }
                                    else {
                                        if ("creationTime".Equals(r.Value)) {
                                            r.Read();
                                            string _instance = ((string)(context.JsonContext.ReadElementUtil(r, typeof(string), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("creationTime", context.JsonContext, _retVal, context))));
                                            if ((_instance != null)) {
                                                _retVal.CreationTimeXml = _instance;
                                            }
                                        }
                                        else {
                                            if ("creationTimeModel".Equals(r.Value)) {
                                                r.Read();
                                                System.DateTimeOffset _instance = ((System.DateTimeOffset)(context.JsonContext.ReadElementUtil(r, typeof(System.DateTimeOffset), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("creationTimeModel", context.JsonContext, _retVal, context))));
                                                if ((_instance != null)) {
                                                    _retVal.CreationTime = _instance;
                                                }
                                            }
                                            else {
                                                if ("sequence".Equals(r.Value)) {
                                                    r.Read();
                                                    System.Nullable<decimal> _instance = ((System.Nullable<decimal>)(context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<decimal>), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("sequence", context.JsonContext, _retVal, context))));
                                                    if ((_instance != null)) {
                                                        _retVal.VersionSequence = _instance;
                                                    }
                                                }
                                                else {
                                                    if ("version".Equals(r.Value)) {
                                                        r.Read();
                                                        System.Nullable<System.Guid> _instance = ((System.Nullable<System.Guid>)(context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<System.Guid>), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("version", context.JsonContext, _retVal, context))));
                                                        if ((_instance != null)) {
                                                            _retVal.VersionKey = _instance;
                                                        }
                                                    }
                                                    else {
                                                        if ("previousVersion".Equals(r.Value)) {
                                                            r.Read();
                                                            System.Nullable<System.Guid> _instance = ((System.Nullable<System.Guid>)(context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<System.Guid>), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("previousVersion", context.JsonContext, _retVal, context))));
                                                            if ((_instance != null)) {
                                                                _retVal.PreviousVersionKey = _instance;
                                                            }
                                                        }
                                                        else {
                                                            if ("participation".Equals(r.Value)) {
                                                                r.Read();
                                                                System.Collections.Generic.List<OpenIZ.Core.Model.Acts.ActParticipation> _instance = ((System.Collections.Generic.List<OpenIZ.Core.Model.Acts.ActParticipation>)(context.JsonContext.ReadElementUtil(r, typeof(System.Collections.Generic.List<OpenIZ.Core.Model.Acts.ActParticipation>), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("participation", context.JsonContext, _retVal, context))));
                                                                if ((_instance != null)) {
                                                                    _retVal.Participations = _instance;
                                                                }
                                                            }
                                                            else {
                                                                if ("tag".Equals(r.Value)) {
                                                                    r.Read();
                                                                    System.Collections.Generic.List<OpenIZ.Core.Model.DataTypes.EntityTag> _instance = ((System.Collections.Generic.List<OpenIZ.Core.Model.DataTypes.EntityTag>)(context.JsonContext.ReadElementUtil(r, typeof(System.Collections.Generic.List<OpenIZ.Core.Model.DataTypes.EntityTag>), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("tag", context.JsonContext, _retVal, context))));
                                                                    if ((_instance != null)) {
                                                                        _retVal.Tags = _instance;
                                                                    }
                                                                }
                                                                else {
                                                                    if ("note".Equals(r.Value)) {
                                                                        r.Read();
                                                                        System.Collections.Generic.List<OpenIZ.Core.Model.DataTypes.EntityNote> _instance = ((System.Collections.Generic.List<OpenIZ.Core.Model.DataTypes.EntityNote>)(context.JsonContext.ReadElementUtil(r, typeof(System.Collections.Generic.List<OpenIZ.Core.Model.DataTypes.EntityNote>), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("note", context.JsonContext, _retVal, context))));
                                                                        if ((_instance != null)) {
                                                                            _retVal.Notes = _instance;
                                                                        }
                                                                    }
                                                                    else {
                                                                        if ("address".Equals(r.Value)) {
                                                                            r.Read();
                                                                            System.Collections.Generic.List<OpenIZ.Core.Model.Entities.EntityAddress> _instance = ((System.Collections.Generic.List<OpenIZ.Core.Model.Entities.EntityAddress>)(context.JsonContext.ReadElementUtil(r, typeof(System.Collections.Generic.List<OpenIZ.Core.Model.Entities.EntityAddress>), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("address", context.JsonContext, _retVal, context))));
                                                                            if ((_instance != null)) {
                                                                                _retVal.Addresses = _instance;
                                                                            }
                                                                        }
                                                                        else {
                                                                            if ("name".Equals(r.Value)) {
                                                                                r.Read();
                                                                                System.Collections.Generic.List<OpenIZ.Core.Model.Entities.EntityName> _instance = ((System.Collections.Generic.List<OpenIZ.Core.Model.Entities.EntityName>)(context.JsonContext.ReadElementUtil(r, typeof(System.Collections.Generic.List<OpenIZ.Core.Model.Entities.EntityName>), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("name", context.JsonContext, _retVal, context))));
                                                                                if ((_instance != null)) {
                                                                                    _retVal.Names = _instance;
                                                                                }
                                                                            }
                                                                            else {
                                                                                if ("extension".Equals(r.Value)) {
                                                                                    r.Read();
                                                                                    System.Collections.Generic.List<OpenIZ.Core.Model.DataTypes.EntityExtension> _instance = ((System.Collections.Generic.List<OpenIZ.Core.Model.DataTypes.EntityExtension>)(context.JsonContext.ReadElementUtil(r, typeof(System.Collections.Generic.List<OpenIZ.Core.Model.DataTypes.EntityExtension>), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("extension", context.JsonContext, _retVal, context))));
                                                                                    if ((_instance != null)) {
                                                                                        _retVal.Extensions = _instance;
                                                                                    }
                                                                                }
                                                                                else {
                                                                                    if ("telecom".Equals(r.Value)) {
                                                                                        r.Read();
                                                                                        System.Collections.Generic.List<OpenIZ.Core.Model.Entities.EntityTelecomAddress> _instance = ((System.Collections.Generic.List<OpenIZ.Core.Model.Entities.EntityTelecomAddress>)(context.JsonContext.ReadElementUtil(r, typeof(System.Collections.Generic.List<OpenIZ.Core.Model.Entities.EntityTelecomAddress>), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("telecom", context.JsonContext, _retVal, context))));
                                                                                        if ((_instance != null)) {
                                                                                            _retVal.Telecoms = _instance;
                                                                                        }
                                                                                    }
                                                                                    else {
                                                                                        if ("relationship".Equals(r.Value)) {
                                                                                            r.Read();
                                                                                            System.Collections.Generic.List<OpenIZ.Core.Model.Entities.EntityRelationship> _instance = ((System.Collections.Generic.List<OpenIZ.Core.Model.Entities.EntityRelationship>)(context.JsonContext.ReadElementUtil(r, typeof(System.Collections.Generic.List<OpenIZ.Core.Model.Entities.EntityRelationship>), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("relationship", context.JsonContext, _retVal, context))));
                                                                                            if ((_instance != null)) {
                                                                                                _retVal.Relationships = _instance;
                                                                                            }
                                                                                        }
                                                                                        else {
                                                                                            if ("identifier".Equals(r.Value)) {
                                                                                                r.Read();
                                                                                                System.Collections.Generic.List<OpenIZ.Core.Model.DataTypes.EntityIdentifier> _instance = ((System.Collections.Generic.List<OpenIZ.Core.Model.DataTypes.EntityIdentifier>)(context.JsonContext.ReadElementUtil(r, typeof(System.Collections.Generic.List<OpenIZ.Core.Model.DataTypes.EntityIdentifier>), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("identifier", context.JsonContext, _retVal, context))));
                                                                                                if ((_instance != null)) {
                                                                                                    _retVal.Identifiers = _instance;
                                                                                                }
                                                                                            }
                                                                                            else {
                                                                                                if ("typeConceptModel".Equals(r.Value)) {
                                                                                                    r.Read();
                                                                                                    OpenIZ.Core.Model.DataTypes.Concept _instance = ((OpenIZ.Core.Model.DataTypes.Concept)(context.JsonContext.ReadElementUtil(r, typeof(OpenIZ.Core.Model.DataTypes.Concept), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("typeConceptModel", context.JsonContext, _retVal, context))));
                                                                                                    if ((_instance != null)) {
                                                                                                        _retVal.TypeConcept = _instance;
                                                                                                    }
                                                                                                }
                                                                                                else {
                                                                                                    if ("creationActModel".Equals(r.Value)) {
                                                                                                        r.Read();
                                                                                                        OpenIZ.Core.Model.Acts.Act _instance = ((OpenIZ.Core.Model.Acts.Act)(context.JsonContext.ReadElementUtil(r, typeof(OpenIZ.Core.Model.Acts.Act), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("creationActModel", context.JsonContext, _retVal, context))));
                                                                                                        if ((_instance != null)) {
                                                                                                            _retVal.CreationAct = _instance;
                                                                                                        }
                                                                                                    }
                                                                                                    else {
                                                                                                        if ("statusConceptModel".Equals(r.Value)) {
                                                                                                            r.Read();
                                                                                                            OpenIZ.Core.Model.DataTypes.Concept _instance = ((OpenIZ.Core.Model.DataTypes.Concept)(context.JsonContext.ReadElementUtil(r, typeof(OpenIZ.Core.Model.DataTypes.Concept), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("statusConceptModel", context.JsonContext, _retVal, context))));
                                                                                                            if ((_instance != null)) {
                                                                                                                _retVal.StatusConcept = _instance;
                                                                                                            }
                                                                                                        }
                                                                                                        else {
                                                                                                            if ("determinerConceptModel".Equals(r.Value)) {
                                                                                                                r.Read();
                                                                                                                OpenIZ.Core.Model.DataTypes.Concept _instance = ((OpenIZ.Core.Model.DataTypes.Concept)(context.JsonContext.ReadElementUtil(r, typeof(OpenIZ.Core.Model.DataTypes.Concept), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("determinerConceptModel", context.JsonContext, _retVal, context))));
                                                                                                                if ((_instance != null)) {
                                                                                                                    _retVal.DeterminerConcept = _instance;
                                                                                                                }
                                                                                                            }
                                                                                                            else {
                                                                                                                if ("classConceptModel".Equals(r.Value)) {
                                                                                                                    r.Read();
                                                                                                                    OpenIZ.Core.Model.DataTypes.Concept _instance = ((OpenIZ.Core.Model.DataTypes.Concept)(context.JsonContext.ReadElementUtil(r, typeof(OpenIZ.Core.Model.DataTypes.Concept), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("classConceptModel", context.JsonContext, _retVal, context))));
                                                                                                                    if ((_instance != null)) {
                                                                                                                        _retVal.ClassConcept = _instance;
                                                                                                                    }
                                                                                                                }
                                                                                                                else {
                                                                                                                    if ("typeConcept".Equals(r.Value)) {
                                                                                                                        r.Read();
                                                                                                                        System.Nullable<System.Guid> _instance = ((System.Nullable<System.Guid>)(context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<System.Guid>), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("typeConcept", context.JsonContext, _retVal, context))));
                                                                                                                        if ((_instance != null)) {
                                                                                                                            _retVal.TypeConceptKey = _instance;
                                                                                                                        }
                                                                                                                    }
                                                                                                                    else {
                                                                                                                        if ("creationAct".Equals(r.Value)) {
                                                                                                                            r.Read();
                                                                                                                            System.Nullable<System.Guid> _instance = ((System.Nullable<System.Guid>)(context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<System.Guid>), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("creationAct", context.JsonContext, _retVal, context))));
                                                                                                                            if ((_instance != null)) {
                                                                                                                                _retVal.CreationActKey = _instance;
                                                                                                                            }
                                                                                                                        }
                                                                                                                        else {
                                                                                                                            if ("statusConcept".Equals(r.Value)) {
                                                                                                                                r.Read();
                                                                                                                                System.Nullable<System.Guid> _instance = ((System.Nullable<System.Guid>)(context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<System.Guid>), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("statusConcept", context.JsonContext, _retVal, context))));
                                                                                                                                if ((_instance != null)) {
                                                                                                                                    _retVal.StatusConceptKey = _instance;
                                                                                                                                }
                                                                                                                            }
                                                                                                                            else {
                                                                                                                                if ("determinerConcept".Equals(r.Value)) {
                                                                                                                                    r.Read();
                                                                                                                                    System.Nullable<System.Guid> _instance = ((System.Nullable<System.Guid>)(context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<System.Guid>), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("determinerConcept", context.JsonContext, _retVal, context))));
                                                                                                                                    if ((_instance != null)) {
                                                                                                                                        _retVal.DeterminerConceptKey = _instance;
                                                                                                                                    }
                                                                                                                                }
                                                                                                                                else {
                                                                                                                                    if ("template".Equals(r.Value)) {
                                                                                                                                        r.Read();
                                                                                                                                        OpenIZ.Core.Model.DataTypes.TemplateDefinition _instance = ((OpenIZ.Core.Model.DataTypes.TemplateDefinition)(context.JsonContext.ReadElementUtil(r, typeof(OpenIZ.Core.Model.DataTypes.TemplateDefinition), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("template", context.JsonContext, _retVal, context))));
                                                                                                                                        if ((_instance != null)) {
                                                                                                                                            _retVal.Template = _instance;
                                                                                                                                        }
                                                                                                                                    }
                                                                                                                                    else {
                                                                                                                                        if ("service".Equals(r.Value)) {
                                                                                                                                            r.Read();
                                                                                                                                            System.Collections.Generic.List<OpenIZ.Core.Model.Entities.PlaceService> _instance = ((System.Collections.Generic.List<OpenIZ.Core.Model.Entities.PlaceService>)(context.JsonContext.ReadElementUtil(r, typeof(System.Collections.Generic.List<OpenIZ.Core.Model.Entities.PlaceService>), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("service", context.JsonContext, _retVal, context))));
                                                                                                                                            if ((_instance != null)) {
                                                                                                                                                _retVal.Services = _instance;
                                                                                                                                            }
                                                                                                                                        }
                                                                                                                                        else {
                                                                                                                                            if ("lng".Equals(r.Value)) {
                                                                                                                                                r.Read();
                                                                                                                                                System.Nullable<double> _instance = ((System.Nullable<double>)(context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<double>), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("lng", context.JsonContext, _retVal, context))));
                                                                                                                                                if ((_instance != null)) {
                                                                                                                                                    _retVal.Lng = _instance;
                                                                                                                                                }
                                                                                                                                            }
                                                                                                                                            else {
                                                                                                                                                if ("lat".Equals(r.Value)) {
                                                                                                                                                    r.Read();
                                                                                                                                                    System.Nullable<double> _instance = ((System.Nullable<double>)(context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<double>), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("lat", context.JsonContext, _retVal, context))));
                                                                                                                                                    if ((_instance != null)) {
                                                                                                                                                        _retVal.Lat = _instance;
                                                                                                                                                    }
                                                                                                                                                }
                                                                                                                                                else {
                                                                                                                                                    if ("isMobile".Equals(r.Value)) {
                                                                                                                                                        r.Read();
                                                                                                                                                        bool _instance = ((bool)(context.JsonContext.ReadElementUtil(r, typeof(bool), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("isMobile", context.JsonContext, _retVal, context))));
                                                                                                                                                        if ((_instance != null)) {
                                                                                                                                                            _retVal.IsMobile = _instance;
                                                                                                                                                        }
                                                                                                                                                    }
                                                                                                                                                    else {
                                                                                                                                                        if ("classConcept".Equals(r.Value)) {
                                                                                                                                                            r.Read();
                                                                                                                                                            System.Nullable<System.Guid> _instance = ((System.Nullable<System.Guid>)(context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<System.Guid>), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("classConcept", context.JsonContext, _retVal, context))));
                                                                                                                                                            if ((_instance != null)) {
                                                                                                                                                                _retVal.ClassConceptKey = _instance;
                                                                                                                                                            }
                                                                                                                                                        }
                                                                                                                                                        else {
                                                                                                                                                            if ("$type".Equals(r.Value)) {
                                                                                                                                                                System.Type _type = this.m_binder.BindToType("OpenIZ.Core.Model, Version=0.6.14.21496, Culture=neutral, PublicKeyToken=null", r.ReadAsString());
                                                                                                                                                                if ((_type != typeof(OpenIZ.Core.Model.Entities.Place))) {
                                                                                                                                                                    OpenIZ.Core.Model.Entities.Place _nretVal = ((OpenIZ.Core.Model.Entities.Place)(context.JsonContext.GetFormatter(_type).Deserialize(r, _type, context)));
                                                                                                                                                                    _nretVal.CopyObjectData(_retVal);
                                                                                                                                                                    return _nretVal;
                                                                                                                                                                }
                                                                                                                                                            }
                                                                                                                                                            else {
                                                                                                                                                                r.Skip();
                                                                                                                                                            }
                                                                                                                                                        }
                                                                                                                                                    }
                                                                                                                                                }
                                                                                                                                            }
                                                                                                                                        }
                                                                                                                                    }
                                                                                                                                }
                                                                                                                            }
                                                                                                                        }
                                                                                                                    }
                                                                                                                }
                                                                                                            }
                                                                                                        }
                                                                                                    }
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
                else {
                    if (((r.TokenType == Newtonsoft.Json.JsonToken.EndObject) 
                                && (r.Depth == _depth))) {
                        return _retVal;
                    }
                    else {
                        throw new Newtonsoft.Json.JsonSerializationException("JSON in invalid state");
                    }
                }
            }
            return _retVal;
        }
        
        public object FromSimpleValue(object o) {
            return null;
        }
        
        public object GetSimpleValue(object o) {
            return null;
        }
    }
    
    public class PlaceServiceViewModelSerializer : OpenIZ.Core.Applets.ViewModel.Json.IJsonViewModelTypeFormatter {
        
        private OpenIZ.Core.Model.Serialization.ModelSerializationBinder m_binder = new OpenIZ.Core.Model.Serialization.ModelSerializationBinder();
        
        private OpenIZ.Core.Diagnostics.Tracer m_tracer = OpenIZ.Core.Diagnostics.Tracer.GetTracer(typeof(PlaceServiceViewModelSerializer));
        
        public System.Type HandlesType {
            get {
                return typeof(OpenIZ.Core.Model.Entities.PlaceService);
            }
        }
        
        public void Serialize(Newtonsoft.Json.JsonWriter w, OpenIZ.Core.Model.IdentifiedData o, OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext context) {
            if ((o == null)) {
                throw new System.ArgumentNullException("o");
            }
            OpenIZ.Core.Model.Entities.PlaceService _strong = null;
            OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext _jsonContext = null;
            bool _loaded = false;
            try {
                _strong = ((OpenIZ.Core.Model.Entities.PlaceService)(o));
            }
            catch (System.Exception e) {
                this.m_tracer.TraceError(string.Format("Casting Error: {0}", e));
                throw new System.ArgumentException(string.Format("Invalid type {0} provided, expected {1}", o.GetType(), typeof(OpenIZ.Core.Model.Entities.PlaceService)));
            }
            if (context.ShouldSerialize("serviceSchedule")) {
                if ((_strong.ServiceSchedule == null)) {
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "serviceSchedule", _strong.ServiceSchedule, context);
                }
            }
            if (context.ShouldSerialize("serviceConcept")) {
                if ((_strong.ServiceConceptKey == null)) {
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "serviceConcept", _strong.ServiceConceptKey, context);
                }
            }
            if (context.ShouldSerialize("serviceConceptModel")) {
                if ((_strong.ServiceConcept == null)) {
                    if ((_strong.Key.HasValue && context.ShouldForceLoad("serviceConceptModel", _strong.Key.Value))) {
                        OpenIZ.Core.Model.DataTypes.Concept _delay = null;
                        _delay = context.JsonContext.LoadRelated<OpenIZ.Core.Model.DataTypes.Concept>(_strong.ServiceConceptKey);
                        _strong.ServiceConcept = _delay;
                        if ((_delay != null)) {
                            _loaded = true;
                            context.JsonContext.WritePropertyUtil(w, "serviceConceptModel", _strong.ServiceConcept, context);
                        }
                    }
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "serviceConceptModel", _strong.ServiceConcept, context);
                }
            }
            if (context.ShouldSerialize("effectiveVersionSequence")) {
                if ((_strong.EffectiveVersionSequenceId == null)) {
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "effectiveVersionSequence", _strong.EffectiveVersionSequenceId, context);
                }
            }
            if (context.ShouldSerialize("obsoleteVersionSequence")) {
                if ((_strong.ObsoleteVersionSequenceId == null)) {
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "obsoleteVersionSequence", _strong.ObsoleteVersionSequenceId, context);
                }
            }
            if (context.ShouldSerialize("modifiedOn")) {
                if ((_strong.ModifiedOn == null)) {
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "modifiedOn", _strong.ModifiedOn, context);
                }
            }
            if (context.ShouldSerialize("source")) {
                if ((_strong.SourceEntityKey == null)) {
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "source", _strong.SourceEntityKey, context);
                }
            }
            if (context.ShouldSerialize("id")) {
                if ((_strong.Key == null)) {
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "id", _strong.Key, context);
                }
            }
            if (context.ShouldSerialize("etag")) {
                if ((_strong.Tag == null)) {
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "etag", _strong.Tag, context);
                }
            }
            if ((_loaded && _strong.Key.HasValue)) {
                ((OpenIZ.Core.Services.IDataCachingService)(OpenIZ.Core.ApplicationServiceContext.Current.GetService(typeof(OpenIZ.Core.Services.IDataCachingService)))).Add(_strong);
            }
        }
        
        public object Deserialize(Newtonsoft.Json.JsonReader r, System.Type asType, OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext context) {
            OpenIZ.Core.Model.Entities.PlaceService _retVal = new OpenIZ.Core.Model.Entities.PlaceService();
            int _depth = r.Depth;
            if ((r.TokenType != Newtonsoft.Json.JsonToken.StartObject)) {
                _depth = (_depth - 1);
            }
            for (
            ; r.Read(); 
            ) {
                if ((r.TokenType == Newtonsoft.Json.JsonToken.PropertyName)) {
                    if ("id".Equals(r.Value)) {
                        r.Read();
                        System.Nullable<System.Guid> _instance = ((System.Nullable<System.Guid>)(context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<System.Guid>), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("id", context.JsonContext, _retVal, context))));
                        if ((_instance != null)) {
                            _retVal.Key = _instance;
                        }
                    }
                    else {
                        if ("source".Equals(r.Value)) {
                            r.Read();
                            System.Nullable<System.Guid> _instance = ((System.Nullable<System.Guid>)(context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<System.Guid>), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("source", context.JsonContext, _retVal, context))));
                            if ((_instance != null)) {
                                _retVal.SourceEntityKey = _instance;
                            }
                        }
                        else {
                            if ("obsoleteVersionSequence".Equals(r.Value)) {
                                r.Read();
                                System.Nullable<decimal> _instance = ((System.Nullable<decimal>)(context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<decimal>), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("obsoleteVersionSequence", context.JsonContext, _retVal, context))));
                                if ((_instance != null)) {
                                    _retVal.ObsoleteVersionSequenceId = _instance;
                                }
                            }
                            else {
                                if ("effectiveVersionSequence".Equals(r.Value)) {
                                    r.Read();
                                    System.Nullable<decimal> _instance = ((System.Nullable<decimal>)(context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<decimal>), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("effectiveVersionSequence", context.JsonContext, _retVal, context))));
                                    if ((_instance != null)) {
                                        _retVal.EffectiveVersionSequenceId = _instance;
                                    }
                                }
                                else {
                                    if ("serviceConceptModel".Equals(r.Value)) {
                                        r.Read();
                                        OpenIZ.Core.Model.DataTypes.Concept _instance = ((OpenIZ.Core.Model.DataTypes.Concept)(context.JsonContext.ReadElementUtil(r, typeof(OpenIZ.Core.Model.DataTypes.Concept), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("serviceConceptModel", context.JsonContext, _retVal, context))));
                                        if ((_instance != null)) {
                                            _retVal.ServiceConcept = _instance;
                                        }
                                    }
                                    else {
                                        if ("serviceConcept".Equals(r.Value)) {
                                            r.Read();
                                            System.Nullable<System.Guid> _instance = ((System.Nullable<System.Guid>)(context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<System.Guid>), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("serviceConcept", context.JsonContext, _retVal, context))));
                                            if ((_instance != null)) {
                                                _retVal.ServiceConceptKey = _instance;
                                            }
                                        }
                                        else {
                                            if ("serviceSchedule".Equals(r.Value)) {
                                                r.Read();
                                                object _instance = ((object)(context.JsonContext.ReadElementUtil(r, typeof(object), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("serviceSchedule", context.JsonContext, _retVal, context))));
                                                if ((_instance != null)) {
                                                    _retVal.ServiceSchedule = _instance;
                                                }
                                            }
                                            else {
                                                if ("$type".Equals(r.Value)) {
                                                    System.Type _type = this.m_binder.BindToType("OpenIZ.Core.Model, Version=0.6.14.21496, Culture=neutral, PublicKeyToken=null", r.ReadAsString());
                                                    if ((_type != typeof(OpenIZ.Core.Model.Entities.PlaceService))) {
                                                        OpenIZ.Core.Model.Entities.PlaceService _nretVal = ((OpenIZ.Core.Model.Entities.PlaceService)(context.JsonContext.GetFormatter(_type).Deserialize(r, _type, context)));
                                                        _nretVal.CopyObjectData(_retVal);
                                                        return _nretVal;
                                                    }
                                                }
                                                else {
                                                    r.Skip();
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
                else {
                    if (((r.TokenType == Newtonsoft.Json.JsonToken.EndObject) 
                                && (r.Depth == _depth))) {
                        return _retVal;
                    }
                    else {
                        throw new Newtonsoft.Json.JsonSerializationException("JSON in invalid state");
                    }
                }
            }
            return _retVal;
        }
        
        public object FromSimpleValue(object o) {
            return null;
        }
        
        public object GetSimpleValue(object o) {
            return null;
        }
    }
    
    public class AssigningAuthorityViewModelSerializer : OpenIZ.Core.Applets.ViewModel.Json.IJsonViewModelTypeFormatter {
        
        private OpenIZ.Core.Model.Serialization.ModelSerializationBinder m_binder = new OpenIZ.Core.Model.Serialization.ModelSerializationBinder();
        
        private OpenIZ.Core.Diagnostics.Tracer m_tracer = OpenIZ.Core.Diagnostics.Tracer.GetTracer(typeof(AssigningAuthorityViewModelSerializer));
        
        public System.Type HandlesType {
            get {
                return typeof(OpenIZ.Core.Model.DataTypes.AssigningAuthority);
            }
        }
        
        public void Serialize(Newtonsoft.Json.JsonWriter w, OpenIZ.Core.Model.IdentifiedData o, OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext context) {
            if ((o == null)) {
                throw new System.ArgumentNullException("o");
            }
            OpenIZ.Core.Model.DataTypes.AssigningAuthority _strong = null;
            OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext _jsonContext = null;
            bool _loaded = false;
            try {
                _strong = ((OpenIZ.Core.Model.DataTypes.AssigningAuthority)(o));
            }
            catch (System.Exception e) {
                this.m_tracer.TraceError(string.Format("Casting Error: {0}", e));
                throw new System.ArgumentException(string.Format("Invalid type {0} provided, expected {1}", o.GetType(), typeof(OpenIZ.Core.Model.DataTypes.AssigningAuthority)));
            }
            if (context.ShouldSerialize("name")) {
                if ((_strong.Name == null)) {
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "name", _strong.Name, context);
                }
            }
            if (context.ShouldSerialize("domainName")) {
                if ((_strong.DomainName == null)) {
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "domainName", _strong.DomainName, context);
                }
            }
            if (context.ShouldSerialize("description")) {
                if ((_strong.Description == null)) {
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "description", _strong.Description, context);
                }
            }
            if (context.ShouldSerialize("oid")) {
                if ((_strong.Oid == null)) {
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "oid", _strong.Oid, context);
                }
            }
            if (context.ShouldSerialize("url")) {
                if ((_strong.Url == null)) {
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "url", _strong.Url, context);
                }
            }
            if (context.ShouldSerialize("scope")) {
                if (((_strong.AuthorityScopeXml == null) 
                            || (_strong.AuthorityScopeXml.Count == 0))) {
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "scope", _strong.AuthorityScopeXml, context);
                }
            }
            if (context.ShouldSerialize("assigningDevice")) {
                if ((_strong.AssigningDeviceKey == null)) {
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "assigningDevice", _strong.AssigningDeviceKey, context);
                }
            }
            if (context.ShouldSerialize("validation")) {
                if ((_strong.ValidationRegex == null)) {
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "validation", _strong.ValidationRegex, context);
                }
            }
            if (context.ShouldSerialize("creationTimeModel")) {
                if ((_strong.CreationTime == null)) {
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "creationTimeModel", _strong.CreationTime, context);
                }
            }
            if (context.ShouldSerialize("creationTime")) {
                if ((_strong.CreationTimeXml == null)) {
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "creationTime", _strong.CreationTimeXml, context);
                }
            }
            if (context.ShouldSerialize("obsoletionTimeModel")) {
                if ((_strong.ObsoletionTime == null)) {
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "obsoletionTimeModel", _strong.ObsoletionTime, context);
                }
            }
            if (context.ShouldSerialize("obsoletionTime")) {
                if ((_strong.ObsoletionTimeXml == null)) {
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "obsoletionTime", _strong.ObsoletionTimeXml, context);
                }
            }
            if (context.ShouldSerialize("createdBy")) {
                if ((_strong.CreatedByKey == null)) {
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "createdBy", _strong.CreatedByKey, context);
                }
            }
            if (context.ShouldSerialize("obsoletedBy")) {
                if ((_strong.ObsoletedByKey == null)) {
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "obsoletedBy", _strong.ObsoletedByKey, context);
                }
            }
            if (context.ShouldSerialize("id")) {
                if ((_strong.Key == null)) {
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "id", _strong.Key, context);
                }
            }
            if (context.ShouldSerialize("etag")) {
                if ((_strong.Tag == null)) {
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "etag", _strong.Tag, context);
                }
            }
            if ((_loaded && _strong.Key.HasValue)) {
                ((OpenIZ.Core.Services.IDataCachingService)(OpenIZ.Core.ApplicationServiceContext.Current.GetService(typeof(OpenIZ.Core.Services.IDataCachingService)))).Add(_strong);
            }
        }
        
        public object Deserialize(Newtonsoft.Json.JsonReader r, System.Type asType, OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext context) {
            OpenIZ.Core.Model.DataTypes.AssigningAuthority _retVal = new OpenIZ.Core.Model.DataTypes.AssigningAuthority();
            int _depth = r.Depth;
            if ((r.TokenType != Newtonsoft.Json.JsonToken.StartObject)) {
                _depth = (_depth - 1);
            }
            for (
            ; r.Read(); 
            ) {
                if ((r.TokenType == Newtonsoft.Json.JsonToken.PropertyName)) {
                    if ("id".Equals(r.Value)) {
                        r.Read();
                        System.Nullable<System.Guid> _instance = ((System.Nullable<System.Guid>)(context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<System.Guid>), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("id", context.JsonContext, _retVal, context))));
                        if ((_instance != null)) {
                            _retVal.Key = _instance;
                        }
                    }
                    else {
                        if ("obsoletedBy".Equals(r.Value)) {
                            r.Read();
                            System.Nullable<System.Guid> _instance = ((System.Nullable<System.Guid>)(context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<System.Guid>), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("obsoletedBy", context.JsonContext, _retVal, context))));
                            if ((_instance != null)) {
                                _retVal.ObsoletedByKey = _instance;
                            }
                        }
                        else {
                            if ("createdBy".Equals(r.Value)) {
                                r.Read();
                                System.Nullable<System.Guid> _instance = ((System.Nullable<System.Guid>)(context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<System.Guid>), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("createdBy", context.JsonContext, _retVal, context))));
                                if ((_instance != null)) {
                                    _retVal.CreatedByKey = _instance;
                                }
                            }
                            else {
                                if ("obsoletionTime".Equals(r.Value)) {
                                    r.Read();
                                    string _instance = ((string)(context.JsonContext.ReadElementUtil(r, typeof(string), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("obsoletionTime", context.JsonContext, _retVal, context))));
                                    if ((_instance != null)) {
                                        _retVal.ObsoletionTimeXml = _instance;
                                    }
                                }
                                else {
                                    if ("obsoletionTimeModel".Equals(r.Value)) {
                                        r.Read();
                                        System.Nullable<System.DateTimeOffset> _instance = ((System.Nullable<System.DateTimeOffset>)(context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<System.DateTimeOffset>), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("obsoletionTimeModel", context.JsonContext, _retVal, context))));
                                        if ((_instance != null)) {
                                            _retVal.ObsoletionTime = _instance;
                                        }
                                    }
                                    else {
                                        if ("creationTime".Equals(r.Value)) {
                                            r.Read();
                                            string _instance = ((string)(context.JsonContext.ReadElementUtil(r, typeof(string), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("creationTime", context.JsonContext, _retVal, context))));
                                            if ((_instance != null)) {
                                                _retVal.CreationTimeXml = _instance;
                                            }
                                        }
                                        else {
                                            if ("creationTimeModel".Equals(r.Value)) {
                                                r.Read();
                                                System.DateTimeOffset _instance = ((System.DateTimeOffset)(context.JsonContext.ReadElementUtil(r, typeof(System.DateTimeOffset), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("creationTimeModel", context.JsonContext, _retVal, context))));
                                                if ((_instance != null)) {
                                                    _retVal.CreationTime = _instance;
                                                }
                                            }
                                            else {
                                                if ("validation".Equals(r.Value)) {
                                                    r.Read();
                                                    string _instance = ((string)(context.JsonContext.ReadElementUtil(r, typeof(string), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("validation", context.JsonContext, _retVal, context))));
                                                    if ((_instance != null)) {
                                                        _retVal.ValidationRegex = _instance;
                                                    }
                                                }
                                                else {
                                                    if ("assigningDevice".Equals(r.Value)) {
                                                        r.Read();
                                                        System.Nullable<System.Guid> _instance = ((System.Nullable<System.Guid>)(context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<System.Guid>), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("assigningDevice", context.JsonContext, _retVal, context))));
                                                        if ((_instance != null)) {
                                                            _retVal.AssigningDeviceKey = _instance;
                                                        }
                                                    }
                                                    else {
                                                        if ("scope".Equals(r.Value)) {
                                                            r.Read();
                                                            System.Collections.Generic.List<System.Guid> _instance = ((System.Collections.Generic.List<System.Guid>)(context.JsonContext.ReadElementUtil(r, typeof(System.Collections.Generic.List<System.Guid>), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("scope", context.JsonContext, _retVal, context))));
                                                            if ((_instance != null)) {
                                                                _retVal.AuthorityScopeXml = _instance;
                                                            }
                                                        }
                                                        else {
                                                            if ("url".Equals(r.Value)) {
                                                                r.Read();
                                                                string _instance = ((string)(context.JsonContext.ReadElementUtil(r, typeof(string), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("url", context.JsonContext, _retVal, context))));
                                                                if ((_instance != null)) {
                                                                    _retVal.Url = _instance;
                                                                }
                                                            }
                                                            else {
                                                                if ("oid".Equals(r.Value)) {
                                                                    r.Read();
                                                                    string _instance = ((string)(context.JsonContext.ReadElementUtil(r, typeof(string), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("oid", context.JsonContext, _retVal, context))));
                                                                    if ((_instance != null)) {
                                                                        _retVal.Oid = _instance;
                                                                    }
                                                                }
                                                                else {
                                                                    if ("description".Equals(r.Value)) {
                                                                        r.Read();
                                                                        string _instance = ((string)(context.JsonContext.ReadElementUtil(r, typeof(string), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("description", context.JsonContext, _retVal, context))));
                                                                        if ((_instance != null)) {
                                                                            _retVal.Description = _instance;
                                                                        }
                                                                    }
                                                                    else {
                                                                        if ("domainName".Equals(r.Value)) {
                                                                            r.Read();
                                                                            string _instance = ((string)(context.JsonContext.ReadElementUtil(r, typeof(string), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("domainName", context.JsonContext, _retVal, context))));
                                                                            if ((_instance != null)) {
                                                                                _retVal.DomainName = _instance;
                                                                            }
                                                                        }
                                                                        else {
                                                                            if ("name".Equals(r.Value)) {
                                                                                r.Read();
                                                                                string _instance = ((string)(context.JsonContext.ReadElementUtil(r, typeof(string), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("name", context.JsonContext, _retVal, context))));
                                                                                if ((_instance != null)) {
                                                                                    _retVal.Name = _instance;
                                                                                }
                                                                            }
                                                                            else {
                                                                                if ("$type".Equals(r.Value)) {
                                                                                    System.Type _type = this.m_binder.BindToType("OpenIZ.Core.Model, Version=0.6.14.21496, Culture=neutral, PublicKeyToken=null", r.ReadAsString());
                                                                                    if ((_type != typeof(OpenIZ.Core.Model.DataTypes.AssigningAuthority))) {
                                                                                        OpenIZ.Core.Model.DataTypes.AssigningAuthority _nretVal = ((OpenIZ.Core.Model.DataTypes.AssigningAuthority)(context.JsonContext.GetFormatter(_type).Deserialize(r, _type, context)));
                                                                                        _nretVal.CopyObjectData(_retVal);
                                                                                        return _nretVal;
                                                                                    }
                                                                                }
                                                                                else {
                                                                                    r.Skip();
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
                else {
                    if (((r.TokenType == Newtonsoft.Json.JsonToken.EndObject) 
                                && (r.Depth == _depth))) {
                        return _retVal;
                    }
                    else {
                        throw new Newtonsoft.Json.JsonSerializationException("JSON in invalid state");
                    }
                }
            }
            return _retVal;
        }
        
        public object FromSimpleValue(object o) {
            return null;
        }
        
        public object GetSimpleValue(object o) {
            return null;
        }
    }
    
    public class CodeSystemViewModelSerializer : OpenIZ.Core.Applets.ViewModel.Json.IJsonViewModelTypeFormatter {
        
        private OpenIZ.Core.Model.Serialization.ModelSerializationBinder m_binder = new OpenIZ.Core.Model.Serialization.ModelSerializationBinder();
        
        private OpenIZ.Core.Diagnostics.Tracer m_tracer = OpenIZ.Core.Diagnostics.Tracer.GetTracer(typeof(CodeSystemViewModelSerializer));
        
        public System.Type HandlesType {
            get {
                return typeof(OpenIZ.Core.Model.DataTypes.CodeSystem);
            }
        }
        
        public void Serialize(Newtonsoft.Json.JsonWriter w, OpenIZ.Core.Model.IdentifiedData o, OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext context) {
            if ((o == null)) {
                throw new System.ArgumentNullException("o");
            }
            OpenIZ.Core.Model.DataTypes.CodeSystem _strong = null;
            OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext _jsonContext = null;
            bool _loaded = false;
            try {
                _strong = ((OpenIZ.Core.Model.DataTypes.CodeSystem)(o));
            }
            catch (System.Exception e) {
                this.m_tracer.TraceError(string.Format("Casting Error: {0}", e));
                throw new System.ArgumentException(string.Format("Invalid type {0} provided, expected {1}", o.GetType(), typeof(OpenIZ.Core.Model.DataTypes.CodeSystem)));
            }
            if (context.ShouldSerialize("name")) {
                if ((_strong.Name == null)) {
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "name", _strong.Name, context);
                }
            }
            if (context.ShouldSerialize("oid")) {
                if ((_strong.Oid == null)) {
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "oid", _strong.Oid, context);
                }
            }
            if (context.ShouldSerialize("authority")) {
                if ((_strong.Authority == null)) {
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "authority", _strong.Authority, context);
                }
            }
            if (context.ShouldSerialize("obsoletionReason")) {
                if ((_strong.ObsoletionReason == null)) {
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "obsoletionReason", _strong.ObsoletionReason, context);
                }
            }
            if (context.ShouldSerialize("url")) {
                if ((_strong.Url == null)) {
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "url", _strong.Url, context);
                }
            }
            if (context.ShouldSerialize("version")) {
                if ((_strong.VersionText == null)) {
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "version", _strong.VersionText, context);
                }
            }
            if (context.ShouldSerialize("description")) {
                if ((_strong.Description == null)) {
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "description", _strong.Description, context);
                }
            }
            if (context.ShouldSerialize("updatedTime")) {
                if ((_strong.UpdatedTimeXml == null)) {
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "updatedTime", _strong.UpdatedTimeXml, context);
                }
            }
            if (context.ShouldSerialize("updatedBy")) {
                if ((_strong.UpdatedByKey == null)) {
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "updatedBy", _strong.UpdatedByKey, context);
                }
            }
            if (context.ShouldSerialize("creationTimeModel")) {
                if ((_strong.CreationTime == null)) {
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "creationTimeModel", _strong.CreationTime, context);
                }
            }
            if (context.ShouldSerialize("creationTime")) {
                if ((_strong.CreationTimeXml == null)) {
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "creationTime", _strong.CreationTimeXml, context);
                }
            }
            if (context.ShouldSerialize("obsoletionTimeModel")) {
                if ((_strong.ObsoletionTime == null)) {
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "obsoletionTimeModel", _strong.ObsoletionTime, context);
                }
            }
            if (context.ShouldSerialize("obsoletionTime")) {
                if ((_strong.ObsoletionTimeXml == null)) {
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "obsoletionTime", _strong.ObsoletionTimeXml, context);
                }
            }
            if (context.ShouldSerialize("createdBy")) {
                if ((_strong.CreatedByKey == null)) {
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "createdBy", _strong.CreatedByKey, context);
                }
            }
            if (context.ShouldSerialize("obsoletedBy")) {
                if ((_strong.ObsoletedByKey == null)) {
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "obsoletedBy", _strong.ObsoletedByKey, context);
                }
            }
            if (context.ShouldSerialize("id")) {
                if ((_strong.Key == null)) {
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "id", _strong.Key, context);
                }
            }
            if (context.ShouldSerialize("etag")) {
                if ((_strong.Tag == null)) {
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "etag", _strong.Tag, context);
                }
            }
            if ((_loaded && _strong.Key.HasValue)) {
                ((OpenIZ.Core.Services.IDataCachingService)(OpenIZ.Core.ApplicationServiceContext.Current.GetService(typeof(OpenIZ.Core.Services.IDataCachingService)))).Add(_strong);
            }
        }
        
        public object Deserialize(Newtonsoft.Json.JsonReader r, System.Type asType, OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext context) {
            OpenIZ.Core.Model.DataTypes.CodeSystem _retVal = new OpenIZ.Core.Model.DataTypes.CodeSystem();
            int _depth = r.Depth;
            if ((r.TokenType != Newtonsoft.Json.JsonToken.StartObject)) {
                _depth = (_depth - 1);
            }
            for (
            ; r.Read(); 
            ) {
                if ((r.TokenType == Newtonsoft.Json.JsonToken.PropertyName)) {
                    if ("id".Equals(r.Value)) {
                        r.Read();
                        System.Nullable<System.Guid> _instance = ((System.Nullable<System.Guid>)(context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<System.Guid>), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("id", context.JsonContext, _retVal, context))));
                        if ((_instance != null)) {
                            _retVal.Key = _instance;
                        }
                    }
                    else {
                        if ("obsoletedBy".Equals(r.Value)) {
                            r.Read();
                            System.Nullable<System.Guid> _instance = ((System.Nullable<System.Guid>)(context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<System.Guid>), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("obsoletedBy", context.JsonContext, _retVal, context))));
                            if ((_instance != null)) {
                                _retVal.ObsoletedByKey = _instance;
                            }
                        }
                        else {
                            if ("createdBy".Equals(r.Value)) {
                                r.Read();
                                System.Nullable<System.Guid> _instance = ((System.Nullable<System.Guid>)(context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<System.Guid>), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("createdBy", context.JsonContext, _retVal, context))));
                                if ((_instance != null)) {
                                    _retVal.CreatedByKey = _instance;
                                }
                            }
                            else {
                                if ("obsoletionTime".Equals(r.Value)) {
                                    r.Read();
                                    string _instance = ((string)(context.JsonContext.ReadElementUtil(r, typeof(string), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("obsoletionTime", context.JsonContext, _retVal, context))));
                                    if ((_instance != null)) {
                                        _retVal.ObsoletionTimeXml = _instance;
                                    }
                                }
                                else {
                                    if ("obsoletionTimeModel".Equals(r.Value)) {
                                        r.Read();
                                        System.Nullable<System.DateTimeOffset> _instance = ((System.Nullable<System.DateTimeOffset>)(context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<System.DateTimeOffset>), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("obsoletionTimeModel", context.JsonContext, _retVal, context))));
                                        if ((_instance != null)) {
                                            _retVal.ObsoletionTime = _instance;
                                        }
                                    }
                                    else {
                                        if ("creationTime".Equals(r.Value)) {
                                            r.Read();
                                            string _instance = ((string)(context.JsonContext.ReadElementUtil(r, typeof(string), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("creationTime", context.JsonContext, _retVal, context))));
                                            if ((_instance != null)) {
                                                _retVal.CreationTimeXml = _instance;
                                            }
                                        }
                                        else {
                                            if ("creationTimeModel".Equals(r.Value)) {
                                                r.Read();
                                                System.DateTimeOffset _instance = ((System.DateTimeOffset)(context.JsonContext.ReadElementUtil(r, typeof(System.DateTimeOffset), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("creationTimeModel", context.JsonContext, _retVal, context))));
                                                if ((_instance != null)) {
                                                    _retVal.CreationTime = _instance;
                                                }
                                            }
                                            else {
                                                if ("updatedBy".Equals(r.Value)) {
                                                    r.Read();
                                                    System.Nullable<System.Guid> _instance = ((System.Nullable<System.Guid>)(context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<System.Guid>), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("updatedBy", context.JsonContext, _retVal, context))));
                                                    if ((_instance != null)) {
                                                        _retVal.UpdatedByKey = _instance;
                                                    }
                                                }
                                                else {
                                                    if ("updatedTime".Equals(r.Value)) {
                                                        r.Read();
                                                        string _instance = ((string)(context.JsonContext.ReadElementUtil(r, typeof(string), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("updatedTime", context.JsonContext, _retVal, context))));
                                                        if ((_instance != null)) {
                                                            _retVal.UpdatedTimeXml = _instance;
                                                        }
                                                    }
                                                    else {
                                                        if ("description".Equals(r.Value)) {
                                                            r.Read();
                                                            string _instance = ((string)(context.JsonContext.ReadElementUtil(r, typeof(string), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("description", context.JsonContext, _retVal, context))));
                                                            if ((_instance != null)) {
                                                                _retVal.Description = _instance;
                                                            }
                                                        }
                                                        else {
                                                            if ("version".Equals(r.Value)) {
                                                                r.Read();
                                                                string _instance = ((string)(context.JsonContext.ReadElementUtil(r, typeof(string), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("version", context.JsonContext, _retVal, context))));
                                                                if ((_instance != null)) {
                                                                    _retVal.VersionText = _instance;
                                                                }
                                                            }
                                                            else {
                                                                if ("url".Equals(r.Value)) {
                                                                    r.Read();
                                                                    string _instance = ((string)(context.JsonContext.ReadElementUtil(r, typeof(string), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("url", context.JsonContext, _retVal, context))));
                                                                    if ((_instance != null)) {
                                                                        _retVal.Url = _instance;
                                                                    }
                                                                }
                                                                else {
                                                                    if ("obsoletionReason".Equals(r.Value)) {
                                                                        r.Read();
                                                                        string _instance = ((string)(context.JsonContext.ReadElementUtil(r, typeof(string), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("obsoletionReason", context.JsonContext, _retVal, context))));
                                                                        if ((_instance != null)) {
                                                                            _retVal.ObsoletionReason = _instance;
                                                                        }
                                                                    }
                                                                    else {
                                                                        if ("authority".Equals(r.Value)) {
                                                                            r.Read();
                                                                            string _instance = ((string)(context.JsonContext.ReadElementUtil(r, typeof(string), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("authority", context.JsonContext, _retVal, context))));
                                                                            if ((_instance != null)) {
                                                                                _retVal.Authority = _instance;
                                                                            }
                                                                        }
                                                                        else {
                                                                            if ("oid".Equals(r.Value)) {
                                                                                r.Read();
                                                                                string _instance = ((string)(context.JsonContext.ReadElementUtil(r, typeof(string), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("oid", context.JsonContext, _retVal, context))));
                                                                                if ((_instance != null)) {
                                                                                    _retVal.Oid = _instance;
                                                                                }
                                                                            }
                                                                            else {
                                                                                if ("name".Equals(r.Value)) {
                                                                                    r.Read();
                                                                                    string _instance = ((string)(context.JsonContext.ReadElementUtil(r, typeof(string), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("name", context.JsonContext, _retVal, context))));
                                                                                    if ((_instance != null)) {
                                                                                        _retVal.Name = _instance;
                                                                                    }
                                                                                }
                                                                                else {
                                                                                    if ("$type".Equals(r.Value)) {
                                                                                        System.Type _type = this.m_binder.BindToType("OpenIZ.Core.Model, Version=0.6.14.21496, Culture=neutral, PublicKeyToken=null", r.ReadAsString());
                                                                                        if ((_type != typeof(OpenIZ.Core.Model.DataTypes.CodeSystem))) {
                                                                                            OpenIZ.Core.Model.DataTypes.CodeSystem _nretVal = ((OpenIZ.Core.Model.DataTypes.CodeSystem)(context.JsonContext.GetFormatter(_type).Deserialize(r, _type, context)));
                                                                                            _nretVal.CopyObjectData(_retVal);
                                                                                            return _nretVal;
                                                                                        }
                                                                                    }
                                                                                    else {
                                                                                        r.Skip();
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
                else {
                    if (((r.TokenType == Newtonsoft.Json.JsonToken.EndObject) 
                                && (r.Depth == _depth))) {
                        return _retVal;
                    }
                    else {
                        throw new Newtonsoft.Json.JsonSerializationException("JSON in invalid state");
                    }
                }
            }
            return _retVal;
        }
        
        public object FromSimpleValue(object o) {
            return null;
        }
        
        public object GetSimpleValue(object o) {
            return null;
        }
    }
    
    public class ConceptViewModelSerializer : OpenIZ.Core.Applets.ViewModel.Json.IJsonViewModelTypeFormatter {
        
        private OpenIZ.Core.Model.Serialization.ModelSerializationBinder m_binder = new OpenIZ.Core.Model.Serialization.ModelSerializationBinder();
        
        private OpenIZ.Core.Diagnostics.Tracer m_tracer = OpenIZ.Core.Diagnostics.Tracer.GetTracer(typeof(ConceptViewModelSerializer));
        
        public System.Type HandlesType {
            get {
                return typeof(OpenIZ.Core.Model.DataTypes.Concept);
            }
        }
        
        public void Serialize(Newtonsoft.Json.JsonWriter w, OpenIZ.Core.Model.IdentifiedData o, OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext context) {
            if ((o == null)) {
                throw new System.ArgumentNullException("o");
            }
            OpenIZ.Core.Model.DataTypes.Concept _strong = null;
            OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext _jsonContext = null;
            bool _loaded = false;
            try {
                _strong = ((OpenIZ.Core.Model.DataTypes.Concept)(o));
            }
            catch (System.Exception e) {
                this.m_tracer.TraceError(string.Format("Casting Error: {0}", e));
                throw new System.ArgumentException(string.Format("Invalid type {0} provided, expected {1}", o.GetType(), typeof(OpenIZ.Core.Model.DataTypes.Concept)));
            }
            if (context.ShouldSerialize("isReadonly")) {
                if ((_strong.IsSystemConcept == null)) {
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "isReadonly", _strong.IsSystemConcept, context);
                }
            }
            if (context.ShouldSerialize("mnemonic")) {
                if ((_strong.Mnemonic == null)) {
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "mnemonic", _strong.Mnemonic, context);
                }
            }
            if (context.ShouldSerialize("statusConcept")) {
                if ((_strong.StatusConceptKey == null)) {
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "statusConcept", _strong.StatusConceptKey, context);
                }
            }
            if (context.ShouldSerialize("statusConceptModel")) {
                if ((_strong.StatusConcept == null)) {
                    if ((_strong.Key.HasValue && context.ShouldForceLoad("statusConceptModel", _strong.Key.Value))) {
                        OpenIZ.Core.Model.DataTypes.Concept _delay = null;
                        _delay = context.JsonContext.LoadRelated<OpenIZ.Core.Model.DataTypes.Concept>(_strong.StatusConceptKey);
                        _strong.StatusConcept = _delay;
                        if ((_delay != null)) {
                            _loaded = true;
                            context.JsonContext.WritePropertyUtil(w, "statusConceptModel", _strong.StatusConcept, context);
                        }
                    }
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "statusConceptModel", _strong.StatusConcept, context);
                }
            }
            if (context.ShouldSerialize("relationship")) {
                if (((_strong.Relationship == null) 
                            || (_strong.Relationship.Count == 0))) {
                    if ((_strong.Key.HasValue && context.ShouldForceLoad("relationship", _strong.Key.Value))) {
                        System.Collections.Generic.List<OpenIZ.Core.Model.DataTypes.ConceptRelationship> _delay = null;
                        _delay = new System.Collections.Generic.List<OpenIZ.Core.Model.DataTypes.ConceptRelationship>(context.JsonContext.LoadCollection<OpenIZ.Core.Model.DataTypes.ConceptRelationship>(_strong.Key.Value));
                        _strong.Relationship = _delay;
                        if ((_delay.Count > 0)) {
                            _loaded = true;
                            context.JsonContext.WritePropertyUtil(w, "relationship", _strong.Relationship, context);
                        }
                    }
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "relationship", _strong.Relationship, context);
                }
            }
            if (context.ShouldSerialize("conceptClass")) {
                if ((_strong.ClassKey == null)) {
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "conceptClass", _strong.ClassKey, context);
                }
            }
            if (context.ShouldSerialize("conceptClassModel")) {
                if ((_strong.Class == null)) {
                    if ((_strong.Key.HasValue && context.ShouldForceLoad("conceptClassModel", _strong.Key.Value))) {
                        OpenIZ.Core.Model.DataTypes.ConceptClass _delay = null;
                        _delay = context.JsonContext.LoadRelated<OpenIZ.Core.Model.DataTypes.ConceptClass>(_strong.ClassKey);
                        _strong.Class = _delay;
                        if ((_delay != null)) {
                            _loaded = true;
                            context.JsonContext.WritePropertyUtil(w, "conceptClassModel", _strong.Class, context);
                        }
                    }
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "conceptClassModel", _strong.Class, context);
                }
            }
            if (context.ShouldSerialize("referenceTerm")) {
                if (((_strong.ReferenceTerms == null) 
                            || (_strong.ReferenceTerms.Count == 0))) {
                    if ((_strong.Key.HasValue && context.ShouldForceLoad("referenceTerm", _strong.Key.Value))) {
                        System.Collections.Generic.List<OpenIZ.Core.Model.DataTypes.ConceptReferenceTerm> _delay = null;
                        _delay = new System.Collections.Generic.List<OpenIZ.Core.Model.DataTypes.ConceptReferenceTerm>(context.JsonContext.LoadCollection<OpenIZ.Core.Model.DataTypes.ConceptReferenceTerm>(_strong.Key.Value));
                        _strong.ReferenceTerms = _delay;
                        if ((_delay.Count > 0)) {
                            _loaded = true;
                            context.JsonContext.WritePropertyUtil(w, "referenceTerm", _strong.ReferenceTerms, context);
                        }
                    }
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "referenceTerm", _strong.ReferenceTerms, context);
                }
            }
            if (context.ShouldSerialize("name")) {
                if (((_strong.ConceptNames == null) 
                            || (_strong.ConceptNames.Count == 0))) {
                    if ((_strong.Key.HasValue && context.ShouldForceLoad("name", _strong.Key.Value))) {
                        System.Collections.Generic.List<OpenIZ.Core.Model.DataTypes.ConceptName> _delay = null;
                        _delay = new System.Collections.Generic.List<OpenIZ.Core.Model.DataTypes.ConceptName>(context.JsonContext.LoadCollection<OpenIZ.Core.Model.DataTypes.ConceptName>(_strong.Key.Value));
                        _strong.ConceptNames = _delay;
                        if ((_delay.Count > 0)) {
                            _loaded = true;
                            context.JsonContext.WritePropertyUtil(w, "name", _strong.ConceptNames, context);
                        }
                    }
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "name", _strong.ConceptNames, context);
                }
            }
            if (context.ShouldSerialize("conceptSet")) {
                if (((_strong.ConceptSetsXml == null) 
                            || (_strong.ConceptSetsXml.Count == 0))) {
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "conceptSet", _strong.ConceptSetsXml, context);
                }
            }
            if (context.ShouldSerialize("etag")) {
                if ((_strong.Tag == null)) {
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "etag", _strong.Tag, context);
                }
            }
            if (context.ShouldSerialize("previousVersion")) {
                if ((_strong.PreviousVersionKey == null)) {
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "previousVersion", _strong.PreviousVersionKey, context);
                }
            }
            if (context.ShouldSerialize("version")) {
                if ((_strong.VersionKey == null)) {
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "version", _strong.VersionKey, context);
                }
            }
            if (context.ShouldSerialize("sequence")) {
                if ((_strong.VersionSequence == null)) {
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "sequence", _strong.VersionSequence, context);
                }
            }
            if (context.ShouldSerialize("creationTimeModel")) {
                if ((_strong.CreationTime == null)) {
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "creationTimeModel", _strong.CreationTime, context);
                }
            }
            if (context.ShouldSerialize("creationTime")) {
                if ((_strong.CreationTimeXml == null)) {
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "creationTime", _strong.CreationTimeXml, context);
                }
            }
            if (context.ShouldSerialize("obsoletionTimeModel")) {
                if ((_strong.ObsoletionTime == null)) {
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "obsoletionTimeModel", _strong.ObsoletionTime, context);
                }
            }
            if (context.ShouldSerialize("obsoletionTime")) {
                if ((_strong.ObsoletionTimeXml == null)) {
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "obsoletionTime", _strong.ObsoletionTimeXml, context);
                }
            }
            if (context.ShouldSerialize("createdBy")) {
                if ((_strong.CreatedByKey == null)) {
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "createdBy", _strong.CreatedByKey, context);
                }
            }
            if (context.ShouldSerialize("obsoletedBy")) {
                if ((_strong.ObsoletedByKey == null)) {
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "obsoletedBy", _strong.ObsoletedByKey, context);
                }
            }
            if (context.ShouldSerialize("id")) {
                if ((_strong.Key == null)) {
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "id", _strong.Key, context);
                }
            }
            if (((_loaded && _strong.Key.HasValue) 
                        && _strong.VersionKey.HasValue)) {
                ((OpenIZ.Core.Services.IDataCachingService)(OpenIZ.Core.ApplicationServiceContext.Current.GetService(typeof(OpenIZ.Core.Services.IDataCachingService)))).Add(_strong);
            }
        }
        
        public object Deserialize(Newtonsoft.Json.JsonReader r, System.Type asType, OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext context) {
            OpenIZ.Core.Model.DataTypes.Concept _retVal = new OpenIZ.Core.Model.DataTypes.Concept();
            int _depth = r.Depth;
            if ((r.TokenType != Newtonsoft.Json.JsonToken.StartObject)) {
                _depth = (_depth - 1);
            }
            for (
            ; r.Read(); 
            ) {
                if ((r.TokenType == Newtonsoft.Json.JsonToken.PropertyName)) {
                    if ("id".Equals(r.Value)) {
                        r.Read();
                        System.Nullable<System.Guid> _instance = ((System.Nullable<System.Guid>)(context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<System.Guid>), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("id", context.JsonContext, _retVal, context))));
                        if ((_instance != null)) {
                            _retVal.Key = _instance;
                        }
                    }
                    else {
                        if ("obsoletedBy".Equals(r.Value)) {
                            r.Read();
                            System.Nullable<System.Guid> _instance = ((System.Nullable<System.Guid>)(context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<System.Guid>), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("obsoletedBy", context.JsonContext, _retVal, context))));
                            if ((_instance != null)) {
                                _retVal.ObsoletedByKey = _instance;
                            }
                        }
                        else {
                            if ("createdBy".Equals(r.Value)) {
                                r.Read();
                                System.Nullable<System.Guid> _instance = ((System.Nullable<System.Guid>)(context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<System.Guid>), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("createdBy", context.JsonContext, _retVal, context))));
                                if ((_instance != null)) {
                                    _retVal.CreatedByKey = _instance;
                                }
                            }
                            else {
                                if ("obsoletionTime".Equals(r.Value)) {
                                    r.Read();
                                    string _instance = ((string)(context.JsonContext.ReadElementUtil(r, typeof(string), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("obsoletionTime", context.JsonContext, _retVal, context))));
                                    if ((_instance != null)) {
                                        _retVal.ObsoletionTimeXml = _instance;
                                    }
                                }
                                else {
                                    if ("obsoletionTimeModel".Equals(r.Value)) {
                                        r.Read();
                                        System.Nullable<System.DateTimeOffset> _instance = ((System.Nullable<System.DateTimeOffset>)(context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<System.DateTimeOffset>), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("obsoletionTimeModel", context.JsonContext, _retVal, context))));
                                        if ((_instance != null)) {
                                            _retVal.ObsoletionTime = _instance;
                                        }
                                    }
                                    else {
                                        if ("creationTime".Equals(r.Value)) {
                                            r.Read();
                                            string _instance = ((string)(context.JsonContext.ReadElementUtil(r, typeof(string), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("creationTime", context.JsonContext, _retVal, context))));
                                            if ((_instance != null)) {
                                                _retVal.CreationTimeXml = _instance;
                                            }
                                        }
                                        else {
                                            if ("creationTimeModel".Equals(r.Value)) {
                                                r.Read();
                                                System.DateTimeOffset _instance = ((System.DateTimeOffset)(context.JsonContext.ReadElementUtil(r, typeof(System.DateTimeOffset), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("creationTimeModel", context.JsonContext, _retVal, context))));
                                                if ((_instance != null)) {
                                                    _retVal.CreationTime = _instance;
                                                }
                                            }
                                            else {
                                                if ("sequence".Equals(r.Value)) {
                                                    r.Read();
                                                    System.Nullable<decimal> _instance = ((System.Nullable<decimal>)(context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<decimal>), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("sequence", context.JsonContext, _retVal, context))));
                                                    if ((_instance != null)) {
                                                        _retVal.VersionSequence = _instance;
                                                    }
                                                }
                                                else {
                                                    if ("version".Equals(r.Value)) {
                                                        r.Read();
                                                        System.Nullable<System.Guid> _instance = ((System.Nullable<System.Guid>)(context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<System.Guid>), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("version", context.JsonContext, _retVal, context))));
                                                        if ((_instance != null)) {
                                                            _retVal.VersionKey = _instance;
                                                        }
                                                    }
                                                    else {
                                                        if ("previousVersion".Equals(r.Value)) {
                                                            r.Read();
                                                            System.Nullable<System.Guid> _instance = ((System.Nullable<System.Guid>)(context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<System.Guid>), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("previousVersion", context.JsonContext, _retVal, context))));
                                                            if ((_instance != null)) {
                                                                _retVal.PreviousVersionKey = _instance;
                                                            }
                                                        }
                                                        else {
                                                            if ("conceptSet".Equals(r.Value)) {
                                                                r.Read();
                                                                System.Collections.Generic.List<System.Guid> _instance = ((System.Collections.Generic.List<System.Guid>)(context.JsonContext.ReadElementUtil(r, typeof(System.Collections.Generic.List<System.Guid>), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("conceptSet", context.JsonContext, _retVal, context))));
                                                                if ((_instance != null)) {
                                                                    _retVal.ConceptSetsXml = _instance;
                                                                }
                                                            }
                                                            else {
                                                                if ("name".Equals(r.Value)) {
                                                                    r.Read();
                                                                    System.Collections.Generic.List<OpenIZ.Core.Model.DataTypes.ConceptName> _instance = ((System.Collections.Generic.List<OpenIZ.Core.Model.DataTypes.ConceptName>)(context.JsonContext.ReadElementUtil(r, typeof(System.Collections.Generic.List<OpenIZ.Core.Model.DataTypes.ConceptName>), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("name", context.JsonContext, _retVal, context))));
                                                                    if ((_instance != null)) {
                                                                        _retVal.ConceptNames = _instance;
                                                                    }
                                                                }
                                                                else {
                                                                    if ("referenceTerm".Equals(r.Value)) {
                                                                        r.Read();
                                                                        System.Collections.Generic.List<OpenIZ.Core.Model.DataTypes.ConceptReferenceTerm> _instance = ((System.Collections.Generic.List<OpenIZ.Core.Model.DataTypes.ConceptReferenceTerm>)(context.JsonContext.ReadElementUtil(r, typeof(System.Collections.Generic.List<OpenIZ.Core.Model.DataTypes.ConceptReferenceTerm>), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("referenceTerm", context.JsonContext, _retVal, context))));
                                                                        if ((_instance != null)) {
                                                                            _retVal.ReferenceTerms = _instance;
                                                                        }
                                                                    }
                                                                    else {
                                                                        if ("conceptClassModel".Equals(r.Value)) {
                                                                            r.Read();
                                                                            OpenIZ.Core.Model.DataTypes.ConceptClass _instance = ((OpenIZ.Core.Model.DataTypes.ConceptClass)(context.JsonContext.ReadElementUtil(r, typeof(OpenIZ.Core.Model.DataTypes.ConceptClass), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("conceptClassModel", context.JsonContext, _retVal, context))));
                                                                            if ((_instance != null)) {
                                                                                _retVal.Class = _instance;
                                                                            }
                                                                        }
                                                                        else {
                                                                            if ("conceptClass".Equals(r.Value)) {
                                                                                r.Read();
                                                                                System.Nullable<System.Guid> _instance = ((System.Nullable<System.Guid>)(context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<System.Guid>), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("conceptClass", context.JsonContext, _retVal, context))));
                                                                                if ((_instance != null)) {
                                                                                    _retVal.ClassKey = _instance;
                                                                                }
                                                                            }
                                                                            else {
                                                                                if ("relationship".Equals(r.Value)) {
                                                                                    r.Read();
                                                                                    System.Collections.Generic.List<OpenIZ.Core.Model.DataTypes.ConceptRelationship> _instance = ((System.Collections.Generic.List<OpenIZ.Core.Model.DataTypes.ConceptRelationship>)(context.JsonContext.ReadElementUtil(r, typeof(System.Collections.Generic.List<OpenIZ.Core.Model.DataTypes.ConceptRelationship>), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("relationship", context.JsonContext, _retVal, context))));
                                                                                    if ((_instance != null)) {
                                                                                        _retVal.Relationship = _instance;
                                                                                    }
                                                                                }
                                                                                else {
                                                                                    if ("statusConceptModel".Equals(r.Value)) {
                                                                                        r.Read();
                                                                                        OpenIZ.Core.Model.DataTypes.Concept _instance = ((OpenIZ.Core.Model.DataTypes.Concept)(context.JsonContext.ReadElementUtil(r, typeof(OpenIZ.Core.Model.DataTypes.Concept), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("statusConceptModel", context.JsonContext, _retVal, context))));
                                                                                        if ((_instance != null)) {
                                                                                            _retVal.StatusConcept = _instance;
                                                                                        }
                                                                                    }
                                                                                    else {
                                                                                        if ("statusConcept".Equals(r.Value)) {
                                                                                            r.Read();
                                                                                            System.Nullable<System.Guid> _instance = ((System.Nullable<System.Guid>)(context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<System.Guid>), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("statusConcept", context.JsonContext, _retVal, context))));
                                                                                            if ((_instance != null)) {
                                                                                                _retVal.StatusConceptKey = _instance;
                                                                                            }
                                                                                        }
                                                                                        else {
                                                                                            if ("mnemonic".Equals(r.Value)) {
                                                                                                r.Read();
                                                                                                string _instance = ((string)(context.JsonContext.ReadElementUtil(r, typeof(string), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("mnemonic", context.JsonContext, _retVal, context))));
                                                                                                if ((_instance != null)) {
                                                                                                    _retVal.Mnemonic = _instance;
                                                                                                }
                                                                                            }
                                                                                            else {
                                                                                                if ("isReadonly".Equals(r.Value)) {
                                                                                                    r.Read();
                                                                                                    bool _instance = ((bool)(context.JsonContext.ReadElementUtil(r, typeof(bool), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("isReadonly", context.JsonContext, _retVal, context))));
                                                                                                    if ((_instance != null)) {
                                                                                                        _retVal.IsSystemConcept = _instance;
                                                                                                    }
                                                                                                }
                                                                                                else {
                                                                                                    if ("$type".Equals(r.Value)) {
                                                                                                        System.Type _type = this.m_binder.BindToType("OpenIZ.Core.Model, Version=0.6.14.21496, Culture=neutral, PublicKeyToken=null", r.ReadAsString());
                                                                                                        if ((_type != typeof(OpenIZ.Core.Model.DataTypes.Concept))) {
                                                                                                            OpenIZ.Core.Model.DataTypes.Concept _nretVal = ((OpenIZ.Core.Model.DataTypes.Concept)(context.JsonContext.GetFormatter(_type).Deserialize(r, _type, context)));
                                                                                                            _nretVal.CopyObjectData(_retVal);
                                                                                                            return _nretVal;
                                                                                                        }
                                                                                                    }
                                                                                                    else {
                                                                                                        r.Skip();
                                                                                                    }
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
                else {
                    if (((r.TokenType == Newtonsoft.Json.JsonToken.EndObject) 
                                && (r.Depth == _depth))) {
                        return _retVal;
                    }
                    else {
                        throw new Newtonsoft.Json.JsonSerializationException("JSON in invalid state");
                    }
                }
            }
            return _retVal;
        }
        
        public object FromSimpleValue(object o) {
            return null;
        }
        
        public object GetSimpleValue(object o) {
            return null;
        }
    }
    
    public class ConceptClassViewModelSerializer : OpenIZ.Core.Applets.ViewModel.Json.IJsonViewModelTypeFormatter {
        
        private OpenIZ.Core.Model.Serialization.ModelSerializationBinder m_binder = new OpenIZ.Core.Model.Serialization.ModelSerializationBinder();
        
        private OpenIZ.Core.Diagnostics.Tracer m_tracer = OpenIZ.Core.Diagnostics.Tracer.GetTracer(typeof(ConceptClassViewModelSerializer));
        
        public System.Type HandlesType {
            get {
                return typeof(OpenIZ.Core.Model.DataTypes.ConceptClass);
            }
        }
        
        public void Serialize(Newtonsoft.Json.JsonWriter w, OpenIZ.Core.Model.IdentifiedData o, OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext context) {
            if ((o == null)) {
                throw new System.ArgumentNullException("o");
            }
            OpenIZ.Core.Model.DataTypes.ConceptClass _strong = null;
            OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext _jsonContext = null;
            bool _loaded = false;
            try {
                _strong = ((OpenIZ.Core.Model.DataTypes.ConceptClass)(o));
            }
            catch (System.Exception e) {
                this.m_tracer.TraceError(string.Format("Casting Error: {0}", e));
                throw new System.ArgumentException(string.Format("Invalid type {0} provided, expected {1}", o.GetType(), typeof(OpenIZ.Core.Model.DataTypes.ConceptClass)));
            }
            if (context.ShouldSerialize("name")) {
                if ((_strong.Name == null)) {
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "name", _strong.Name, context);
                }
            }
            if (context.ShouldSerialize("mnemonic")) {
                if ((_strong.Mnemonic == null)) {
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "mnemonic", _strong.Mnemonic, context);
                }
            }
            if (context.ShouldSerialize("updatedTime")) {
                if ((_strong.UpdatedTimeXml == null)) {
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "updatedTime", _strong.UpdatedTimeXml, context);
                }
            }
            if (context.ShouldSerialize("updatedBy")) {
                if ((_strong.UpdatedByKey == null)) {
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "updatedBy", _strong.UpdatedByKey, context);
                }
            }
            if (context.ShouldSerialize("creationTimeModel")) {
                if ((_strong.CreationTime == null)) {
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "creationTimeModel", _strong.CreationTime, context);
                }
            }
            if (context.ShouldSerialize("creationTime")) {
                if ((_strong.CreationTimeXml == null)) {
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "creationTime", _strong.CreationTimeXml, context);
                }
            }
            if (context.ShouldSerialize("obsoletionTimeModel")) {
                if ((_strong.ObsoletionTime == null)) {
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "obsoletionTimeModel", _strong.ObsoletionTime, context);
                }
            }
            if (context.ShouldSerialize("obsoletionTime")) {
                if ((_strong.ObsoletionTimeXml == null)) {
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "obsoletionTime", _strong.ObsoletionTimeXml, context);
                }
            }
            if (context.ShouldSerialize("createdBy")) {
                if ((_strong.CreatedByKey == null)) {
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "createdBy", _strong.CreatedByKey, context);
                }
            }
            if (context.ShouldSerialize("obsoletedBy")) {
                if ((_strong.ObsoletedByKey == null)) {
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "obsoletedBy", _strong.ObsoletedByKey, context);
                }
            }
            if (context.ShouldSerialize("id")) {
                if ((_strong.Key == null)) {
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "id", _strong.Key, context);
                }
            }
            if (context.ShouldSerialize("etag")) {
                if ((_strong.Tag == null)) {
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "etag", _strong.Tag, context);
                }
            }
            if ((_loaded && _strong.Key.HasValue)) {
                ((OpenIZ.Core.Services.IDataCachingService)(OpenIZ.Core.ApplicationServiceContext.Current.GetService(typeof(OpenIZ.Core.Services.IDataCachingService)))).Add(_strong);
            }
        }
        
        public object Deserialize(Newtonsoft.Json.JsonReader r, System.Type asType, OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext context) {
            OpenIZ.Core.Model.DataTypes.ConceptClass _retVal = new OpenIZ.Core.Model.DataTypes.ConceptClass();
            int _depth = r.Depth;
            if ((r.TokenType != Newtonsoft.Json.JsonToken.StartObject)) {
                _depth = (_depth - 1);
            }
            for (
            ; r.Read(); 
            ) {
                if ((r.TokenType == Newtonsoft.Json.JsonToken.PropertyName)) {
                    if ("id".Equals(r.Value)) {
                        r.Read();
                        System.Nullable<System.Guid> _instance = ((System.Nullable<System.Guid>)(context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<System.Guid>), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("id", context.JsonContext, _retVal, context))));
                        if ((_instance != null)) {
                            _retVal.Key = _instance;
                        }
                    }
                    else {
                        if ("obsoletedBy".Equals(r.Value)) {
                            r.Read();
                            System.Nullable<System.Guid> _instance = ((System.Nullable<System.Guid>)(context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<System.Guid>), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("obsoletedBy", context.JsonContext, _retVal, context))));
                            if ((_instance != null)) {
                                _retVal.ObsoletedByKey = _instance;
                            }
                        }
                        else {
                            if ("createdBy".Equals(r.Value)) {
                                r.Read();
                                System.Nullable<System.Guid> _instance = ((System.Nullable<System.Guid>)(context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<System.Guid>), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("createdBy", context.JsonContext, _retVal, context))));
                                if ((_instance != null)) {
                                    _retVal.CreatedByKey = _instance;
                                }
                            }
                            else {
                                if ("obsoletionTime".Equals(r.Value)) {
                                    r.Read();
                                    string _instance = ((string)(context.JsonContext.ReadElementUtil(r, typeof(string), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("obsoletionTime", context.JsonContext, _retVal, context))));
                                    if ((_instance != null)) {
                                        _retVal.ObsoletionTimeXml = _instance;
                                    }
                                }
                                else {
                                    if ("obsoletionTimeModel".Equals(r.Value)) {
                                        r.Read();
                                        System.Nullable<System.DateTimeOffset> _instance = ((System.Nullable<System.DateTimeOffset>)(context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<System.DateTimeOffset>), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("obsoletionTimeModel", context.JsonContext, _retVal, context))));
                                        if ((_instance != null)) {
                                            _retVal.ObsoletionTime = _instance;
                                        }
                                    }
                                    else {
                                        if ("creationTime".Equals(r.Value)) {
                                            r.Read();
                                            string _instance = ((string)(context.JsonContext.ReadElementUtil(r, typeof(string), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("creationTime", context.JsonContext, _retVal, context))));
                                            if ((_instance != null)) {
                                                _retVal.CreationTimeXml = _instance;
                                            }
                                        }
                                        else {
                                            if ("creationTimeModel".Equals(r.Value)) {
                                                r.Read();
                                                System.DateTimeOffset _instance = ((System.DateTimeOffset)(context.JsonContext.ReadElementUtil(r, typeof(System.DateTimeOffset), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("creationTimeModel", context.JsonContext, _retVal, context))));
                                                if ((_instance != null)) {
                                                    _retVal.CreationTime = _instance;
                                                }
                                            }
                                            else {
                                                if ("updatedBy".Equals(r.Value)) {
                                                    r.Read();
                                                    System.Nullable<System.Guid> _instance = ((System.Nullable<System.Guid>)(context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<System.Guid>), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("updatedBy", context.JsonContext, _retVal, context))));
                                                    if ((_instance != null)) {
                                                        _retVal.UpdatedByKey = _instance;
                                                    }
                                                }
                                                else {
                                                    if ("updatedTime".Equals(r.Value)) {
                                                        r.Read();
                                                        string _instance = ((string)(context.JsonContext.ReadElementUtil(r, typeof(string), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("updatedTime", context.JsonContext, _retVal, context))));
                                                        if ((_instance != null)) {
                                                            _retVal.UpdatedTimeXml = _instance;
                                                        }
                                                    }
                                                    else {
                                                        if ("mnemonic".Equals(r.Value)) {
                                                            r.Read();
                                                            string _instance = ((string)(context.JsonContext.ReadElementUtil(r, typeof(string), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("mnemonic", context.JsonContext, _retVal, context))));
                                                            if ((_instance != null)) {
                                                                _retVal.Mnemonic = _instance;
                                                            }
                                                        }
                                                        else {
                                                            if ("name".Equals(r.Value)) {
                                                                r.Read();
                                                                string _instance = ((string)(context.JsonContext.ReadElementUtil(r, typeof(string), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("name", context.JsonContext, _retVal, context))));
                                                                if ((_instance != null)) {
                                                                    _retVal.Name = _instance;
                                                                }
                                                            }
                                                            else {
                                                                if ("$type".Equals(r.Value)) {
                                                                    System.Type _type = this.m_binder.BindToType("OpenIZ.Core.Model, Version=0.6.14.21496, Culture=neutral, PublicKeyToken=null", r.ReadAsString());
                                                                    if ((_type != typeof(OpenIZ.Core.Model.DataTypes.ConceptClass))) {
                                                                        OpenIZ.Core.Model.DataTypes.ConceptClass _nretVal = ((OpenIZ.Core.Model.DataTypes.ConceptClass)(context.JsonContext.GetFormatter(_type).Deserialize(r, _type, context)));
                                                                        _nretVal.CopyObjectData(_retVal);
                                                                        return _nretVal;
                                                                    }
                                                                }
                                                                else {
                                                                    r.Skip();
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
                else {
                    if (((r.TokenType == Newtonsoft.Json.JsonToken.EndObject) 
                                && (r.Depth == _depth))) {
                        return _retVal;
                    }
                    else {
                        throw new Newtonsoft.Json.JsonSerializationException("JSON in invalid state");
                    }
                }
            }
            return _retVal;
        }
        
        public object FromSimpleValue(object o) {
            return null;
        }
        
        public object GetSimpleValue(object o) {
            return null;
        }
    }
    
    public class ConceptNameViewModelSerializer : OpenIZ.Core.Applets.ViewModel.Json.IJsonViewModelTypeFormatter {
        
        private OpenIZ.Core.Model.Serialization.ModelSerializationBinder m_binder = new OpenIZ.Core.Model.Serialization.ModelSerializationBinder();
        
        private OpenIZ.Core.Diagnostics.Tracer m_tracer = OpenIZ.Core.Diagnostics.Tracer.GetTracer(typeof(ConceptNameViewModelSerializer));
        
        public System.Type HandlesType {
            get {
                return typeof(OpenIZ.Core.Model.DataTypes.ConceptName);
            }
        }
        
        public void Serialize(Newtonsoft.Json.JsonWriter w, OpenIZ.Core.Model.IdentifiedData o, OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext context) {
            if ((o == null)) {
                throw new System.ArgumentNullException("o");
            }
            OpenIZ.Core.Model.DataTypes.ConceptName _strong = null;
            OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext _jsonContext = null;
            bool _loaded = false;
            try {
                _strong = ((OpenIZ.Core.Model.DataTypes.ConceptName)(o));
            }
            catch (System.Exception e) {
                this.m_tracer.TraceError(string.Format("Casting Error: {0}", e));
                throw new System.ArgumentException(string.Format("Invalid type {0} provided, expected {1}", o.GetType(), typeof(OpenIZ.Core.Model.DataTypes.ConceptName)));
            }
            if (context.ShouldSerialize("language")) {
                if ((_strong.Language == null)) {
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "language", _strong.Language, context);
                }
            }
            if (context.ShouldSerialize("value")) {
                if ((_strong.Name == null)) {
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "value", _strong.Name, context);
                }
            }
            if (context.ShouldSerialize("phoneticCode")) {
                if ((_strong.PhoneticCode == null)) {
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "phoneticCode", _strong.PhoneticCode, context);
                }
            }
            if (context.ShouldSerialize("phoneticAlgorithm")) {
                if ((_strong.PhoneticAlgorithmKey == null)) {
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "phoneticAlgorithm", _strong.PhoneticAlgorithmKey, context);
                }
            }
            if (context.ShouldSerialize("phoneticAlgorithmModel")) {
                if ((_strong.PhoneticAlgorithm == null)) {
                    if ((_strong.Key.HasValue && context.ShouldForceLoad("phoneticAlgorithmModel", _strong.Key.Value))) {
                        OpenIZ.Core.Model.DataTypes.PhoneticAlgorithm _delay = null;
                        _delay = context.JsonContext.LoadRelated<OpenIZ.Core.Model.DataTypes.PhoneticAlgorithm>(_strong.PhoneticAlgorithmKey);
                        _strong.PhoneticAlgorithm = _delay;
                        if ((_delay != null)) {
                            _loaded = true;
                            context.JsonContext.WritePropertyUtil(w, "phoneticAlgorithmModel", _strong.PhoneticAlgorithm, context);
                        }
                    }
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "phoneticAlgorithmModel", _strong.PhoneticAlgorithm, context);
                }
            }
            if (context.ShouldSerialize("effectiveVersionSequence")) {
                if ((_strong.EffectiveVersionSequenceId == null)) {
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "effectiveVersionSequence", _strong.EffectiveVersionSequenceId, context);
                }
            }
            if (context.ShouldSerialize("obsoleteVersionSequence")) {
                if ((_strong.ObsoleteVersionSequenceId == null)) {
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "obsoleteVersionSequence", _strong.ObsoleteVersionSequenceId, context);
                }
            }
            if (context.ShouldSerialize("modifiedOn")) {
                if ((_strong.ModifiedOn == null)) {
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "modifiedOn", _strong.ModifiedOn, context);
                }
            }
            if (context.ShouldSerialize("source")) {
                if ((_strong.SourceEntityKey == null)) {
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "source", _strong.SourceEntityKey, context);
                }
            }
            if (context.ShouldSerialize("id")) {
                if ((_strong.Key == null)) {
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "id", _strong.Key, context);
                }
            }
            if (context.ShouldSerialize("etag")) {
                if ((_strong.Tag == null)) {
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "etag", _strong.Tag, context);
                }
            }
            if ((_loaded && _strong.Key.HasValue)) {
                ((OpenIZ.Core.Services.IDataCachingService)(OpenIZ.Core.ApplicationServiceContext.Current.GetService(typeof(OpenIZ.Core.Services.IDataCachingService)))).Add(_strong);
            }
        }
        
        public object Deserialize(Newtonsoft.Json.JsonReader r, System.Type asType, OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext context) {
            OpenIZ.Core.Model.DataTypes.ConceptName _retVal = new OpenIZ.Core.Model.DataTypes.ConceptName();
            int _depth = r.Depth;
            if ((r.TokenType != Newtonsoft.Json.JsonToken.StartObject)) {
                _depth = (_depth - 1);
            }
            for (
            ; r.Read(); 
            ) {
                if ((r.TokenType == Newtonsoft.Json.JsonToken.PropertyName)) {
                    if ("id".Equals(r.Value)) {
                        r.Read();
                        System.Nullable<System.Guid> _instance = ((System.Nullable<System.Guid>)(context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<System.Guid>), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("id", context.JsonContext, _retVal, context))));
                        if ((_instance != null)) {
                            _retVal.Key = _instance;
                        }
                    }
                    else {
                        if ("source".Equals(r.Value)) {
                            r.Read();
                            System.Nullable<System.Guid> _instance = ((System.Nullable<System.Guid>)(context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<System.Guid>), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("source", context.JsonContext, _retVal, context))));
                            if ((_instance != null)) {
                                _retVal.SourceEntityKey = _instance;
                            }
                        }
                        else {
                            if ("obsoleteVersionSequence".Equals(r.Value)) {
                                r.Read();
                                System.Nullable<decimal> _instance = ((System.Nullable<decimal>)(context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<decimal>), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("obsoleteVersionSequence", context.JsonContext, _retVal, context))));
                                if ((_instance != null)) {
                                    _retVal.ObsoleteVersionSequenceId = _instance;
                                }
                            }
                            else {
                                if ("effectiveVersionSequence".Equals(r.Value)) {
                                    r.Read();
                                    System.Nullable<decimal> _instance = ((System.Nullable<decimal>)(context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<decimal>), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("effectiveVersionSequence", context.JsonContext, _retVal, context))));
                                    if ((_instance != null)) {
                                        _retVal.EffectiveVersionSequenceId = _instance;
                                    }
                                }
                                else {
                                    if ("phoneticAlgorithmModel".Equals(r.Value)) {
                                        r.Read();
                                        OpenIZ.Core.Model.DataTypes.PhoneticAlgorithm _instance = ((OpenIZ.Core.Model.DataTypes.PhoneticAlgorithm)(context.JsonContext.ReadElementUtil(r, typeof(OpenIZ.Core.Model.DataTypes.PhoneticAlgorithm), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("phoneticAlgorithmModel", context.JsonContext, _retVal, context))));
                                        if ((_instance != null)) {
                                            _retVal.PhoneticAlgorithm = _instance;
                                        }
                                    }
                                    else {
                                        if ("phoneticAlgorithm".Equals(r.Value)) {
                                            r.Read();
                                            System.Nullable<System.Guid> _instance = ((System.Nullable<System.Guid>)(context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<System.Guid>), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("phoneticAlgorithm", context.JsonContext, _retVal, context))));
                                            if ((_instance != null)) {
                                                _retVal.PhoneticAlgorithmKey = _instance;
                                            }
                                        }
                                        else {
                                            if ("phoneticCode".Equals(r.Value)) {
                                                r.Read();
                                                string _instance = ((string)(context.JsonContext.ReadElementUtil(r, typeof(string), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("phoneticCode", context.JsonContext, _retVal, context))));
                                                if ((_instance != null)) {
                                                    _retVal.PhoneticCode = _instance;
                                                }
                                            }
                                            else {
                                                if ("value".Equals(r.Value)) {
                                                    r.Read();
                                                    string _instance = ((string)(context.JsonContext.ReadElementUtil(r, typeof(string), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("value", context.JsonContext, _retVal, context))));
                                                    if ((_instance != null)) {
                                                        _retVal.Name = _instance;
                                                    }
                                                }
                                                else {
                                                    if ("language".Equals(r.Value)) {
                                                        r.Read();
                                                        string _instance = ((string)(context.JsonContext.ReadElementUtil(r, typeof(string), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("language", context.JsonContext, _retVal, context))));
                                                        if ((_instance != null)) {
                                                            _retVal.Language = _instance;
                                                        }
                                                    }
                                                    else {
                                                        if ("$type".Equals(r.Value)) {
                                                            System.Type _type = this.m_binder.BindToType("OpenIZ.Core.Model, Version=0.6.14.21496, Culture=neutral, PublicKeyToken=null", r.ReadAsString());
                                                            if ((_type != typeof(OpenIZ.Core.Model.DataTypes.ConceptName))) {
                                                                OpenIZ.Core.Model.DataTypes.ConceptName _nretVal = ((OpenIZ.Core.Model.DataTypes.ConceptName)(context.JsonContext.GetFormatter(_type).Deserialize(r, _type, context)));
                                                                _nretVal.CopyObjectData(_retVal);
                                                                return _nretVal;
                                                            }
                                                        }
                                                        else {
                                                            r.Skip();
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
                else {
                    if (((r.TokenType == Newtonsoft.Json.JsonToken.EndObject) 
                                && (r.Depth == _depth))) {
                        return _retVal;
                    }
                    else {
                        throw new Newtonsoft.Json.JsonSerializationException("JSON in invalid state");
                    }
                }
            }
            return _retVal;
        }
        
        public object FromSimpleValue(object o) {
            string _strong = null;
            if ((o == null)) {
                return null;
            }
            try {
                _strong = o.ToString();
            }
            catch (System.Exception e) {
                this.m_tracer.TraceError(string.Format("Casting Error: {0}", e));
                return null;
            }
            OpenIZ.Core.Model.DataTypes.ConceptName _retVal = new OpenIZ.Core.Model.DataTypes.ConceptName();
            _retVal.Name = _strong;
            return _retVal;
        }
        
        public object GetSimpleValue(object o) {
            if ((o == null)) {
                return null;
            }
            OpenIZ.Core.Model.DataTypes.ConceptName _strong = null;
            try {
                _strong = ((OpenIZ.Core.Model.DataTypes.ConceptName)(o));
            }
            catch (System.Exception e) {
                this.m_tracer.TraceError(string.Format("Casting Error: {0}", e));
                return null;
            }
            return _strong.Name;
        }
    }
    
    public class ConceptReferenceTermViewModelSerializer : OpenIZ.Core.Applets.ViewModel.Json.IJsonViewModelTypeFormatter {
        
        private OpenIZ.Core.Model.Serialization.ModelSerializationBinder m_binder = new OpenIZ.Core.Model.Serialization.ModelSerializationBinder();
        
        private OpenIZ.Core.Diagnostics.Tracer m_tracer = OpenIZ.Core.Diagnostics.Tracer.GetTracer(typeof(ConceptReferenceTermViewModelSerializer));
        
        public System.Type HandlesType {
            get {
                return typeof(OpenIZ.Core.Model.DataTypes.ConceptReferenceTerm);
            }
        }
        
        public void Serialize(Newtonsoft.Json.JsonWriter w, OpenIZ.Core.Model.IdentifiedData o, OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext context) {
            if ((o == null)) {
                throw new System.ArgumentNullException("o");
            }
            OpenIZ.Core.Model.DataTypes.ConceptReferenceTerm _strong = null;
            OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext _jsonContext = null;
            bool _loaded = false;
            try {
                _strong = ((OpenIZ.Core.Model.DataTypes.ConceptReferenceTerm)(o));
            }
            catch (System.Exception e) {
                this.m_tracer.TraceError(string.Format("Casting Error: {0}", e));
                throw new System.ArgumentException(string.Format("Invalid type {0} provided, expected {1}", o.GetType(), typeof(OpenIZ.Core.Model.DataTypes.ConceptReferenceTerm)));
            }
            if (context.ShouldSerialize("term")) {
                if ((_strong.ReferenceTermKey == null)) {
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "term", _strong.ReferenceTermKey, context);
                }
            }
            if (context.ShouldSerialize("termModel")) {
                if ((_strong.ReferenceTerm == null)) {
                    if ((_strong.Key.HasValue && context.ShouldForceLoad("termModel", _strong.Key.Value))) {
                        OpenIZ.Core.Model.DataTypes.ReferenceTerm _delay = null;
                        _delay = context.JsonContext.LoadRelated<OpenIZ.Core.Model.DataTypes.ReferenceTerm>(_strong.ReferenceTermKey);
                        _strong.ReferenceTerm = _delay;
                        if ((_delay != null)) {
                            _loaded = true;
                            context.JsonContext.WritePropertyUtil(w, "termModel", _strong.ReferenceTerm, context);
                        }
                    }
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "termModel", _strong.ReferenceTerm, context);
                }
            }
            if (context.ShouldSerialize("relationshipType")) {
                if ((_strong.RelationshipTypeKey == null)) {
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "relationshipType", _strong.RelationshipTypeKey, context);
                }
            }
            if (context.ShouldSerialize("relationshipTypeModel")) {
                if ((_strong.RelationshipType == null)) {
                    if ((_strong.Key.HasValue && context.ShouldForceLoad("relationshipTypeModel", _strong.Key.Value))) {
                        OpenIZ.Core.Model.DataTypes.ConceptRelationshipType _delay = null;
                        _delay = context.JsonContext.LoadRelated<OpenIZ.Core.Model.DataTypes.ConceptRelationshipType>(_strong.RelationshipTypeKey);
                        _strong.RelationshipType = _delay;
                        if ((_delay != null)) {
                            _loaded = true;
                            context.JsonContext.WritePropertyUtil(w, "relationshipTypeModel", _strong.RelationshipType, context);
                        }
                    }
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "relationshipTypeModel", _strong.RelationshipType, context);
                }
            }
            if (context.ShouldSerialize("effectiveVersionSequence")) {
                if ((_strong.EffectiveVersionSequenceId == null)) {
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "effectiveVersionSequence", _strong.EffectiveVersionSequenceId, context);
                }
            }
            if (context.ShouldSerialize("obsoleteVersionSequence")) {
                if ((_strong.ObsoleteVersionSequenceId == null)) {
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "obsoleteVersionSequence", _strong.ObsoleteVersionSequenceId, context);
                }
            }
            if (context.ShouldSerialize("modifiedOn")) {
                if ((_strong.ModifiedOn == null)) {
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "modifiedOn", _strong.ModifiedOn, context);
                }
            }
            if (context.ShouldSerialize("source")) {
                if ((_strong.SourceEntityKey == null)) {
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "source", _strong.SourceEntityKey, context);
                }
            }
            if (context.ShouldSerialize("id")) {
                if ((_strong.Key == null)) {
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "id", _strong.Key, context);
                }
            }
            if (context.ShouldSerialize("etag")) {
                if ((_strong.Tag == null)) {
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "etag", _strong.Tag, context);
                }
            }
            if ((_loaded && _strong.Key.HasValue)) {
                ((OpenIZ.Core.Services.IDataCachingService)(OpenIZ.Core.ApplicationServiceContext.Current.GetService(typeof(OpenIZ.Core.Services.IDataCachingService)))).Add(_strong);
            }
        }
        
        public object Deserialize(Newtonsoft.Json.JsonReader r, System.Type asType, OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext context) {
            OpenIZ.Core.Model.DataTypes.ConceptReferenceTerm _retVal = new OpenIZ.Core.Model.DataTypes.ConceptReferenceTerm();
            int _depth = r.Depth;
            if ((r.TokenType != Newtonsoft.Json.JsonToken.StartObject)) {
                _depth = (_depth - 1);
            }
            for (
            ; r.Read(); 
            ) {
                if ((r.TokenType == Newtonsoft.Json.JsonToken.PropertyName)) {
                    if ("id".Equals(r.Value)) {
                        r.Read();
                        System.Nullable<System.Guid> _instance = ((System.Nullable<System.Guid>)(context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<System.Guid>), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("id", context.JsonContext, _retVal, context))));
                        if ((_instance != null)) {
                            _retVal.Key = _instance;
                        }
                    }
                    else {
                        if ("source".Equals(r.Value)) {
                            r.Read();
                            System.Nullable<System.Guid> _instance = ((System.Nullable<System.Guid>)(context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<System.Guid>), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("source", context.JsonContext, _retVal, context))));
                            if ((_instance != null)) {
                                _retVal.SourceEntityKey = _instance;
                            }
                        }
                        else {
                            if ("obsoleteVersionSequence".Equals(r.Value)) {
                                r.Read();
                                System.Nullable<decimal> _instance = ((System.Nullable<decimal>)(context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<decimal>), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("obsoleteVersionSequence", context.JsonContext, _retVal, context))));
                                if ((_instance != null)) {
                                    _retVal.ObsoleteVersionSequenceId = _instance;
                                }
                            }
                            else {
                                if ("effectiveVersionSequence".Equals(r.Value)) {
                                    r.Read();
                                    System.Nullable<decimal> _instance = ((System.Nullable<decimal>)(context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<decimal>), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("effectiveVersionSequence", context.JsonContext, _retVal, context))));
                                    if ((_instance != null)) {
                                        _retVal.EffectiveVersionSequenceId = _instance;
                                    }
                                }
                                else {
                                    if ("relationshipTypeModel".Equals(r.Value)) {
                                        r.Read();
                                        OpenIZ.Core.Model.DataTypes.ConceptRelationshipType _instance = ((OpenIZ.Core.Model.DataTypes.ConceptRelationshipType)(context.JsonContext.ReadElementUtil(r, typeof(OpenIZ.Core.Model.DataTypes.ConceptRelationshipType), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("relationshipTypeModel", context.JsonContext, _retVal, context))));
                                        if ((_instance != null)) {
                                            _retVal.RelationshipType = _instance;
                                        }
                                    }
                                    else {
                                        if ("relationshipType".Equals(r.Value)) {
                                            r.Read();
                                            System.Nullable<System.Guid> _instance = ((System.Nullable<System.Guid>)(context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<System.Guid>), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("relationshipType", context.JsonContext, _retVal, context))));
                                            if ((_instance != null)) {
                                                _retVal.RelationshipTypeKey = _instance;
                                            }
                                        }
                                        else {
                                            if ("termModel".Equals(r.Value)) {
                                                r.Read();
                                                OpenIZ.Core.Model.DataTypes.ReferenceTerm _instance = ((OpenIZ.Core.Model.DataTypes.ReferenceTerm)(context.JsonContext.ReadElementUtil(r, typeof(OpenIZ.Core.Model.DataTypes.ReferenceTerm), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("termModel", context.JsonContext, _retVal, context))));
                                                if ((_instance != null)) {
                                                    _retVal.ReferenceTerm = _instance;
                                                }
                                            }
                                            else {
                                                if ("term".Equals(r.Value)) {
                                                    r.Read();
                                                    System.Nullable<System.Guid> _instance = ((System.Nullable<System.Guid>)(context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<System.Guid>), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("term", context.JsonContext, _retVal, context))));
                                                    if ((_instance != null)) {
                                                        _retVal.ReferenceTermKey = _instance;
                                                    }
                                                }
                                                else {
                                                    if ("$type".Equals(r.Value)) {
                                                        System.Type _type = this.m_binder.BindToType("OpenIZ.Core.Model, Version=0.6.14.21496, Culture=neutral, PublicKeyToken=null", r.ReadAsString());
                                                        if ((_type != typeof(OpenIZ.Core.Model.DataTypes.ConceptReferenceTerm))) {
                                                            OpenIZ.Core.Model.DataTypes.ConceptReferenceTerm _nretVal = ((OpenIZ.Core.Model.DataTypes.ConceptReferenceTerm)(context.JsonContext.GetFormatter(_type).Deserialize(r, _type, context)));
                                                            _nretVal.CopyObjectData(_retVal);
                                                            return _nretVal;
                                                        }
                                                    }
                                                    else {
                                                        r.Skip();
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
                else {
                    if (((r.TokenType == Newtonsoft.Json.JsonToken.EndObject) 
                                && (r.Depth == _depth))) {
                        return _retVal;
                    }
                    else {
                        throw new Newtonsoft.Json.JsonSerializationException("JSON in invalid state");
                    }
                }
            }
            return _retVal;
        }
        
        public object FromSimpleValue(object o) {
            return null;
        }
        
        public object GetSimpleValue(object o) {
            return null;
        }
    }
    
    public class ConceptRelationshipViewModelSerializer : OpenIZ.Core.Applets.ViewModel.Json.IJsonViewModelTypeFormatter {
        
        private OpenIZ.Core.Model.Serialization.ModelSerializationBinder m_binder = new OpenIZ.Core.Model.Serialization.ModelSerializationBinder();
        
        private OpenIZ.Core.Diagnostics.Tracer m_tracer = OpenIZ.Core.Diagnostics.Tracer.GetTracer(typeof(ConceptRelationshipViewModelSerializer));
        
        public System.Type HandlesType {
            get {
                return typeof(OpenIZ.Core.Model.DataTypes.ConceptRelationship);
            }
        }
        
        public void Serialize(Newtonsoft.Json.JsonWriter w, OpenIZ.Core.Model.IdentifiedData o, OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext context) {
            if ((o == null)) {
                throw new System.ArgumentNullException("o");
            }
            OpenIZ.Core.Model.DataTypes.ConceptRelationship _strong = null;
            OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext _jsonContext = null;
            bool _loaded = false;
            try {
                _strong = ((OpenIZ.Core.Model.DataTypes.ConceptRelationship)(o));
            }
            catch (System.Exception e) {
                this.m_tracer.TraceError(string.Format("Casting Error: {0}", e));
                throw new System.ArgumentException(string.Format("Invalid type {0} provided, expected {1}", o.GetType(), typeof(OpenIZ.Core.Model.DataTypes.ConceptRelationship)));
            }
            if (context.ShouldSerialize("targetConcept")) {
                if ((_strong.TargetConceptKey == null)) {
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "targetConcept", _strong.TargetConceptKey, context);
                }
            }
            if (context.ShouldSerialize("targetConceptModel")) {
                if ((_strong.TargetConcept == null)) {
                    if ((_strong.Key.HasValue && context.ShouldForceLoad("targetConceptModel", _strong.Key.Value))) {
                        OpenIZ.Core.Model.DataTypes.Concept _delay = null;
                        _delay = context.JsonContext.LoadRelated<OpenIZ.Core.Model.DataTypes.Concept>(_strong.TargetConceptKey);
                        _strong.TargetConcept = _delay;
                        if ((_delay != null)) {
                            _loaded = true;
                            context.JsonContext.WritePropertyUtil(w, "targetConceptModel", _strong.TargetConcept, context);
                        }
                    }
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "targetConceptModel", _strong.TargetConcept, context);
                }
            }
            if (context.ShouldSerialize("relationshipType")) {
                if ((_strong.RelationshipTypeKey == null)) {
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "relationshipType", _strong.RelationshipTypeKey, context);
                }
            }
            if (context.ShouldSerialize("relationshipTypeModel")) {
                if ((_strong.RelationshipType == null)) {
                    if ((_strong.Key.HasValue && context.ShouldForceLoad("relationshipTypeModel", _strong.Key.Value))) {
                        OpenIZ.Core.Model.DataTypes.ConceptRelationshipType _delay = null;
                        _delay = context.JsonContext.LoadRelated<OpenIZ.Core.Model.DataTypes.ConceptRelationshipType>(_strong.RelationshipTypeKey);
                        _strong.RelationshipType = _delay;
                        if ((_delay != null)) {
                            _loaded = true;
                            context.JsonContext.WritePropertyUtil(w, "relationshipTypeModel", _strong.RelationshipType, context);
                        }
                    }
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "relationshipTypeModel", _strong.RelationshipType, context);
                }
            }
            if (context.ShouldSerialize("effectiveVersionSequence")) {
                if ((_strong.EffectiveVersionSequenceId == null)) {
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "effectiveVersionSequence", _strong.EffectiveVersionSequenceId, context);
                }
            }
            if (context.ShouldSerialize("obsoleteVersionSequence")) {
                if ((_strong.ObsoleteVersionSequenceId == null)) {
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "obsoleteVersionSequence", _strong.ObsoleteVersionSequenceId, context);
                }
            }
            if (context.ShouldSerialize("modifiedOn")) {
                if ((_strong.ModifiedOn == null)) {
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "modifiedOn", _strong.ModifiedOn, context);
                }
            }
            if (context.ShouldSerialize("source")) {
                if ((_strong.SourceEntityKey == null)) {
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "source", _strong.SourceEntityKey, context);
                }
            }
            if (context.ShouldSerialize("id")) {
                if ((_strong.Key == null)) {
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "id", _strong.Key, context);
                }
            }
            if (context.ShouldSerialize("etag")) {
                if ((_strong.Tag == null)) {
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "etag", _strong.Tag, context);
                }
            }
            if ((_loaded && _strong.Key.HasValue)) {
                ((OpenIZ.Core.Services.IDataCachingService)(OpenIZ.Core.ApplicationServiceContext.Current.GetService(typeof(OpenIZ.Core.Services.IDataCachingService)))).Add(_strong);
            }
        }
        
        public object Deserialize(Newtonsoft.Json.JsonReader r, System.Type asType, OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext context) {
            OpenIZ.Core.Model.DataTypes.ConceptRelationship _retVal = new OpenIZ.Core.Model.DataTypes.ConceptRelationship();
            int _depth = r.Depth;
            if ((r.TokenType != Newtonsoft.Json.JsonToken.StartObject)) {
                _depth = (_depth - 1);
            }
            for (
            ; r.Read(); 
            ) {
                if ((r.TokenType == Newtonsoft.Json.JsonToken.PropertyName)) {
                    if ("id".Equals(r.Value)) {
                        r.Read();
                        System.Nullable<System.Guid> _instance = ((System.Nullable<System.Guid>)(context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<System.Guid>), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("id", context.JsonContext, _retVal, context))));
                        if ((_instance != null)) {
                            _retVal.Key = _instance;
                        }
                    }
                    else {
                        if ("source".Equals(r.Value)) {
                            r.Read();
                            System.Nullable<System.Guid> _instance = ((System.Nullable<System.Guid>)(context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<System.Guid>), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("source", context.JsonContext, _retVal, context))));
                            if ((_instance != null)) {
                                _retVal.SourceEntityKey = _instance;
                            }
                        }
                        else {
                            if ("obsoleteVersionSequence".Equals(r.Value)) {
                                r.Read();
                                System.Nullable<decimal> _instance = ((System.Nullable<decimal>)(context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<decimal>), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("obsoleteVersionSequence", context.JsonContext, _retVal, context))));
                                if ((_instance != null)) {
                                    _retVal.ObsoleteVersionSequenceId = _instance;
                                }
                            }
                            else {
                                if ("effectiveVersionSequence".Equals(r.Value)) {
                                    r.Read();
                                    System.Nullable<decimal> _instance = ((System.Nullable<decimal>)(context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<decimal>), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("effectiveVersionSequence", context.JsonContext, _retVal, context))));
                                    if ((_instance != null)) {
                                        _retVal.EffectiveVersionSequenceId = _instance;
                                    }
                                }
                                else {
                                    if ("relationshipTypeModel".Equals(r.Value)) {
                                        r.Read();
                                        OpenIZ.Core.Model.DataTypes.ConceptRelationshipType _instance = ((OpenIZ.Core.Model.DataTypes.ConceptRelationshipType)(context.JsonContext.ReadElementUtil(r, typeof(OpenIZ.Core.Model.DataTypes.ConceptRelationshipType), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("relationshipTypeModel", context.JsonContext, _retVal, context))));
                                        if ((_instance != null)) {
                                            _retVal.RelationshipType = _instance;
                                        }
                                    }
                                    else {
                                        if ("relationshipType".Equals(r.Value)) {
                                            r.Read();
                                            System.Nullable<System.Guid> _instance = ((System.Nullable<System.Guid>)(context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<System.Guid>), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("relationshipType", context.JsonContext, _retVal, context))));
                                            if ((_instance != null)) {
                                                _retVal.RelationshipTypeKey = _instance;
                                            }
                                        }
                                        else {
                                            if ("targetConceptModel".Equals(r.Value)) {
                                                r.Read();
                                                OpenIZ.Core.Model.DataTypes.Concept _instance = ((OpenIZ.Core.Model.DataTypes.Concept)(context.JsonContext.ReadElementUtil(r, typeof(OpenIZ.Core.Model.DataTypes.Concept), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("targetConceptModel", context.JsonContext, _retVal, context))));
                                                if ((_instance != null)) {
                                                    _retVal.TargetConcept = _instance;
                                                }
                                            }
                                            else {
                                                if ("targetConcept".Equals(r.Value)) {
                                                    r.Read();
                                                    System.Nullable<System.Guid> _instance = ((System.Nullable<System.Guid>)(context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<System.Guid>), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("targetConcept", context.JsonContext, _retVal, context))));
                                                    if ((_instance != null)) {
                                                        _retVal.TargetConceptKey = _instance;
                                                    }
                                                }
                                                else {
                                                    if ("$type".Equals(r.Value)) {
                                                        System.Type _type = this.m_binder.BindToType("OpenIZ.Core.Model, Version=0.6.14.21496, Culture=neutral, PublicKeyToken=null", r.ReadAsString());
                                                        if ((_type != typeof(OpenIZ.Core.Model.DataTypes.ConceptRelationship))) {
                                                            OpenIZ.Core.Model.DataTypes.ConceptRelationship _nretVal = ((OpenIZ.Core.Model.DataTypes.ConceptRelationship)(context.JsonContext.GetFormatter(_type).Deserialize(r, _type, context)));
                                                            _nretVal.CopyObjectData(_retVal);
                                                            return _nretVal;
                                                        }
                                                    }
                                                    else {
                                                        r.Skip();
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
                else {
                    if (((r.TokenType == Newtonsoft.Json.JsonToken.EndObject) 
                                && (r.Depth == _depth))) {
                        return _retVal;
                    }
                    else {
                        throw new Newtonsoft.Json.JsonSerializationException("JSON in invalid state");
                    }
                }
            }
            return _retVal;
        }
        
        public object FromSimpleValue(object o) {
            return null;
        }
        
        public object GetSimpleValue(object o) {
            return null;
        }
    }
    
    public class ConceptRelationshipTypeViewModelSerializer : OpenIZ.Core.Applets.ViewModel.Json.IJsonViewModelTypeFormatter {
        
        private OpenIZ.Core.Model.Serialization.ModelSerializationBinder m_binder = new OpenIZ.Core.Model.Serialization.ModelSerializationBinder();
        
        private OpenIZ.Core.Diagnostics.Tracer m_tracer = OpenIZ.Core.Diagnostics.Tracer.GetTracer(typeof(ConceptRelationshipTypeViewModelSerializer));
        
        public System.Type HandlesType {
            get {
                return typeof(OpenIZ.Core.Model.DataTypes.ConceptRelationshipType);
            }
        }
        
        public void Serialize(Newtonsoft.Json.JsonWriter w, OpenIZ.Core.Model.IdentifiedData o, OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext context) {
            if ((o == null)) {
                throw new System.ArgumentNullException("o");
            }
            OpenIZ.Core.Model.DataTypes.ConceptRelationshipType _strong = null;
            OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext _jsonContext = null;
            bool _loaded = false;
            try {
                _strong = ((OpenIZ.Core.Model.DataTypes.ConceptRelationshipType)(o));
            }
            catch (System.Exception e) {
                this.m_tracer.TraceError(string.Format("Casting Error: {0}", e));
                throw new System.ArgumentException(string.Format("Invalid type {0} provided, expected {1}", o.GetType(), typeof(OpenIZ.Core.Model.DataTypes.ConceptRelationshipType)));
            }
            if (context.ShouldSerialize("name")) {
                if ((_strong.Name == null)) {
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "name", _strong.Name, context);
                }
            }
            if (context.ShouldSerialize("mnemonic")) {
                if ((_strong.Mnemonic == null)) {
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "mnemonic", _strong.Mnemonic, context);
                }
            }
            if (context.ShouldSerialize("updatedTime")) {
                if ((_strong.UpdatedTimeXml == null)) {
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "updatedTime", _strong.UpdatedTimeXml, context);
                }
            }
            if (context.ShouldSerialize("updatedBy")) {
                if ((_strong.UpdatedByKey == null)) {
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "updatedBy", _strong.UpdatedByKey, context);
                }
            }
            if (context.ShouldSerialize("creationTimeModel")) {
                if ((_strong.CreationTime == null)) {
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "creationTimeModel", _strong.CreationTime, context);
                }
            }
            if (context.ShouldSerialize("creationTime")) {
                if ((_strong.CreationTimeXml == null)) {
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "creationTime", _strong.CreationTimeXml, context);
                }
            }
            if (context.ShouldSerialize("obsoletionTimeModel")) {
                if ((_strong.ObsoletionTime == null)) {
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "obsoletionTimeModel", _strong.ObsoletionTime, context);
                }
            }
            if (context.ShouldSerialize("obsoletionTime")) {
                if ((_strong.ObsoletionTimeXml == null)) {
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "obsoletionTime", _strong.ObsoletionTimeXml, context);
                }
            }
            if (context.ShouldSerialize("createdBy")) {
                if ((_strong.CreatedByKey == null)) {
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "createdBy", _strong.CreatedByKey, context);
                }
            }
            if (context.ShouldSerialize("obsoletedBy")) {
                if ((_strong.ObsoletedByKey == null)) {
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "obsoletedBy", _strong.ObsoletedByKey, context);
                }
            }
            if (context.ShouldSerialize("id")) {
                if ((_strong.Key == null)) {
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "id", _strong.Key, context);
                }
            }
            if (context.ShouldSerialize("etag")) {
                if ((_strong.Tag == null)) {
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "etag", _strong.Tag, context);
                }
            }
            if ((_loaded && _strong.Key.HasValue)) {
                ((OpenIZ.Core.Services.IDataCachingService)(OpenIZ.Core.ApplicationServiceContext.Current.GetService(typeof(OpenIZ.Core.Services.IDataCachingService)))).Add(_strong);
            }
        }
        
        public object Deserialize(Newtonsoft.Json.JsonReader r, System.Type asType, OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext context) {
            OpenIZ.Core.Model.DataTypes.ConceptRelationshipType _retVal = new OpenIZ.Core.Model.DataTypes.ConceptRelationshipType();
            int _depth = r.Depth;
            if ((r.TokenType != Newtonsoft.Json.JsonToken.StartObject)) {
                _depth = (_depth - 1);
            }
            for (
            ; r.Read(); 
            ) {
                if ((r.TokenType == Newtonsoft.Json.JsonToken.PropertyName)) {
                    if ("id".Equals(r.Value)) {
                        r.Read();
                        System.Nullable<System.Guid> _instance = ((System.Nullable<System.Guid>)(context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<System.Guid>), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("id", context.JsonContext, _retVal, context))));
                        if ((_instance != null)) {
                            _retVal.Key = _instance;
                        }
                    }
                    else {
                        if ("obsoletedBy".Equals(r.Value)) {
                            r.Read();
                            System.Nullable<System.Guid> _instance = ((System.Nullable<System.Guid>)(context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<System.Guid>), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("obsoletedBy", context.JsonContext, _retVal, context))));
                            if ((_instance != null)) {
                                _retVal.ObsoletedByKey = _instance;
                            }
                        }
                        else {
                            if ("createdBy".Equals(r.Value)) {
                                r.Read();
                                System.Nullable<System.Guid> _instance = ((System.Nullable<System.Guid>)(context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<System.Guid>), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("createdBy", context.JsonContext, _retVal, context))));
                                if ((_instance != null)) {
                                    _retVal.CreatedByKey = _instance;
                                }
                            }
                            else {
                                if ("obsoletionTime".Equals(r.Value)) {
                                    r.Read();
                                    string _instance = ((string)(context.JsonContext.ReadElementUtil(r, typeof(string), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("obsoletionTime", context.JsonContext, _retVal, context))));
                                    if ((_instance != null)) {
                                        _retVal.ObsoletionTimeXml = _instance;
                                    }
                                }
                                else {
                                    if ("obsoletionTimeModel".Equals(r.Value)) {
                                        r.Read();
                                        System.Nullable<System.DateTimeOffset> _instance = ((System.Nullable<System.DateTimeOffset>)(context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<System.DateTimeOffset>), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("obsoletionTimeModel", context.JsonContext, _retVal, context))));
                                        if ((_instance != null)) {
                                            _retVal.ObsoletionTime = _instance;
                                        }
                                    }
                                    else {
                                        if ("creationTime".Equals(r.Value)) {
                                            r.Read();
                                            string _instance = ((string)(context.JsonContext.ReadElementUtil(r, typeof(string), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("creationTime", context.JsonContext, _retVal, context))));
                                            if ((_instance != null)) {
                                                _retVal.CreationTimeXml = _instance;
                                            }
                                        }
                                        else {
                                            if ("creationTimeModel".Equals(r.Value)) {
                                                r.Read();
                                                System.DateTimeOffset _instance = ((System.DateTimeOffset)(context.JsonContext.ReadElementUtil(r, typeof(System.DateTimeOffset), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("creationTimeModel", context.JsonContext, _retVal, context))));
                                                if ((_instance != null)) {
                                                    _retVal.CreationTime = _instance;
                                                }
                                            }
                                            else {
                                                if ("updatedBy".Equals(r.Value)) {
                                                    r.Read();
                                                    System.Nullable<System.Guid> _instance = ((System.Nullable<System.Guid>)(context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<System.Guid>), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("updatedBy", context.JsonContext, _retVal, context))));
                                                    if ((_instance != null)) {
                                                        _retVal.UpdatedByKey = _instance;
                                                    }
                                                }
                                                else {
                                                    if ("updatedTime".Equals(r.Value)) {
                                                        r.Read();
                                                        string _instance = ((string)(context.JsonContext.ReadElementUtil(r, typeof(string), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("updatedTime", context.JsonContext, _retVal, context))));
                                                        if ((_instance != null)) {
                                                            _retVal.UpdatedTimeXml = _instance;
                                                        }
                                                    }
                                                    else {
                                                        if ("mnemonic".Equals(r.Value)) {
                                                            r.Read();
                                                            string _instance = ((string)(context.JsonContext.ReadElementUtil(r, typeof(string), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("mnemonic", context.JsonContext, _retVal, context))));
                                                            if ((_instance != null)) {
                                                                _retVal.Mnemonic = _instance;
                                                            }
                                                        }
                                                        else {
                                                            if ("name".Equals(r.Value)) {
                                                                r.Read();
                                                                string _instance = ((string)(context.JsonContext.ReadElementUtil(r, typeof(string), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("name", context.JsonContext, _retVal, context))));
                                                                if ((_instance != null)) {
                                                                    _retVal.Name = _instance;
                                                                }
                                                            }
                                                            else {
                                                                if ("$type".Equals(r.Value)) {
                                                                    System.Type _type = this.m_binder.BindToType("OpenIZ.Core.Model, Version=0.6.14.21496, Culture=neutral, PublicKeyToken=null", r.ReadAsString());
                                                                    if ((_type != typeof(OpenIZ.Core.Model.DataTypes.ConceptRelationshipType))) {
                                                                        OpenIZ.Core.Model.DataTypes.ConceptRelationshipType _nretVal = ((OpenIZ.Core.Model.DataTypes.ConceptRelationshipType)(context.JsonContext.GetFormatter(_type).Deserialize(r, _type, context)));
                                                                        _nretVal.CopyObjectData(_retVal);
                                                                        return _nretVal;
                                                                    }
                                                                }
                                                                else {
                                                                    r.Skip();
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
                else {
                    if (((r.TokenType == Newtonsoft.Json.JsonToken.EndObject) 
                                && (r.Depth == _depth))) {
                        return _retVal;
                    }
                    else {
                        throw new Newtonsoft.Json.JsonSerializationException("JSON in invalid state");
                    }
                }
            }
            return _retVal;
        }
        
        public object FromSimpleValue(object o) {
            return null;
        }
        
        public object GetSimpleValue(object o) {
            return null;
        }
    }
    
    public class ConceptSetViewModelSerializer : OpenIZ.Core.Applets.ViewModel.Json.IJsonViewModelTypeFormatter {
        
        private OpenIZ.Core.Model.Serialization.ModelSerializationBinder m_binder = new OpenIZ.Core.Model.Serialization.ModelSerializationBinder();
        
        private OpenIZ.Core.Diagnostics.Tracer m_tracer = OpenIZ.Core.Diagnostics.Tracer.GetTracer(typeof(ConceptSetViewModelSerializer));
        
        public System.Type HandlesType {
            get {
                return typeof(OpenIZ.Core.Model.DataTypes.ConceptSet);
            }
        }
        
        public void Serialize(Newtonsoft.Json.JsonWriter w, OpenIZ.Core.Model.IdentifiedData o, OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext context) {
            if ((o == null)) {
                throw new System.ArgumentNullException("o");
            }
            OpenIZ.Core.Model.DataTypes.ConceptSet _strong = null;
            OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext _jsonContext = null;
            bool _loaded = false;
            try {
                _strong = ((OpenIZ.Core.Model.DataTypes.ConceptSet)(o));
            }
            catch (System.Exception e) {
                this.m_tracer.TraceError(string.Format("Casting Error: {0}", e));
                throw new System.ArgumentException(string.Format("Invalid type {0} provided, expected {1}", o.GetType(), typeof(OpenIZ.Core.Model.DataTypes.ConceptSet)));
            }
            if (context.ShouldSerialize("name")) {
                if ((_strong.Name == null)) {
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "name", _strong.Name, context);
                }
            }
            if (context.ShouldSerialize("mnemonic")) {
                if ((_strong.Mnemonic == null)) {
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "mnemonic", _strong.Mnemonic, context);
                }
            }
            if (context.ShouldSerialize("oid")) {
                if ((_strong.Oid == null)) {
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "oid", _strong.Oid, context);
                }
            }
            if (context.ShouldSerialize("url")) {
                if ((_strong.Url == null)) {
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "url", _strong.Url, context);
                }
            }
            if (context.ShouldSerialize("concept")) {
                if (((_strong.ConceptsXml == null) 
                            || (_strong.ConceptsXml.Count == 0))) {
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "concept", _strong.ConceptsXml, context);
                }
            }
            if (context.ShouldSerialize("obsoletionreasonModel")) {
                if ((_strong.ObsoletionReason == null)) {
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "obsoletionreasonModel", _strong.ObsoletionReason, context);
                }
            }
            if (context.ShouldSerialize("updatedTime")) {
                if ((_strong.UpdatedTimeXml == null)) {
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "updatedTime", _strong.UpdatedTimeXml, context);
                }
            }
            if (context.ShouldSerialize("updatedBy")) {
                if ((_strong.UpdatedByKey == null)) {
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "updatedBy", _strong.UpdatedByKey, context);
                }
            }
            if (context.ShouldSerialize("creationTimeModel")) {
                if ((_strong.CreationTime == null)) {
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "creationTimeModel", _strong.CreationTime, context);
                }
            }
            if (context.ShouldSerialize("creationTime")) {
                if ((_strong.CreationTimeXml == null)) {
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "creationTime", _strong.CreationTimeXml, context);
                }
            }
            if (context.ShouldSerialize("obsoletionTimeModel")) {
                if ((_strong.ObsoletionTime == null)) {
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "obsoletionTimeModel", _strong.ObsoletionTime, context);
                }
            }
            if (context.ShouldSerialize("obsoletionTime")) {
                if ((_strong.ObsoletionTimeXml == null)) {
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "obsoletionTime", _strong.ObsoletionTimeXml, context);
                }
            }
            if (context.ShouldSerialize("createdBy")) {
                if ((_strong.CreatedByKey == null)) {
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "createdBy", _strong.CreatedByKey, context);
                }
            }
            if (context.ShouldSerialize("obsoletedBy")) {
                if ((_strong.ObsoletedByKey == null)) {
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "obsoletedBy", _strong.ObsoletedByKey, context);
                }
            }
            if (context.ShouldSerialize("id")) {
                if ((_strong.Key == null)) {
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "id", _strong.Key, context);
                }
            }
            if (context.ShouldSerialize("etag")) {
                if ((_strong.Tag == null)) {
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "etag", _strong.Tag, context);
                }
            }
            if ((_loaded && _strong.Key.HasValue)) {
                ((OpenIZ.Core.Services.IDataCachingService)(OpenIZ.Core.ApplicationServiceContext.Current.GetService(typeof(OpenIZ.Core.Services.IDataCachingService)))).Add(_strong);
            }
        }
        
        public object Deserialize(Newtonsoft.Json.JsonReader r, System.Type asType, OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext context) {
            OpenIZ.Core.Model.DataTypes.ConceptSet _retVal = new OpenIZ.Core.Model.DataTypes.ConceptSet();
            int _depth = r.Depth;
            if ((r.TokenType != Newtonsoft.Json.JsonToken.StartObject)) {
                _depth = (_depth - 1);
            }
            for (
            ; r.Read(); 
            ) {
                if ((r.TokenType == Newtonsoft.Json.JsonToken.PropertyName)) {
                    if ("id".Equals(r.Value)) {
                        r.Read();
                        System.Nullable<System.Guid> _instance = ((System.Nullable<System.Guid>)(context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<System.Guid>), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("id", context.JsonContext, _retVal, context))));
                        if ((_instance != null)) {
                            _retVal.Key = _instance;
                        }
                    }
                    else {
                        if ("obsoletedBy".Equals(r.Value)) {
                            r.Read();
                            System.Nullable<System.Guid> _instance = ((System.Nullable<System.Guid>)(context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<System.Guid>), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("obsoletedBy", context.JsonContext, _retVal, context))));
                            if ((_instance != null)) {
                                _retVal.ObsoletedByKey = _instance;
                            }
                        }
                        else {
                            if ("createdBy".Equals(r.Value)) {
                                r.Read();
                                System.Nullable<System.Guid> _instance = ((System.Nullable<System.Guid>)(context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<System.Guid>), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("createdBy", context.JsonContext, _retVal, context))));
                                if ((_instance != null)) {
                                    _retVal.CreatedByKey = _instance;
                                }
                            }
                            else {
                                if ("obsoletionTime".Equals(r.Value)) {
                                    r.Read();
                                    string _instance = ((string)(context.JsonContext.ReadElementUtil(r, typeof(string), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("obsoletionTime", context.JsonContext, _retVal, context))));
                                    if ((_instance != null)) {
                                        _retVal.ObsoletionTimeXml = _instance;
                                    }
                                }
                                else {
                                    if ("obsoletionTimeModel".Equals(r.Value)) {
                                        r.Read();
                                        System.Nullable<System.DateTimeOffset> _instance = ((System.Nullable<System.DateTimeOffset>)(context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<System.DateTimeOffset>), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("obsoletionTimeModel", context.JsonContext, _retVal, context))));
                                        if ((_instance != null)) {
                                            _retVal.ObsoletionTime = _instance;
                                        }
                                    }
                                    else {
                                        if ("creationTime".Equals(r.Value)) {
                                            r.Read();
                                            string _instance = ((string)(context.JsonContext.ReadElementUtil(r, typeof(string), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("creationTime", context.JsonContext, _retVal, context))));
                                            if ((_instance != null)) {
                                                _retVal.CreationTimeXml = _instance;
                                            }
                                        }
                                        else {
                                            if ("creationTimeModel".Equals(r.Value)) {
                                                r.Read();
                                                System.DateTimeOffset _instance = ((System.DateTimeOffset)(context.JsonContext.ReadElementUtil(r, typeof(System.DateTimeOffset), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("creationTimeModel", context.JsonContext, _retVal, context))));
                                                if ((_instance != null)) {
                                                    _retVal.CreationTime = _instance;
                                                }
                                            }
                                            else {
                                                if ("updatedBy".Equals(r.Value)) {
                                                    r.Read();
                                                    System.Nullable<System.Guid> _instance = ((System.Nullable<System.Guid>)(context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<System.Guid>), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("updatedBy", context.JsonContext, _retVal, context))));
                                                    if ((_instance != null)) {
                                                        _retVal.UpdatedByKey = _instance;
                                                    }
                                                }
                                                else {
                                                    if ("updatedTime".Equals(r.Value)) {
                                                        r.Read();
                                                        string _instance = ((string)(context.JsonContext.ReadElementUtil(r, typeof(string), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("updatedTime", context.JsonContext, _retVal, context))));
                                                        if ((_instance != null)) {
                                                            _retVal.UpdatedTimeXml = _instance;
                                                        }
                                                    }
                                                    else {
                                                        if ("obsoletionreasonModel".Equals(r.Value)) {
                                                            r.Read();
                                                            string _instance = ((string)(context.JsonContext.ReadElementUtil(r, typeof(string), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("obsoletionreasonModel", context.JsonContext, _retVal, context))));
                                                            if ((_instance != null)) {
                                                                _retVal.ObsoletionReason = _instance;
                                                            }
                                                        }
                                                        else {
                                                            if ("concept".Equals(r.Value)) {
                                                                r.Read();
                                                                System.Collections.Generic.List<System.Guid> _instance = ((System.Collections.Generic.List<System.Guid>)(context.JsonContext.ReadElementUtil(r, typeof(System.Collections.Generic.List<System.Guid>), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("concept", context.JsonContext, _retVal, context))));
                                                                if ((_instance != null)) {
                                                                    _retVal.ConceptsXml = _instance;
                                                                }
                                                            }
                                                            else {
                                                                if ("url".Equals(r.Value)) {
                                                                    r.Read();
                                                                    string _instance = ((string)(context.JsonContext.ReadElementUtil(r, typeof(string), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("url", context.JsonContext, _retVal, context))));
                                                                    if ((_instance != null)) {
                                                                        _retVal.Url = _instance;
                                                                    }
                                                                }
                                                                else {
                                                                    if ("oid".Equals(r.Value)) {
                                                                        r.Read();
                                                                        string _instance = ((string)(context.JsonContext.ReadElementUtil(r, typeof(string), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("oid", context.JsonContext, _retVal, context))));
                                                                        if ((_instance != null)) {
                                                                            _retVal.Oid = _instance;
                                                                        }
                                                                    }
                                                                    else {
                                                                        if ("mnemonic".Equals(r.Value)) {
                                                                            r.Read();
                                                                            string _instance = ((string)(context.JsonContext.ReadElementUtil(r, typeof(string), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("mnemonic", context.JsonContext, _retVal, context))));
                                                                            if ((_instance != null)) {
                                                                                _retVal.Mnemonic = _instance;
                                                                            }
                                                                        }
                                                                        else {
                                                                            if ("name".Equals(r.Value)) {
                                                                                r.Read();
                                                                                string _instance = ((string)(context.JsonContext.ReadElementUtil(r, typeof(string), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("name", context.JsonContext, _retVal, context))));
                                                                                if ((_instance != null)) {
                                                                                    _retVal.Name = _instance;
                                                                                }
                                                                            }
                                                                            else {
                                                                                if ("$type".Equals(r.Value)) {
                                                                                    System.Type _type = this.m_binder.BindToType("OpenIZ.Core.Model, Version=0.6.14.21496, Culture=neutral, PublicKeyToken=null", r.ReadAsString());
                                                                                    if ((_type != typeof(OpenIZ.Core.Model.DataTypes.ConceptSet))) {
                                                                                        OpenIZ.Core.Model.DataTypes.ConceptSet _nretVal = ((OpenIZ.Core.Model.DataTypes.ConceptSet)(context.JsonContext.GetFormatter(_type).Deserialize(r, _type, context)));
                                                                                        _nretVal.CopyObjectData(_retVal);
                                                                                        return _nretVal;
                                                                                    }
                                                                                }
                                                                                else {
                                                                                    r.Skip();
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
                else {
                    if (((r.TokenType == Newtonsoft.Json.JsonToken.EndObject) 
                                && (r.Depth == _depth))) {
                        return _retVal;
                    }
                    else {
                        throw new Newtonsoft.Json.JsonSerializationException("JSON in invalid state");
                    }
                }
            }
            return _retVal;
        }
        
        public object FromSimpleValue(object o) {
            return null;
        }
        
        public object GetSimpleValue(object o) {
            return null;
        }
    }
    
    public class EntityExtensionViewModelSerializer : OpenIZ.Core.Applets.ViewModel.Json.IJsonViewModelTypeFormatter {
        
        private OpenIZ.Core.Model.Serialization.ModelSerializationBinder m_binder = new OpenIZ.Core.Model.Serialization.ModelSerializationBinder();
        
        private OpenIZ.Core.Diagnostics.Tracer m_tracer = OpenIZ.Core.Diagnostics.Tracer.GetTracer(typeof(EntityExtensionViewModelSerializer));
        
        public System.Type HandlesType {
            get {
                return typeof(OpenIZ.Core.Model.DataTypes.EntityExtension);
            }
        }
        
        public void Serialize(Newtonsoft.Json.JsonWriter w, OpenIZ.Core.Model.IdentifiedData o, OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext context) {
            if ((o == null)) {
                throw new System.ArgumentNullException("o");
            }
            OpenIZ.Core.Model.DataTypes.EntityExtension _strong = null;
            OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext _jsonContext = null;
            bool _loaded = false;
            try {
                _strong = ((OpenIZ.Core.Model.DataTypes.EntityExtension)(o));
            }
            catch (System.Exception e) {
                this.m_tracer.TraceError(string.Format("Casting Error: {0}", e));
                throw new System.ArgumentException(string.Format("Invalid type {0} provided, expected {1}", o.GetType(), typeof(OpenIZ.Core.Model.DataTypes.EntityExtension)));
            }
            if (context.ShouldSerialize("value")) {
                if ((_strong.ExtensionValueXml == null)) {
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "value", _strong.ExtensionValueXml, context);
                }
            }
            if (context.ShouldSerialize("extensionType")) {
                if ((_strong.ExtensionType == null)) {
                    if ((_strong.Key.HasValue && context.ShouldForceLoad("extensionType", _strong.Key.Value))) {
                        OpenIZ.Core.Model.DataTypes.ExtensionType _delay = null;
                        _delay = context.JsonContext.LoadRelated<OpenIZ.Core.Model.DataTypes.ExtensionType>(_strong.ExtensionTypeKey);
                        _strong.ExtensionType = _delay;
                        if ((_delay != null)) {
                            _loaded = true;
                            context.JsonContext.WritePropertyUtil(w, "extensionType", _strong.ExtensionType, context);
                        }
                    }
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "extensionType", _strong.ExtensionType, context);
                }
            }
            if (context.ShouldSerialize("effectiveVersionSequence")) {
                if ((_strong.EffectiveVersionSequenceId == null)) {
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "effectiveVersionSequence", _strong.EffectiveVersionSequenceId, context);
                }
            }
            if (context.ShouldSerialize("obsoleteVersionSequence")) {
                if ((_strong.ObsoleteVersionSequenceId == null)) {
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "obsoleteVersionSequence", _strong.ObsoleteVersionSequenceId, context);
                }
            }
            if (context.ShouldSerialize("modifiedOn")) {
                if ((_strong.ModifiedOn == null)) {
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "modifiedOn", _strong.ModifiedOn, context);
                }
            }
            if (context.ShouldSerialize("source")) {
                if ((_strong.SourceEntityKey == null)) {
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "source", _strong.SourceEntityKey, context);
                }
            }
            if (context.ShouldSerialize("id")) {
                if ((_strong.Key == null)) {
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "id", _strong.Key, context);
                }
            }
            if (context.ShouldSerialize("etag")) {
                if ((_strong.Tag == null)) {
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "etag", _strong.Tag, context);
                }
            }
            if ((_loaded && _strong.Key.HasValue)) {
                ((OpenIZ.Core.Services.IDataCachingService)(OpenIZ.Core.ApplicationServiceContext.Current.GetService(typeof(OpenIZ.Core.Services.IDataCachingService)))).Add(_strong);
            }
        }
        
        public object Deserialize(Newtonsoft.Json.JsonReader r, System.Type asType, OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext context) {
            OpenIZ.Core.Model.DataTypes.EntityExtension _retVal = new OpenIZ.Core.Model.DataTypes.EntityExtension();
            int _depth = r.Depth;
            if ((r.TokenType != Newtonsoft.Json.JsonToken.StartObject)) {
                _depth = (_depth - 1);
            }
            for (
            ; r.Read(); 
            ) {
                if ((r.TokenType == Newtonsoft.Json.JsonToken.PropertyName)) {
                    if ("id".Equals(r.Value)) {
                        r.Read();
                        System.Nullable<System.Guid> _instance = ((System.Nullable<System.Guid>)(context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<System.Guid>), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("id", context.JsonContext, _retVal, context))));
                        if ((_instance != null)) {
                            _retVal.Key = _instance;
                        }
                    }
                    else {
                        if ("source".Equals(r.Value)) {
                            r.Read();
                            System.Nullable<System.Guid> _instance = ((System.Nullable<System.Guid>)(context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<System.Guid>), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("source", context.JsonContext, _retVal, context))));
                            if ((_instance != null)) {
                                _retVal.SourceEntityKey = _instance;
                            }
                        }
                        else {
                            if ("obsoleteVersionSequence".Equals(r.Value)) {
                                r.Read();
                                System.Nullable<decimal> _instance = ((System.Nullable<decimal>)(context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<decimal>), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("obsoleteVersionSequence", context.JsonContext, _retVal, context))));
                                if ((_instance != null)) {
                                    _retVal.ObsoleteVersionSequenceId = _instance;
                                }
                            }
                            else {
                                if ("effectiveVersionSequence".Equals(r.Value)) {
                                    r.Read();
                                    System.Nullable<decimal> _instance = ((System.Nullable<decimal>)(context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<decimal>), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("effectiveVersionSequence", context.JsonContext, _retVal, context))));
                                    if ((_instance != null)) {
                                        _retVal.EffectiveVersionSequenceId = _instance;
                                    }
                                }
                                else {
                                    if ("extensionType".Equals(r.Value)) {
                                        r.Read();
                                        OpenIZ.Core.Model.DataTypes.ExtensionType _instance = ((OpenIZ.Core.Model.DataTypes.ExtensionType)(context.JsonContext.ReadElementUtil(r, typeof(OpenIZ.Core.Model.DataTypes.ExtensionType), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("extensionType", context.JsonContext, _retVal, context))));
                                        if ((_instance != null)) {
                                            _retVal.ExtensionType = _instance;
                                        }
                                    }
                                    else {
                                        if ("value".Equals(r.Value)) {
                                            r.Read();
                                            byte[] _instance = ((byte[])(context.JsonContext.ReadElementUtil(r, typeof(byte[]), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("value", context.JsonContext, _retVal, context))));
                                            if ((_instance != null)) {
                                                _retVal.ExtensionValueXml = _instance;
                                            }
                                        }
                                        else {
                                            if ("$type".Equals(r.Value)) {
                                                System.Type _type = this.m_binder.BindToType("OpenIZ.Core.Model, Version=0.6.14.21496, Culture=neutral, PublicKeyToken=null", r.ReadAsString());
                                                if ((_type != typeof(OpenIZ.Core.Model.DataTypes.EntityExtension))) {
                                                    OpenIZ.Core.Model.DataTypes.EntityExtension _nretVal = ((OpenIZ.Core.Model.DataTypes.EntityExtension)(context.JsonContext.GetFormatter(_type).Deserialize(r, _type, context)));
                                                    _nretVal.CopyObjectData(_retVal);
                                                    return _nretVal;
                                                }
                                            }
                                            else {
                                                r.Skip();
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
                else {
                    if (((r.TokenType == Newtonsoft.Json.JsonToken.EndObject) 
                                && (r.Depth == _depth))) {
                        return _retVal;
                    }
                    else {
                        throw new Newtonsoft.Json.JsonSerializationException("JSON in invalid state");
                    }
                }
            }
            return _retVal;
        }
        
        public object FromSimpleValue(object o) {
            string _strong = null;
            if ((o == null)) {
                return null;
            }
            try {
                _strong = o.ToString();
            }
            catch (System.Exception e) {
                this.m_tracer.TraceError(string.Format("Casting Error: {0}", e));
                return null;
            }
            OpenIZ.Core.Model.DataTypes.EntityExtension _retVal = new OpenIZ.Core.Model.DataTypes.EntityExtension();
            _retVal.ExtensionValueString = _strong;
            return _retVal;
        }
        
        public object GetSimpleValue(object o) {
            if ((o == null)) {
                return null;
            }
            OpenIZ.Core.Model.DataTypes.EntityExtension _strong = null;
            try {
                _strong = ((OpenIZ.Core.Model.DataTypes.EntityExtension)(o));
            }
            catch (System.Exception e) {
                this.m_tracer.TraceError(string.Format("Casting Error: {0}", e));
                return null;
            }
            return _strong.ExtensionValueString;
        }
    }
    
    public class ActExtensionViewModelSerializer : OpenIZ.Core.Applets.ViewModel.Json.IJsonViewModelTypeFormatter {
        
        private OpenIZ.Core.Model.Serialization.ModelSerializationBinder m_binder = new OpenIZ.Core.Model.Serialization.ModelSerializationBinder();
        
        private OpenIZ.Core.Diagnostics.Tracer m_tracer = OpenIZ.Core.Diagnostics.Tracer.GetTracer(typeof(ActExtensionViewModelSerializer));
        
        public System.Type HandlesType {
            get {
                return typeof(OpenIZ.Core.Model.DataTypes.ActExtension);
            }
        }
        
        public void Serialize(Newtonsoft.Json.JsonWriter w, OpenIZ.Core.Model.IdentifiedData o, OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext context) {
            if ((o == null)) {
                throw new System.ArgumentNullException("o");
            }
            OpenIZ.Core.Model.DataTypes.ActExtension _strong = null;
            OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext _jsonContext = null;
            bool _loaded = false;
            try {
                _strong = ((OpenIZ.Core.Model.DataTypes.ActExtension)(o));
            }
            catch (System.Exception e) {
                this.m_tracer.TraceError(string.Format("Casting Error: {0}", e));
                throw new System.ArgumentException(string.Format("Invalid type {0} provided, expected {1}", o.GetType(), typeof(OpenIZ.Core.Model.DataTypes.ActExtension)));
            }
            if (context.ShouldSerialize("value")) {
                if ((_strong.ExtensionValueXml == null)) {
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "value", _strong.ExtensionValueXml, context);
                }
            }
            if (context.ShouldSerialize("extensionType")) {
                if ((_strong.ExtensionType == null)) {
                    if ((_strong.Key.HasValue && context.ShouldForceLoad("extensionType", _strong.Key.Value))) {
                        OpenIZ.Core.Model.DataTypes.ExtensionType _delay = null;
                        _delay = context.JsonContext.LoadRelated<OpenIZ.Core.Model.DataTypes.ExtensionType>(_strong.ExtensionTypeKey);
                        _strong.ExtensionType = _delay;
                        if ((_delay != null)) {
                            _loaded = true;
                            context.JsonContext.WritePropertyUtil(w, "extensionType", _strong.ExtensionType, context);
                        }
                    }
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "extensionType", _strong.ExtensionType, context);
                }
            }
            if (context.ShouldSerialize("effectiveVersionSequence")) {
                if ((_strong.EffectiveVersionSequenceId == null)) {
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "effectiveVersionSequence", _strong.EffectiveVersionSequenceId, context);
                }
            }
            if (context.ShouldSerialize("obsoleteVersionSequence")) {
                if ((_strong.ObsoleteVersionSequenceId == null)) {
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "obsoleteVersionSequence", _strong.ObsoleteVersionSequenceId, context);
                }
            }
            if (context.ShouldSerialize("modifiedOn")) {
                if ((_strong.ModifiedOn == null)) {
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "modifiedOn", _strong.ModifiedOn, context);
                }
            }
            if (context.ShouldSerialize("source")) {
                if ((_strong.SourceEntityKey == null)) {
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "source", _strong.SourceEntityKey, context);
                }
            }
            if (context.ShouldSerialize("id")) {
                if ((_strong.Key == null)) {
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "id", _strong.Key, context);
                }
            }
            if (context.ShouldSerialize("etag")) {
                if ((_strong.Tag == null)) {
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "etag", _strong.Tag, context);
                }
            }
            if ((_loaded && _strong.Key.HasValue)) {
                ((OpenIZ.Core.Services.IDataCachingService)(OpenIZ.Core.ApplicationServiceContext.Current.GetService(typeof(OpenIZ.Core.Services.IDataCachingService)))).Add(_strong);
            }
        }
        
        public object Deserialize(Newtonsoft.Json.JsonReader r, System.Type asType, OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext context) {
            OpenIZ.Core.Model.DataTypes.ActExtension _retVal = new OpenIZ.Core.Model.DataTypes.ActExtension();
            int _depth = r.Depth;
            if ((r.TokenType != Newtonsoft.Json.JsonToken.StartObject)) {
                _depth = (_depth - 1);
            }
            for (
            ; r.Read(); 
            ) {
                if ((r.TokenType == Newtonsoft.Json.JsonToken.PropertyName)) {
                    if ("id".Equals(r.Value)) {
                        r.Read();
                        System.Nullable<System.Guid> _instance = ((System.Nullable<System.Guid>)(context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<System.Guid>), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("id", context.JsonContext, _retVal, context))));
                        if ((_instance != null)) {
                            _retVal.Key = _instance;
                        }
                    }
                    else {
                        if ("source".Equals(r.Value)) {
                            r.Read();
                            System.Nullable<System.Guid> _instance = ((System.Nullable<System.Guid>)(context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<System.Guid>), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("source", context.JsonContext, _retVal, context))));
                            if ((_instance != null)) {
                                _retVal.SourceEntityKey = _instance;
                            }
                        }
                        else {
                            if ("obsoleteVersionSequence".Equals(r.Value)) {
                                r.Read();
                                System.Nullable<decimal> _instance = ((System.Nullable<decimal>)(context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<decimal>), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("obsoleteVersionSequence", context.JsonContext, _retVal, context))));
                                if ((_instance != null)) {
                                    _retVal.ObsoleteVersionSequenceId = _instance;
                                }
                            }
                            else {
                                if ("effectiveVersionSequence".Equals(r.Value)) {
                                    r.Read();
                                    System.Nullable<decimal> _instance = ((System.Nullable<decimal>)(context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<decimal>), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("effectiveVersionSequence", context.JsonContext, _retVal, context))));
                                    if ((_instance != null)) {
                                        _retVal.EffectiveVersionSequenceId = _instance;
                                    }
                                }
                                else {
                                    if ("extensionType".Equals(r.Value)) {
                                        r.Read();
                                        OpenIZ.Core.Model.DataTypes.ExtensionType _instance = ((OpenIZ.Core.Model.DataTypes.ExtensionType)(context.JsonContext.ReadElementUtil(r, typeof(OpenIZ.Core.Model.DataTypes.ExtensionType), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("extensionType", context.JsonContext, _retVal, context))));
                                        if ((_instance != null)) {
                                            _retVal.ExtensionType = _instance;
                                        }
                                    }
                                    else {
                                        if ("value".Equals(r.Value)) {
                                            r.Read();
                                            byte[] _instance = ((byte[])(context.JsonContext.ReadElementUtil(r, typeof(byte[]), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("value", context.JsonContext, _retVal, context))));
                                            if ((_instance != null)) {
                                                _retVal.ExtensionValueXml = _instance;
                                            }
                                        }
                                        else {
                                            if ("$type".Equals(r.Value)) {
                                                System.Type _type = this.m_binder.BindToType("OpenIZ.Core.Model, Version=0.6.14.21496, Culture=neutral, PublicKeyToken=null", r.ReadAsString());
                                                if ((_type != typeof(OpenIZ.Core.Model.DataTypes.ActExtension))) {
                                                    OpenIZ.Core.Model.DataTypes.ActExtension _nretVal = ((OpenIZ.Core.Model.DataTypes.ActExtension)(context.JsonContext.GetFormatter(_type).Deserialize(r, _type, context)));
                                                    _nretVal.CopyObjectData(_retVal);
                                                    return _nretVal;
                                                }
                                            }
                                            else {
                                                r.Skip();
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
                else {
                    if (((r.TokenType == Newtonsoft.Json.JsonToken.EndObject) 
                                && (r.Depth == _depth))) {
                        return _retVal;
                    }
                    else {
                        throw new Newtonsoft.Json.JsonSerializationException("JSON in invalid state");
                    }
                }
            }
            return _retVal;
        }
        
        public object FromSimpleValue(object o) {
            string _strong = null;
            if ((o == null)) {
                return null;
            }
            try {
                _strong = o.ToString();
            }
            catch (System.Exception e) {
                this.m_tracer.TraceError(string.Format("Casting Error: {0}", e));
                return null;
            }
            OpenIZ.Core.Model.DataTypes.ActExtension _retVal = new OpenIZ.Core.Model.DataTypes.ActExtension();
            _retVal.ExtensionValueString = _strong;
            return _retVal;
        }
        
        public object GetSimpleValue(object o) {
            if ((o == null)) {
                return null;
            }
            OpenIZ.Core.Model.DataTypes.ActExtension _strong = null;
            try {
                _strong = ((OpenIZ.Core.Model.DataTypes.ActExtension)(o));
            }
            catch (System.Exception e) {
                this.m_tracer.TraceError(string.Format("Casting Error: {0}", e));
                return null;
            }
            return _strong.ExtensionValueString;
        }
    }
    
    public class ExtensionTypeViewModelSerializer : OpenIZ.Core.Applets.ViewModel.Json.IJsonViewModelTypeFormatter {
        
        private OpenIZ.Core.Model.Serialization.ModelSerializationBinder m_binder = new OpenIZ.Core.Model.Serialization.ModelSerializationBinder();
        
        private OpenIZ.Core.Diagnostics.Tracer m_tracer = OpenIZ.Core.Diagnostics.Tracer.GetTracer(typeof(ExtensionTypeViewModelSerializer));
        
        public System.Type HandlesType {
            get {
                return typeof(OpenIZ.Core.Model.DataTypes.ExtensionType);
            }
        }
        
        public void Serialize(Newtonsoft.Json.JsonWriter w, OpenIZ.Core.Model.IdentifiedData o, OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext context) {
            if ((o == null)) {
                throw new System.ArgumentNullException("o");
            }
            OpenIZ.Core.Model.DataTypes.ExtensionType _strong = null;
            OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext _jsonContext = null;
            bool _loaded = false;
            try {
                _strong = ((OpenIZ.Core.Model.DataTypes.ExtensionType)(o));
            }
            catch (System.Exception e) {
                this.m_tracer.TraceError(string.Format("Casting Error: {0}", e));
                throw new System.ArgumentException(string.Format("Invalid type {0} provided, expected {1}", o.GetType(), typeof(OpenIZ.Core.Model.DataTypes.ExtensionType)));
            }
            if (context.ShouldSerialize("handlerClass")) {
                if ((_strong.ExtensionHandlerXml == null)) {
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "handlerClass", _strong.ExtensionHandlerXml, context);
                }
            }
            if (context.ShouldSerialize("name")) {
                if ((_strong.Name == null)) {
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "name", _strong.Name, context);
                }
            }
            if (context.ShouldSerialize("updatedTime")) {
                if ((_strong.UpdatedTimeXml == null)) {
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "updatedTime", _strong.UpdatedTimeXml, context);
                }
            }
            if (context.ShouldSerialize("updatedBy")) {
                if ((_strong.UpdatedByKey == null)) {
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "updatedBy", _strong.UpdatedByKey, context);
                }
            }
            if (context.ShouldSerialize("creationTimeModel")) {
                if ((_strong.CreationTime == null)) {
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "creationTimeModel", _strong.CreationTime, context);
                }
            }
            if (context.ShouldSerialize("creationTime")) {
                if ((_strong.CreationTimeXml == null)) {
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "creationTime", _strong.CreationTimeXml, context);
                }
            }
            if (context.ShouldSerialize("obsoletionTimeModel")) {
                if ((_strong.ObsoletionTime == null)) {
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "obsoletionTimeModel", _strong.ObsoletionTime, context);
                }
            }
            if (context.ShouldSerialize("obsoletionTime")) {
                if ((_strong.ObsoletionTimeXml == null)) {
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "obsoletionTime", _strong.ObsoletionTimeXml, context);
                }
            }
            if (context.ShouldSerialize("createdBy")) {
                if ((_strong.CreatedByKey == null)) {
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "createdBy", _strong.CreatedByKey, context);
                }
            }
            if (context.ShouldSerialize("obsoletedBy")) {
                if ((_strong.ObsoletedByKey == null)) {
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "obsoletedBy", _strong.ObsoletedByKey, context);
                }
            }
            if (context.ShouldSerialize("id")) {
                if ((_strong.Key == null)) {
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "id", _strong.Key, context);
                }
            }
            if (context.ShouldSerialize("etag")) {
                if ((_strong.Tag == null)) {
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "etag", _strong.Tag, context);
                }
            }
            if ((_loaded && _strong.Key.HasValue)) {
                ((OpenIZ.Core.Services.IDataCachingService)(OpenIZ.Core.ApplicationServiceContext.Current.GetService(typeof(OpenIZ.Core.Services.IDataCachingService)))).Add(_strong);
            }
        }
        
        public object Deserialize(Newtonsoft.Json.JsonReader r, System.Type asType, OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext context) {
            OpenIZ.Core.Model.DataTypes.ExtensionType _retVal = new OpenIZ.Core.Model.DataTypes.ExtensionType();
            int _depth = r.Depth;
            if ((r.TokenType != Newtonsoft.Json.JsonToken.StartObject)) {
                _depth = (_depth - 1);
            }
            for (
            ; r.Read(); 
            ) {
                if ((r.TokenType == Newtonsoft.Json.JsonToken.PropertyName)) {
                    if ("id".Equals(r.Value)) {
                        r.Read();
                        System.Nullable<System.Guid> _instance = ((System.Nullable<System.Guid>)(context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<System.Guid>), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("id", context.JsonContext, _retVal, context))));
                        if ((_instance != null)) {
                            _retVal.Key = _instance;
                        }
                    }
                    else {
                        if ("obsoletedBy".Equals(r.Value)) {
                            r.Read();
                            System.Nullable<System.Guid> _instance = ((System.Nullable<System.Guid>)(context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<System.Guid>), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("obsoletedBy", context.JsonContext, _retVal, context))));
                            if ((_instance != null)) {
                                _retVal.ObsoletedByKey = _instance;
                            }
                        }
                        else {
                            if ("createdBy".Equals(r.Value)) {
                                r.Read();
                                System.Nullable<System.Guid> _instance = ((System.Nullable<System.Guid>)(context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<System.Guid>), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("createdBy", context.JsonContext, _retVal, context))));
                                if ((_instance != null)) {
                                    _retVal.CreatedByKey = _instance;
                                }
                            }
                            else {
                                if ("obsoletionTime".Equals(r.Value)) {
                                    r.Read();
                                    string _instance = ((string)(context.JsonContext.ReadElementUtil(r, typeof(string), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("obsoletionTime", context.JsonContext, _retVal, context))));
                                    if ((_instance != null)) {
                                        _retVal.ObsoletionTimeXml = _instance;
                                    }
                                }
                                else {
                                    if ("obsoletionTimeModel".Equals(r.Value)) {
                                        r.Read();
                                        System.Nullable<System.DateTimeOffset> _instance = ((System.Nullable<System.DateTimeOffset>)(context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<System.DateTimeOffset>), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("obsoletionTimeModel", context.JsonContext, _retVal, context))));
                                        if ((_instance != null)) {
                                            _retVal.ObsoletionTime = _instance;
                                        }
                                    }
                                    else {
                                        if ("creationTime".Equals(r.Value)) {
                                            r.Read();
                                            string _instance = ((string)(context.JsonContext.ReadElementUtil(r, typeof(string), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("creationTime", context.JsonContext, _retVal, context))));
                                            if ((_instance != null)) {
                                                _retVal.CreationTimeXml = _instance;
                                            }
                                        }
                                        else {
                                            if ("creationTimeModel".Equals(r.Value)) {
                                                r.Read();
                                                System.DateTimeOffset _instance = ((System.DateTimeOffset)(context.JsonContext.ReadElementUtil(r, typeof(System.DateTimeOffset), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("creationTimeModel", context.JsonContext, _retVal, context))));
                                                if ((_instance != null)) {
                                                    _retVal.CreationTime = _instance;
                                                }
                                            }
                                            else {
                                                if ("updatedBy".Equals(r.Value)) {
                                                    r.Read();
                                                    System.Nullable<System.Guid> _instance = ((System.Nullable<System.Guid>)(context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<System.Guid>), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("updatedBy", context.JsonContext, _retVal, context))));
                                                    if ((_instance != null)) {
                                                        _retVal.UpdatedByKey = _instance;
                                                    }
                                                }
                                                else {
                                                    if ("updatedTime".Equals(r.Value)) {
                                                        r.Read();
                                                        string _instance = ((string)(context.JsonContext.ReadElementUtil(r, typeof(string), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("updatedTime", context.JsonContext, _retVal, context))));
                                                        if ((_instance != null)) {
                                                            _retVal.UpdatedTimeXml = _instance;
                                                        }
                                                    }
                                                    else {
                                                        if ("name".Equals(r.Value)) {
                                                            r.Read();
                                                            string _instance = ((string)(context.JsonContext.ReadElementUtil(r, typeof(string), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("name", context.JsonContext, _retVal, context))));
                                                            if ((_instance != null)) {
                                                                _retVal.Name = _instance;
                                                            }
                                                        }
                                                        else {
                                                            if ("handlerClass".Equals(r.Value)) {
                                                                r.Read();
                                                                string _instance = ((string)(context.JsonContext.ReadElementUtil(r, typeof(string), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("handlerClass", context.JsonContext, _retVal, context))));
                                                                if ((_instance != null)) {
                                                                    _retVal.ExtensionHandlerXml = _instance;
                                                                }
                                                            }
                                                            else {
                                                                if ("$type".Equals(r.Value)) {
                                                                    System.Type _type = this.m_binder.BindToType("OpenIZ.Core.Model, Version=0.6.14.21496, Culture=neutral, PublicKeyToken=null", r.ReadAsString());
                                                                    if ((_type != typeof(OpenIZ.Core.Model.DataTypes.ExtensionType))) {
                                                                        OpenIZ.Core.Model.DataTypes.ExtensionType _nretVal = ((OpenIZ.Core.Model.DataTypes.ExtensionType)(context.JsonContext.GetFormatter(_type).Deserialize(r, _type, context)));
                                                                        _nretVal.CopyObjectData(_retVal);
                                                                        return _nretVal;
                                                                    }
                                                                }
                                                                else {
                                                                    r.Skip();
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
                else {
                    if (((r.TokenType == Newtonsoft.Json.JsonToken.EndObject) 
                                && (r.Depth == _depth))) {
                        return _retVal;
                    }
                    else {
                        throw new Newtonsoft.Json.JsonSerializationException("JSON in invalid state");
                    }
                }
            }
            return _retVal;
        }
        
        public object FromSimpleValue(object o) {
            return null;
        }
        
        public object GetSimpleValue(object o) {
            return null;
        }
    }
    
    public class EntityIdentifierViewModelSerializer : OpenIZ.Core.Applets.ViewModel.Json.IJsonViewModelTypeFormatter {
        
        private OpenIZ.Core.Model.Serialization.ModelSerializationBinder m_binder = new OpenIZ.Core.Model.Serialization.ModelSerializationBinder();
        
        private OpenIZ.Core.Diagnostics.Tracer m_tracer = OpenIZ.Core.Diagnostics.Tracer.GetTracer(typeof(EntityIdentifierViewModelSerializer));
        
        public System.Type HandlesType {
            get {
                return typeof(OpenIZ.Core.Model.DataTypes.EntityIdentifier);
            }
        }
        
        public void Serialize(Newtonsoft.Json.JsonWriter w, OpenIZ.Core.Model.IdentifiedData o, OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext context) {
            if ((o == null)) {
                throw new System.ArgumentNullException("o");
            }
            OpenIZ.Core.Model.DataTypes.EntityIdentifier _strong = null;
            OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext _jsonContext = null;
            bool _loaded = false;
            try {
                _strong = ((OpenIZ.Core.Model.DataTypes.EntityIdentifier)(o));
            }
            catch (System.Exception e) {
                this.m_tracer.TraceError(string.Format("Casting Error: {0}", e));
                throw new System.ArgumentException(string.Format("Invalid type {0} provided, expected {1}", o.GetType(), typeof(OpenIZ.Core.Model.DataTypes.EntityIdentifier)));
            }
            if (context.ShouldSerialize("value")) {
                if ((_strong.Value == null)) {
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "value", _strong.Value, context);
                }
            }
            if (context.ShouldSerialize("type")) {
                if ((_strong.IdentifierType == null)) {
                    if ((_strong.Key.HasValue && context.ShouldForceLoad("type", _strong.Key.Value))) {
                        OpenIZ.Core.Model.DataTypes.IdentifierType _delay = null;
                        _delay = context.JsonContext.LoadRelated<OpenIZ.Core.Model.DataTypes.IdentifierType>(_strong.IdentifierTypeKey);
                        _strong.IdentifierType = _delay;
                        if ((_delay != null)) {
                            _loaded = true;
                            context.JsonContext.WritePropertyUtil(w, "type", _strong.IdentifierType, context);
                        }
                    }
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "type", _strong.IdentifierType, context);
                }
            }
            if (context.ShouldSerialize("authority")) {
                if ((_strong.Authority == null)) {
                    if ((_strong.Key.HasValue && context.ShouldForceLoad("authority", _strong.Key.Value))) {
                        OpenIZ.Core.Model.DataTypes.AssigningAuthority _delay = null;
                        _delay = context.JsonContext.LoadRelated<OpenIZ.Core.Model.DataTypes.AssigningAuthority>(_strong.AuthorityKey);
                        _strong.Authority = _delay;
                        if ((_delay != null)) {
                            _loaded = true;
                            context.JsonContext.WritePropertyUtil(w, "authority", _strong.Authority, context);
                        }
                    }
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "authority", _strong.Authority, context);
                }
            }
            if (context.ShouldSerialize("effectiveVersionSequence")) {
                if ((_strong.EffectiveVersionSequenceId == null)) {
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "effectiveVersionSequence", _strong.EffectiveVersionSequenceId, context);
                }
            }
            if (context.ShouldSerialize("obsoleteVersionSequence")) {
                if ((_strong.ObsoleteVersionSequenceId == null)) {
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "obsoleteVersionSequence", _strong.ObsoleteVersionSequenceId, context);
                }
            }
            if (context.ShouldSerialize("modifiedOn")) {
                if ((_strong.ModifiedOn == null)) {
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "modifiedOn", _strong.ModifiedOn, context);
                }
            }
            if (context.ShouldSerialize("source")) {
                if ((_strong.SourceEntityKey == null)) {
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "source", _strong.SourceEntityKey, context);
                }
            }
            if (context.ShouldSerialize("id")) {
                if ((_strong.Key == null)) {
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "id", _strong.Key, context);
                }
            }
            if (context.ShouldSerialize("etag")) {
                if ((_strong.Tag == null)) {
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "etag", _strong.Tag, context);
                }
            }
            if ((_loaded && _strong.Key.HasValue)) {
                ((OpenIZ.Core.Services.IDataCachingService)(OpenIZ.Core.ApplicationServiceContext.Current.GetService(typeof(OpenIZ.Core.Services.IDataCachingService)))).Add(_strong);
            }
        }
        
        public object Deserialize(Newtonsoft.Json.JsonReader r, System.Type asType, OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext context) {
            OpenIZ.Core.Model.DataTypes.EntityIdentifier _retVal = new OpenIZ.Core.Model.DataTypes.EntityIdentifier();
            int _depth = r.Depth;
            if ((r.TokenType != Newtonsoft.Json.JsonToken.StartObject)) {
                _depth = (_depth - 1);
            }
            for (
            ; r.Read(); 
            ) {
                if ((r.TokenType == Newtonsoft.Json.JsonToken.PropertyName)) {
                    if ("id".Equals(r.Value)) {
                        r.Read();
                        System.Nullable<System.Guid> _instance = ((System.Nullable<System.Guid>)(context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<System.Guid>), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("id", context.JsonContext, _retVal, context))));
                        if ((_instance != null)) {
                            _retVal.Key = _instance;
                        }
                    }
                    else {
                        if ("source".Equals(r.Value)) {
                            r.Read();
                            System.Nullable<System.Guid> _instance = ((System.Nullable<System.Guid>)(context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<System.Guid>), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("source", context.JsonContext, _retVal, context))));
                            if ((_instance != null)) {
                                _retVal.SourceEntityKey = _instance;
                            }
                        }
                        else {
                            if ("obsoleteVersionSequence".Equals(r.Value)) {
                                r.Read();
                                System.Nullable<decimal> _instance = ((System.Nullable<decimal>)(context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<decimal>), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("obsoleteVersionSequence", context.JsonContext, _retVal, context))));
                                if ((_instance != null)) {
                                    _retVal.ObsoleteVersionSequenceId = _instance;
                                }
                            }
                            else {
                                if ("effectiveVersionSequence".Equals(r.Value)) {
                                    r.Read();
                                    System.Nullable<decimal> _instance = ((System.Nullable<decimal>)(context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<decimal>), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("effectiveVersionSequence", context.JsonContext, _retVal, context))));
                                    if ((_instance != null)) {
                                        _retVal.EffectiveVersionSequenceId = _instance;
                                    }
                                }
                                else {
                                    if ("authority".Equals(r.Value)) {
                                        r.Read();
                                        OpenIZ.Core.Model.DataTypes.AssigningAuthority _instance = ((OpenIZ.Core.Model.DataTypes.AssigningAuthority)(context.JsonContext.ReadElementUtil(r, typeof(OpenIZ.Core.Model.DataTypes.AssigningAuthority), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("authority", context.JsonContext, _retVal, context))));
                                        if ((_instance != null)) {
                                            _retVal.Authority = _instance;
                                        }
                                    }
                                    else {
                                        if ("type".Equals(r.Value)) {
                                            r.Read();
                                            OpenIZ.Core.Model.DataTypes.IdentifierType _instance = ((OpenIZ.Core.Model.DataTypes.IdentifierType)(context.JsonContext.ReadElementUtil(r, typeof(OpenIZ.Core.Model.DataTypes.IdentifierType), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("type", context.JsonContext, _retVal, context))));
                                            if ((_instance != null)) {
                                                _retVal.IdentifierType = _instance;
                                            }
                                        }
                                        else {
                                            if ("value".Equals(r.Value)) {
                                                r.Read();
                                                string _instance = ((string)(context.JsonContext.ReadElementUtil(r, typeof(string), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("value", context.JsonContext, _retVal, context))));
                                                if ((_instance != null)) {
                                                    _retVal.Value = _instance;
                                                }
                                            }
                                            else {
                                                if ("$type".Equals(r.Value)) {
                                                    System.Type _type = this.m_binder.BindToType("OpenIZ.Core.Model, Version=0.6.14.21496, Culture=neutral, PublicKeyToken=null", r.ReadAsString());
                                                    if ((_type != typeof(OpenIZ.Core.Model.DataTypes.EntityIdentifier))) {
                                                        OpenIZ.Core.Model.DataTypes.EntityIdentifier _nretVal = ((OpenIZ.Core.Model.DataTypes.EntityIdentifier)(context.JsonContext.GetFormatter(_type).Deserialize(r, _type, context)));
                                                        _nretVal.CopyObjectData(_retVal);
                                                        return _nretVal;
                                                    }
                                                }
                                                else {
                                                    r.Skip();
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
                else {
                    if (((r.TokenType == Newtonsoft.Json.JsonToken.EndObject) 
                                && (r.Depth == _depth))) {
                        return _retVal;
                    }
                    else {
                        throw new Newtonsoft.Json.JsonSerializationException("JSON in invalid state");
                    }
                }
            }
            return _retVal;
        }
        
        public object FromSimpleValue(object o) {
            return null;
        }
        
        public object GetSimpleValue(object o) {
            return null;
        }
    }
    
    public class ActIdentifierViewModelSerializer : OpenIZ.Core.Applets.ViewModel.Json.IJsonViewModelTypeFormatter {
        
        private OpenIZ.Core.Model.Serialization.ModelSerializationBinder m_binder = new OpenIZ.Core.Model.Serialization.ModelSerializationBinder();
        
        private OpenIZ.Core.Diagnostics.Tracer m_tracer = OpenIZ.Core.Diagnostics.Tracer.GetTracer(typeof(ActIdentifierViewModelSerializer));
        
        public System.Type HandlesType {
            get {
                return typeof(OpenIZ.Core.Model.DataTypes.ActIdentifier);
            }
        }
        
        public void Serialize(Newtonsoft.Json.JsonWriter w, OpenIZ.Core.Model.IdentifiedData o, OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext context) {
            if ((o == null)) {
                throw new System.ArgumentNullException("o");
            }
            OpenIZ.Core.Model.DataTypes.ActIdentifier _strong = null;
            OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext _jsonContext = null;
            bool _loaded = false;
            try {
                _strong = ((OpenIZ.Core.Model.DataTypes.ActIdentifier)(o));
            }
            catch (System.Exception e) {
                this.m_tracer.TraceError(string.Format("Casting Error: {0}", e));
                throw new System.ArgumentException(string.Format("Invalid type {0} provided, expected {1}", o.GetType(), typeof(OpenIZ.Core.Model.DataTypes.ActIdentifier)));
            }
            if (context.ShouldSerialize("value")) {
                if ((_strong.Value == null)) {
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "value", _strong.Value, context);
                }
            }
            if (context.ShouldSerialize("type")) {
                if ((_strong.IdentifierType == null)) {
                    if ((_strong.Key.HasValue && context.ShouldForceLoad("type", _strong.Key.Value))) {
                        OpenIZ.Core.Model.DataTypes.IdentifierType _delay = null;
                        _delay = context.JsonContext.LoadRelated<OpenIZ.Core.Model.DataTypes.IdentifierType>(_strong.IdentifierTypeKey);
                        _strong.IdentifierType = _delay;
                        if ((_delay != null)) {
                            _loaded = true;
                            context.JsonContext.WritePropertyUtil(w, "type", _strong.IdentifierType, context);
                        }
                    }
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "type", _strong.IdentifierType, context);
                }
            }
            if (context.ShouldSerialize("authority")) {
                if ((_strong.Authority == null)) {
                    if ((_strong.Key.HasValue && context.ShouldForceLoad("authority", _strong.Key.Value))) {
                        OpenIZ.Core.Model.DataTypes.AssigningAuthority _delay = null;
                        _delay = context.JsonContext.LoadRelated<OpenIZ.Core.Model.DataTypes.AssigningAuthority>(_strong.AuthorityKey);
                        _strong.Authority = _delay;
                        if ((_delay != null)) {
                            _loaded = true;
                            context.JsonContext.WritePropertyUtil(w, "authority", _strong.Authority, context);
                        }
                    }
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "authority", _strong.Authority, context);
                }
            }
            if (context.ShouldSerialize("effectiveVersionSequence")) {
                if ((_strong.EffectiveVersionSequenceId == null)) {
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "effectiveVersionSequence", _strong.EffectiveVersionSequenceId, context);
                }
            }
            if (context.ShouldSerialize("obsoleteVersionSequence")) {
                if ((_strong.ObsoleteVersionSequenceId == null)) {
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "obsoleteVersionSequence", _strong.ObsoleteVersionSequenceId, context);
                }
            }
            if (context.ShouldSerialize("modifiedOn")) {
                if ((_strong.ModifiedOn == null)) {
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "modifiedOn", _strong.ModifiedOn, context);
                }
            }
            if (context.ShouldSerialize("source")) {
                if ((_strong.SourceEntityKey == null)) {
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "source", _strong.SourceEntityKey, context);
                }
            }
            if (context.ShouldSerialize("id")) {
                if ((_strong.Key == null)) {
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "id", _strong.Key, context);
                }
            }
            if (context.ShouldSerialize("etag")) {
                if ((_strong.Tag == null)) {
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "etag", _strong.Tag, context);
                }
            }
            if ((_loaded && _strong.Key.HasValue)) {
                ((OpenIZ.Core.Services.IDataCachingService)(OpenIZ.Core.ApplicationServiceContext.Current.GetService(typeof(OpenIZ.Core.Services.IDataCachingService)))).Add(_strong);
            }
        }
        
        public object Deserialize(Newtonsoft.Json.JsonReader r, System.Type asType, OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext context) {
            OpenIZ.Core.Model.DataTypes.ActIdentifier _retVal = new OpenIZ.Core.Model.DataTypes.ActIdentifier();
            int _depth = r.Depth;
            if ((r.TokenType != Newtonsoft.Json.JsonToken.StartObject)) {
                _depth = (_depth - 1);
            }
            for (
            ; r.Read(); 
            ) {
                if ((r.TokenType == Newtonsoft.Json.JsonToken.PropertyName)) {
                    if ("id".Equals(r.Value)) {
                        r.Read();
                        System.Nullable<System.Guid> _instance = ((System.Nullable<System.Guid>)(context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<System.Guid>), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("id", context.JsonContext, _retVal, context))));
                        if ((_instance != null)) {
                            _retVal.Key = _instance;
                        }
                    }
                    else {
                        if ("source".Equals(r.Value)) {
                            r.Read();
                            System.Nullable<System.Guid> _instance = ((System.Nullable<System.Guid>)(context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<System.Guid>), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("source", context.JsonContext, _retVal, context))));
                            if ((_instance != null)) {
                                _retVal.SourceEntityKey = _instance;
                            }
                        }
                        else {
                            if ("obsoleteVersionSequence".Equals(r.Value)) {
                                r.Read();
                                System.Nullable<decimal> _instance = ((System.Nullable<decimal>)(context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<decimal>), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("obsoleteVersionSequence", context.JsonContext, _retVal, context))));
                                if ((_instance != null)) {
                                    _retVal.ObsoleteVersionSequenceId = _instance;
                                }
                            }
                            else {
                                if ("effectiveVersionSequence".Equals(r.Value)) {
                                    r.Read();
                                    System.Nullable<decimal> _instance = ((System.Nullable<decimal>)(context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<decimal>), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("effectiveVersionSequence", context.JsonContext, _retVal, context))));
                                    if ((_instance != null)) {
                                        _retVal.EffectiveVersionSequenceId = _instance;
                                    }
                                }
                                else {
                                    if ("authority".Equals(r.Value)) {
                                        r.Read();
                                        OpenIZ.Core.Model.DataTypes.AssigningAuthority _instance = ((OpenIZ.Core.Model.DataTypes.AssigningAuthority)(context.JsonContext.ReadElementUtil(r, typeof(OpenIZ.Core.Model.DataTypes.AssigningAuthority), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("authority", context.JsonContext, _retVal, context))));
                                        if ((_instance != null)) {
                                            _retVal.Authority = _instance;
                                        }
                                    }
                                    else {
                                        if ("type".Equals(r.Value)) {
                                            r.Read();
                                            OpenIZ.Core.Model.DataTypes.IdentifierType _instance = ((OpenIZ.Core.Model.DataTypes.IdentifierType)(context.JsonContext.ReadElementUtil(r, typeof(OpenIZ.Core.Model.DataTypes.IdentifierType), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("type", context.JsonContext, _retVal, context))));
                                            if ((_instance != null)) {
                                                _retVal.IdentifierType = _instance;
                                            }
                                        }
                                        else {
                                            if ("value".Equals(r.Value)) {
                                                r.Read();
                                                string _instance = ((string)(context.JsonContext.ReadElementUtil(r, typeof(string), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("value", context.JsonContext, _retVal, context))));
                                                if ((_instance != null)) {
                                                    _retVal.Value = _instance;
                                                }
                                            }
                                            else {
                                                if ("$type".Equals(r.Value)) {
                                                    System.Type _type = this.m_binder.BindToType("OpenIZ.Core.Model, Version=0.6.14.21496, Culture=neutral, PublicKeyToken=null", r.ReadAsString());
                                                    if ((_type != typeof(OpenIZ.Core.Model.DataTypes.ActIdentifier))) {
                                                        OpenIZ.Core.Model.DataTypes.ActIdentifier _nretVal = ((OpenIZ.Core.Model.DataTypes.ActIdentifier)(context.JsonContext.GetFormatter(_type).Deserialize(r, _type, context)));
                                                        _nretVal.CopyObjectData(_retVal);
                                                        return _nretVal;
                                                    }
                                                }
                                                else {
                                                    r.Skip();
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
                else {
                    if (((r.TokenType == Newtonsoft.Json.JsonToken.EndObject) 
                                && (r.Depth == _depth))) {
                        return _retVal;
                    }
                    else {
                        throw new Newtonsoft.Json.JsonSerializationException("JSON in invalid state");
                    }
                }
            }
            return _retVal;
        }
        
        public object FromSimpleValue(object o) {
            return null;
        }
        
        public object GetSimpleValue(object o) {
            return null;
        }
    }
    
    public class IdentifierTypeViewModelSerializer : OpenIZ.Core.Applets.ViewModel.Json.IJsonViewModelTypeFormatter {
        
        private OpenIZ.Core.Model.Serialization.ModelSerializationBinder m_binder = new OpenIZ.Core.Model.Serialization.ModelSerializationBinder();
        
        private OpenIZ.Core.Diagnostics.Tracer m_tracer = OpenIZ.Core.Diagnostics.Tracer.GetTracer(typeof(IdentifierTypeViewModelSerializer));
        
        public System.Type HandlesType {
            get {
                return typeof(OpenIZ.Core.Model.DataTypes.IdentifierType);
            }
        }
        
        public void Serialize(Newtonsoft.Json.JsonWriter w, OpenIZ.Core.Model.IdentifiedData o, OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext context) {
            if ((o == null)) {
                throw new System.ArgumentNullException("o");
            }
            OpenIZ.Core.Model.DataTypes.IdentifierType _strong = null;
            OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext _jsonContext = null;
            bool _loaded = false;
            try {
                _strong = ((OpenIZ.Core.Model.DataTypes.IdentifierType)(o));
            }
            catch (System.Exception e) {
                this.m_tracer.TraceError(string.Format("Casting Error: {0}", e));
                throw new System.ArgumentException(string.Format("Invalid type {0} provided, expected {1}", o.GetType(), typeof(OpenIZ.Core.Model.DataTypes.IdentifierType)));
            }
            if (context.ShouldSerialize("scopeConcept")) {
                if ((_strong.ScopeConceptKey == null)) {
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "scopeConcept", _strong.ScopeConceptKey, context);
                }
            }
            if (context.ShouldSerialize("typeConcept")) {
                if ((_strong.TypeConceptKey == null)) {
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "typeConcept", _strong.TypeConceptKey, context);
                }
            }
            if (context.ShouldSerialize("typeConceptModel")) {
                if ((_strong.TypeConcept == null)) {
                    if ((_strong.Key.HasValue && context.ShouldForceLoad("typeConceptModel", _strong.Key.Value))) {
                        OpenIZ.Core.Model.DataTypes.Concept _delay = null;
                        _delay = context.JsonContext.LoadRelated<OpenIZ.Core.Model.DataTypes.Concept>(_strong.TypeConceptKey);
                        _strong.TypeConcept = _delay;
                        if ((_delay != null)) {
                            _loaded = true;
                            context.JsonContext.WritePropertyUtil(w, "typeConceptModel", _strong.TypeConcept, context);
                        }
                    }
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "typeConceptModel", _strong.TypeConcept, context);
                }
            }
            if (context.ShouldSerialize("scopeConceptModel")) {
                if ((_strong.ScopeConcept == null)) {
                    if ((_strong.Key.HasValue && context.ShouldForceLoad("scopeConceptModel", _strong.Key.Value))) {
                        OpenIZ.Core.Model.DataTypes.Concept _delay = null;
                        _delay = context.JsonContext.LoadRelated<OpenIZ.Core.Model.DataTypes.Concept>(_strong.ScopeConceptKey);
                        _strong.ScopeConcept = _delay;
                        if ((_delay != null)) {
                            _loaded = true;
                            context.JsonContext.WritePropertyUtil(w, "scopeConceptModel", _strong.ScopeConcept, context);
                        }
                    }
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "scopeConceptModel", _strong.ScopeConcept, context);
                }
            }
            if (context.ShouldSerialize("creationTimeModel")) {
                if ((_strong.CreationTime == null)) {
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "creationTimeModel", _strong.CreationTime, context);
                }
            }
            if (context.ShouldSerialize("creationTime")) {
                if ((_strong.CreationTimeXml == null)) {
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "creationTime", _strong.CreationTimeXml, context);
                }
            }
            if (context.ShouldSerialize("obsoletionTimeModel")) {
                if ((_strong.ObsoletionTime == null)) {
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "obsoletionTimeModel", _strong.ObsoletionTime, context);
                }
            }
            if (context.ShouldSerialize("obsoletionTime")) {
                if ((_strong.ObsoletionTimeXml == null)) {
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "obsoletionTime", _strong.ObsoletionTimeXml, context);
                }
            }
            if (context.ShouldSerialize("createdBy")) {
                if ((_strong.CreatedByKey == null)) {
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "createdBy", _strong.CreatedByKey, context);
                }
            }
            if (context.ShouldSerialize("obsoletedBy")) {
                if ((_strong.ObsoletedByKey == null)) {
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "obsoletedBy", _strong.ObsoletedByKey, context);
                }
            }
            if (context.ShouldSerialize("id")) {
                if ((_strong.Key == null)) {
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "id", _strong.Key, context);
                }
            }
            if (context.ShouldSerialize("etag")) {
                if ((_strong.Tag == null)) {
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "etag", _strong.Tag, context);
                }
            }
            if ((_loaded && _strong.Key.HasValue)) {
                ((OpenIZ.Core.Services.IDataCachingService)(OpenIZ.Core.ApplicationServiceContext.Current.GetService(typeof(OpenIZ.Core.Services.IDataCachingService)))).Add(_strong);
            }
        }
        
        public object Deserialize(Newtonsoft.Json.JsonReader r, System.Type asType, OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext context) {
            OpenIZ.Core.Model.DataTypes.IdentifierType _retVal = new OpenIZ.Core.Model.DataTypes.IdentifierType();
            int _depth = r.Depth;
            if ((r.TokenType != Newtonsoft.Json.JsonToken.StartObject)) {
                _depth = (_depth - 1);
            }
            for (
            ; r.Read(); 
            ) {
                if ((r.TokenType == Newtonsoft.Json.JsonToken.PropertyName)) {
                    if ("id".Equals(r.Value)) {
                        r.Read();
                        System.Nullable<System.Guid> _instance = ((System.Nullable<System.Guid>)(context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<System.Guid>), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("id", context.JsonContext, _retVal, context))));
                        if ((_instance != null)) {
                            _retVal.Key = _instance;
                        }
                    }
                    else {
                        if ("obsoletedBy".Equals(r.Value)) {
                            r.Read();
                            System.Nullable<System.Guid> _instance = ((System.Nullable<System.Guid>)(context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<System.Guid>), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("obsoletedBy", context.JsonContext, _retVal, context))));
                            if ((_instance != null)) {
                                _retVal.ObsoletedByKey = _instance;
                            }
                        }
                        else {
                            if ("createdBy".Equals(r.Value)) {
                                r.Read();
                                System.Nullable<System.Guid> _instance = ((System.Nullable<System.Guid>)(context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<System.Guid>), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("createdBy", context.JsonContext, _retVal, context))));
                                if ((_instance != null)) {
                                    _retVal.CreatedByKey = _instance;
                                }
                            }
                            else {
                                if ("obsoletionTime".Equals(r.Value)) {
                                    r.Read();
                                    string _instance = ((string)(context.JsonContext.ReadElementUtil(r, typeof(string), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("obsoletionTime", context.JsonContext, _retVal, context))));
                                    if ((_instance != null)) {
                                        _retVal.ObsoletionTimeXml = _instance;
                                    }
                                }
                                else {
                                    if ("obsoletionTimeModel".Equals(r.Value)) {
                                        r.Read();
                                        System.Nullable<System.DateTimeOffset> _instance = ((System.Nullable<System.DateTimeOffset>)(context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<System.DateTimeOffset>), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("obsoletionTimeModel", context.JsonContext, _retVal, context))));
                                        if ((_instance != null)) {
                                            _retVal.ObsoletionTime = _instance;
                                        }
                                    }
                                    else {
                                        if ("creationTime".Equals(r.Value)) {
                                            r.Read();
                                            string _instance = ((string)(context.JsonContext.ReadElementUtil(r, typeof(string), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("creationTime", context.JsonContext, _retVal, context))));
                                            if ((_instance != null)) {
                                                _retVal.CreationTimeXml = _instance;
                                            }
                                        }
                                        else {
                                            if ("creationTimeModel".Equals(r.Value)) {
                                                r.Read();
                                                System.DateTimeOffset _instance = ((System.DateTimeOffset)(context.JsonContext.ReadElementUtil(r, typeof(System.DateTimeOffset), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("creationTimeModel", context.JsonContext, _retVal, context))));
                                                if ((_instance != null)) {
                                                    _retVal.CreationTime = _instance;
                                                }
                                            }
                                            else {
                                                if ("scopeConceptModel".Equals(r.Value)) {
                                                    r.Read();
                                                    OpenIZ.Core.Model.DataTypes.Concept _instance = ((OpenIZ.Core.Model.DataTypes.Concept)(context.JsonContext.ReadElementUtil(r, typeof(OpenIZ.Core.Model.DataTypes.Concept), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("scopeConceptModel", context.JsonContext, _retVal, context))));
                                                    if ((_instance != null)) {
                                                        _retVal.ScopeConcept = _instance;
                                                    }
                                                }
                                                else {
                                                    if ("typeConceptModel".Equals(r.Value)) {
                                                        r.Read();
                                                        OpenIZ.Core.Model.DataTypes.Concept _instance = ((OpenIZ.Core.Model.DataTypes.Concept)(context.JsonContext.ReadElementUtil(r, typeof(OpenIZ.Core.Model.DataTypes.Concept), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("typeConceptModel", context.JsonContext, _retVal, context))));
                                                        if ((_instance != null)) {
                                                            _retVal.TypeConcept = _instance;
                                                        }
                                                    }
                                                    else {
                                                        if ("typeConcept".Equals(r.Value)) {
                                                            r.Read();
                                                            System.Nullable<System.Guid> _instance = ((System.Nullable<System.Guid>)(context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<System.Guid>), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("typeConcept", context.JsonContext, _retVal, context))));
                                                            if ((_instance != null)) {
                                                                _retVal.TypeConceptKey = _instance;
                                                            }
                                                        }
                                                        else {
                                                            if ("scopeConcept".Equals(r.Value)) {
                                                                r.Read();
                                                                System.Nullable<System.Guid> _instance = ((System.Nullable<System.Guid>)(context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<System.Guid>), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("scopeConcept", context.JsonContext, _retVal, context))));
                                                                if ((_instance != null)) {
                                                                    _retVal.ScopeConceptKey = _instance;
                                                                }
                                                            }
                                                            else {
                                                                if ("$type".Equals(r.Value)) {
                                                                    System.Type _type = this.m_binder.BindToType("OpenIZ.Core.Model, Version=0.6.14.21496, Culture=neutral, PublicKeyToken=null", r.ReadAsString());
                                                                    if ((_type != typeof(OpenIZ.Core.Model.DataTypes.IdentifierType))) {
                                                                        OpenIZ.Core.Model.DataTypes.IdentifierType _nretVal = ((OpenIZ.Core.Model.DataTypes.IdentifierType)(context.JsonContext.GetFormatter(_type).Deserialize(r, _type, context)));
                                                                        _nretVal.CopyObjectData(_retVal);
                                                                        return _nretVal;
                                                                    }
                                                                }
                                                                else {
                                                                    r.Skip();
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
                else {
                    if (((r.TokenType == Newtonsoft.Json.JsonToken.EndObject) 
                                && (r.Depth == _depth))) {
                        return _retVal;
                    }
                    else {
                        throw new Newtonsoft.Json.JsonSerializationException("JSON in invalid state");
                    }
                }
            }
            return _retVal;
        }
        
        public object FromSimpleValue(object o) {
            return null;
        }
        
        public object GetSimpleValue(object o) {
            return null;
        }
    }
    
    public class EntityNoteViewModelSerializer : OpenIZ.Core.Applets.ViewModel.Json.IJsonViewModelTypeFormatter {
        
        private OpenIZ.Core.Model.Serialization.ModelSerializationBinder m_binder = new OpenIZ.Core.Model.Serialization.ModelSerializationBinder();
        
        private OpenIZ.Core.Diagnostics.Tracer m_tracer = OpenIZ.Core.Diagnostics.Tracer.GetTracer(typeof(EntityNoteViewModelSerializer));
        
        public System.Type HandlesType {
            get {
                return typeof(OpenIZ.Core.Model.DataTypes.EntityNote);
            }
        }
        
        public void Serialize(Newtonsoft.Json.JsonWriter w, OpenIZ.Core.Model.IdentifiedData o, OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext context) {
            if ((o == null)) {
                throw new System.ArgumentNullException("o");
            }
            OpenIZ.Core.Model.DataTypes.EntityNote _strong = null;
            OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext _jsonContext = null;
            bool _loaded = false;
            try {
                _strong = ((OpenIZ.Core.Model.DataTypes.EntityNote)(o));
            }
            catch (System.Exception e) {
                this.m_tracer.TraceError(string.Format("Casting Error: {0}", e));
                throw new System.ArgumentException(string.Format("Invalid type {0} provided, expected {1}", o.GetType(), typeof(OpenIZ.Core.Model.DataTypes.EntityNote)));
            }
            if (context.ShouldSerialize("text")) {
                if ((_strong.Text == null)) {
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "text", _strong.Text, context);
                }
            }
            if (context.ShouldSerialize("author")) {
                if ((_strong.AuthorKey == null)) {
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "author", _strong.AuthorKey, context);
                }
            }
            if (context.ShouldSerialize("authorModel")) {
                if ((_strong.Author == null)) {
                    if ((_strong.Key.HasValue && context.ShouldForceLoad("authorModel", _strong.Key.Value))) {
                        OpenIZ.Core.Model.Entities.Entity _delay = null;
                        _delay = context.JsonContext.LoadRelated<OpenIZ.Core.Model.Entities.Entity>(_strong.AuthorKey);
                        _strong.Author = _delay;
                        if ((_delay != null)) {
                            _loaded = true;
                            context.JsonContext.WritePropertyUtil(w, "authorModel", _strong.Author, context);
                        }
                    }
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "authorModel", _strong.Author, context);
                }
            }
            if (context.ShouldSerialize("effectiveVersionSequence")) {
                if ((_strong.EffectiveVersionSequenceId == null)) {
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "effectiveVersionSequence", _strong.EffectiveVersionSequenceId, context);
                }
            }
            if (context.ShouldSerialize("obsoleteVersionSequence")) {
                if ((_strong.ObsoleteVersionSequenceId == null)) {
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "obsoleteVersionSequence", _strong.ObsoleteVersionSequenceId, context);
                }
            }
            if (context.ShouldSerialize("modifiedOn")) {
                if ((_strong.ModifiedOn == null)) {
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "modifiedOn", _strong.ModifiedOn, context);
                }
            }
            if (context.ShouldSerialize("source")) {
                if ((_strong.SourceEntityKey == null)) {
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "source", _strong.SourceEntityKey, context);
                }
            }
            if (context.ShouldSerialize("id")) {
                if ((_strong.Key == null)) {
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "id", _strong.Key, context);
                }
            }
            if (context.ShouldSerialize("etag")) {
                if ((_strong.Tag == null)) {
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "etag", _strong.Tag, context);
                }
            }
            if ((_loaded && _strong.Key.HasValue)) {
                ((OpenIZ.Core.Services.IDataCachingService)(OpenIZ.Core.ApplicationServiceContext.Current.GetService(typeof(OpenIZ.Core.Services.IDataCachingService)))).Add(_strong);
            }
        }
        
        public object Deserialize(Newtonsoft.Json.JsonReader r, System.Type asType, OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext context) {
            OpenIZ.Core.Model.DataTypes.EntityNote _retVal = new OpenIZ.Core.Model.DataTypes.EntityNote();
            int _depth = r.Depth;
            if ((r.TokenType != Newtonsoft.Json.JsonToken.StartObject)) {
                _depth = (_depth - 1);
            }
            for (
            ; r.Read(); 
            ) {
                if ((r.TokenType == Newtonsoft.Json.JsonToken.PropertyName)) {
                    if ("id".Equals(r.Value)) {
                        r.Read();
                        System.Nullable<System.Guid> _instance = ((System.Nullable<System.Guid>)(context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<System.Guid>), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("id", context.JsonContext, _retVal, context))));
                        if ((_instance != null)) {
                            _retVal.Key = _instance;
                        }
                    }
                    else {
                        if ("source".Equals(r.Value)) {
                            r.Read();
                            System.Nullable<System.Guid> _instance = ((System.Nullable<System.Guid>)(context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<System.Guid>), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("source", context.JsonContext, _retVal, context))));
                            if ((_instance != null)) {
                                _retVal.SourceEntityKey = _instance;
                            }
                        }
                        else {
                            if ("obsoleteVersionSequence".Equals(r.Value)) {
                                r.Read();
                                System.Nullable<decimal> _instance = ((System.Nullable<decimal>)(context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<decimal>), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("obsoleteVersionSequence", context.JsonContext, _retVal, context))));
                                if ((_instance != null)) {
                                    _retVal.ObsoleteVersionSequenceId = _instance;
                                }
                            }
                            else {
                                if ("effectiveVersionSequence".Equals(r.Value)) {
                                    r.Read();
                                    System.Nullable<decimal> _instance = ((System.Nullable<decimal>)(context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<decimal>), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("effectiveVersionSequence", context.JsonContext, _retVal, context))));
                                    if ((_instance != null)) {
                                        _retVal.EffectiveVersionSequenceId = _instance;
                                    }
                                }
                                else {
                                    if ("authorModel".Equals(r.Value)) {
                                        r.Read();
                                        OpenIZ.Core.Model.Entities.Entity _instance = ((OpenIZ.Core.Model.Entities.Entity)(context.JsonContext.ReadElementUtil(r, typeof(OpenIZ.Core.Model.Entities.Entity), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("authorModel", context.JsonContext, _retVal, context))));
                                        if ((_instance != null)) {
                                            _retVal.Author = _instance;
                                        }
                                    }
                                    else {
                                        if ("author".Equals(r.Value)) {
                                            r.Read();
                                            System.Nullable<System.Guid> _instance = ((System.Nullable<System.Guid>)(context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<System.Guid>), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("author", context.JsonContext, _retVal, context))));
                                            if ((_instance != null)) {
                                                _retVal.AuthorKey = _instance;
                                            }
                                        }
                                        else {
                                            if ("text".Equals(r.Value)) {
                                                r.Read();
                                                string _instance = ((string)(context.JsonContext.ReadElementUtil(r, typeof(string), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("text", context.JsonContext, _retVal, context))));
                                                if ((_instance != null)) {
                                                    _retVal.Text = _instance;
                                                }
                                            }
                                            else {
                                                if ("$type".Equals(r.Value)) {
                                                    System.Type _type = this.m_binder.BindToType("OpenIZ.Core.Model, Version=0.6.14.21496, Culture=neutral, PublicKeyToken=null", r.ReadAsString());
                                                    if ((_type != typeof(OpenIZ.Core.Model.DataTypes.EntityNote))) {
                                                        OpenIZ.Core.Model.DataTypes.EntityNote _nretVal = ((OpenIZ.Core.Model.DataTypes.EntityNote)(context.JsonContext.GetFormatter(_type).Deserialize(r, _type, context)));
                                                        _nretVal.CopyObjectData(_retVal);
                                                        return _nretVal;
                                                    }
                                                }
                                                else {
                                                    r.Skip();
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
                else {
                    if (((r.TokenType == Newtonsoft.Json.JsonToken.EndObject) 
                                && (r.Depth == _depth))) {
                        return _retVal;
                    }
                    else {
                        throw new Newtonsoft.Json.JsonSerializationException("JSON in invalid state");
                    }
                }
            }
            return _retVal;
        }
        
        public object FromSimpleValue(object o) {
            string _strong = null;
            if ((o == null)) {
                return null;
            }
            try {
                _strong = o.ToString();
            }
            catch (System.Exception e) {
                this.m_tracer.TraceError(string.Format("Casting Error: {0}", e));
                return null;
            }
            OpenIZ.Core.Model.DataTypes.EntityNote _retVal = new OpenIZ.Core.Model.DataTypes.EntityNote();
            _retVal.Text = _strong;
            return _retVal;
        }
        
        public object GetSimpleValue(object o) {
            if ((o == null)) {
                return null;
            }
            OpenIZ.Core.Model.DataTypes.EntityNote _strong = null;
            try {
                _strong = ((OpenIZ.Core.Model.DataTypes.EntityNote)(o));
            }
            catch (System.Exception e) {
                this.m_tracer.TraceError(string.Format("Casting Error: {0}", e));
                return null;
            }
            return _strong.Text;
        }
    }
    
    public class ActNoteViewModelSerializer : OpenIZ.Core.Applets.ViewModel.Json.IJsonViewModelTypeFormatter {
        
        private OpenIZ.Core.Model.Serialization.ModelSerializationBinder m_binder = new OpenIZ.Core.Model.Serialization.ModelSerializationBinder();
        
        private OpenIZ.Core.Diagnostics.Tracer m_tracer = OpenIZ.Core.Diagnostics.Tracer.GetTracer(typeof(ActNoteViewModelSerializer));
        
        public System.Type HandlesType {
            get {
                return typeof(OpenIZ.Core.Model.DataTypes.ActNote);
            }
        }
        
        public void Serialize(Newtonsoft.Json.JsonWriter w, OpenIZ.Core.Model.IdentifiedData o, OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext context) {
            if ((o == null)) {
                throw new System.ArgumentNullException("o");
            }
            OpenIZ.Core.Model.DataTypes.ActNote _strong = null;
            OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext _jsonContext = null;
            bool _loaded = false;
            try {
                _strong = ((OpenIZ.Core.Model.DataTypes.ActNote)(o));
            }
            catch (System.Exception e) {
                this.m_tracer.TraceError(string.Format("Casting Error: {0}", e));
                throw new System.ArgumentException(string.Format("Invalid type {0} provided, expected {1}", o.GetType(), typeof(OpenIZ.Core.Model.DataTypes.ActNote)));
            }
            if (context.ShouldSerialize("text")) {
                if ((_strong.Text == null)) {
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "text", _strong.Text, context);
                }
            }
            if (context.ShouldSerialize("author")) {
                if ((_strong.AuthorKey == null)) {
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "author", _strong.AuthorKey, context);
                }
            }
            if (context.ShouldSerialize("authorModel")) {
                if ((_strong.Author == null)) {
                    if ((_strong.Key.HasValue && context.ShouldForceLoad("authorModel", _strong.Key.Value))) {
                        OpenIZ.Core.Model.Entities.Entity _delay = null;
                        _delay = context.JsonContext.LoadRelated<OpenIZ.Core.Model.Entities.Entity>(_strong.AuthorKey);
                        _strong.Author = _delay;
                        if ((_delay != null)) {
                            _loaded = true;
                            context.JsonContext.WritePropertyUtil(w, "authorModel", _strong.Author, context);
                        }
                    }
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "authorModel", _strong.Author, context);
                }
            }
            if (context.ShouldSerialize("effectiveVersionSequence")) {
                if ((_strong.EffectiveVersionSequenceId == null)) {
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "effectiveVersionSequence", _strong.EffectiveVersionSequenceId, context);
                }
            }
            if (context.ShouldSerialize("obsoleteVersionSequence")) {
                if ((_strong.ObsoleteVersionSequenceId == null)) {
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "obsoleteVersionSequence", _strong.ObsoleteVersionSequenceId, context);
                }
            }
            if (context.ShouldSerialize("modifiedOn")) {
                if ((_strong.ModifiedOn == null)) {
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "modifiedOn", _strong.ModifiedOn, context);
                }
            }
            if (context.ShouldSerialize("source")) {
                if ((_strong.SourceEntityKey == null)) {
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "source", _strong.SourceEntityKey, context);
                }
            }
            if (context.ShouldSerialize("id")) {
                if ((_strong.Key == null)) {
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "id", _strong.Key, context);
                }
            }
            if (context.ShouldSerialize("etag")) {
                if ((_strong.Tag == null)) {
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "etag", _strong.Tag, context);
                }
            }
            if ((_loaded && _strong.Key.HasValue)) {
                ((OpenIZ.Core.Services.IDataCachingService)(OpenIZ.Core.ApplicationServiceContext.Current.GetService(typeof(OpenIZ.Core.Services.IDataCachingService)))).Add(_strong);
            }
        }
        
        public object Deserialize(Newtonsoft.Json.JsonReader r, System.Type asType, OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext context) {
            OpenIZ.Core.Model.DataTypes.ActNote _retVal = new OpenIZ.Core.Model.DataTypes.ActNote();
            int _depth = r.Depth;
            if ((r.TokenType != Newtonsoft.Json.JsonToken.StartObject)) {
                _depth = (_depth - 1);
            }
            for (
            ; r.Read(); 
            ) {
                if ((r.TokenType == Newtonsoft.Json.JsonToken.PropertyName)) {
                    if ("id".Equals(r.Value)) {
                        r.Read();
                        System.Nullable<System.Guid> _instance = ((System.Nullable<System.Guid>)(context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<System.Guid>), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("id", context.JsonContext, _retVal, context))));
                        if ((_instance != null)) {
                            _retVal.Key = _instance;
                        }
                    }
                    else {
                        if ("source".Equals(r.Value)) {
                            r.Read();
                            System.Nullable<System.Guid> _instance = ((System.Nullable<System.Guid>)(context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<System.Guid>), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("source", context.JsonContext, _retVal, context))));
                            if ((_instance != null)) {
                                _retVal.SourceEntityKey = _instance;
                            }
                        }
                        else {
                            if ("obsoleteVersionSequence".Equals(r.Value)) {
                                r.Read();
                                System.Nullable<decimal> _instance = ((System.Nullable<decimal>)(context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<decimal>), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("obsoleteVersionSequence", context.JsonContext, _retVal, context))));
                                if ((_instance != null)) {
                                    _retVal.ObsoleteVersionSequenceId = _instance;
                                }
                            }
                            else {
                                if ("effectiveVersionSequence".Equals(r.Value)) {
                                    r.Read();
                                    System.Nullable<decimal> _instance = ((System.Nullable<decimal>)(context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<decimal>), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("effectiveVersionSequence", context.JsonContext, _retVal, context))));
                                    if ((_instance != null)) {
                                        _retVal.EffectiveVersionSequenceId = _instance;
                                    }
                                }
                                else {
                                    if ("authorModel".Equals(r.Value)) {
                                        r.Read();
                                        OpenIZ.Core.Model.Entities.Entity _instance = ((OpenIZ.Core.Model.Entities.Entity)(context.JsonContext.ReadElementUtil(r, typeof(OpenIZ.Core.Model.Entities.Entity), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("authorModel", context.JsonContext, _retVal, context))));
                                        if ((_instance != null)) {
                                            _retVal.Author = _instance;
                                        }
                                    }
                                    else {
                                        if ("author".Equals(r.Value)) {
                                            r.Read();
                                            System.Nullable<System.Guid> _instance = ((System.Nullable<System.Guid>)(context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<System.Guid>), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("author", context.JsonContext, _retVal, context))));
                                            if ((_instance != null)) {
                                                _retVal.AuthorKey = _instance;
                                            }
                                        }
                                        else {
                                            if ("text".Equals(r.Value)) {
                                                r.Read();
                                                string _instance = ((string)(context.JsonContext.ReadElementUtil(r, typeof(string), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("text", context.JsonContext, _retVal, context))));
                                                if ((_instance != null)) {
                                                    _retVal.Text = _instance;
                                                }
                                            }
                                            else {
                                                if ("$type".Equals(r.Value)) {
                                                    System.Type _type = this.m_binder.BindToType("OpenIZ.Core.Model, Version=0.6.14.21496, Culture=neutral, PublicKeyToken=null", r.ReadAsString());
                                                    if ((_type != typeof(OpenIZ.Core.Model.DataTypes.ActNote))) {
                                                        OpenIZ.Core.Model.DataTypes.ActNote _nretVal = ((OpenIZ.Core.Model.DataTypes.ActNote)(context.JsonContext.GetFormatter(_type).Deserialize(r, _type, context)));
                                                        _nretVal.CopyObjectData(_retVal);
                                                        return _nretVal;
                                                    }
                                                }
                                                else {
                                                    r.Skip();
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
                else {
                    if (((r.TokenType == Newtonsoft.Json.JsonToken.EndObject) 
                                && (r.Depth == _depth))) {
                        return _retVal;
                    }
                    else {
                        throw new Newtonsoft.Json.JsonSerializationException("JSON in invalid state");
                    }
                }
            }
            return _retVal;
        }
        
        public object FromSimpleValue(object o) {
            string _strong = null;
            if ((o == null)) {
                return null;
            }
            try {
                _strong = o.ToString();
            }
            catch (System.Exception e) {
                this.m_tracer.TraceError(string.Format("Casting Error: {0}", e));
                return null;
            }
            OpenIZ.Core.Model.DataTypes.ActNote _retVal = new OpenIZ.Core.Model.DataTypes.ActNote();
            _retVal.Text = _strong;
            return _retVal;
        }
        
        public object GetSimpleValue(object o) {
            if ((o == null)) {
                return null;
            }
            OpenIZ.Core.Model.DataTypes.ActNote _strong = null;
            try {
                _strong = ((OpenIZ.Core.Model.DataTypes.ActNote)(o));
            }
            catch (System.Exception e) {
                this.m_tracer.TraceError(string.Format("Casting Error: {0}", e));
                return null;
            }
            return _strong.Text;
        }
    }
    
    public class PhoneticAlgorithmViewModelSerializer : OpenIZ.Core.Applets.ViewModel.Json.IJsonViewModelTypeFormatter {
        
        private OpenIZ.Core.Model.Serialization.ModelSerializationBinder m_binder = new OpenIZ.Core.Model.Serialization.ModelSerializationBinder();
        
        private OpenIZ.Core.Diagnostics.Tracer m_tracer = OpenIZ.Core.Diagnostics.Tracer.GetTracer(typeof(PhoneticAlgorithmViewModelSerializer));
        
        public System.Type HandlesType {
            get {
                return typeof(OpenIZ.Core.Model.DataTypes.PhoneticAlgorithm);
            }
        }
        
        public void Serialize(Newtonsoft.Json.JsonWriter w, OpenIZ.Core.Model.IdentifiedData o, OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext context) {
            if ((o == null)) {
                throw new System.ArgumentNullException("o");
            }
            OpenIZ.Core.Model.DataTypes.PhoneticAlgorithm _strong = null;
            OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext _jsonContext = null;
            bool _loaded = false;
            try {
                _strong = ((OpenIZ.Core.Model.DataTypes.PhoneticAlgorithm)(o));
            }
            catch (System.Exception e) {
                this.m_tracer.TraceError(string.Format("Casting Error: {0}", e));
                throw new System.ArgumentException(string.Format("Invalid type {0} provided, expected {1}", o.GetType(), typeof(OpenIZ.Core.Model.DataTypes.PhoneticAlgorithm)));
            }
            if (context.ShouldSerialize("name")) {
                if ((_strong.Name == null)) {
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "name", _strong.Name, context);
                }
            }
            if (context.ShouldSerialize("handler")) {
                if ((_strong.Handler == null)) {
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "handler", _strong.Handler, context);
                }
            }
            if (context.ShouldSerialize("updatedTime")) {
                if ((_strong.UpdatedTimeXml == null)) {
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "updatedTime", _strong.UpdatedTimeXml, context);
                }
            }
            if (context.ShouldSerialize("updatedBy")) {
                if ((_strong.UpdatedByKey == null)) {
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "updatedBy", _strong.UpdatedByKey, context);
                }
            }
            if (context.ShouldSerialize("creationTimeModel")) {
                if ((_strong.CreationTime == null)) {
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "creationTimeModel", _strong.CreationTime, context);
                }
            }
            if (context.ShouldSerialize("creationTime")) {
                if ((_strong.CreationTimeXml == null)) {
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "creationTime", _strong.CreationTimeXml, context);
                }
            }
            if (context.ShouldSerialize("obsoletionTimeModel")) {
                if ((_strong.ObsoletionTime == null)) {
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "obsoletionTimeModel", _strong.ObsoletionTime, context);
                }
            }
            if (context.ShouldSerialize("obsoletionTime")) {
                if ((_strong.ObsoletionTimeXml == null)) {
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "obsoletionTime", _strong.ObsoletionTimeXml, context);
                }
            }
            if (context.ShouldSerialize("createdBy")) {
                if ((_strong.CreatedByKey == null)) {
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "createdBy", _strong.CreatedByKey, context);
                }
            }
            if (context.ShouldSerialize("obsoletedBy")) {
                if ((_strong.ObsoletedByKey == null)) {
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "obsoletedBy", _strong.ObsoletedByKey, context);
                }
            }
            if (context.ShouldSerialize("id")) {
                if ((_strong.Key == null)) {
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "id", _strong.Key, context);
                }
            }
            if (context.ShouldSerialize("etag")) {
                if ((_strong.Tag == null)) {
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "etag", _strong.Tag, context);
                }
            }
            if ((_loaded && _strong.Key.HasValue)) {
                ((OpenIZ.Core.Services.IDataCachingService)(OpenIZ.Core.ApplicationServiceContext.Current.GetService(typeof(OpenIZ.Core.Services.IDataCachingService)))).Add(_strong);
            }
        }
        
        public object Deserialize(Newtonsoft.Json.JsonReader r, System.Type asType, OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext context) {
            OpenIZ.Core.Model.DataTypes.PhoneticAlgorithm _retVal = new OpenIZ.Core.Model.DataTypes.PhoneticAlgorithm();
            int _depth = r.Depth;
            if ((r.TokenType != Newtonsoft.Json.JsonToken.StartObject)) {
                _depth = (_depth - 1);
            }
            for (
            ; r.Read(); 
            ) {
                if ((r.TokenType == Newtonsoft.Json.JsonToken.PropertyName)) {
                    if ("id".Equals(r.Value)) {
                        r.Read();
                        System.Nullable<System.Guid> _instance = ((System.Nullable<System.Guid>)(context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<System.Guid>), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("id", context.JsonContext, _retVal, context))));
                        if ((_instance != null)) {
                            _retVal.Key = _instance;
                        }
                    }
                    else {
                        if ("obsoletedBy".Equals(r.Value)) {
                            r.Read();
                            System.Nullable<System.Guid> _instance = ((System.Nullable<System.Guid>)(context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<System.Guid>), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("obsoletedBy", context.JsonContext, _retVal, context))));
                            if ((_instance != null)) {
                                _retVal.ObsoletedByKey = _instance;
                            }
                        }
                        else {
                            if ("createdBy".Equals(r.Value)) {
                                r.Read();
                                System.Nullable<System.Guid> _instance = ((System.Nullable<System.Guid>)(context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<System.Guid>), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("createdBy", context.JsonContext, _retVal, context))));
                                if ((_instance != null)) {
                                    _retVal.CreatedByKey = _instance;
                                }
                            }
                            else {
                                if ("obsoletionTime".Equals(r.Value)) {
                                    r.Read();
                                    string _instance = ((string)(context.JsonContext.ReadElementUtil(r, typeof(string), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("obsoletionTime", context.JsonContext, _retVal, context))));
                                    if ((_instance != null)) {
                                        _retVal.ObsoletionTimeXml = _instance;
                                    }
                                }
                                else {
                                    if ("obsoletionTimeModel".Equals(r.Value)) {
                                        r.Read();
                                        System.Nullable<System.DateTimeOffset> _instance = ((System.Nullable<System.DateTimeOffset>)(context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<System.DateTimeOffset>), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("obsoletionTimeModel", context.JsonContext, _retVal, context))));
                                        if ((_instance != null)) {
                                            _retVal.ObsoletionTime = _instance;
                                        }
                                    }
                                    else {
                                        if ("creationTime".Equals(r.Value)) {
                                            r.Read();
                                            string _instance = ((string)(context.JsonContext.ReadElementUtil(r, typeof(string), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("creationTime", context.JsonContext, _retVal, context))));
                                            if ((_instance != null)) {
                                                _retVal.CreationTimeXml = _instance;
                                            }
                                        }
                                        else {
                                            if ("creationTimeModel".Equals(r.Value)) {
                                                r.Read();
                                                System.DateTimeOffset _instance = ((System.DateTimeOffset)(context.JsonContext.ReadElementUtil(r, typeof(System.DateTimeOffset), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("creationTimeModel", context.JsonContext, _retVal, context))));
                                                if ((_instance != null)) {
                                                    _retVal.CreationTime = _instance;
                                                }
                                            }
                                            else {
                                                if ("updatedBy".Equals(r.Value)) {
                                                    r.Read();
                                                    System.Nullable<System.Guid> _instance = ((System.Nullable<System.Guid>)(context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<System.Guid>), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("updatedBy", context.JsonContext, _retVal, context))));
                                                    if ((_instance != null)) {
                                                        _retVal.UpdatedByKey = _instance;
                                                    }
                                                }
                                                else {
                                                    if ("updatedTime".Equals(r.Value)) {
                                                        r.Read();
                                                        string _instance = ((string)(context.JsonContext.ReadElementUtil(r, typeof(string), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("updatedTime", context.JsonContext, _retVal, context))));
                                                        if ((_instance != null)) {
                                                            _retVal.UpdatedTimeXml = _instance;
                                                        }
                                                    }
                                                    else {
                                                        if ("handler".Equals(r.Value)) {
                                                            r.Read();
                                                            string _instance = ((string)(context.JsonContext.ReadElementUtil(r, typeof(string), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("handler", context.JsonContext, _retVal, context))));
                                                            if ((_instance != null)) {
                                                                _retVal.Handler = _instance;
                                                            }
                                                        }
                                                        else {
                                                            if ("name".Equals(r.Value)) {
                                                                r.Read();
                                                                string _instance = ((string)(context.JsonContext.ReadElementUtil(r, typeof(string), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("name", context.JsonContext, _retVal, context))));
                                                                if ((_instance != null)) {
                                                                    _retVal.Name = _instance;
                                                                }
                                                            }
                                                            else {
                                                                if ("$type".Equals(r.Value)) {
                                                                    System.Type _type = this.m_binder.BindToType("OpenIZ.Core.Model, Version=0.6.14.21496, Culture=neutral, PublicKeyToken=null", r.ReadAsString());
                                                                    if ((_type != typeof(OpenIZ.Core.Model.DataTypes.PhoneticAlgorithm))) {
                                                                        OpenIZ.Core.Model.DataTypes.PhoneticAlgorithm _nretVal = ((OpenIZ.Core.Model.DataTypes.PhoneticAlgorithm)(context.JsonContext.GetFormatter(_type).Deserialize(r, _type, context)));
                                                                        _nretVal.CopyObjectData(_retVal);
                                                                        return _nretVal;
                                                                    }
                                                                }
                                                                else {
                                                                    r.Skip();
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
                else {
                    if (((r.TokenType == Newtonsoft.Json.JsonToken.EndObject) 
                                && (r.Depth == _depth))) {
                        return _retVal;
                    }
                    else {
                        throw new Newtonsoft.Json.JsonSerializationException("JSON in invalid state");
                    }
                }
            }
            return _retVal;
        }
        
        public object FromSimpleValue(object o) {
            return null;
        }
        
        public object GetSimpleValue(object o) {
            return null;
        }
    }
    
    public class ReferenceTermViewModelSerializer : OpenIZ.Core.Applets.ViewModel.Json.IJsonViewModelTypeFormatter {
        
        private OpenIZ.Core.Model.Serialization.ModelSerializationBinder m_binder = new OpenIZ.Core.Model.Serialization.ModelSerializationBinder();
        
        private OpenIZ.Core.Diagnostics.Tracer m_tracer = OpenIZ.Core.Diagnostics.Tracer.GetTracer(typeof(ReferenceTermViewModelSerializer));
        
        public System.Type HandlesType {
            get {
                return typeof(OpenIZ.Core.Model.DataTypes.ReferenceTerm);
            }
        }
        
        public void Serialize(Newtonsoft.Json.JsonWriter w, OpenIZ.Core.Model.IdentifiedData o, OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext context) {
            if ((o == null)) {
                throw new System.ArgumentNullException("o");
            }
            OpenIZ.Core.Model.DataTypes.ReferenceTerm _strong = null;
            OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext _jsonContext = null;
            bool _loaded = false;
            try {
                _strong = ((OpenIZ.Core.Model.DataTypes.ReferenceTerm)(o));
            }
            catch (System.Exception e) {
                this.m_tracer.TraceError(string.Format("Casting Error: {0}", e));
                throw new System.ArgumentException(string.Format("Invalid type {0} provided, expected {1}", o.GetType(), typeof(OpenIZ.Core.Model.DataTypes.ReferenceTerm)));
            }
            if (context.ShouldSerialize("mnemonic")) {
                if ((_strong.Mnemonic == null)) {
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "mnemonic", _strong.Mnemonic, context);
                }
            }
            if (context.ShouldSerialize("codeSystemModel")) {
                if ((_strong.CodeSystem == null)) {
                    if ((_strong.Key.HasValue && context.ShouldForceLoad("codeSystemModel", _strong.Key.Value))) {
                        OpenIZ.Core.Model.DataTypes.CodeSystem _delay = null;
                        _delay = context.JsonContext.LoadRelated<OpenIZ.Core.Model.DataTypes.CodeSystem>(_strong.CodeSystemKey);
                        _strong.CodeSystem = _delay;
                        if ((_delay != null)) {
                            _loaded = true;
                            context.JsonContext.WritePropertyUtil(w, "codeSystemModel", _strong.CodeSystem, context);
                        }
                    }
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "codeSystemModel", _strong.CodeSystem, context);
                }
            }
            if (context.ShouldSerialize("codeSystem")) {
                if ((_strong.CodeSystemKey == null)) {
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "codeSystem", _strong.CodeSystemKey, context);
                }
            }
            if (context.ShouldSerialize("name")) {
                if (((_strong.DisplayNames == null) 
                            || (_strong.DisplayNames.Count == 0))) {
                    if ((_strong.Key.HasValue && context.ShouldForceLoad("name", _strong.Key.Value))) {
                        System.Collections.Generic.List<OpenIZ.Core.Model.DataTypes.ReferenceTermName> _delay = null;
                        _delay = new System.Collections.Generic.List<OpenIZ.Core.Model.DataTypes.ReferenceTermName>(context.JsonContext.LoadCollection<OpenIZ.Core.Model.DataTypes.ReferenceTermName>(_strong.Key.Value));
                        _strong.DisplayNames = _delay;
                        if ((_delay.Count > 0)) {
                            _loaded = true;
                            context.JsonContext.WritePropertyUtil(w, "name", _strong.DisplayNames, context);
                        }
                    }
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "name", _strong.DisplayNames, context);
                }
            }
            if (context.ShouldSerialize("updatedTime")) {
                if ((_strong.UpdatedTimeXml == null)) {
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "updatedTime", _strong.UpdatedTimeXml, context);
                }
            }
            if (context.ShouldSerialize("updatedBy")) {
                if ((_strong.UpdatedByKey == null)) {
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "updatedBy", _strong.UpdatedByKey, context);
                }
            }
            if (context.ShouldSerialize("creationTimeModel")) {
                if ((_strong.CreationTime == null)) {
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "creationTimeModel", _strong.CreationTime, context);
                }
            }
            if (context.ShouldSerialize("creationTime")) {
                if ((_strong.CreationTimeXml == null)) {
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "creationTime", _strong.CreationTimeXml, context);
                }
            }
            if (context.ShouldSerialize("obsoletionTimeModel")) {
                if ((_strong.ObsoletionTime == null)) {
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "obsoletionTimeModel", _strong.ObsoletionTime, context);
                }
            }
            if (context.ShouldSerialize("obsoletionTime")) {
                if ((_strong.ObsoletionTimeXml == null)) {
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "obsoletionTime", _strong.ObsoletionTimeXml, context);
                }
            }
            if (context.ShouldSerialize("createdBy")) {
                if ((_strong.CreatedByKey == null)) {
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "createdBy", _strong.CreatedByKey, context);
                }
            }
            if (context.ShouldSerialize("obsoletedBy")) {
                if ((_strong.ObsoletedByKey == null)) {
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "obsoletedBy", _strong.ObsoletedByKey, context);
                }
            }
            if (context.ShouldSerialize("id")) {
                if ((_strong.Key == null)) {
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "id", _strong.Key, context);
                }
            }
            if (context.ShouldSerialize("etag")) {
                if ((_strong.Tag == null)) {
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "etag", _strong.Tag, context);
                }
            }
            if ((_loaded && _strong.Key.HasValue)) {
                ((OpenIZ.Core.Services.IDataCachingService)(OpenIZ.Core.ApplicationServiceContext.Current.GetService(typeof(OpenIZ.Core.Services.IDataCachingService)))).Add(_strong);
            }
        }
        
        public object Deserialize(Newtonsoft.Json.JsonReader r, System.Type asType, OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext context) {
            OpenIZ.Core.Model.DataTypes.ReferenceTerm _retVal = new OpenIZ.Core.Model.DataTypes.ReferenceTerm();
            int _depth = r.Depth;
            if ((r.TokenType != Newtonsoft.Json.JsonToken.StartObject)) {
                _depth = (_depth - 1);
            }
            for (
            ; r.Read(); 
            ) {
                if ((r.TokenType == Newtonsoft.Json.JsonToken.PropertyName)) {
                    if ("id".Equals(r.Value)) {
                        r.Read();
                        System.Nullable<System.Guid> _instance = ((System.Nullable<System.Guid>)(context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<System.Guid>), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("id", context.JsonContext, _retVal, context))));
                        if ((_instance != null)) {
                            _retVal.Key = _instance;
                        }
                    }
                    else {
                        if ("obsoletedBy".Equals(r.Value)) {
                            r.Read();
                            System.Nullable<System.Guid> _instance = ((System.Nullable<System.Guid>)(context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<System.Guid>), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("obsoletedBy", context.JsonContext, _retVal, context))));
                            if ((_instance != null)) {
                                _retVal.ObsoletedByKey = _instance;
                            }
                        }
                        else {
                            if ("createdBy".Equals(r.Value)) {
                                r.Read();
                                System.Nullable<System.Guid> _instance = ((System.Nullable<System.Guid>)(context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<System.Guid>), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("createdBy", context.JsonContext, _retVal, context))));
                                if ((_instance != null)) {
                                    _retVal.CreatedByKey = _instance;
                                }
                            }
                            else {
                                if ("obsoletionTime".Equals(r.Value)) {
                                    r.Read();
                                    string _instance = ((string)(context.JsonContext.ReadElementUtil(r, typeof(string), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("obsoletionTime", context.JsonContext, _retVal, context))));
                                    if ((_instance != null)) {
                                        _retVal.ObsoletionTimeXml = _instance;
                                    }
                                }
                                else {
                                    if ("obsoletionTimeModel".Equals(r.Value)) {
                                        r.Read();
                                        System.Nullable<System.DateTimeOffset> _instance = ((System.Nullable<System.DateTimeOffset>)(context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<System.DateTimeOffset>), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("obsoletionTimeModel", context.JsonContext, _retVal, context))));
                                        if ((_instance != null)) {
                                            _retVal.ObsoletionTime = _instance;
                                        }
                                    }
                                    else {
                                        if ("creationTime".Equals(r.Value)) {
                                            r.Read();
                                            string _instance = ((string)(context.JsonContext.ReadElementUtil(r, typeof(string), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("creationTime", context.JsonContext, _retVal, context))));
                                            if ((_instance != null)) {
                                                _retVal.CreationTimeXml = _instance;
                                            }
                                        }
                                        else {
                                            if ("creationTimeModel".Equals(r.Value)) {
                                                r.Read();
                                                System.DateTimeOffset _instance = ((System.DateTimeOffset)(context.JsonContext.ReadElementUtil(r, typeof(System.DateTimeOffset), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("creationTimeModel", context.JsonContext, _retVal, context))));
                                                if ((_instance != null)) {
                                                    _retVal.CreationTime = _instance;
                                                }
                                            }
                                            else {
                                                if ("updatedBy".Equals(r.Value)) {
                                                    r.Read();
                                                    System.Nullable<System.Guid> _instance = ((System.Nullable<System.Guid>)(context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<System.Guid>), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("updatedBy", context.JsonContext, _retVal, context))));
                                                    if ((_instance != null)) {
                                                        _retVal.UpdatedByKey = _instance;
                                                    }
                                                }
                                                else {
                                                    if ("updatedTime".Equals(r.Value)) {
                                                        r.Read();
                                                        string _instance = ((string)(context.JsonContext.ReadElementUtil(r, typeof(string), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("updatedTime", context.JsonContext, _retVal, context))));
                                                        if ((_instance != null)) {
                                                            _retVal.UpdatedTimeXml = _instance;
                                                        }
                                                    }
                                                    else {
                                                        if ("name".Equals(r.Value)) {
                                                            r.Read();
                                                            System.Collections.Generic.List<OpenIZ.Core.Model.DataTypes.ReferenceTermName> _instance = ((System.Collections.Generic.List<OpenIZ.Core.Model.DataTypes.ReferenceTermName>)(context.JsonContext.ReadElementUtil(r, typeof(System.Collections.Generic.List<OpenIZ.Core.Model.DataTypes.ReferenceTermName>), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("name", context.JsonContext, _retVal, context))));
                                                            if ((_instance != null)) {
                                                                _retVal.DisplayNames = _instance;
                                                            }
                                                        }
                                                        else {
                                                            if ("codeSystem".Equals(r.Value)) {
                                                                r.Read();
                                                                System.Nullable<System.Guid> _instance = ((System.Nullable<System.Guid>)(context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<System.Guid>), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("codeSystem", context.JsonContext, _retVal, context))));
                                                                if ((_instance != null)) {
                                                                    _retVal.CodeSystemKey = _instance;
                                                                }
                                                            }
                                                            else {
                                                                if ("codeSystemModel".Equals(r.Value)) {
                                                                    r.Read();
                                                                    OpenIZ.Core.Model.DataTypes.CodeSystem _instance = ((OpenIZ.Core.Model.DataTypes.CodeSystem)(context.JsonContext.ReadElementUtil(r, typeof(OpenIZ.Core.Model.DataTypes.CodeSystem), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("codeSystemModel", context.JsonContext, _retVal, context))));
                                                                    if ((_instance != null)) {
                                                                        _retVal.CodeSystem = _instance;
                                                                    }
                                                                }
                                                                else {
                                                                    if ("mnemonic".Equals(r.Value)) {
                                                                        r.Read();
                                                                        string _instance = ((string)(context.JsonContext.ReadElementUtil(r, typeof(string), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("mnemonic", context.JsonContext, _retVal, context))));
                                                                        if ((_instance != null)) {
                                                                            _retVal.Mnemonic = _instance;
                                                                        }
                                                                    }
                                                                    else {
                                                                        if ("$type".Equals(r.Value)) {
                                                                            System.Type _type = this.m_binder.BindToType("OpenIZ.Core.Model, Version=0.6.14.21496, Culture=neutral, PublicKeyToken=null", r.ReadAsString());
                                                                            if ((_type != typeof(OpenIZ.Core.Model.DataTypes.ReferenceTerm))) {
                                                                                OpenIZ.Core.Model.DataTypes.ReferenceTerm _nretVal = ((OpenIZ.Core.Model.DataTypes.ReferenceTerm)(context.JsonContext.GetFormatter(_type).Deserialize(r, _type, context)));
                                                                                _nretVal.CopyObjectData(_retVal);
                                                                                return _nretVal;
                                                                            }
                                                                        }
                                                                        else {
                                                                            r.Skip();
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
                else {
                    if (((r.TokenType == Newtonsoft.Json.JsonToken.EndObject) 
                                && (r.Depth == _depth))) {
                        return _retVal;
                    }
                    else {
                        throw new Newtonsoft.Json.JsonSerializationException("JSON in invalid state");
                    }
                }
            }
            return _retVal;
        }
        
        public object FromSimpleValue(object o) {
            return null;
        }
        
        public object GetSimpleValue(object o) {
            return null;
        }
    }
    
    public class ReferenceTermNameViewModelSerializer : OpenIZ.Core.Applets.ViewModel.Json.IJsonViewModelTypeFormatter {
        
        private OpenIZ.Core.Model.Serialization.ModelSerializationBinder m_binder = new OpenIZ.Core.Model.Serialization.ModelSerializationBinder();
        
        private OpenIZ.Core.Diagnostics.Tracer m_tracer = OpenIZ.Core.Diagnostics.Tracer.GetTracer(typeof(ReferenceTermNameViewModelSerializer));
        
        public System.Type HandlesType {
            get {
                return typeof(OpenIZ.Core.Model.DataTypes.ReferenceTermName);
            }
        }
        
        public void Serialize(Newtonsoft.Json.JsonWriter w, OpenIZ.Core.Model.IdentifiedData o, OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext context) {
            if ((o == null)) {
                throw new System.ArgumentNullException("o");
            }
            OpenIZ.Core.Model.DataTypes.ReferenceTermName _strong = null;
            OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext _jsonContext = null;
            bool _loaded = false;
            try {
                _strong = ((OpenIZ.Core.Model.DataTypes.ReferenceTermName)(o));
            }
            catch (System.Exception e) {
                this.m_tracer.TraceError(string.Format("Casting Error: {0}", e));
                throw new System.ArgumentException(string.Format("Invalid type {0} provided, expected {1}", o.GetType(), typeof(OpenIZ.Core.Model.DataTypes.ReferenceTermName)));
            }
            if (context.ShouldSerialize("language")) {
                if ((_strong.Language == null)) {
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "language", _strong.Language, context);
                }
            }
            if (context.ShouldSerialize("value")) {
                if ((_strong.Name == null)) {
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "value", _strong.Name, context);
                }
            }
            if (context.ShouldSerialize("phoneticCode")) {
                if ((_strong.PhoneticCode == null)) {
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "phoneticCode", _strong.PhoneticCode, context);
                }
            }
            if (context.ShouldSerialize("phoneticAlgorithm")) {
                if ((_strong.PhoneticAlgorithmKey == null)) {
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "phoneticAlgorithm", _strong.PhoneticAlgorithmKey, context);
                }
            }
            if (context.ShouldSerialize("phoneticAlgorithmModel")) {
                if ((_strong.PhoneticAlgorithm == null)) {
                    if ((_strong.Key.HasValue && context.ShouldForceLoad("phoneticAlgorithmModel", _strong.Key.Value))) {
                        OpenIZ.Core.Model.DataTypes.PhoneticAlgorithm _delay = null;
                        _delay = context.JsonContext.LoadRelated<OpenIZ.Core.Model.DataTypes.PhoneticAlgorithm>(_strong.PhoneticAlgorithmKey);
                        _strong.PhoneticAlgorithm = _delay;
                        if ((_delay != null)) {
                            _loaded = true;
                            context.JsonContext.WritePropertyUtil(w, "phoneticAlgorithmModel", _strong.PhoneticAlgorithm, context);
                        }
                    }
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "phoneticAlgorithmModel", _strong.PhoneticAlgorithm, context);
                }
            }
            if (context.ShouldSerialize("source")) {
                if ((_strong.SourceEntityKey == null)) {
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "source", _strong.SourceEntityKey, context);
                }
            }
            if (context.ShouldSerialize("creationTimeModel")) {
                if ((_strong.CreationTime == null)) {
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "creationTimeModel", _strong.CreationTime, context);
                }
            }
            if (context.ShouldSerialize("creationTime")) {
                if ((_strong.CreationTimeXml == null)) {
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "creationTime", _strong.CreationTimeXml, context);
                }
            }
            if (context.ShouldSerialize("obsoletionTimeModel")) {
                if ((_strong.ObsoletionTime == null)) {
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "obsoletionTimeModel", _strong.ObsoletionTime, context);
                }
            }
            if (context.ShouldSerialize("obsoletionTime")) {
                if ((_strong.ObsoletionTimeXml == null)) {
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "obsoletionTime", _strong.ObsoletionTimeXml, context);
                }
            }
            if (context.ShouldSerialize("createdBy")) {
                if ((_strong.CreatedByKey == null)) {
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "createdBy", _strong.CreatedByKey, context);
                }
            }
            if (context.ShouldSerialize("obsoletedBy")) {
                if ((_strong.ObsoletedByKey == null)) {
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "obsoletedBy", _strong.ObsoletedByKey, context);
                }
            }
            if (context.ShouldSerialize("id")) {
                if ((_strong.Key == null)) {
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "id", _strong.Key, context);
                }
            }
            if (context.ShouldSerialize("etag")) {
                if ((_strong.Tag == null)) {
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "etag", _strong.Tag, context);
                }
            }
            if ((_loaded && _strong.Key.HasValue)) {
                ((OpenIZ.Core.Services.IDataCachingService)(OpenIZ.Core.ApplicationServiceContext.Current.GetService(typeof(OpenIZ.Core.Services.IDataCachingService)))).Add(_strong);
            }
        }
        
        public object Deserialize(Newtonsoft.Json.JsonReader r, System.Type asType, OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext context) {
            OpenIZ.Core.Model.DataTypes.ReferenceTermName _retVal = new OpenIZ.Core.Model.DataTypes.ReferenceTermName();
            int _depth = r.Depth;
            if ((r.TokenType != Newtonsoft.Json.JsonToken.StartObject)) {
                _depth = (_depth - 1);
            }
            for (
            ; r.Read(); 
            ) {
                if ((r.TokenType == Newtonsoft.Json.JsonToken.PropertyName)) {
                    if ("id".Equals(r.Value)) {
                        r.Read();
                        System.Nullable<System.Guid> _instance = ((System.Nullable<System.Guid>)(context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<System.Guid>), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("id", context.JsonContext, _retVal, context))));
                        if ((_instance != null)) {
                            _retVal.Key = _instance;
                        }
                    }
                    else {
                        if ("obsoletedBy".Equals(r.Value)) {
                            r.Read();
                            System.Nullable<System.Guid> _instance = ((System.Nullable<System.Guid>)(context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<System.Guid>), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("obsoletedBy", context.JsonContext, _retVal, context))));
                            if ((_instance != null)) {
                                _retVal.ObsoletedByKey = _instance;
                            }
                        }
                        else {
                            if ("createdBy".Equals(r.Value)) {
                                r.Read();
                                System.Nullable<System.Guid> _instance = ((System.Nullable<System.Guid>)(context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<System.Guid>), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("createdBy", context.JsonContext, _retVal, context))));
                                if ((_instance != null)) {
                                    _retVal.CreatedByKey = _instance;
                                }
                            }
                            else {
                                if ("obsoletionTime".Equals(r.Value)) {
                                    r.Read();
                                    string _instance = ((string)(context.JsonContext.ReadElementUtil(r, typeof(string), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("obsoletionTime", context.JsonContext, _retVal, context))));
                                    if ((_instance != null)) {
                                        _retVal.ObsoletionTimeXml = _instance;
                                    }
                                }
                                else {
                                    if ("obsoletionTimeModel".Equals(r.Value)) {
                                        r.Read();
                                        System.Nullable<System.DateTimeOffset> _instance = ((System.Nullable<System.DateTimeOffset>)(context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<System.DateTimeOffset>), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("obsoletionTimeModel", context.JsonContext, _retVal, context))));
                                        if ((_instance != null)) {
                                            _retVal.ObsoletionTime = _instance;
                                        }
                                    }
                                    else {
                                        if ("creationTime".Equals(r.Value)) {
                                            r.Read();
                                            string _instance = ((string)(context.JsonContext.ReadElementUtil(r, typeof(string), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("creationTime", context.JsonContext, _retVal, context))));
                                            if ((_instance != null)) {
                                                _retVal.CreationTimeXml = _instance;
                                            }
                                        }
                                        else {
                                            if ("creationTimeModel".Equals(r.Value)) {
                                                r.Read();
                                                System.DateTimeOffset _instance = ((System.DateTimeOffset)(context.JsonContext.ReadElementUtil(r, typeof(System.DateTimeOffset), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("creationTimeModel", context.JsonContext, _retVal, context))));
                                                if ((_instance != null)) {
                                                    _retVal.CreationTime = _instance;
                                                }
                                            }
                                            else {
                                                if ("source".Equals(r.Value)) {
                                                    r.Read();
                                                    System.Nullable<System.Guid> _instance = ((System.Nullable<System.Guid>)(context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<System.Guid>), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("source", context.JsonContext, _retVal, context))));
                                                    if ((_instance != null)) {
                                                        _retVal.SourceEntityKey = _instance;
                                                    }
                                                }
                                                else {
                                                    if ("phoneticAlgorithmModel".Equals(r.Value)) {
                                                        r.Read();
                                                        OpenIZ.Core.Model.DataTypes.PhoneticAlgorithm _instance = ((OpenIZ.Core.Model.DataTypes.PhoneticAlgorithm)(context.JsonContext.ReadElementUtil(r, typeof(OpenIZ.Core.Model.DataTypes.PhoneticAlgorithm), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("phoneticAlgorithmModel", context.JsonContext, _retVal, context))));
                                                        if ((_instance != null)) {
                                                            _retVal.PhoneticAlgorithm = _instance;
                                                        }
                                                    }
                                                    else {
                                                        if ("phoneticAlgorithm".Equals(r.Value)) {
                                                            r.Read();
                                                            System.Nullable<System.Guid> _instance = ((System.Nullable<System.Guid>)(context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<System.Guid>), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("phoneticAlgorithm", context.JsonContext, _retVal, context))));
                                                            if ((_instance != null)) {
                                                                _retVal.PhoneticAlgorithmKey = _instance;
                                                            }
                                                        }
                                                        else {
                                                            if ("phoneticCode".Equals(r.Value)) {
                                                                r.Read();
                                                                string _instance = ((string)(context.JsonContext.ReadElementUtil(r, typeof(string), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("phoneticCode", context.JsonContext, _retVal, context))));
                                                                if ((_instance != null)) {
                                                                    _retVal.PhoneticCode = _instance;
                                                                }
                                                            }
                                                            else {
                                                                if ("value".Equals(r.Value)) {
                                                                    r.Read();
                                                                    string _instance = ((string)(context.JsonContext.ReadElementUtil(r, typeof(string), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("value", context.JsonContext, _retVal, context))));
                                                                    if ((_instance != null)) {
                                                                        _retVal.Name = _instance;
                                                                    }
                                                                }
                                                                else {
                                                                    if ("language".Equals(r.Value)) {
                                                                        r.Read();
                                                                        string _instance = ((string)(context.JsonContext.ReadElementUtil(r, typeof(string), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("language", context.JsonContext, _retVal, context))));
                                                                        if ((_instance != null)) {
                                                                            _retVal.Language = _instance;
                                                                        }
                                                                    }
                                                                    else {
                                                                        if ("$type".Equals(r.Value)) {
                                                                            System.Type _type = this.m_binder.BindToType("OpenIZ.Core.Model, Version=0.6.14.21496, Culture=neutral, PublicKeyToken=null", r.ReadAsString());
                                                                            if ((_type != typeof(OpenIZ.Core.Model.DataTypes.ReferenceTermName))) {
                                                                                OpenIZ.Core.Model.DataTypes.ReferenceTermName _nretVal = ((OpenIZ.Core.Model.DataTypes.ReferenceTermName)(context.JsonContext.GetFormatter(_type).Deserialize(r, _type, context)));
                                                                                _nretVal.CopyObjectData(_retVal);
                                                                                return _nretVal;
                                                                            }
                                                                        }
                                                                        else {
                                                                            r.Skip();
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
                else {
                    if (((r.TokenType == Newtonsoft.Json.JsonToken.EndObject) 
                                && (r.Depth == _depth))) {
                        return _retVal;
                    }
                    else {
                        throw new Newtonsoft.Json.JsonSerializationException("JSON in invalid state");
                    }
                }
            }
            return _retVal;
        }
        
        public object FromSimpleValue(object o) {
            string _strong = null;
            if ((o == null)) {
                return null;
            }
            try {
                _strong = o.ToString();
            }
            catch (System.Exception e) {
                this.m_tracer.TraceError(string.Format("Casting Error: {0}", e));
                return null;
            }
            OpenIZ.Core.Model.DataTypes.ReferenceTermName _retVal = new OpenIZ.Core.Model.DataTypes.ReferenceTermName();
            _retVal.Name = _strong;
            return _retVal;
        }
        
        public object GetSimpleValue(object o) {
            if ((o == null)) {
                return null;
            }
            OpenIZ.Core.Model.DataTypes.ReferenceTermName _strong = null;
            try {
                _strong = ((OpenIZ.Core.Model.DataTypes.ReferenceTermName)(o));
            }
            catch (System.Exception e) {
                this.m_tracer.TraceError(string.Format("Casting Error: {0}", e));
                return null;
            }
            return _strong.Name;
        }
    }
    
    public class EntityTagViewModelSerializer : OpenIZ.Core.Applets.ViewModel.Json.IJsonViewModelTypeFormatter {
        
        private OpenIZ.Core.Model.Serialization.ModelSerializationBinder m_binder = new OpenIZ.Core.Model.Serialization.ModelSerializationBinder();
        
        private OpenIZ.Core.Diagnostics.Tracer m_tracer = OpenIZ.Core.Diagnostics.Tracer.GetTracer(typeof(EntityTagViewModelSerializer));
        
        public System.Type HandlesType {
            get {
                return typeof(OpenIZ.Core.Model.DataTypes.EntityTag);
            }
        }
        
        public void Serialize(Newtonsoft.Json.JsonWriter w, OpenIZ.Core.Model.IdentifiedData o, OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext context) {
            if ((o == null)) {
                throw new System.ArgumentNullException("o");
            }
            OpenIZ.Core.Model.DataTypes.EntityTag _strong = null;
            OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext _jsonContext = null;
            bool _loaded = false;
            try {
                _strong = ((OpenIZ.Core.Model.DataTypes.EntityTag)(o));
            }
            catch (System.Exception e) {
                this.m_tracer.TraceError(string.Format("Casting Error: {0}", e));
                throw new System.ArgumentException(string.Format("Invalid type {0} provided, expected {1}", o.GetType(), typeof(OpenIZ.Core.Model.DataTypes.EntityTag)));
            }
            if (context.ShouldSerialize("key")) {
                if ((_strong.TagKey == null)) {
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "key", _strong.TagKey, context);
                }
            }
            if (context.ShouldSerialize("value")) {
                if ((_strong.Value == null)) {
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "value", _strong.Value, context);
                }
            }
            if (context.ShouldSerialize("source")) {
                if ((_strong.SourceEntityKey == null)) {
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "source", _strong.SourceEntityKey, context);
                }
            }
            if (context.ShouldSerialize("sourceModel")) {
                if ((_strong.SourceEntity == null)) {
                    if ((_strong.Key.HasValue && context.ShouldForceLoad("sourceModel", _strong.Key.Value))) {
                        OpenIZ.Core.Model.Entities.Entity _delay = null;
                        _delay = context.JsonContext.LoadRelated<OpenIZ.Core.Model.Entities.Entity>(_strong.SourceEntityKey);
                        _strong.SourceEntity = _delay;
                        if ((_delay != null)) {
                            _loaded = true;
                            context.JsonContext.WritePropertyUtil(w, "sourceModel", _strong.SourceEntity, context);
                        }
                    }
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "sourceModel", _strong.SourceEntity, context);
                }
            }
            if (context.ShouldSerialize("creationTimeModel")) {
                if ((_strong.CreationTime == null)) {
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "creationTimeModel", _strong.CreationTime, context);
                }
            }
            if (context.ShouldSerialize("creationTime")) {
                if ((_strong.CreationTimeXml == null)) {
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "creationTime", _strong.CreationTimeXml, context);
                }
            }
            if (context.ShouldSerialize("obsoletionTimeModel")) {
                if ((_strong.ObsoletionTime == null)) {
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "obsoletionTimeModel", _strong.ObsoletionTime, context);
                }
            }
            if (context.ShouldSerialize("obsoletionTime")) {
                if ((_strong.ObsoletionTimeXml == null)) {
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "obsoletionTime", _strong.ObsoletionTimeXml, context);
                }
            }
            if (context.ShouldSerialize("createdBy")) {
                if ((_strong.CreatedByKey == null)) {
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "createdBy", _strong.CreatedByKey, context);
                }
            }
            if (context.ShouldSerialize("obsoletedBy")) {
                if ((_strong.ObsoletedByKey == null)) {
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "obsoletedBy", _strong.ObsoletedByKey, context);
                }
            }
            if (context.ShouldSerialize("id")) {
                if ((_strong.Key == null)) {
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "id", _strong.Key, context);
                }
            }
            if (context.ShouldSerialize("etag")) {
                if ((_strong.Tag == null)) {
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "etag", _strong.Tag, context);
                }
            }
            if ((_loaded && _strong.Key.HasValue)) {
                ((OpenIZ.Core.Services.IDataCachingService)(OpenIZ.Core.ApplicationServiceContext.Current.GetService(typeof(OpenIZ.Core.Services.IDataCachingService)))).Add(_strong);
            }
        }
        
        public object Deserialize(Newtonsoft.Json.JsonReader r, System.Type asType, OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext context) {
            OpenIZ.Core.Model.DataTypes.EntityTag _retVal = new OpenIZ.Core.Model.DataTypes.EntityTag();
            int _depth = r.Depth;
            if ((r.TokenType != Newtonsoft.Json.JsonToken.StartObject)) {
                _depth = (_depth - 1);
            }
            for (
            ; r.Read(); 
            ) {
                if ((r.TokenType == Newtonsoft.Json.JsonToken.PropertyName)) {
                    if ("id".Equals(r.Value)) {
                        r.Read();
                        System.Nullable<System.Guid> _instance = ((System.Nullable<System.Guid>)(context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<System.Guid>), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("id", context.JsonContext, _retVal, context))));
                        if ((_instance != null)) {
                            _retVal.Key = _instance;
                        }
                    }
                    else {
                        if ("obsoletedBy".Equals(r.Value)) {
                            r.Read();
                            System.Nullable<System.Guid> _instance = ((System.Nullable<System.Guid>)(context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<System.Guid>), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("obsoletedBy", context.JsonContext, _retVal, context))));
                            if ((_instance != null)) {
                                _retVal.ObsoletedByKey = _instance;
                            }
                        }
                        else {
                            if ("createdBy".Equals(r.Value)) {
                                r.Read();
                                System.Nullable<System.Guid> _instance = ((System.Nullable<System.Guid>)(context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<System.Guid>), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("createdBy", context.JsonContext, _retVal, context))));
                                if ((_instance != null)) {
                                    _retVal.CreatedByKey = _instance;
                                }
                            }
                            else {
                                if ("obsoletionTime".Equals(r.Value)) {
                                    r.Read();
                                    string _instance = ((string)(context.JsonContext.ReadElementUtil(r, typeof(string), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("obsoletionTime", context.JsonContext, _retVal, context))));
                                    if ((_instance != null)) {
                                        _retVal.ObsoletionTimeXml = _instance;
                                    }
                                }
                                else {
                                    if ("obsoletionTimeModel".Equals(r.Value)) {
                                        r.Read();
                                        System.Nullable<System.DateTimeOffset> _instance = ((System.Nullable<System.DateTimeOffset>)(context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<System.DateTimeOffset>), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("obsoletionTimeModel", context.JsonContext, _retVal, context))));
                                        if ((_instance != null)) {
                                            _retVal.ObsoletionTime = _instance;
                                        }
                                    }
                                    else {
                                        if ("creationTime".Equals(r.Value)) {
                                            r.Read();
                                            string _instance = ((string)(context.JsonContext.ReadElementUtil(r, typeof(string), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("creationTime", context.JsonContext, _retVal, context))));
                                            if ((_instance != null)) {
                                                _retVal.CreationTimeXml = _instance;
                                            }
                                        }
                                        else {
                                            if ("creationTimeModel".Equals(r.Value)) {
                                                r.Read();
                                                System.DateTimeOffset _instance = ((System.DateTimeOffset)(context.JsonContext.ReadElementUtil(r, typeof(System.DateTimeOffset), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("creationTimeModel", context.JsonContext, _retVal, context))));
                                                if ((_instance != null)) {
                                                    _retVal.CreationTime = _instance;
                                                }
                                            }
                                            else {
                                                if ("sourceModel".Equals(r.Value)) {
                                                    r.Read();
                                                    OpenIZ.Core.Model.Entities.Entity _instance = ((OpenIZ.Core.Model.Entities.Entity)(context.JsonContext.ReadElementUtil(r, typeof(OpenIZ.Core.Model.Entities.Entity), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("sourceModel", context.JsonContext, _retVal, context))));
                                                    if ((_instance != null)) {
                                                        _retVal.SourceEntity = _instance;
                                                    }
                                                }
                                                else {
                                                    if ("source".Equals(r.Value)) {
                                                        r.Read();
                                                        System.Nullable<System.Guid> _instance = ((System.Nullable<System.Guid>)(context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<System.Guid>), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("source", context.JsonContext, _retVal, context))));
                                                        if ((_instance != null)) {
                                                            _retVal.SourceEntityKey = _instance;
                                                        }
                                                    }
                                                    else {
                                                        if ("value".Equals(r.Value)) {
                                                            r.Read();
                                                            string _instance = ((string)(context.JsonContext.ReadElementUtil(r, typeof(string), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("value", context.JsonContext, _retVal, context))));
                                                            if ((_instance != null)) {
                                                                _retVal.Value = _instance;
                                                            }
                                                        }
                                                        else {
                                                            if ("key".Equals(r.Value)) {
                                                                r.Read();
                                                                string _instance = ((string)(context.JsonContext.ReadElementUtil(r, typeof(string), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("key", context.JsonContext, _retVal, context))));
                                                                if ((_instance != null)) {
                                                                    _retVal.TagKey = _instance;
                                                                }
                                                            }
                                                            else {
                                                                if ("$type".Equals(r.Value)) {
                                                                    System.Type _type = this.m_binder.BindToType("OpenIZ.Core.Model, Version=0.6.14.21496, Culture=neutral, PublicKeyToken=null", r.ReadAsString());
                                                                    if ((_type != typeof(OpenIZ.Core.Model.DataTypes.EntityTag))) {
                                                                        OpenIZ.Core.Model.DataTypes.EntityTag _nretVal = ((OpenIZ.Core.Model.DataTypes.EntityTag)(context.JsonContext.GetFormatter(_type).Deserialize(r, _type, context)));
                                                                        _nretVal.CopyObjectData(_retVal);
                                                                        return _nretVal;
                                                                    }
                                                                }
                                                                else {
                                                                    r.Skip();
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
                else {
                    if (((r.TokenType == Newtonsoft.Json.JsonToken.EndObject) 
                                && (r.Depth == _depth))) {
                        return _retVal;
                    }
                    else {
                        throw new Newtonsoft.Json.JsonSerializationException("JSON in invalid state");
                    }
                }
            }
            return _retVal;
        }
        
        public object FromSimpleValue(object o) {
            string _strong = null;
            if ((o == null)) {
                return null;
            }
            try {
                _strong = o.ToString();
            }
            catch (System.Exception e) {
                this.m_tracer.TraceError(string.Format("Casting Error: {0}", e));
                return null;
            }
            OpenIZ.Core.Model.DataTypes.EntityTag _retVal = new OpenIZ.Core.Model.DataTypes.EntityTag();
            _retVal.Value = _strong;
            return _retVal;
        }
        
        public object GetSimpleValue(object o) {
            if ((o == null)) {
                return null;
            }
            OpenIZ.Core.Model.DataTypes.EntityTag _strong = null;
            try {
                _strong = ((OpenIZ.Core.Model.DataTypes.EntityTag)(o));
            }
            catch (System.Exception e) {
                this.m_tracer.TraceError(string.Format("Casting Error: {0}", e));
                return null;
            }
            return _strong.Value;
        }
    }
    
    public class ActTagViewModelSerializer : OpenIZ.Core.Applets.ViewModel.Json.IJsonViewModelTypeFormatter {
        
        private OpenIZ.Core.Model.Serialization.ModelSerializationBinder m_binder = new OpenIZ.Core.Model.Serialization.ModelSerializationBinder();
        
        private OpenIZ.Core.Diagnostics.Tracer m_tracer = OpenIZ.Core.Diagnostics.Tracer.GetTracer(typeof(ActTagViewModelSerializer));
        
        public System.Type HandlesType {
            get {
                return typeof(OpenIZ.Core.Model.DataTypes.ActTag);
            }
        }
        
        public void Serialize(Newtonsoft.Json.JsonWriter w, OpenIZ.Core.Model.IdentifiedData o, OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext context) {
            if ((o == null)) {
                throw new System.ArgumentNullException("o");
            }
            OpenIZ.Core.Model.DataTypes.ActTag _strong = null;
            OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext _jsonContext = null;
            bool _loaded = false;
            try {
                _strong = ((OpenIZ.Core.Model.DataTypes.ActTag)(o));
            }
            catch (System.Exception e) {
                this.m_tracer.TraceError(string.Format("Casting Error: {0}", e));
                throw new System.ArgumentException(string.Format("Invalid type {0} provided, expected {1}", o.GetType(), typeof(OpenIZ.Core.Model.DataTypes.ActTag)));
            }
            if (context.ShouldSerialize("key")) {
                if ((_strong.TagKey == null)) {
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "key", _strong.TagKey, context);
                }
            }
            if (context.ShouldSerialize("value")) {
                if ((_strong.Value == null)) {
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "value", _strong.Value, context);
                }
            }
            if (context.ShouldSerialize("source")) {
                if ((_strong.SourceEntityKey == null)) {
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "source", _strong.SourceEntityKey, context);
                }
            }
            if (context.ShouldSerialize("sourceModel")) {
                if ((_strong.SourceEntity == null)) {
                    if ((_strong.Key.HasValue && context.ShouldForceLoad("sourceModel", _strong.Key.Value))) {
                        OpenIZ.Core.Model.Acts.Act _delay = null;
                        _delay = context.JsonContext.LoadRelated<OpenIZ.Core.Model.Acts.Act>(_strong.SourceEntityKey);
                        _strong.SourceEntity = _delay;
                        if ((_delay != null)) {
                            _loaded = true;
                            context.JsonContext.WritePropertyUtil(w, "sourceModel", _strong.SourceEntity, context);
                        }
                    }
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "sourceModel", _strong.SourceEntity, context);
                }
            }
            if (context.ShouldSerialize("creationTimeModel")) {
                if ((_strong.CreationTime == null)) {
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "creationTimeModel", _strong.CreationTime, context);
                }
            }
            if (context.ShouldSerialize("creationTime")) {
                if ((_strong.CreationTimeXml == null)) {
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "creationTime", _strong.CreationTimeXml, context);
                }
            }
            if (context.ShouldSerialize("obsoletionTimeModel")) {
                if ((_strong.ObsoletionTime == null)) {
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "obsoletionTimeModel", _strong.ObsoletionTime, context);
                }
            }
            if (context.ShouldSerialize("obsoletionTime")) {
                if ((_strong.ObsoletionTimeXml == null)) {
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "obsoletionTime", _strong.ObsoletionTimeXml, context);
                }
            }
            if (context.ShouldSerialize("createdBy")) {
                if ((_strong.CreatedByKey == null)) {
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "createdBy", _strong.CreatedByKey, context);
                }
            }
            if (context.ShouldSerialize("obsoletedBy")) {
                if ((_strong.ObsoletedByKey == null)) {
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "obsoletedBy", _strong.ObsoletedByKey, context);
                }
            }
            if (context.ShouldSerialize("id")) {
                if ((_strong.Key == null)) {
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "id", _strong.Key, context);
                }
            }
            if (context.ShouldSerialize("etag")) {
                if ((_strong.Tag == null)) {
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "etag", _strong.Tag, context);
                }
            }
            if ((_loaded && _strong.Key.HasValue)) {
                ((OpenIZ.Core.Services.IDataCachingService)(OpenIZ.Core.ApplicationServiceContext.Current.GetService(typeof(OpenIZ.Core.Services.IDataCachingService)))).Add(_strong);
            }
        }
        
        public object Deserialize(Newtonsoft.Json.JsonReader r, System.Type asType, OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext context) {
            OpenIZ.Core.Model.DataTypes.ActTag _retVal = new OpenIZ.Core.Model.DataTypes.ActTag();
            int _depth = r.Depth;
            if ((r.TokenType != Newtonsoft.Json.JsonToken.StartObject)) {
                _depth = (_depth - 1);
            }
            for (
            ; r.Read(); 
            ) {
                if ((r.TokenType == Newtonsoft.Json.JsonToken.PropertyName)) {
                    if ("id".Equals(r.Value)) {
                        r.Read();
                        System.Nullable<System.Guid> _instance = ((System.Nullable<System.Guid>)(context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<System.Guid>), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("id", context.JsonContext, _retVal, context))));
                        if ((_instance != null)) {
                            _retVal.Key = _instance;
                        }
                    }
                    else {
                        if ("obsoletedBy".Equals(r.Value)) {
                            r.Read();
                            System.Nullable<System.Guid> _instance = ((System.Nullable<System.Guid>)(context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<System.Guid>), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("obsoletedBy", context.JsonContext, _retVal, context))));
                            if ((_instance != null)) {
                                _retVal.ObsoletedByKey = _instance;
                            }
                        }
                        else {
                            if ("createdBy".Equals(r.Value)) {
                                r.Read();
                                System.Nullable<System.Guid> _instance = ((System.Nullable<System.Guid>)(context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<System.Guid>), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("createdBy", context.JsonContext, _retVal, context))));
                                if ((_instance != null)) {
                                    _retVal.CreatedByKey = _instance;
                                }
                            }
                            else {
                                if ("obsoletionTime".Equals(r.Value)) {
                                    r.Read();
                                    string _instance = ((string)(context.JsonContext.ReadElementUtil(r, typeof(string), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("obsoletionTime", context.JsonContext, _retVal, context))));
                                    if ((_instance != null)) {
                                        _retVal.ObsoletionTimeXml = _instance;
                                    }
                                }
                                else {
                                    if ("obsoletionTimeModel".Equals(r.Value)) {
                                        r.Read();
                                        System.Nullable<System.DateTimeOffset> _instance = ((System.Nullable<System.DateTimeOffset>)(context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<System.DateTimeOffset>), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("obsoletionTimeModel", context.JsonContext, _retVal, context))));
                                        if ((_instance != null)) {
                                            _retVal.ObsoletionTime = _instance;
                                        }
                                    }
                                    else {
                                        if ("creationTime".Equals(r.Value)) {
                                            r.Read();
                                            string _instance = ((string)(context.JsonContext.ReadElementUtil(r, typeof(string), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("creationTime", context.JsonContext, _retVal, context))));
                                            if ((_instance != null)) {
                                                _retVal.CreationTimeXml = _instance;
                                            }
                                        }
                                        else {
                                            if ("creationTimeModel".Equals(r.Value)) {
                                                r.Read();
                                                System.DateTimeOffset _instance = ((System.DateTimeOffset)(context.JsonContext.ReadElementUtil(r, typeof(System.DateTimeOffset), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("creationTimeModel", context.JsonContext, _retVal, context))));
                                                if ((_instance != null)) {
                                                    _retVal.CreationTime = _instance;
                                                }
                                            }
                                            else {
                                                if ("sourceModel".Equals(r.Value)) {
                                                    r.Read();
                                                    OpenIZ.Core.Model.Acts.Act _instance = ((OpenIZ.Core.Model.Acts.Act)(context.JsonContext.ReadElementUtil(r, typeof(OpenIZ.Core.Model.Acts.Act), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("sourceModel", context.JsonContext, _retVal, context))));
                                                    if ((_instance != null)) {
                                                        _retVal.SourceEntity = _instance;
                                                    }
                                                }
                                                else {
                                                    if ("source".Equals(r.Value)) {
                                                        r.Read();
                                                        System.Nullable<System.Guid> _instance = ((System.Nullable<System.Guid>)(context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<System.Guid>), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("source", context.JsonContext, _retVal, context))));
                                                        if ((_instance != null)) {
                                                            _retVal.SourceEntityKey = _instance;
                                                        }
                                                    }
                                                    else {
                                                        if ("value".Equals(r.Value)) {
                                                            r.Read();
                                                            string _instance = ((string)(context.JsonContext.ReadElementUtil(r, typeof(string), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("value", context.JsonContext, _retVal, context))));
                                                            if ((_instance != null)) {
                                                                _retVal.Value = _instance;
                                                            }
                                                        }
                                                        else {
                                                            if ("key".Equals(r.Value)) {
                                                                r.Read();
                                                                string _instance = ((string)(context.JsonContext.ReadElementUtil(r, typeof(string), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("key", context.JsonContext, _retVal, context))));
                                                                if ((_instance != null)) {
                                                                    _retVal.TagKey = _instance;
                                                                }
                                                            }
                                                            else {
                                                                if ("$type".Equals(r.Value)) {
                                                                    System.Type _type = this.m_binder.BindToType("OpenIZ.Core.Model, Version=0.6.14.21496, Culture=neutral, PublicKeyToken=null", r.ReadAsString());
                                                                    if ((_type != typeof(OpenIZ.Core.Model.DataTypes.ActTag))) {
                                                                        OpenIZ.Core.Model.DataTypes.ActTag _nretVal = ((OpenIZ.Core.Model.DataTypes.ActTag)(context.JsonContext.GetFormatter(_type).Deserialize(r, _type, context)));
                                                                        _nretVal.CopyObjectData(_retVal);
                                                                        return _nretVal;
                                                                    }
                                                                }
                                                                else {
                                                                    r.Skip();
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
                else {
                    if (((r.TokenType == Newtonsoft.Json.JsonToken.EndObject) 
                                && (r.Depth == _depth))) {
                        return _retVal;
                    }
                    else {
                        throw new Newtonsoft.Json.JsonSerializationException("JSON in invalid state");
                    }
                }
            }
            return _retVal;
        }
        
        public object FromSimpleValue(object o) {
            string _strong = null;
            if ((o == null)) {
                return null;
            }
            try {
                _strong = o.ToString();
            }
            catch (System.Exception e) {
                this.m_tracer.TraceError(string.Format("Casting Error: {0}", e));
                return null;
            }
            OpenIZ.Core.Model.DataTypes.ActTag _retVal = new OpenIZ.Core.Model.DataTypes.ActTag();
            _retVal.Value = _strong;
            return _retVal;
        }
        
        public object GetSimpleValue(object o) {
            if ((o == null)) {
                return null;
            }
            OpenIZ.Core.Model.DataTypes.ActTag _strong = null;
            try {
                _strong = ((OpenIZ.Core.Model.DataTypes.ActTag)(o));
            }
            catch (System.Exception e) {
                this.m_tracer.TraceError(string.Format("Casting Error: {0}", e));
                return null;
            }
            return _strong.Value;
        }
    }
    
    public class TemplateDefinitionViewModelSerializer : OpenIZ.Core.Applets.ViewModel.Json.IJsonViewModelTypeFormatter {
        
        private OpenIZ.Core.Model.Serialization.ModelSerializationBinder m_binder = new OpenIZ.Core.Model.Serialization.ModelSerializationBinder();
        
        private OpenIZ.Core.Diagnostics.Tracer m_tracer = OpenIZ.Core.Diagnostics.Tracer.GetTracer(typeof(TemplateDefinitionViewModelSerializer));
        
        public System.Type HandlesType {
            get {
                return typeof(OpenIZ.Core.Model.DataTypes.TemplateDefinition);
            }
        }
        
        public void Serialize(Newtonsoft.Json.JsonWriter w, OpenIZ.Core.Model.IdentifiedData o, OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext context) {
            if ((o == null)) {
                throw new System.ArgumentNullException("o");
            }
            OpenIZ.Core.Model.DataTypes.TemplateDefinition _strong = null;
            OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext _jsonContext = null;
            bool _loaded = false;
            try {
                _strong = ((OpenIZ.Core.Model.DataTypes.TemplateDefinition)(o));
            }
            catch (System.Exception e) {
                this.m_tracer.TraceError(string.Format("Casting Error: {0}", e));
                throw new System.ArgumentException(string.Format("Invalid type {0} provided, expected {1}", o.GetType(), typeof(OpenIZ.Core.Model.DataTypes.TemplateDefinition)));
            }
            if (context.ShouldSerialize("mnemonic")) {
                if ((_strong.Mnemonic == null)) {
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "mnemonic", _strong.Mnemonic, context);
                }
            }
            if (context.ShouldSerialize("name")) {
                if ((_strong.Name == null)) {
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "name", _strong.Name, context);
                }
            }
            if (context.ShouldSerialize("oid")) {
                if ((_strong.Oid == null)) {
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "oid", _strong.Oid, context);
                }
            }
            if (context.ShouldSerialize("description")) {
                if ((_strong.Description == null)) {
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "description", _strong.Description, context);
                }
            }
            if (context.ShouldSerialize("updatedTime")) {
                if ((_strong.UpdatedTimeXml == null)) {
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "updatedTime", _strong.UpdatedTimeXml, context);
                }
            }
            if (context.ShouldSerialize("updatedBy")) {
                if ((_strong.UpdatedByKey == null)) {
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "updatedBy", _strong.UpdatedByKey, context);
                }
            }
            if (context.ShouldSerialize("creationTimeModel")) {
                if ((_strong.CreationTime == null)) {
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "creationTimeModel", _strong.CreationTime, context);
                }
            }
            if (context.ShouldSerialize("creationTime")) {
                if ((_strong.CreationTimeXml == null)) {
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "creationTime", _strong.CreationTimeXml, context);
                }
            }
            if (context.ShouldSerialize("obsoletionTimeModel")) {
                if ((_strong.ObsoletionTime == null)) {
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "obsoletionTimeModel", _strong.ObsoletionTime, context);
                }
            }
            if (context.ShouldSerialize("obsoletionTime")) {
                if ((_strong.ObsoletionTimeXml == null)) {
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "obsoletionTime", _strong.ObsoletionTimeXml, context);
                }
            }
            if (context.ShouldSerialize("createdBy")) {
                if ((_strong.CreatedByKey == null)) {
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "createdBy", _strong.CreatedByKey, context);
                }
            }
            if (context.ShouldSerialize("obsoletedBy")) {
                if ((_strong.ObsoletedByKey == null)) {
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "obsoletedBy", _strong.ObsoletedByKey, context);
                }
            }
            if (context.ShouldSerialize("id")) {
                if ((_strong.Key == null)) {
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "id", _strong.Key, context);
                }
            }
            if (context.ShouldSerialize("etag")) {
                if ((_strong.Tag == null)) {
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "etag", _strong.Tag, context);
                }
            }
            if ((_loaded && _strong.Key.HasValue)) {
                ((OpenIZ.Core.Services.IDataCachingService)(OpenIZ.Core.ApplicationServiceContext.Current.GetService(typeof(OpenIZ.Core.Services.IDataCachingService)))).Add(_strong);
            }
        }
        
        public object Deserialize(Newtonsoft.Json.JsonReader r, System.Type asType, OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext context) {
            OpenIZ.Core.Model.DataTypes.TemplateDefinition _retVal = new OpenIZ.Core.Model.DataTypes.TemplateDefinition();
            int _depth = r.Depth;
            if ((r.TokenType != Newtonsoft.Json.JsonToken.StartObject)) {
                _depth = (_depth - 1);
            }
            for (
            ; r.Read(); 
            ) {
                if ((r.TokenType == Newtonsoft.Json.JsonToken.PropertyName)) {
                    if ("id".Equals(r.Value)) {
                        r.Read();
                        System.Nullable<System.Guid> _instance = ((System.Nullable<System.Guid>)(context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<System.Guid>), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("id", context.JsonContext, _retVal, context))));
                        if ((_instance != null)) {
                            _retVal.Key = _instance;
                        }
                    }
                    else {
                        if ("obsoletedBy".Equals(r.Value)) {
                            r.Read();
                            System.Nullable<System.Guid> _instance = ((System.Nullable<System.Guid>)(context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<System.Guid>), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("obsoletedBy", context.JsonContext, _retVal, context))));
                            if ((_instance != null)) {
                                _retVal.ObsoletedByKey = _instance;
                            }
                        }
                        else {
                            if ("createdBy".Equals(r.Value)) {
                                r.Read();
                                System.Nullable<System.Guid> _instance = ((System.Nullable<System.Guid>)(context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<System.Guid>), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("createdBy", context.JsonContext, _retVal, context))));
                                if ((_instance != null)) {
                                    _retVal.CreatedByKey = _instance;
                                }
                            }
                            else {
                                if ("obsoletionTime".Equals(r.Value)) {
                                    r.Read();
                                    string _instance = ((string)(context.JsonContext.ReadElementUtil(r, typeof(string), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("obsoletionTime", context.JsonContext, _retVal, context))));
                                    if ((_instance != null)) {
                                        _retVal.ObsoletionTimeXml = _instance;
                                    }
                                }
                                else {
                                    if ("obsoletionTimeModel".Equals(r.Value)) {
                                        r.Read();
                                        System.Nullable<System.DateTimeOffset> _instance = ((System.Nullable<System.DateTimeOffset>)(context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<System.DateTimeOffset>), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("obsoletionTimeModel", context.JsonContext, _retVal, context))));
                                        if ((_instance != null)) {
                                            _retVal.ObsoletionTime = _instance;
                                        }
                                    }
                                    else {
                                        if ("creationTime".Equals(r.Value)) {
                                            r.Read();
                                            string _instance = ((string)(context.JsonContext.ReadElementUtil(r, typeof(string), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("creationTime", context.JsonContext, _retVal, context))));
                                            if ((_instance != null)) {
                                                _retVal.CreationTimeXml = _instance;
                                            }
                                        }
                                        else {
                                            if ("creationTimeModel".Equals(r.Value)) {
                                                r.Read();
                                                System.DateTimeOffset _instance = ((System.DateTimeOffset)(context.JsonContext.ReadElementUtil(r, typeof(System.DateTimeOffset), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("creationTimeModel", context.JsonContext, _retVal, context))));
                                                if ((_instance != null)) {
                                                    _retVal.CreationTime = _instance;
                                                }
                                            }
                                            else {
                                                if ("updatedBy".Equals(r.Value)) {
                                                    r.Read();
                                                    System.Nullable<System.Guid> _instance = ((System.Nullable<System.Guid>)(context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<System.Guid>), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("updatedBy", context.JsonContext, _retVal, context))));
                                                    if ((_instance != null)) {
                                                        _retVal.UpdatedByKey = _instance;
                                                    }
                                                }
                                                else {
                                                    if ("updatedTime".Equals(r.Value)) {
                                                        r.Read();
                                                        string _instance = ((string)(context.JsonContext.ReadElementUtil(r, typeof(string), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("updatedTime", context.JsonContext, _retVal, context))));
                                                        if ((_instance != null)) {
                                                            _retVal.UpdatedTimeXml = _instance;
                                                        }
                                                    }
                                                    else {
                                                        if ("description".Equals(r.Value)) {
                                                            r.Read();
                                                            string _instance = ((string)(context.JsonContext.ReadElementUtil(r, typeof(string), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("description", context.JsonContext, _retVal, context))));
                                                            if ((_instance != null)) {
                                                                _retVal.Description = _instance;
                                                            }
                                                        }
                                                        else {
                                                            if ("oid".Equals(r.Value)) {
                                                                r.Read();
                                                                string _instance = ((string)(context.JsonContext.ReadElementUtil(r, typeof(string), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("oid", context.JsonContext, _retVal, context))));
                                                                if ((_instance != null)) {
                                                                    _retVal.Oid = _instance;
                                                                }
                                                            }
                                                            else {
                                                                if ("name".Equals(r.Value)) {
                                                                    r.Read();
                                                                    string _instance = ((string)(context.JsonContext.ReadElementUtil(r, typeof(string), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("name", context.JsonContext, _retVal, context))));
                                                                    if ((_instance != null)) {
                                                                        _retVal.Name = _instance;
                                                                    }
                                                                }
                                                                else {
                                                                    if ("mnemonic".Equals(r.Value)) {
                                                                        r.Read();
                                                                        string _instance = ((string)(context.JsonContext.ReadElementUtil(r, typeof(string), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("mnemonic", context.JsonContext, _retVal, context))));
                                                                        if ((_instance != null)) {
                                                                            _retVal.Mnemonic = _instance;
                                                                        }
                                                                    }
                                                                    else {
                                                                        if ("$type".Equals(r.Value)) {
                                                                            System.Type _type = this.m_binder.BindToType("OpenIZ.Core.Model, Version=0.6.14.21496, Culture=neutral, PublicKeyToken=null", r.ReadAsString());
                                                                            if ((_type != typeof(OpenIZ.Core.Model.DataTypes.TemplateDefinition))) {
                                                                                OpenIZ.Core.Model.DataTypes.TemplateDefinition _nretVal = ((OpenIZ.Core.Model.DataTypes.TemplateDefinition)(context.JsonContext.GetFormatter(_type).Deserialize(r, _type, context)));
                                                                                _nretVal.CopyObjectData(_retVal);
                                                                                return _nretVal;
                                                                            }
                                                                        }
                                                                        else {
                                                                            r.Skip();
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
                else {
                    if (((r.TokenType == Newtonsoft.Json.JsonToken.EndObject) 
                                && (r.Depth == _depth))) {
                        return _retVal;
                    }
                    else {
                        throw new Newtonsoft.Json.JsonSerializationException("JSON in invalid state");
                    }
                }
            }
            return _retVal;
        }
        
        public object FromSimpleValue(object o) {
            return null;
        }
        
        public object GetSimpleValue(object o) {
            return null;
        }
    }
    
    public class BundleViewModelSerializer : OpenIZ.Core.Applets.ViewModel.Json.IJsonViewModelTypeFormatter {
        
        private OpenIZ.Core.Model.Serialization.ModelSerializationBinder m_binder = new OpenIZ.Core.Model.Serialization.ModelSerializationBinder();
        
        private OpenIZ.Core.Diagnostics.Tracer m_tracer = OpenIZ.Core.Diagnostics.Tracer.GetTracer(typeof(BundleViewModelSerializer));
        
        public System.Type HandlesType {
            get {
                return typeof(OpenIZ.Core.Model.Collection.Bundle);
            }
        }
        
        public void Serialize(Newtonsoft.Json.JsonWriter w, OpenIZ.Core.Model.IdentifiedData o, OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext context) {
            if ((o == null)) {
                throw new System.ArgumentNullException("o");
            }
            OpenIZ.Core.Model.Collection.Bundle _strong = null;
            OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext _jsonContext = null;
            bool _loaded = false;
            try {
                _strong = ((OpenIZ.Core.Model.Collection.Bundle)(o));
            }
            catch (System.Exception e) {
                this.m_tracer.TraceError(string.Format("Casting Error: {0}", e));
                throw new System.ArgumentException(string.Format("Invalid type {0} provided, expected {1}", o.GetType(), typeof(OpenIZ.Core.Model.Collection.Bundle)));
            }
            if (context.ShouldSerialize("modifiedOn")) {
                if ((_strong.ModifiedOn == null)) {
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "modifiedOn", _strong.ModifiedOn, context);
                }
            }
            if (context.ShouldSerialize("item")) {
                if (((_strong.Item == null) 
                            || (_strong.Item.Count == 0))) {
                    if ((_strong.Key.HasValue && context.ShouldForceLoad("item", _strong.Key.Value))) {
                        System.Collections.Generic.List<OpenIZ.Core.Model.IdentifiedData> _delay = null;
                    }
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "item", _strong.Item, context);
                }
            }
            if (context.ShouldSerialize("entry")) {
                if ((_strong.EntryKey == null)) {
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "entry", _strong.EntryKey, context);
                }
            }
            if (context.ShouldSerialize("offset")) {
                if ((_strong.Offset == null)) {
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "offset", _strong.Offset, context);
                }
            }
            if (context.ShouldSerialize("count")) {
                if ((_strong.Count == null)) {
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "count", _strong.Count, context);
                }
            }
            if (context.ShouldSerialize("totalResults")) {
                if ((_strong.TotalResults == null)) {
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "totalResults", _strong.TotalResults, context);
                }
            }
            if (context.ShouldSerialize("id")) {
                if ((_strong.Key == null)) {
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "id", _strong.Key, context);
                }
            }
            if (context.ShouldSerialize("etag")) {
                if ((_strong.Tag == null)) {
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "etag", _strong.Tag, context);
                }
            }
            if ((_loaded && _strong.Key.HasValue)) {
                ((OpenIZ.Core.Services.IDataCachingService)(OpenIZ.Core.ApplicationServiceContext.Current.GetService(typeof(OpenIZ.Core.Services.IDataCachingService)))).Add(_strong);
            }
        }
        
        public object Deserialize(Newtonsoft.Json.JsonReader r, System.Type asType, OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext context) {
            OpenIZ.Core.Model.Collection.Bundle _retVal = new OpenIZ.Core.Model.Collection.Bundle();
            int _depth = r.Depth;
            if ((r.TokenType != Newtonsoft.Json.JsonToken.StartObject)) {
                _depth = (_depth - 1);
            }
            for (
            ; r.Read(); 
            ) {
                if ((r.TokenType == Newtonsoft.Json.JsonToken.PropertyName)) {
                    if ("id".Equals(r.Value)) {
                        r.Read();
                        System.Nullable<System.Guid> _instance = ((System.Nullable<System.Guid>)(context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<System.Guid>), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("id", context.JsonContext, _retVal, context))));
                        if ((_instance != null)) {
                            _retVal.Key = _instance;
                        }
                    }
                    else {
                        if ("totalResults".Equals(r.Value)) {
                            r.Read();
                            int _instance = ((int)(context.JsonContext.ReadElementUtil(r, typeof(int), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("totalResults", context.JsonContext, _retVal, context))));
                            if ((_instance != null)) {
                                _retVal.TotalResults = _instance;
                            }
                        }
                        else {
                            if ("count".Equals(r.Value)) {
                                r.Read();
                                int _instance = ((int)(context.JsonContext.ReadElementUtil(r, typeof(int), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("count", context.JsonContext, _retVal, context))));
                                if ((_instance != null)) {
                                    _retVal.Count = _instance;
                                }
                            }
                            else {
                                if ("offset".Equals(r.Value)) {
                                    r.Read();
                                    int _instance = ((int)(context.JsonContext.ReadElementUtil(r, typeof(int), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("offset", context.JsonContext, _retVal, context))));
                                    if ((_instance != null)) {
                                        _retVal.Offset = _instance;
                                    }
                                }
                                else {
                                    if ("entry".Equals(r.Value)) {
                                        r.Read();
                                        System.Nullable<System.Guid> _instance = ((System.Nullable<System.Guid>)(context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<System.Guid>), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("entry", context.JsonContext, _retVal, context))));
                                        if ((_instance != null)) {
                                            _retVal.EntryKey = _instance;
                                        }
                                    }
                                    else {
                                        if ("item".Equals(r.Value)) {
                                            r.Read();
                                            System.Collections.Generic.List<OpenIZ.Core.Model.IdentifiedData> _instance = ((System.Collections.Generic.List<OpenIZ.Core.Model.IdentifiedData>)(context.JsonContext.ReadElementUtil(r, typeof(System.Collections.Generic.List<OpenIZ.Core.Model.IdentifiedData>), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("item", context.JsonContext, _retVal, context))));
                                            if ((_instance != null)) {
                                                _retVal.Item = _instance;
                                            }
                                        }
                                        else {
                                            if ("$type".Equals(r.Value)) {
                                                System.Type _type = this.m_binder.BindToType("OpenIZ.Core.Model, Version=0.6.14.21496, Culture=neutral, PublicKeyToken=null", r.ReadAsString());
                                                if ((_type != typeof(OpenIZ.Core.Model.Collection.Bundle))) {
                                                    OpenIZ.Core.Model.Collection.Bundle _nretVal = ((OpenIZ.Core.Model.Collection.Bundle)(context.JsonContext.GetFormatter(_type).Deserialize(r, _type, context)));
                                                    _nretVal.CopyObjectData(_retVal);
                                                    return _nretVal;
                                                }
                                            }
                                            else {
                                                r.Skip();
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
                else {
                    if (((r.TokenType == Newtonsoft.Json.JsonToken.EndObject) 
                                && (r.Depth == _depth))) {
                        return _retVal;
                    }
                    else {
                        throw new Newtonsoft.Json.JsonSerializationException("JSON in invalid state");
                    }
                }
            }
            return _retVal;
        }
        
        public object FromSimpleValue(object o) {
            return null;
        }
        
        public object GetSimpleValue(object o) {
            return null;
        }
    }
    
    public class ActViewModelSerializer : OpenIZ.Core.Applets.ViewModel.Json.IJsonViewModelTypeFormatter {
        
        private OpenIZ.Core.Model.Serialization.ModelSerializationBinder m_binder = new OpenIZ.Core.Model.Serialization.ModelSerializationBinder();
        
        private OpenIZ.Core.Diagnostics.Tracer m_tracer = OpenIZ.Core.Diagnostics.Tracer.GetTracer(typeof(ActViewModelSerializer));
        
        public System.Type HandlesType {
            get {
                return typeof(OpenIZ.Core.Model.Acts.Act);
            }
        }
        
        public void Serialize(Newtonsoft.Json.JsonWriter w, OpenIZ.Core.Model.IdentifiedData o, OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext context) {
            if ((o == null)) {
                throw new System.ArgumentNullException("o");
            }
            OpenIZ.Core.Model.Acts.Act _strong = null;
            OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext _jsonContext = null;
            bool _loaded = false;
            try {
                _strong = ((OpenIZ.Core.Model.Acts.Act)(o));
            }
            catch (System.Exception e) {
                this.m_tracer.TraceError(string.Format("Casting Error: {0}", e));
                throw new System.ArgumentException(string.Format("Invalid type {0} provided, expected {1}", o.GetType(), typeof(OpenIZ.Core.Model.Acts.Act)));
            }
            if (context.ShouldSerialize("isNegated")) {
                if ((_strong.IsNegated == null)) {
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "isNegated", _strong.IsNegated, context);
                }
            }
            if (context.ShouldSerialize("template")) {
                if ((_strong.Template == null)) {
                    if ((_strong.Key.HasValue && context.ShouldForceLoad("template", _strong.Key.Value))) {
                        OpenIZ.Core.Model.DataTypes.TemplateDefinition _delay = null;
                    }
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "template", _strong.Template, context);
                }
            }
            if (context.ShouldSerialize("actTime")) {
                if ((_strong.ActTimeXml == null)) {
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "actTime", _strong.ActTimeXml, context);
                }
            }
            if (context.ShouldSerialize("startTime")) {
                if ((_strong.StartTimeXml == null)) {
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "startTime", _strong.StartTimeXml, context);
                }
            }
            if (context.ShouldSerialize("stopTime")) {
                if ((_strong.StopTimeXml == null)) {
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "stopTime", _strong.StopTimeXml, context);
                }
            }
            if (context.ShouldSerialize("classConcept")) {
                if ((_strong.ClassConceptKey == null)) {
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "classConcept", _strong.ClassConceptKey, context);
                }
            }
            if (context.ShouldSerialize("moodConcept")) {
                if ((_strong.MoodConceptKey == null)) {
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "moodConcept", _strong.MoodConceptKey, context);
                }
            }
            if (context.ShouldSerialize("reasonConcept")) {
                if ((_strong.ReasonConceptKey == null)) {
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "reasonConcept", _strong.ReasonConceptKey, context);
                }
            }
            if (context.ShouldSerialize("statusConcept")) {
                if ((_strong.StatusConceptKey == null)) {
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "statusConcept", _strong.StatusConceptKey, context);
                }
            }
            if (context.ShouldSerialize("typeConcept")) {
                if ((_strong.TypeConceptKey == null)) {
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "typeConcept", _strong.TypeConceptKey, context);
                }
            }
            if (context.ShouldSerialize("classConceptModel")) {
                if ((_strong.ClassConcept == null)) {
                    if ((_strong.Key.HasValue && context.ShouldForceLoad("classConceptModel", _strong.Key.Value))) {
                        OpenIZ.Core.Model.DataTypes.Concept _delay = null;
                        _delay = context.JsonContext.LoadRelated<OpenIZ.Core.Model.DataTypes.Concept>(_strong.ClassConceptKey);
                        _strong.ClassConcept = _delay;
                        if ((_delay != null)) {
                            _loaded = true;
                            context.JsonContext.WritePropertyUtil(w, "classConceptModel", _strong.ClassConcept, context);
                        }
                    }
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "classConceptModel", _strong.ClassConcept, context);
                }
            }
            if (context.ShouldSerialize("moodConceptModel")) {
                if ((_strong.MoodConcept == null)) {
                    if ((_strong.Key.HasValue && context.ShouldForceLoad("moodConceptModel", _strong.Key.Value))) {
                        OpenIZ.Core.Model.DataTypes.Concept _delay = null;
                        _delay = context.JsonContext.LoadRelated<OpenIZ.Core.Model.DataTypes.Concept>(_strong.MoodConceptKey);
                        _strong.MoodConcept = _delay;
                        if ((_delay != null)) {
                            _loaded = true;
                            context.JsonContext.WritePropertyUtil(w, "moodConceptModel", _strong.MoodConcept, context);
                        }
                    }
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "moodConceptModel", _strong.MoodConcept, context);
                }
            }
            if (context.ShouldSerialize("reasonConceptModel")) {
                if ((_strong.ReasonConcept == null)) {
                    if ((_strong.Key.HasValue && context.ShouldForceLoad("reasonConceptModel", _strong.Key.Value))) {
                        OpenIZ.Core.Model.DataTypes.Concept _delay = null;
                        _delay = context.JsonContext.LoadRelated<OpenIZ.Core.Model.DataTypes.Concept>(_strong.ReasonConceptKey);
                        _strong.ReasonConcept = _delay;
                        if ((_delay != null)) {
                            _loaded = true;
                            context.JsonContext.WritePropertyUtil(w, "reasonConceptModel", _strong.ReasonConcept, context);
                        }
                    }
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "reasonConceptModel", _strong.ReasonConcept, context);
                }
            }
            if (context.ShouldSerialize("statusConceptModel")) {
                if ((_strong.StatusConcept == null)) {
                    if ((_strong.Key.HasValue && context.ShouldForceLoad("statusConceptModel", _strong.Key.Value))) {
                        OpenIZ.Core.Model.DataTypes.Concept _delay = null;
                        _delay = context.JsonContext.LoadRelated<OpenIZ.Core.Model.DataTypes.Concept>(_strong.StatusConceptKey);
                        _strong.StatusConcept = _delay;
                        if ((_delay != null)) {
                            _loaded = true;
                            context.JsonContext.WritePropertyUtil(w, "statusConceptModel", _strong.StatusConcept, context);
                        }
                    }
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "statusConceptModel", _strong.StatusConcept, context);
                }
            }
            if (context.ShouldSerialize("typeConceptModel")) {
                if ((_strong.TypeConcept == null)) {
                    if ((_strong.Key.HasValue && context.ShouldForceLoad("typeConceptModel", _strong.Key.Value))) {
                        OpenIZ.Core.Model.DataTypes.Concept _delay = null;
                        _delay = context.JsonContext.LoadRelated<OpenIZ.Core.Model.DataTypes.Concept>(_strong.TypeConceptKey);
                        _strong.TypeConcept = _delay;
                        if ((_delay != null)) {
                            _loaded = true;
                            context.JsonContext.WritePropertyUtil(w, "typeConceptModel", _strong.TypeConcept, context);
                        }
                    }
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "typeConceptModel", _strong.TypeConcept, context);
                }
            }
            if (context.ShouldSerialize("identifier")) {
                if (((_strong.Identifiers == null) 
                            || (_strong.Identifiers.Count == 0))) {
                    if ((_strong.Key.HasValue && context.ShouldForceLoad("identifier", _strong.Key.Value))) {
                        OpenIZ.Core.Model.Collection.VersionedAssociationCollection<OpenIZ.Core.Model.DataTypes.ActIdentifier> _delay = null;
                        _delay = new OpenIZ.Core.Model.Collection.VersionedAssociationCollection<OpenIZ.Core.Model.DataTypes.ActIdentifier>(context.JsonContext.LoadCollection<OpenIZ.Core.Model.DataTypes.ActIdentifier>(_strong.Key.Value));
                        _strong.Identifiers = _delay;
                        if ((_delay.Count > 0)) {
                            _loaded = true;
                            context.JsonContext.WritePropertyUtil(w, "identifier", _strong.Identifiers, context);
                        }
                    }
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "identifier", _strong.Identifiers, context);
                }
            }
            if (context.ShouldSerialize("relationship")) {
                if (((_strong.Relationships == null) 
                            || (_strong.Relationships.Count == 0))) {
                    if ((_strong.Key.HasValue && context.ShouldForceLoad("relationship", _strong.Key.Value))) {
                        OpenIZ.Core.Model.Collection.VersionedAssociationCollection<OpenIZ.Core.Model.Acts.ActRelationship> _delay = null;
                        _delay = new OpenIZ.Core.Model.Collection.VersionedAssociationCollection<OpenIZ.Core.Model.Acts.ActRelationship>(context.JsonContext.LoadCollection<OpenIZ.Core.Model.Acts.ActRelationship>(_strong.Key.Value));
                        _strong.Relationships = _delay;
                        if ((_delay.Count > 0)) {
                            _loaded = true;
                            context.JsonContext.WritePropertyUtil(w, "relationship", _strong.Relationships, context);
                        }
                    }
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "relationship", _strong.Relationships, context);
                }
            }
            if (context.ShouldSerialize("policy")) {
                if (((_strong.Policies == null) 
                            || (_strong.Policies.Count == 0))) {
                    if ((_strong.Key.HasValue && context.ShouldForceLoad("policy", _strong.Key.Value))) {
                        OpenIZ.Core.Model.Collection.SimpleAssociationCollection<OpenIZ.Core.Model.Security.SecurityPolicyInstance> _delay = null;
                        _delay = new OpenIZ.Core.Model.Collection.SimpleAssociationCollection<OpenIZ.Core.Model.Security.SecurityPolicyInstance>(context.JsonContext.LoadCollection<OpenIZ.Core.Model.Security.SecurityPolicyInstance>(_strong.Key.Value));
                        _strong.Policies = _delay;
                        if ((_delay.Count > 0)) {
                            _loaded = true;
                            context.JsonContext.WritePropertyUtil(w, "policy", _strong.Policies, context);
                        }
                    }
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "policy", _strong.Policies, context);
                }
            }
            if (context.ShouldSerialize("extension")) {
                if (((_strong.Extensions == null) 
                            || (_strong.Extensions.Count == 0))) {
                    if ((_strong.Key.HasValue && context.ShouldForceLoad("extension", _strong.Key.Value))) {
                        OpenIZ.Core.Model.Collection.VersionedAssociationCollection<OpenIZ.Core.Model.DataTypes.ActExtension> _delay = null;
                        _delay = new OpenIZ.Core.Model.Collection.VersionedAssociationCollection<OpenIZ.Core.Model.DataTypes.ActExtension>(context.JsonContext.LoadCollection<OpenIZ.Core.Model.DataTypes.ActExtension>(_strong.Key.Value));
                        _strong.Extensions = _delay;
                        if ((_delay.Count > 0)) {
                            _loaded = true;
                            context.JsonContext.WritePropertyUtil(w, "extension", _strong.Extensions, context);
                        }
                    }
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "extension", _strong.Extensions, context);
                }
            }
            if (context.ShouldSerialize("note")) {
                if (((_strong.Notes == null) 
                            || (_strong.Notes.Count == 0))) {
                    if ((_strong.Key.HasValue && context.ShouldForceLoad("note", _strong.Key.Value))) {
                        OpenIZ.Core.Model.Collection.VersionedAssociationCollection<OpenIZ.Core.Model.DataTypes.ActNote> _delay = null;
                        _delay = new OpenIZ.Core.Model.Collection.VersionedAssociationCollection<OpenIZ.Core.Model.DataTypes.ActNote>(context.JsonContext.LoadCollection<OpenIZ.Core.Model.DataTypes.ActNote>(_strong.Key.Value));
                        _strong.Notes = _delay;
                        if ((_delay.Count > 0)) {
                            _loaded = true;
                            context.JsonContext.WritePropertyUtil(w, "note", _strong.Notes, context);
                        }
                    }
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "note", _strong.Notes, context);
                }
            }
            if (context.ShouldSerialize("tag")) {
                if (((_strong.Tags == null) 
                            || (_strong.Tags.Count == 0))) {
                    if ((_strong.Key.HasValue && context.ShouldForceLoad("tag", _strong.Key.Value))) {
                        OpenIZ.Core.Model.Collection.SimpleAssociationCollection<OpenIZ.Core.Model.DataTypes.ActTag> _delay = null;
                        _delay = new OpenIZ.Core.Model.Collection.SimpleAssociationCollection<OpenIZ.Core.Model.DataTypes.ActTag>(context.JsonContext.LoadCollection<OpenIZ.Core.Model.DataTypes.ActTag>(_strong.Key.Value));
                        _strong.Tags = _delay;
                        if ((_delay.Count > 0)) {
                            _loaded = true;
                            context.JsonContext.WritePropertyUtil(w, "tag", _strong.Tags, context);
                        }
                    }
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "tag", _strong.Tags, context);
                }
            }
            if (context.ShouldSerialize("protocolsModel")) {
                if (((_strong.Protocols == null) 
                            || (_strong.Protocols.Count == 0))) {
                    if ((_strong.Key.HasValue && context.ShouldForceLoad("protocolsModel", _strong.Key.Value))) {
                        OpenIZ.Core.Model.Collection.VersionedAssociationCollection<OpenIZ.Core.Model.Acts.ActProtocol> _delay = null;
                        _delay = new OpenIZ.Core.Model.Collection.VersionedAssociationCollection<OpenIZ.Core.Model.Acts.ActProtocol>(context.JsonContext.LoadCollection<OpenIZ.Core.Model.Acts.ActProtocol>(_strong.Key.Value));
                        _strong.Protocols = _delay;
                        if ((_delay.Count > 0)) {
                            _loaded = true;
                            context.JsonContext.WritePropertyUtil(w, "protocolsModel", _strong.Protocols, context);
                        }
                    }
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "protocolsModel", _strong.Protocols, context);
                }
            }
            if (context.ShouldSerialize("participation")) {
                if (((_strong.Participations == null) 
                            || (_strong.Participations.Count == 0))) {
                    if ((_strong.Key.HasValue && context.ShouldForceLoad("participation", _strong.Key.Value))) {
                        OpenIZ.Core.Model.Collection.VersionedAssociationCollection<OpenIZ.Core.Model.Acts.ActParticipation> _delay = null;
                        _delay = new OpenIZ.Core.Model.Collection.VersionedAssociationCollection<OpenIZ.Core.Model.Acts.ActParticipation>(context.JsonContext.LoadCollection<OpenIZ.Core.Model.Acts.ActParticipation>(_strong.Key.Value));
                        _strong.Participations = _delay;
                        if ((_delay.Count > 0)) {
                            _loaded = true;
                            context.JsonContext.WritePropertyUtil(w, "participation", _strong.Participations, context);
                        }
                    }
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "participation", _strong.Participations, context);
                }
            }
            if (context.ShouldSerialize("etag")) {
                if ((_strong.Tag == null)) {
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "etag", _strong.Tag, context);
                }
            }
            if (context.ShouldSerialize("previousVersion")) {
                if ((_strong.PreviousVersionKey == null)) {
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "previousVersion", _strong.PreviousVersionKey, context);
                }
            }
            if (context.ShouldSerialize("version")) {
                if ((_strong.VersionKey == null)) {
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "version", _strong.VersionKey, context);
                }
            }
            if (context.ShouldSerialize("sequence")) {
                if ((_strong.VersionSequence == null)) {
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "sequence", _strong.VersionSequence, context);
                }
            }
            if (context.ShouldSerialize("creationTimeModel")) {
                if ((_strong.CreationTime == null)) {
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "creationTimeModel", _strong.CreationTime, context);
                }
            }
            if (context.ShouldSerialize("creationTime")) {
                if ((_strong.CreationTimeXml == null)) {
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "creationTime", _strong.CreationTimeXml, context);
                }
            }
            if (context.ShouldSerialize("obsoletionTimeModel")) {
                if ((_strong.ObsoletionTime == null)) {
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "obsoletionTimeModel", _strong.ObsoletionTime, context);
                }
            }
            if (context.ShouldSerialize("obsoletionTime")) {
                if ((_strong.ObsoletionTimeXml == null)) {
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "obsoletionTime", _strong.ObsoletionTimeXml, context);
                }
            }
            if (context.ShouldSerialize("createdBy")) {
                if ((_strong.CreatedByKey == null)) {
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "createdBy", _strong.CreatedByKey, context);
                }
            }
            if (context.ShouldSerialize("obsoletedBy")) {
                if ((_strong.ObsoletedByKey == null)) {
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "obsoletedBy", _strong.ObsoletedByKey, context);
                }
            }
            if (context.ShouldSerialize("id")) {
                if ((_strong.Key == null)) {
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "id", _strong.Key, context);
                }
            }
            if (((_loaded && _strong.Key.HasValue) 
                        && _strong.VersionKey.HasValue)) {
                ((OpenIZ.Core.Services.IDataCachingService)(OpenIZ.Core.ApplicationServiceContext.Current.GetService(typeof(OpenIZ.Core.Services.IDataCachingService)))).Add(_strong);
            }
        }
        
        public object Deserialize(Newtonsoft.Json.JsonReader r, System.Type asType, OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext context) {
            OpenIZ.Core.Model.Acts.Act _retVal = new OpenIZ.Core.Model.Acts.Act();
            int _depth = r.Depth;
            if ((r.TokenType != Newtonsoft.Json.JsonToken.StartObject)) {
                _depth = (_depth - 1);
            }
            for (
            ; r.Read(); 
            ) {
                if ((r.TokenType == Newtonsoft.Json.JsonToken.PropertyName)) {
                    if ("id".Equals(r.Value)) {
                        r.Read();
                        System.Nullable<System.Guid> _instance = ((System.Nullable<System.Guid>)(context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<System.Guid>), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("id", context.JsonContext, _retVal, context))));
                        if ((_instance != null)) {
                            _retVal.Key = _instance;
                        }
                    }
                    else {
                        if ("obsoletedBy".Equals(r.Value)) {
                            r.Read();
                            System.Nullable<System.Guid> _instance = ((System.Nullable<System.Guid>)(context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<System.Guid>), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("obsoletedBy", context.JsonContext, _retVal, context))));
                            if ((_instance != null)) {
                                _retVal.ObsoletedByKey = _instance;
                            }
                        }
                        else {
                            if ("createdBy".Equals(r.Value)) {
                                r.Read();
                                System.Nullable<System.Guid> _instance = ((System.Nullable<System.Guid>)(context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<System.Guid>), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("createdBy", context.JsonContext, _retVal, context))));
                                if ((_instance != null)) {
                                    _retVal.CreatedByKey = _instance;
                                }
                            }
                            else {
                                if ("obsoletionTime".Equals(r.Value)) {
                                    r.Read();
                                    string _instance = ((string)(context.JsonContext.ReadElementUtil(r, typeof(string), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("obsoletionTime", context.JsonContext, _retVal, context))));
                                    if ((_instance != null)) {
                                        _retVal.ObsoletionTimeXml = _instance;
                                    }
                                }
                                else {
                                    if ("obsoletionTimeModel".Equals(r.Value)) {
                                        r.Read();
                                        System.Nullable<System.DateTimeOffset> _instance = ((System.Nullable<System.DateTimeOffset>)(context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<System.DateTimeOffset>), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("obsoletionTimeModel", context.JsonContext, _retVal, context))));
                                        if ((_instance != null)) {
                                            _retVal.ObsoletionTime = _instance;
                                        }
                                    }
                                    else {
                                        if ("creationTime".Equals(r.Value)) {
                                            r.Read();
                                            string _instance = ((string)(context.JsonContext.ReadElementUtil(r, typeof(string), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("creationTime", context.JsonContext, _retVal, context))));
                                            if ((_instance != null)) {
                                                _retVal.CreationTimeXml = _instance;
                                            }
                                        }
                                        else {
                                            if ("creationTimeModel".Equals(r.Value)) {
                                                r.Read();
                                                System.DateTimeOffset _instance = ((System.DateTimeOffset)(context.JsonContext.ReadElementUtil(r, typeof(System.DateTimeOffset), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("creationTimeModel", context.JsonContext, _retVal, context))));
                                                if ((_instance != null)) {
                                                    _retVal.CreationTime = _instance;
                                                }
                                            }
                                            else {
                                                if ("sequence".Equals(r.Value)) {
                                                    r.Read();
                                                    System.Nullable<decimal> _instance = ((System.Nullable<decimal>)(context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<decimal>), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("sequence", context.JsonContext, _retVal, context))));
                                                    if ((_instance != null)) {
                                                        _retVal.VersionSequence = _instance;
                                                    }
                                                }
                                                else {
                                                    if ("version".Equals(r.Value)) {
                                                        r.Read();
                                                        System.Nullable<System.Guid> _instance = ((System.Nullable<System.Guid>)(context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<System.Guid>), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("version", context.JsonContext, _retVal, context))));
                                                        if ((_instance != null)) {
                                                            _retVal.VersionKey = _instance;
                                                        }
                                                    }
                                                    else {
                                                        if ("previousVersion".Equals(r.Value)) {
                                                            r.Read();
                                                            System.Nullable<System.Guid> _instance = ((System.Nullable<System.Guid>)(context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<System.Guid>), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("previousVersion", context.JsonContext, _retVal, context))));
                                                            if ((_instance != null)) {
                                                                _retVal.PreviousVersionKey = _instance;
                                                            }
                                                        }
                                                        else {
                                                            if ("participation".Equals(r.Value)) {
                                                                r.Read();
                                                                OpenIZ.Core.Model.Collection.VersionedAssociationCollection<OpenIZ.Core.Model.Acts.ActParticipation> _instance = ((OpenIZ.Core.Model.Collection.VersionedAssociationCollection<OpenIZ.Core.Model.Acts.ActParticipation>)(context.JsonContext.ReadElementUtil(r, typeof(OpenIZ.Core.Model.Collection.VersionedAssociationCollection<OpenIZ.Core.Model.Acts.ActParticipation>), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("participation", context.JsonContext, _retVal, context))));
                                                                if ((_instance != null)) {
                                                                    _retVal.Participations = _instance;
                                                                }
                                                            }
                                                            else {
                                                                if ("protocolsModel".Equals(r.Value)) {
                                                                    r.Read();
                                                                    OpenIZ.Core.Model.Collection.VersionedAssociationCollection<OpenIZ.Core.Model.Acts.ActProtocol> _instance = ((OpenIZ.Core.Model.Collection.VersionedAssociationCollection<OpenIZ.Core.Model.Acts.ActProtocol>)(context.JsonContext.ReadElementUtil(r, typeof(OpenIZ.Core.Model.Collection.VersionedAssociationCollection<OpenIZ.Core.Model.Acts.ActProtocol>), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("protocolsModel", context.JsonContext, _retVal, context))));
                                                                    if ((_instance != null)) {
                                                                        _retVal.Protocols = _instance;
                                                                    }
                                                                }
                                                                else {
                                                                    if ("tag".Equals(r.Value)) {
                                                                        r.Read();
                                                                        OpenIZ.Core.Model.Collection.SimpleAssociationCollection<OpenIZ.Core.Model.DataTypes.ActTag> _instance = ((OpenIZ.Core.Model.Collection.SimpleAssociationCollection<OpenIZ.Core.Model.DataTypes.ActTag>)(context.JsonContext.ReadElementUtil(r, typeof(OpenIZ.Core.Model.Collection.SimpleAssociationCollection<OpenIZ.Core.Model.DataTypes.ActTag>), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("tag", context.JsonContext, _retVal, context))));
                                                                        if ((_instance != null)) {
                                                                            _retVal.Tags = _instance;
                                                                        }
                                                                    }
                                                                    else {
                                                                        if ("note".Equals(r.Value)) {
                                                                            r.Read();
                                                                            OpenIZ.Core.Model.Collection.VersionedAssociationCollection<OpenIZ.Core.Model.DataTypes.ActNote> _instance = ((OpenIZ.Core.Model.Collection.VersionedAssociationCollection<OpenIZ.Core.Model.DataTypes.ActNote>)(context.JsonContext.ReadElementUtil(r, typeof(OpenIZ.Core.Model.Collection.VersionedAssociationCollection<OpenIZ.Core.Model.DataTypes.ActNote>), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("note", context.JsonContext, _retVal, context))));
                                                                            if ((_instance != null)) {
                                                                                _retVal.Notes = _instance;
                                                                            }
                                                                        }
                                                                        else {
                                                                            if ("extension".Equals(r.Value)) {
                                                                                r.Read();
                                                                                OpenIZ.Core.Model.Collection.VersionedAssociationCollection<OpenIZ.Core.Model.DataTypes.ActExtension> _instance = ((OpenIZ.Core.Model.Collection.VersionedAssociationCollection<OpenIZ.Core.Model.DataTypes.ActExtension>)(context.JsonContext.ReadElementUtil(r, typeof(OpenIZ.Core.Model.Collection.VersionedAssociationCollection<OpenIZ.Core.Model.DataTypes.ActExtension>), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("extension", context.JsonContext, _retVal, context))));
                                                                                if ((_instance != null)) {
                                                                                    _retVal.Extensions = _instance;
                                                                                }
                                                                            }
                                                                            else {
                                                                                if ("policy".Equals(r.Value)) {
                                                                                    r.Read();
                                                                                    OpenIZ.Core.Model.Collection.SimpleAssociationCollection<OpenIZ.Core.Model.Security.SecurityPolicyInstance> _instance = ((OpenIZ.Core.Model.Collection.SimpleAssociationCollection<OpenIZ.Core.Model.Security.SecurityPolicyInstance>)(context.JsonContext.ReadElementUtil(r, typeof(OpenIZ.Core.Model.Collection.SimpleAssociationCollection<OpenIZ.Core.Model.Security.SecurityPolicyInstance>), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("policy", context.JsonContext, _retVal, context))));
                                                                                    if ((_instance != null)) {
                                                                                        _retVal.Policies = _instance;
                                                                                    }
                                                                                }
                                                                                else {
                                                                                    if ("relationship".Equals(r.Value)) {
                                                                                        r.Read();
                                                                                        OpenIZ.Core.Model.Collection.VersionedAssociationCollection<OpenIZ.Core.Model.Acts.ActRelationship> _instance = ((OpenIZ.Core.Model.Collection.VersionedAssociationCollection<OpenIZ.Core.Model.Acts.ActRelationship>)(context.JsonContext.ReadElementUtil(r, typeof(OpenIZ.Core.Model.Collection.VersionedAssociationCollection<OpenIZ.Core.Model.Acts.ActRelationship>), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("relationship", context.JsonContext, _retVal, context))));
                                                                                        if ((_instance != null)) {
                                                                                            _retVal.Relationships = _instance;
                                                                                        }
                                                                                    }
                                                                                    else {
                                                                                        if ("identifier".Equals(r.Value)) {
                                                                                            r.Read();
                                                                                            OpenIZ.Core.Model.Collection.VersionedAssociationCollection<OpenIZ.Core.Model.DataTypes.ActIdentifier> _instance = ((OpenIZ.Core.Model.Collection.VersionedAssociationCollection<OpenIZ.Core.Model.DataTypes.ActIdentifier>)(context.JsonContext.ReadElementUtil(r, typeof(OpenIZ.Core.Model.Collection.VersionedAssociationCollection<OpenIZ.Core.Model.DataTypes.ActIdentifier>), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("identifier", context.JsonContext, _retVal, context))));
                                                                                            if ((_instance != null)) {
                                                                                                _retVal.Identifiers = _instance;
                                                                                            }
                                                                                        }
                                                                                        else {
                                                                                            if ("typeConceptModel".Equals(r.Value)) {
                                                                                                r.Read();
                                                                                                OpenIZ.Core.Model.DataTypes.Concept _instance = ((OpenIZ.Core.Model.DataTypes.Concept)(context.JsonContext.ReadElementUtil(r, typeof(OpenIZ.Core.Model.DataTypes.Concept), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("typeConceptModel", context.JsonContext, _retVal, context))));
                                                                                                if ((_instance != null)) {
                                                                                                    _retVal.TypeConcept = _instance;
                                                                                                }
                                                                                            }
                                                                                            else {
                                                                                                if ("statusConceptModel".Equals(r.Value)) {
                                                                                                    r.Read();
                                                                                                    OpenIZ.Core.Model.DataTypes.Concept _instance = ((OpenIZ.Core.Model.DataTypes.Concept)(context.JsonContext.ReadElementUtil(r, typeof(OpenIZ.Core.Model.DataTypes.Concept), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("statusConceptModel", context.JsonContext, _retVal, context))));
                                                                                                    if ((_instance != null)) {
                                                                                                        _retVal.StatusConcept = _instance;
                                                                                                    }
                                                                                                }
                                                                                                else {
                                                                                                    if ("reasonConceptModel".Equals(r.Value)) {
                                                                                                        r.Read();
                                                                                                        OpenIZ.Core.Model.DataTypes.Concept _instance = ((OpenIZ.Core.Model.DataTypes.Concept)(context.JsonContext.ReadElementUtil(r, typeof(OpenIZ.Core.Model.DataTypes.Concept), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("reasonConceptModel", context.JsonContext, _retVal, context))));
                                                                                                        if ((_instance != null)) {
                                                                                                            _retVal.ReasonConcept = _instance;
                                                                                                        }
                                                                                                    }
                                                                                                    else {
                                                                                                        if ("moodConceptModel".Equals(r.Value)) {
                                                                                                            r.Read();
                                                                                                            OpenIZ.Core.Model.DataTypes.Concept _instance = ((OpenIZ.Core.Model.DataTypes.Concept)(context.JsonContext.ReadElementUtil(r, typeof(OpenIZ.Core.Model.DataTypes.Concept), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("moodConceptModel", context.JsonContext, _retVal, context))));
                                                                                                            if ((_instance != null)) {
                                                                                                                _retVal.MoodConcept = _instance;
                                                                                                            }
                                                                                                        }
                                                                                                        else {
                                                                                                            if ("classConceptModel".Equals(r.Value)) {
                                                                                                                r.Read();
                                                                                                                OpenIZ.Core.Model.DataTypes.Concept _instance = ((OpenIZ.Core.Model.DataTypes.Concept)(context.JsonContext.ReadElementUtil(r, typeof(OpenIZ.Core.Model.DataTypes.Concept), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("classConceptModel", context.JsonContext, _retVal, context))));
                                                                                                                if ((_instance != null)) {
                                                                                                                    _retVal.ClassConcept = _instance;
                                                                                                                }
                                                                                                            }
                                                                                                            else {
                                                                                                                if ("typeConcept".Equals(r.Value)) {
                                                                                                                    r.Read();
                                                                                                                    System.Nullable<System.Guid> _instance = ((System.Nullable<System.Guid>)(context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<System.Guid>), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("typeConcept", context.JsonContext, _retVal, context))));
                                                                                                                    if ((_instance != null)) {
                                                                                                                        _retVal.TypeConceptKey = _instance;
                                                                                                                    }
                                                                                                                }
                                                                                                                else {
                                                                                                                    if ("statusConcept".Equals(r.Value)) {
                                                                                                                        r.Read();
                                                                                                                        System.Nullable<System.Guid> _instance = ((System.Nullable<System.Guid>)(context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<System.Guid>), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("statusConcept", context.JsonContext, _retVal, context))));
                                                                                                                        if ((_instance != null)) {
                                                                                                                            _retVal.StatusConceptKey = _instance;
                                                                                                                        }
                                                                                                                    }
                                                                                                                    else {
                                                                                                                        if ("reasonConcept".Equals(r.Value)) {
                                                                                                                            r.Read();
                                                                                                                            System.Nullable<System.Guid> _instance = ((System.Nullable<System.Guid>)(context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<System.Guid>), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("reasonConcept", context.JsonContext, _retVal, context))));
                                                                                                                            if ((_instance != null)) {
                                                                                                                                _retVal.ReasonConceptKey = _instance;
                                                                                                                            }
                                                                                                                        }
                                                                                                                        else {
                                                                                                                            if ("moodConcept".Equals(r.Value)) {
                                                                                                                                r.Read();
                                                                                                                                System.Nullable<System.Guid> _instance = ((System.Nullable<System.Guid>)(context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<System.Guid>), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("moodConcept", context.JsonContext, _retVal, context))));
                                                                                                                                if ((_instance != null)) {
                                                                                                                                    _retVal.MoodConceptKey = _instance;
                                                                                                                                }
                                                                                                                            }
                                                                                                                            else {
                                                                                                                                if ("classConcept".Equals(r.Value)) {
                                                                                                                                    r.Read();
                                                                                                                                    System.Nullable<System.Guid> _instance = ((System.Nullable<System.Guid>)(context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<System.Guid>), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("classConcept", context.JsonContext, _retVal, context))));
                                                                                                                                    if ((_instance != null)) {
                                                                                                                                        _retVal.ClassConceptKey = _instance;
                                                                                                                                    }
                                                                                                                                }
                                                                                                                                else {
                                                                                                                                    if ("stopTime".Equals(r.Value)) {
                                                                                                                                        r.Read();
                                                                                                                                        string _instance = ((string)(context.JsonContext.ReadElementUtil(r, typeof(string), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("stopTime", context.JsonContext, _retVal, context))));
                                                                                                                                        if ((_instance != null)) {
                                                                                                                                            _retVal.StopTimeXml = _instance;
                                                                                                                                        }
                                                                                                                                    }
                                                                                                                                    else {
                                                                                                                                        if ("startTime".Equals(r.Value)) {
                                                                                                                                            r.Read();
                                                                                                                                            string _instance = ((string)(context.JsonContext.ReadElementUtil(r, typeof(string), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("startTime", context.JsonContext, _retVal, context))));
                                                                                                                                            if ((_instance != null)) {
                                                                                                                                                _retVal.StartTimeXml = _instance;
                                                                                                                                            }
                                                                                                                                        }
                                                                                                                                        else {
                                                                                                                                            if ("actTime".Equals(r.Value)) {
                                                                                                                                                r.Read();
                                                                                                                                                string _instance = ((string)(context.JsonContext.ReadElementUtil(r, typeof(string), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("actTime", context.JsonContext, _retVal, context))));
                                                                                                                                                if ((_instance != null)) {
                                                                                                                                                    _retVal.ActTimeXml = _instance;
                                                                                                                                                }
                                                                                                                                            }
                                                                                                                                            else {
                                                                                                                                                if ("template".Equals(r.Value)) {
                                                                                                                                                    r.Read();
                                                                                                                                                    OpenIZ.Core.Model.DataTypes.TemplateDefinition _instance = ((OpenIZ.Core.Model.DataTypes.TemplateDefinition)(context.JsonContext.ReadElementUtil(r, typeof(OpenIZ.Core.Model.DataTypes.TemplateDefinition), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("template", context.JsonContext, _retVal, context))));
                                                                                                                                                    if ((_instance != null)) {
                                                                                                                                                        _retVal.Template = _instance;
                                                                                                                                                    }
                                                                                                                                                }
                                                                                                                                                else {
                                                                                                                                                    if ("isNegated".Equals(r.Value)) {
                                                                                                                                                        r.Read();
                                                                                                                                                        bool _instance = ((bool)(context.JsonContext.ReadElementUtil(r, typeof(bool), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("isNegated", context.JsonContext, _retVal, context))));
                                                                                                                                                        if ((_instance != null)) {
                                                                                                                                                            _retVal.IsNegated = _instance;
                                                                                                                                                        }
                                                                                                                                                    }
                                                                                                                                                    else {
                                                                                                                                                        if ("$type".Equals(r.Value)) {
                                                                                                                                                            System.Type _type = this.m_binder.BindToType("OpenIZ.Core.Model, Version=0.6.14.21496, Culture=neutral, PublicKeyToken=null", r.ReadAsString());
                                                                                                                                                            if ((_type != typeof(OpenIZ.Core.Model.Acts.Act))) {
                                                                                                                                                                OpenIZ.Core.Model.Acts.Act _nretVal = ((OpenIZ.Core.Model.Acts.Act)(context.JsonContext.GetFormatter(_type).Deserialize(r, _type, context)));
                                                                                                                                                                _nretVal.CopyObjectData(_retVal);
                                                                                                                                                                return _nretVal;
                                                                                                                                                            }
                                                                                                                                                        }
                                                                                                                                                        else {
                                                                                                                                                            r.Skip();
                                                                                                                                                        }
                                                                                                                                                    }
                                                                                                                                                }
                                                                                                                                            }
                                                                                                                                        }
                                                                                                                                    }
                                                                                                                                }
                                                                                                                            }
                                                                                                                        }
                                                                                                                    }
                                                                                                                }
                                                                                                            }
                                                                                                        }
                                                                                                    }
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
                else {
                    if (((r.TokenType == Newtonsoft.Json.JsonToken.EndObject) 
                                && (r.Depth == _depth))) {
                        return _retVal;
                    }
                    else {
                        throw new Newtonsoft.Json.JsonSerializationException("JSON in invalid state");
                    }
                }
            }
            return _retVal;
        }
        
        public object FromSimpleValue(object o) {
            return null;
        }
        
        public object GetSimpleValue(object o) {
            return null;
        }
    }
    
    public class ActParticipationViewModelSerializer : OpenIZ.Core.Applets.ViewModel.Json.IJsonViewModelTypeFormatter {
        
        private OpenIZ.Core.Model.Serialization.ModelSerializationBinder m_binder = new OpenIZ.Core.Model.Serialization.ModelSerializationBinder();
        
        private OpenIZ.Core.Diagnostics.Tracer m_tracer = OpenIZ.Core.Diagnostics.Tracer.GetTracer(typeof(ActParticipationViewModelSerializer));
        
        public System.Type HandlesType {
            get {
                return typeof(OpenIZ.Core.Model.Acts.ActParticipation);
            }
        }
        
        public void Serialize(Newtonsoft.Json.JsonWriter w, OpenIZ.Core.Model.IdentifiedData o, OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext context) {
            if ((o == null)) {
                throw new System.ArgumentNullException("o");
            }
            OpenIZ.Core.Model.Acts.ActParticipation _strong = null;
            OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext _jsonContext = null;
            bool _loaded = false;
            try {
                _strong = ((OpenIZ.Core.Model.Acts.ActParticipation)(o));
            }
            catch (System.Exception e) {
                this.m_tracer.TraceError(string.Format("Casting Error: {0}", e));
                throw new System.ArgumentException(string.Format("Invalid type {0} provided, expected {1}", o.GetType(), typeof(OpenIZ.Core.Model.Acts.ActParticipation)));
            }
            if (context.ShouldSerialize("player")) {
                if ((_strong.PlayerEntityKey == null)) {
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "player", _strong.PlayerEntityKey, context);
                }
            }
            if (context.ShouldSerialize("participationRole")) {
                if ((_strong.ParticipationRoleKey == null)) {
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "participationRole", _strong.ParticipationRoleKey, context);
                }
            }
            if (context.ShouldSerialize("playerModel")) {
                if ((_strong.PlayerEntity == null)) {
                    if ((_strong.Key.HasValue && context.ShouldForceLoad("playerModel", _strong.Key.Value))) {
                        OpenIZ.Core.Model.Entities.Entity _delay = null;
                        _delay = context.JsonContext.LoadRelated<OpenIZ.Core.Model.Entities.Entity>(_strong.PlayerEntityKey);
                        _strong.PlayerEntity = _delay;
                        if ((_delay != null)) {
                            _loaded = true;
                            context.JsonContext.WritePropertyUtil(w, "playerModel", _strong.PlayerEntity, context);
                        }
                    }
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "playerModel", _strong.PlayerEntity, context);
                }
            }
            if (context.ShouldSerialize("participationRoleModel")) {
                if ((_strong.ParticipationRole == null)) {
                    if ((_strong.Key.HasValue && context.ShouldForceLoad("participationRoleModel", _strong.Key.Value))) {
                        OpenIZ.Core.Model.DataTypes.Concept _delay = null;
                        _delay = context.JsonContext.LoadRelated<OpenIZ.Core.Model.DataTypes.Concept>(_strong.ParticipationRoleKey);
                        _strong.ParticipationRole = _delay;
                        if ((_delay != null)) {
                            _loaded = true;
                            context.JsonContext.WritePropertyUtil(w, "participationRoleModel", _strong.ParticipationRole, context);
                        }
                    }
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "participationRoleModel", _strong.ParticipationRole, context);
                }
            }
            if (context.ShouldSerialize("act")) {
                if ((_strong.ActKey == null)) {
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "act", _strong.ActKey, context);
                }
            }
            if (context.ShouldSerialize("quantity")) {
                if ((_strong.Quantity == null)) {
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "quantity", _strong.Quantity, context);
                }
            }
            if (context.ShouldSerialize("effectiveVersionSequence")) {
                if ((_strong.EffectiveVersionSequenceId == null)) {
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "effectiveVersionSequence", _strong.EffectiveVersionSequenceId, context);
                }
            }
            if (context.ShouldSerialize("obsoleteVersionSequence")) {
                if ((_strong.ObsoleteVersionSequenceId == null)) {
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "obsoleteVersionSequence", _strong.ObsoleteVersionSequenceId, context);
                }
            }
            if (context.ShouldSerialize("modifiedOn")) {
                if ((_strong.ModifiedOn == null)) {
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "modifiedOn", _strong.ModifiedOn, context);
                }
            }
            if (context.ShouldSerialize("source")) {
                if ((_strong.SourceEntityKey == null)) {
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "source", _strong.SourceEntityKey, context);
                }
            }
            if (context.ShouldSerialize("id")) {
                if ((_strong.Key == null)) {
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "id", _strong.Key, context);
                }
            }
            if (context.ShouldSerialize("etag")) {
                if ((_strong.Tag == null)) {
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "etag", _strong.Tag, context);
                }
            }
            if ((_loaded && _strong.Key.HasValue)) {
                ((OpenIZ.Core.Services.IDataCachingService)(OpenIZ.Core.ApplicationServiceContext.Current.GetService(typeof(OpenIZ.Core.Services.IDataCachingService)))).Add(_strong);
            }
        }
        
        public object Deserialize(Newtonsoft.Json.JsonReader r, System.Type asType, OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext context) {
            OpenIZ.Core.Model.Acts.ActParticipation _retVal = new OpenIZ.Core.Model.Acts.ActParticipation();
            int _depth = r.Depth;
            if ((r.TokenType != Newtonsoft.Json.JsonToken.StartObject)) {
                _depth = (_depth - 1);
            }
            for (
            ; r.Read(); 
            ) {
                if ((r.TokenType == Newtonsoft.Json.JsonToken.PropertyName)) {
                    if ("id".Equals(r.Value)) {
                        r.Read();
                        System.Nullable<System.Guid> _instance = ((System.Nullable<System.Guid>)(context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<System.Guid>), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("id", context.JsonContext, _retVal, context))));
                        if ((_instance != null)) {
                            _retVal.Key = _instance;
                        }
                    }
                    else {
                        if ("source".Equals(r.Value)) {
                            r.Read();
                            System.Nullable<System.Guid> _instance = ((System.Nullable<System.Guid>)(context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<System.Guid>), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("source", context.JsonContext, _retVal, context))));
                            if ((_instance != null)) {
                                _retVal.SourceEntityKey = _instance;
                            }
                        }
                        else {
                            if ("obsoleteVersionSequence".Equals(r.Value)) {
                                r.Read();
                                System.Nullable<decimal> _instance = ((System.Nullable<decimal>)(context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<decimal>), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("obsoleteVersionSequence", context.JsonContext, _retVal, context))));
                                if ((_instance != null)) {
                                    _retVal.ObsoleteVersionSequenceId = _instance;
                                }
                            }
                            else {
                                if ("effectiveVersionSequence".Equals(r.Value)) {
                                    r.Read();
                                    System.Nullable<decimal> _instance = ((System.Nullable<decimal>)(context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<decimal>), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("effectiveVersionSequence", context.JsonContext, _retVal, context))));
                                    if ((_instance != null)) {
                                        _retVal.EffectiveVersionSequenceId = _instance;
                                    }
                                }
                                else {
                                    if ("quantity".Equals(r.Value)) {
                                        r.Read();
                                        int _instance = ((int)(context.JsonContext.ReadElementUtil(r, typeof(int), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("quantity", context.JsonContext, _retVal, context))));
                                        if ((_instance != null)) {
                                            _retVal.Quantity = _instance;
                                        }
                                    }
                                    else {
                                        if ("act".Equals(r.Value)) {
                                            r.Read();
                                            System.Nullable<System.Guid> _instance = ((System.Nullable<System.Guid>)(context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<System.Guid>), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("act", context.JsonContext, _retVal, context))));
                                            if ((_instance != null)) {
                                                _retVal.ActKey = _instance;
                                            }
                                        }
                                        else {
                                            if ("participationRoleModel".Equals(r.Value)) {
                                                r.Read();
                                                OpenIZ.Core.Model.DataTypes.Concept _instance = ((OpenIZ.Core.Model.DataTypes.Concept)(context.JsonContext.ReadElementUtil(r, typeof(OpenIZ.Core.Model.DataTypes.Concept), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("participationRoleModel", context.JsonContext, _retVal, context))));
                                                if ((_instance != null)) {
                                                    _retVal.ParticipationRole = _instance;
                                                }
                                            }
                                            else {
                                                if ("playerModel".Equals(r.Value)) {
                                                    r.Read();
                                                    OpenIZ.Core.Model.Entities.Entity _instance = ((OpenIZ.Core.Model.Entities.Entity)(context.JsonContext.ReadElementUtil(r, typeof(OpenIZ.Core.Model.Entities.Entity), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("playerModel", context.JsonContext, _retVal, context))));
                                                    if ((_instance != null)) {
                                                        _retVal.PlayerEntity = _instance;
                                                    }
                                                }
                                                else {
                                                    if ("participationRole".Equals(r.Value)) {
                                                        r.Read();
                                                        System.Nullable<System.Guid> _instance = ((System.Nullable<System.Guid>)(context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<System.Guid>), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("participationRole", context.JsonContext, _retVal, context))));
                                                        if ((_instance != null)) {
                                                            _retVal.ParticipationRoleKey = _instance;
                                                        }
                                                    }
                                                    else {
                                                        if ("player".Equals(r.Value)) {
                                                            r.Read();
                                                            System.Nullable<System.Guid> _instance = ((System.Nullable<System.Guid>)(context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<System.Guid>), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("player", context.JsonContext, _retVal, context))));
                                                            if ((_instance != null)) {
                                                                _retVal.PlayerEntityKey = _instance;
                                                            }
                                                        }
                                                        else {
                                                            if ("$type".Equals(r.Value)) {
                                                                System.Type _type = this.m_binder.BindToType("OpenIZ.Core.Model, Version=0.6.14.21496, Culture=neutral, PublicKeyToken=null", r.ReadAsString());
                                                                if ((_type != typeof(OpenIZ.Core.Model.Acts.ActParticipation))) {
                                                                    OpenIZ.Core.Model.Acts.ActParticipation _nretVal = ((OpenIZ.Core.Model.Acts.ActParticipation)(context.JsonContext.GetFormatter(_type).Deserialize(r, _type, context)));
                                                                    _nretVal.CopyObjectData(_retVal);
                                                                    return _nretVal;
                                                                }
                                                            }
                                                            else {
                                                                r.Skip();
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
                else {
                    if (((r.TokenType == Newtonsoft.Json.JsonToken.EndObject) 
                                && (r.Depth == _depth))) {
                        return _retVal;
                    }
                    else {
                        throw new Newtonsoft.Json.JsonSerializationException("JSON in invalid state");
                    }
                }
            }
            return _retVal;
        }
        
        public object FromSimpleValue(object o) {
            return null;
        }
        
        public object GetSimpleValue(object o) {
            return null;
        }
    }
    
    public class ActProtocolViewModelSerializer : OpenIZ.Core.Applets.ViewModel.Json.IJsonViewModelTypeFormatter {
        
        private OpenIZ.Core.Model.Serialization.ModelSerializationBinder m_binder = new OpenIZ.Core.Model.Serialization.ModelSerializationBinder();
        
        private OpenIZ.Core.Diagnostics.Tracer m_tracer = OpenIZ.Core.Diagnostics.Tracer.GetTracer(typeof(ActProtocolViewModelSerializer));
        
        public System.Type HandlesType {
            get {
                return typeof(OpenIZ.Core.Model.Acts.ActProtocol);
            }
        }
        
        public void Serialize(Newtonsoft.Json.JsonWriter w, OpenIZ.Core.Model.IdentifiedData o, OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext context) {
            if ((o == null)) {
                throw new System.ArgumentNullException("o");
            }
            OpenIZ.Core.Model.Acts.ActProtocol _strong = null;
            OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext _jsonContext = null;
            bool _loaded = false;
            try {
                _strong = ((OpenIZ.Core.Model.Acts.ActProtocol)(o));
            }
            catch (System.Exception e) {
                this.m_tracer.TraceError(string.Format("Casting Error: {0}", e));
                throw new System.ArgumentException(string.Format("Invalid type {0} provided, expected {1}", o.GetType(), typeof(OpenIZ.Core.Model.Acts.ActProtocol)));
            }
            if (context.ShouldSerialize("protocol")) {
                if ((_strong.ProtocolKey == null)) {
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "protocol", _strong.ProtocolKey, context);
                }
            }
            if (context.ShouldSerialize("protocolModel")) {
                if ((_strong.Protocol == null)) {
                    if ((_strong.Key.HasValue && context.ShouldForceLoad("protocolModel", _strong.Key.Value))) {
                        OpenIZ.Core.Model.Acts.Protocol _delay = null;
                        _delay = context.JsonContext.LoadRelated<OpenIZ.Core.Model.Acts.Protocol>(_strong.ProtocolKey);
                        _strong.Protocol = _delay;
                        if ((_delay != null)) {
                            _loaded = true;
                            context.JsonContext.WritePropertyUtil(w, "protocolModel", _strong.Protocol, context);
                        }
                    }
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "protocolModel", _strong.Protocol, context);
                }
            }
            if (context.ShouldSerialize("state")) {
                if ((_strong.StateData == null)) {
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "state", _strong.StateData, context);
                }
            }
            if (context.ShouldSerialize("effectiveVersionSequence")) {
                if ((_strong.EffectiveVersionSequenceId == null)) {
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "effectiveVersionSequence", _strong.EffectiveVersionSequenceId, context);
                }
            }
            if (context.ShouldSerialize("obsoleteVersionSequence")) {
                if ((_strong.ObsoleteVersionSequenceId == null)) {
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "obsoleteVersionSequence", _strong.ObsoleteVersionSequenceId, context);
                }
            }
            if (context.ShouldSerialize("modifiedOn")) {
                if ((_strong.ModifiedOn == null)) {
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "modifiedOn", _strong.ModifiedOn, context);
                }
            }
            if (context.ShouldSerialize("source")) {
                if ((_strong.SourceEntityKey == null)) {
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "source", _strong.SourceEntityKey, context);
                }
            }
            if (context.ShouldSerialize("id")) {
                if ((_strong.Key == null)) {
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "id", _strong.Key, context);
                }
            }
            if (context.ShouldSerialize("etag")) {
                if ((_strong.Tag == null)) {
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "etag", _strong.Tag, context);
                }
            }
            if ((_loaded && _strong.Key.HasValue)) {
                ((OpenIZ.Core.Services.IDataCachingService)(OpenIZ.Core.ApplicationServiceContext.Current.GetService(typeof(OpenIZ.Core.Services.IDataCachingService)))).Add(_strong);
            }
        }
        
        public object Deserialize(Newtonsoft.Json.JsonReader r, System.Type asType, OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext context) {
            OpenIZ.Core.Model.Acts.ActProtocol _retVal = new OpenIZ.Core.Model.Acts.ActProtocol();
            int _depth = r.Depth;
            if ((r.TokenType != Newtonsoft.Json.JsonToken.StartObject)) {
                _depth = (_depth - 1);
            }
            for (
            ; r.Read(); 
            ) {
                if ((r.TokenType == Newtonsoft.Json.JsonToken.PropertyName)) {
                    if ("id".Equals(r.Value)) {
                        r.Read();
                        System.Nullable<System.Guid> _instance = ((System.Nullable<System.Guid>)(context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<System.Guid>), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("id", context.JsonContext, _retVal, context))));
                        if ((_instance != null)) {
                            _retVal.Key = _instance;
                        }
                    }
                    else {
                        if ("source".Equals(r.Value)) {
                            r.Read();
                            System.Nullable<System.Guid> _instance = ((System.Nullable<System.Guid>)(context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<System.Guid>), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("source", context.JsonContext, _retVal, context))));
                            if ((_instance != null)) {
                                _retVal.SourceEntityKey = _instance;
                            }
                        }
                        else {
                            if ("obsoleteVersionSequence".Equals(r.Value)) {
                                r.Read();
                                System.Nullable<decimal> _instance = ((System.Nullable<decimal>)(context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<decimal>), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("obsoleteVersionSequence", context.JsonContext, _retVal, context))));
                                if ((_instance != null)) {
                                    _retVal.ObsoleteVersionSequenceId = _instance;
                                }
                            }
                            else {
                                if ("effectiveVersionSequence".Equals(r.Value)) {
                                    r.Read();
                                    System.Nullable<decimal> _instance = ((System.Nullable<decimal>)(context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<decimal>), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("effectiveVersionSequence", context.JsonContext, _retVal, context))));
                                    if ((_instance != null)) {
                                        _retVal.EffectiveVersionSequenceId = _instance;
                                    }
                                }
                                else {
                                    if ("state".Equals(r.Value)) {
                                        r.Read();
                                        string _instance = ((string)(context.JsonContext.ReadElementUtil(r, typeof(string), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("state", context.JsonContext, _retVal, context))));
                                        if ((_instance != null)) {
                                            _retVal.StateData = _instance;
                                        }
                                    }
                                    else {
                                        if ("protocolModel".Equals(r.Value)) {
                                            r.Read();
                                            OpenIZ.Core.Model.Acts.Protocol _instance = ((OpenIZ.Core.Model.Acts.Protocol)(context.JsonContext.ReadElementUtil(r, typeof(OpenIZ.Core.Model.Acts.Protocol), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("protocolModel", context.JsonContext, _retVal, context))));
                                            if ((_instance != null)) {
                                                _retVal.Protocol = _instance;
                                            }
                                        }
                                        else {
                                            if ("protocol".Equals(r.Value)) {
                                                r.Read();
                                                System.Guid _instance = ((System.Guid)(context.JsonContext.ReadElementUtil(r, typeof(System.Guid), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("protocol", context.JsonContext, _retVal, context))));
                                                if ((_instance != null)) {
                                                    _retVal.ProtocolKey = _instance;
                                                }
                                            }
                                            else {
                                                if ("$type".Equals(r.Value)) {
                                                    System.Type _type = this.m_binder.BindToType("OpenIZ.Core.Model, Version=0.6.14.21496, Culture=neutral, PublicKeyToken=null", r.ReadAsString());
                                                    if ((_type != typeof(OpenIZ.Core.Model.Acts.ActProtocol))) {
                                                        OpenIZ.Core.Model.Acts.ActProtocol _nretVal = ((OpenIZ.Core.Model.Acts.ActProtocol)(context.JsonContext.GetFormatter(_type).Deserialize(r, _type, context)));
                                                        _nretVal.CopyObjectData(_retVal);
                                                        return _nretVal;
                                                    }
                                                }
                                                else {
                                                    r.Skip();
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
                else {
                    if (((r.TokenType == Newtonsoft.Json.JsonToken.EndObject) 
                                && (r.Depth == _depth))) {
                        return _retVal;
                    }
                    else {
                        throw new Newtonsoft.Json.JsonSerializationException("JSON in invalid state");
                    }
                }
            }
            return _retVal;
        }
        
        public object FromSimpleValue(object o) {
            return null;
        }
        
        public object GetSimpleValue(object o) {
            return null;
        }
    }
    
    public class ActRelationshipViewModelSerializer : OpenIZ.Core.Applets.ViewModel.Json.IJsonViewModelTypeFormatter {
        
        private OpenIZ.Core.Model.Serialization.ModelSerializationBinder m_binder = new OpenIZ.Core.Model.Serialization.ModelSerializationBinder();
        
        private OpenIZ.Core.Diagnostics.Tracer m_tracer = OpenIZ.Core.Diagnostics.Tracer.GetTracer(typeof(ActRelationshipViewModelSerializer));
        
        public System.Type HandlesType {
            get {
                return typeof(OpenIZ.Core.Model.Acts.ActRelationship);
            }
        }
        
        public void Serialize(Newtonsoft.Json.JsonWriter w, OpenIZ.Core.Model.IdentifiedData o, OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext context) {
            if ((o == null)) {
                throw new System.ArgumentNullException("o");
            }
            OpenIZ.Core.Model.Acts.ActRelationship _strong = null;
            OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext _jsonContext = null;
            bool _loaded = false;
            try {
                _strong = ((OpenIZ.Core.Model.Acts.ActRelationship)(o));
            }
            catch (System.Exception e) {
                this.m_tracer.TraceError(string.Format("Casting Error: {0}", e));
                throw new System.ArgumentException(string.Format("Invalid type {0} provided, expected {1}", o.GetType(), typeof(OpenIZ.Core.Model.Acts.ActRelationship)));
            }
            if (context.ShouldSerialize("target")) {
                if ((_strong.TargetActKey == null)) {
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "target", _strong.TargetActKey, context);
                }
            }
            if (context.ShouldSerialize("targetModel")) {
                if ((_strong.TargetAct == null)) {
                    if ((_strong.Key.HasValue && context.ShouldForceLoad("targetModel", _strong.Key.Value))) {
                        OpenIZ.Core.Model.Acts.Act _delay = null;
                        _delay = context.JsonContext.LoadRelated<OpenIZ.Core.Model.Acts.Act>(_strong.TargetActKey);
                        _strong.TargetAct = _delay;
                        if ((_delay != null)) {
                            _loaded = true;
                            context.JsonContext.WritePropertyUtil(w, "targetModel", _strong.TargetAct, context);
                        }
                    }
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "targetModel", _strong.TargetAct, context);
                }
            }
            if (context.ShouldSerialize("relationshipType")) {
                if ((_strong.RelationshipTypeKey == null)) {
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "relationshipType", _strong.RelationshipTypeKey, context);
                }
            }
            if (context.ShouldSerialize("relationshipTypeModel")) {
                if ((_strong.RelationshipType == null)) {
                    if ((_strong.Key.HasValue && context.ShouldForceLoad("relationshipTypeModel", _strong.Key.Value))) {
                        OpenIZ.Core.Model.DataTypes.Concept _delay = null;
                        _delay = context.JsonContext.LoadRelated<OpenIZ.Core.Model.DataTypes.Concept>(_strong.RelationshipTypeKey);
                        _strong.RelationshipType = _delay;
                        if ((_delay != null)) {
                            _loaded = true;
                            context.JsonContext.WritePropertyUtil(w, "relationshipTypeModel", _strong.RelationshipType, context);
                        }
                    }
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "relationshipTypeModel", _strong.RelationshipType, context);
                }
            }
            if (context.ShouldSerialize("effectiveVersionSequence")) {
                if ((_strong.EffectiveVersionSequenceId == null)) {
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "effectiveVersionSequence", _strong.EffectiveVersionSequenceId, context);
                }
            }
            if (context.ShouldSerialize("obsoleteVersionSequence")) {
                if ((_strong.ObsoleteVersionSequenceId == null)) {
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "obsoleteVersionSequence", _strong.ObsoleteVersionSequenceId, context);
                }
            }
            if (context.ShouldSerialize("modifiedOn")) {
                if ((_strong.ModifiedOn == null)) {
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "modifiedOn", _strong.ModifiedOn, context);
                }
            }
            if (context.ShouldSerialize("source")) {
                if ((_strong.SourceEntityKey == null)) {
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "source", _strong.SourceEntityKey, context);
                }
            }
            if (context.ShouldSerialize("id")) {
                if ((_strong.Key == null)) {
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "id", _strong.Key, context);
                }
            }
            if (context.ShouldSerialize("etag")) {
                if ((_strong.Tag == null)) {
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "etag", _strong.Tag, context);
                }
            }
            if ((_loaded && _strong.Key.HasValue)) {
                ((OpenIZ.Core.Services.IDataCachingService)(OpenIZ.Core.ApplicationServiceContext.Current.GetService(typeof(OpenIZ.Core.Services.IDataCachingService)))).Add(_strong);
            }
        }
        
        public object Deserialize(Newtonsoft.Json.JsonReader r, System.Type asType, OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext context) {
            OpenIZ.Core.Model.Acts.ActRelationship _retVal = new OpenIZ.Core.Model.Acts.ActRelationship();
            int _depth = r.Depth;
            if ((r.TokenType != Newtonsoft.Json.JsonToken.StartObject)) {
                _depth = (_depth - 1);
            }
            for (
            ; r.Read(); 
            ) {
                if ((r.TokenType == Newtonsoft.Json.JsonToken.PropertyName)) {
                    if ("id".Equals(r.Value)) {
                        r.Read();
                        System.Nullable<System.Guid> _instance = ((System.Nullable<System.Guid>)(context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<System.Guid>), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("id", context.JsonContext, _retVal, context))));
                        if ((_instance != null)) {
                            _retVal.Key = _instance;
                        }
                    }
                    else {
                        if ("source".Equals(r.Value)) {
                            r.Read();
                            System.Nullable<System.Guid> _instance = ((System.Nullable<System.Guid>)(context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<System.Guid>), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("source", context.JsonContext, _retVal, context))));
                            if ((_instance != null)) {
                                _retVal.SourceEntityKey = _instance;
                            }
                        }
                        else {
                            if ("obsoleteVersionSequence".Equals(r.Value)) {
                                r.Read();
                                System.Nullable<decimal> _instance = ((System.Nullable<decimal>)(context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<decimal>), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("obsoleteVersionSequence", context.JsonContext, _retVal, context))));
                                if ((_instance != null)) {
                                    _retVal.ObsoleteVersionSequenceId = _instance;
                                }
                            }
                            else {
                                if ("effectiveVersionSequence".Equals(r.Value)) {
                                    r.Read();
                                    System.Nullable<decimal> _instance = ((System.Nullable<decimal>)(context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<decimal>), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("effectiveVersionSequence", context.JsonContext, _retVal, context))));
                                    if ((_instance != null)) {
                                        _retVal.EffectiveVersionSequenceId = _instance;
                                    }
                                }
                                else {
                                    if ("relationshipTypeModel".Equals(r.Value)) {
                                        r.Read();
                                        OpenIZ.Core.Model.DataTypes.Concept _instance = ((OpenIZ.Core.Model.DataTypes.Concept)(context.JsonContext.ReadElementUtil(r, typeof(OpenIZ.Core.Model.DataTypes.Concept), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("relationshipTypeModel", context.JsonContext, _retVal, context))));
                                        if ((_instance != null)) {
                                            _retVal.RelationshipType = _instance;
                                        }
                                    }
                                    else {
                                        if ("relationshipType".Equals(r.Value)) {
                                            r.Read();
                                            System.Nullable<System.Guid> _instance = ((System.Nullable<System.Guid>)(context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<System.Guid>), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("relationshipType", context.JsonContext, _retVal, context))));
                                            if ((_instance != null)) {
                                                _retVal.RelationshipTypeKey = _instance;
                                            }
                                        }
                                        else {
                                            if ("targetModel".Equals(r.Value)) {
                                                r.Read();
                                                OpenIZ.Core.Model.Acts.Act _instance = ((OpenIZ.Core.Model.Acts.Act)(context.JsonContext.ReadElementUtil(r, typeof(OpenIZ.Core.Model.Acts.Act), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("targetModel", context.JsonContext, _retVal, context))));
                                                if ((_instance != null)) {
                                                    _retVal.TargetAct = _instance;
                                                }
                                            }
                                            else {
                                                if ("target".Equals(r.Value)) {
                                                    r.Read();
                                                    System.Nullable<System.Guid> _instance = ((System.Nullable<System.Guid>)(context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<System.Guid>), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("target", context.JsonContext, _retVal, context))));
                                                    if ((_instance != null)) {
                                                        _retVal.TargetActKey = _instance;
                                                    }
                                                }
                                                else {
                                                    if ("$type".Equals(r.Value)) {
                                                        System.Type _type = this.m_binder.BindToType("OpenIZ.Core.Model, Version=0.6.14.21496, Culture=neutral, PublicKeyToken=null", r.ReadAsString());
                                                        if ((_type != typeof(OpenIZ.Core.Model.Acts.ActRelationship))) {
                                                            OpenIZ.Core.Model.Acts.ActRelationship _nretVal = ((OpenIZ.Core.Model.Acts.ActRelationship)(context.JsonContext.GetFormatter(_type).Deserialize(r, _type, context)));
                                                            _nretVal.CopyObjectData(_retVal);
                                                            return _nretVal;
                                                        }
                                                    }
                                                    else {
                                                        r.Skip();
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
                else {
                    if (((r.TokenType == Newtonsoft.Json.JsonToken.EndObject) 
                                && (r.Depth == _depth))) {
                        return _retVal;
                    }
                    else {
                        throw new Newtonsoft.Json.JsonSerializationException("JSON in invalid state");
                    }
                }
            }
            return _retVal;
        }
        
        public object FromSimpleValue(object o) {
            return null;
        }
        
        public object GetSimpleValue(object o) {
            return null;
        }
    }
    
    public class ControlActViewModelSerializer : OpenIZ.Core.Applets.ViewModel.Json.IJsonViewModelTypeFormatter {
        
        private OpenIZ.Core.Model.Serialization.ModelSerializationBinder m_binder = new OpenIZ.Core.Model.Serialization.ModelSerializationBinder();
        
        private OpenIZ.Core.Diagnostics.Tracer m_tracer = OpenIZ.Core.Diagnostics.Tracer.GetTracer(typeof(ControlActViewModelSerializer));
        
        public System.Type HandlesType {
            get {
                return typeof(OpenIZ.Core.Model.Acts.ControlAct);
            }
        }
        
        public void Serialize(Newtonsoft.Json.JsonWriter w, OpenIZ.Core.Model.IdentifiedData o, OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext context) {
            if ((o == null)) {
                throw new System.ArgumentNullException("o");
            }
            OpenIZ.Core.Model.Acts.ControlAct _strong = null;
            OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext _jsonContext = null;
            bool _loaded = false;
            try {
                _strong = ((OpenIZ.Core.Model.Acts.ControlAct)(o));
            }
            catch (System.Exception e) {
                this.m_tracer.TraceError(string.Format("Casting Error: {0}", e));
                throw new System.ArgumentException(string.Format("Invalid type {0} provided, expected {1}", o.GetType(), typeof(OpenIZ.Core.Model.Acts.ControlAct)));
            }
            if (context.ShouldSerialize("isNegated")) {
                if ((_strong.IsNegated == null)) {
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "isNegated", _strong.IsNegated, context);
                }
            }
            if (context.ShouldSerialize("template")) {
                if ((_strong.Template == null)) {
                    if ((_strong.Key.HasValue && context.ShouldForceLoad("template", _strong.Key.Value))) {
                        OpenIZ.Core.Model.DataTypes.TemplateDefinition _delay = null;
                    }
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "template", _strong.Template, context);
                }
            }
            if (context.ShouldSerialize("actTime")) {
                if ((_strong.ActTimeXml == null)) {
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "actTime", _strong.ActTimeXml, context);
                }
            }
            if (context.ShouldSerialize("startTime")) {
                if ((_strong.StartTimeXml == null)) {
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "startTime", _strong.StartTimeXml, context);
                }
            }
            if (context.ShouldSerialize("stopTime")) {
                if ((_strong.StopTimeXml == null)) {
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "stopTime", _strong.StopTimeXml, context);
                }
            }
            if (context.ShouldSerialize("classConcept")) {
                if ((_strong.ClassConceptKey == null)) {
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "classConcept", _strong.ClassConceptKey, context);
                }
            }
            if (context.ShouldSerialize("moodConcept")) {
                if ((_strong.MoodConceptKey == null)) {
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "moodConcept", _strong.MoodConceptKey, context);
                }
            }
            if (context.ShouldSerialize("reasonConcept")) {
                if ((_strong.ReasonConceptKey == null)) {
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "reasonConcept", _strong.ReasonConceptKey, context);
                }
            }
            if (context.ShouldSerialize("statusConcept")) {
                if ((_strong.StatusConceptKey == null)) {
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "statusConcept", _strong.StatusConceptKey, context);
                }
            }
            if (context.ShouldSerialize("typeConcept")) {
                if ((_strong.TypeConceptKey == null)) {
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "typeConcept", _strong.TypeConceptKey, context);
                }
            }
            if (context.ShouldSerialize("classConceptModel")) {
                if ((_strong.ClassConcept == null)) {
                    if ((_strong.Key.HasValue && context.ShouldForceLoad("classConceptModel", _strong.Key.Value))) {
                        OpenIZ.Core.Model.DataTypes.Concept _delay = null;
                        _delay = context.JsonContext.LoadRelated<OpenIZ.Core.Model.DataTypes.Concept>(_strong.ClassConceptKey);
                        _strong.ClassConcept = _delay;
                        if ((_delay != null)) {
                            _loaded = true;
                            context.JsonContext.WritePropertyUtil(w, "classConceptModel", _strong.ClassConcept, context);
                        }
                    }
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "classConceptModel", _strong.ClassConcept, context);
                }
            }
            if (context.ShouldSerialize("moodConceptModel")) {
                if ((_strong.MoodConcept == null)) {
                    if ((_strong.Key.HasValue && context.ShouldForceLoad("moodConceptModel", _strong.Key.Value))) {
                        OpenIZ.Core.Model.DataTypes.Concept _delay = null;
                        _delay = context.JsonContext.LoadRelated<OpenIZ.Core.Model.DataTypes.Concept>(_strong.MoodConceptKey);
                        _strong.MoodConcept = _delay;
                        if ((_delay != null)) {
                            _loaded = true;
                            context.JsonContext.WritePropertyUtil(w, "moodConceptModel", _strong.MoodConcept, context);
                        }
                    }
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "moodConceptModel", _strong.MoodConcept, context);
                }
            }
            if (context.ShouldSerialize("reasonConceptModel")) {
                if ((_strong.ReasonConcept == null)) {
                    if ((_strong.Key.HasValue && context.ShouldForceLoad("reasonConceptModel", _strong.Key.Value))) {
                        OpenIZ.Core.Model.DataTypes.Concept _delay = null;
                        _delay = context.JsonContext.LoadRelated<OpenIZ.Core.Model.DataTypes.Concept>(_strong.ReasonConceptKey);
                        _strong.ReasonConcept = _delay;
                        if ((_delay != null)) {
                            _loaded = true;
                            context.JsonContext.WritePropertyUtil(w, "reasonConceptModel", _strong.ReasonConcept, context);
                        }
                    }
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "reasonConceptModel", _strong.ReasonConcept, context);
                }
            }
            if (context.ShouldSerialize("statusConceptModel")) {
                if ((_strong.StatusConcept == null)) {
                    if ((_strong.Key.HasValue && context.ShouldForceLoad("statusConceptModel", _strong.Key.Value))) {
                        OpenIZ.Core.Model.DataTypes.Concept _delay = null;
                        _delay = context.JsonContext.LoadRelated<OpenIZ.Core.Model.DataTypes.Concept>(_strong.StatusConceptKey);
                        _strong.StatusConcept = _delay;
                        if ((_delay != null)) {
                            _loaded = true;
                            context.JsonContext.WritePropertyUtil(w, "statusConceptModel", _strong.StatusConcept, context);
                        }
                    }
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "statusConceptModel", _strong.StatusConcept, context);
                }
            }
            if (context.ShouldSerialize("typeConceptModel")) {
                if ((_strong.TypeConcept == null)) {
                    if ((_strong.Key.HasValue && context.ShouldForceLoad("typeConceptModel", _strong.Key.Value))) {
                        OpenIZ.Core.Model.DataTypes.Concept _delay = null;
                        _delay = context.JsonContext.LoadRelated<OpenIZ.Core.Model.DataTypes.Concept>(_strong.TypeConceptKey);
                        _strong.TypeConcept = _delay;
                        if ((_delay != null)) {
                            _loaded = true;
                            context.JsonContext.WritePropertyUtil(w, "typeConceptModel", _strong.TypeConcept, context);
                        }
                    }
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "typeConceptModel", _strong.TypeConcept, context);
                }
            }
            if (context.ShouldSerialize("identifier")) {
                if (((_strong.Identifiers == null) 
                            || (_strong.Identifiers.Count == 0))) {
                    if ((_strong.Key.HasValue && context.ShouldForceLoad("identifier", _strong.Key.Value))) {
                        OpenIZ.Core.Model.Collection.VersionedAssociationCollection<OpenIZ.Core.Model.DataTypes.ActIdentifier> _delay = null;
                        _delay = new OpenIZ.Core.Model.Collection.VersionedAssociationCollection<OpenIZ.Core.Model.DataTypes.ActIdentifier>(context.JsonContext.LoadCollection<OpenIZ.Core.Model.DataTypes.ActIdentifier>(_strong.Key.Value));
                        _strong.Identifiers = _delay;
                        if ((_delay.Count > 0)) {
                            _loaded = true;
                            context.JsonContext.WritePropertyUtil(w, "identifier", _strong.Identifiers, context);
                        }
                    }
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "identifier", _strong.Identifiers, context);
                }
            }
            if (context.ShouldSerialize("relationship")) {
                if (((_strong.Relationships == null) 
                            || (_strong.Relationships.Count == 0))) {
                    if ((_strong.Key.HasValue && context.ShouldForceLoad("relationship", _strong.Key.Value))) {
                        OpenIZ.Core.Model.Collection.VersionedAssociationCollection<OpenIZ.Core.Model.Acts.ActRelationship> _delay = null;
                        _delay = new OpenIZ.Core.Model.Collection.VersionedAssociationCollection<OpenIZ.Core.Model.Acts.ActRelationship>(context.JsonContext.LoadCollection<OpenIZ.Core.Model.Acts.ActRelationship>(_strong.Key.Value));
                        _strong.Relationships = _delay;
                        if ((_delay.Count > 0)) {
                            _loaded = true;
                            context.JsonContext.WritePropertyUtil(w, "relationship", _strong.Relationships, context);
                        }
                    }
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "relationship", _strong.Relationships, context);
                }
            }
            if (context.ShouldSerialize("policy")) {
                if (((_strong.Policies == null) 
                            || (_strong.Policies.Count == 0))) {
                    if ((_strong.Key.HasValue && context.ShouldForceLoad("policy", _strong.Key.Value))) {
                        OpenIZ.Core.Model.Collection.SimpleAssociationCollection<OpenIZ.Core.Model.Security.SecurityPolicyInstance> _delay = null;
                        _delay = new OpenIZ.Core.Model.Collection.SimpleAssociationCollection<OpenIZ.Core.Model.Security.SecurityPolicyInstance>(context.JsonContext.LoadCollection<OpenIZ.Core.Model.Security.SecurityPolicyInstance>(_strong.Key.Value));
                        _strong.Policies = _delay;
                        if ((_delay.Count > 0)) {
                            _loaded = true;
                            context.JsonContext.WritePropertyUtil(w, "policy", _strong.Policies, context);
                        }
                    }
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "policy", _strong.Policies, context);
                }
            }
            if (context.ShouldSerialize("extension")) {
                if (((_strong.Extensions == null) 
                            || (_strong.Extensions.Count == 0))) {
                    if ((_strong.Key.HasValue && context.ShouldForceLoad("extension", _strong.Key.Value))) {
                        OpenIZ.Core.Model.Collection.VersionedAssociationCollection<OpenIZ.Core.Model.DataTypes.ActExtension> _delay = null;
                        _delay = new OpenIZ.Core.Model.Collection.VersionedAssociationCollection<OpenIZ.Core.Model.DataTypes.ActExtension>(context.JsonContext.LoadCollection<OpenIZ.Core.Model.DataTypes.ActExtension>(_strong.Key.Value));
                        _strong.Extensions = _delay;
                        if ((_delay.Count > 0)) {
                            _loaded = true;
                            context.JsonContext.WritePropertyUtil(w, "extension", _strong.Extensions, context);
                        }
                    }
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "extension", _strong.Extensions, context);
                }
            }
            if (context.ShouldSerialize("note")) {
                if (((_strong.Notes == null) 
                            || (_strong.Notes.Count == 0))) {
                    if ((_strong.Key.HasValue && context.ShouldForceLoad("note", _strong.Key.Value))) {
                        OpenIZ.Core.Model.Collection.VersionedAssociationCollection<OpenIZ.Core.Model.DataTypes.ActNote> _delay = null;
                        _delay = new OpenIZ.Core.Model.Collection.VersionedAssociationCollection<OpenIZ.Core.Model.DataTypes.ActNote>(context.JsonContext.LoadCollection<OpenIZ.Core.Model.DataTypes.ActNote>(_strong.Key.Value));
                        _strong.Notes = _delay;
                        if ((_delay.Count > 0)) {
                            _loaded = true;
                            context.JsonContext.WritePropertyUtil(w, "note", _strong.Notes, context);
                        }
                    }
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "note", _strong.Notes, context);
                }
            }
            if (context.ShouldSerialize("tag")) {
                if (((_strong.Tags == null) 
                            || (_strong.Tags.Count == 0))) {
                    if ((_strong.Key.HasValue && context.ShouldForceLoad("tag", _strong.Key.Value))) {
                        OpenIZ.Core.Model.Collection.SimpleAssociationCollection<OpenIZ.Core.Model.DataTypes.ActTag> _delay = null;
                        _delay = new OpenIZ.Core.Model.Collection.SimpleAssociationCollection<OpenIZ.Core.Model.DataTypes.ActTag>(context.JsonContext.LoadCollection<OpenIZ.Core.Model.DataTypes.ActTag>(_strong.Key.Value));
                        _strong.Tags = _delay;
                        if ((_delay.Count > 0)) {
                            _loaded = true;
                            context.JsonContext.WritePropertyUtil(w, "tag", _strong.Tags, context);
                        }
                    }
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "tag", _strong.Tags, context);
                }
            }
            if (context.ShouldSerialize("protocolsModel")) {
                if (((_strong.Protocols == null) 
                            || (_strong.Protocols.Count == 0))) {
                    if ((_strong.Key.HasValue && context.ShouldForceLoad("protocolsModel", _strong.Key.Value))) {
                        OpenIZ.Core.Model.Collection.VersionedAssociationCollection<OpenIZ.Core.Model.Acts.ActProtocol> _delay = null;
                        _delay = new OpenIZ.Core.Model.Collection.VersionedAssociationCollection<OpenIZ.Core.Model.Acts.ActProtocol>(context.JsonContext.LoadCollection<OpenIZ.Core.Model.Acts.ActProtocol>(_strong.Key.Value));
                        _strong.Protocols = _delay;
                        if ((_delay.Count > 0)) {
                            _loaded = true;
                            context.JsonContext.WritePropertyUtil(w, "protocolsModel", _strong.Protocols, context);
                        }
                    }
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "protocolsModel", _strong.Protocols, context);
                }
            }
            if (context.ShouldSerialize("participation")) {
                if (((_strong.Participations == null) 
                            || (_strong.Participations.Count == 0))) {
                    if ((_strong.Key.HasValue && context.ShouldForceLoad("participation", _strong.Key.Value))) {
                        OpenIZ.Core.Model.Collection.VersionedAssociationCollection<OpenIZ.Core.Model.Acts.ActParticipation> _delay = null;
                        _delay = new OpenIZ.Core.Model.Collection.VersionedAssociationCollection<OpenIZ.Core.Model.Acts.ActParticipation>(context.JsonContext.LoadCollection<OpenIZ.Core.Model.Acts.ActParticipation>(_strong.Key.Value));
                        _strong.Participations = _delay;
                        if ((_delay.Count > 0)) {
                            _loaded = true;
                            context.JsonContext.WritePropertyUtil(w, "participation", _strong.Participations, context);
                        }
                    }
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "participation", _strong.Participations, context);
                }
            }
            if (context.ShouldSerialize("etag")) {
                if ((_strong.Tag == null)) {
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "etag", _strong.Tag, context);
                }
            }
            if (context.ShouldSerialize("previousVersion")) {
                if ((_strong.PreviousVersionKey == null)) {
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "previousVersion", _strong.PreviousVersionKey, context);
                }
            }
            if (context.ShouldSerialize("version")) {
                if ((_strong.VersionKey == null)) {
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "version", _strong.VersionKey, context);
                }
            }
            if (context.ShouldSerialize("sequence")) {
                if ((_strong.VersionSequence == null)) {
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "sequence", _strong.VersionSequence, context);
                }
            }
            if (context.ShouldSerialize("creationTimeModel")) {
                if ((_strong.CreationTime == null)) {
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "creationTimeModel", _strong.CreationTime, context);
                }
            }
            if (context.ShouldSerialize("creationTime")) {
                if ((_strong.CreationTimeXml == null)) {
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "creationTime", _strong.CreationTimeXml, context);
                }
            }
            if (context.ShouldSerialize("obsoletionTimeModel")) {
                if ((_strong.ObsoletionTime == null)) {
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "obsoletionTimeModel", _strong.ObsoletionTime, context);
                }
            }
            if (context.ShouldSerialize("obsoletionTime")) {
                if ((_strong.ObsoletionTimeXml == null)) {
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "obsoletionTime", _strong.ObsoletionTimeXml, context);
                }
            }
            if (context.ShouldSerialize("createdBy")) {
                if ((_strong.CreatedByKey == null)) {
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "createdBy", _strong.CreatedByKey, context);
                }
            }
            if (context.ShouldSerialize("obsoletedBy")) {
                if ((_strong.ObsoletedByKey == null)) {
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "obsoletedBy", _strong.ObsoletedByKey, context);
                }
            }
            if (context.ShouldSerialize("id")) {
                if ((_strong.Key == null)) {
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "id", _strong.Key, context);
                }
            }
            if (((_loaded && _strong.Key.HasValue) 
                        && _strong.VersionKey.HasValue)) {
                ((OpenIZ.Core.Services.IDataCachingService)(OpenIZ.Core.ApplicationServiceContext.Current.GetService(typeof(OpenIZ.Core.Services.IDataCachingService)))).Add(_strong);
            }
        }
        
        public object Deserialize(Newtonsoft.Json.JsonReader r, System.Type asType, OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext context) {
            OpenIZ.Core.Model.Acts.ControlAct _retVal = new OpenIZ.Core.Model.Acts.ControlAct();
            int _depth = r.Depth;
            if ((r.TokenType != Newtonsoft.Json.JsonToken.StartObject)) {
                _depth = (_depth - 1);
            }
            for (
            ; r.Read(); 
            ) {
                if ((r.TokenType == Newtonsoft.Json.JsonToken.PropertyName)) {
                    if ("id".Equals(r.Value)) {
                        r.Read();
                        System.Nullable<System.Guid> _instance = ((System.Nullable<System.Guid>)(context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<System.Guid>), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("id", context.JsonContext, _retVal, context))));
                        if ((_instance != null)) {
                            _retVal.Key = _instance;
                        }
                    }
                    else {
                        if ("obsoletedBy".Equals(r.Value)) {
                            r.Read();
                            System.Nullable<System.Guid> _instance = ((System.Nullable<System.Guid>)(context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<System.Guid>), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("obsoletedBy", context.JsonContext, _retVal, context))));
                            if ((_instance != null)) {
                                _retVal.ObsoletedByKey = _instance;
                            }
                        }
                        else {
                            if ("createdBy".Equals(r.Value)) {
                                r.Read();
                                System.Nullable<System.Guid> _instance = ((System.Nullable<System.Guid>)(context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<System.Guid>), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("createdBy", context.JsonContext, _retVal, context))));
                                if ((_instance != null)) {
                                    _retVal.CreatedByKey = _instance;
                                }
                            }
                            else {
                                if ("obsoletionTime".Equals(r.Value)) {
                                    r.Read();
                                    string _instance = ((string)(context.JsonContext.ReadElementUtil(r, typeof(string), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("obsoletionTime", context.JsonContext, _retVal, context))));
                                    if ((_instance != null)) {
                                        _retVal.ObsoletionTimeXml = _instance;
                                    }
                                }
                                else {
                                    if ("obsoletionTimeModel".Equals(r.Value)) {
                                        r.Read();
                                        System.Nullable<System.DateTimeOffset> _instance = ((System.Nullable<System.DateTimeOffset>)(context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<System.DateTimeOffset>), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("obsoletionTimeModel", context.JsonContext, _retVal, context))));
                                        if ((_instance != null)) {
                                            _retVal.ObsoletionTime = _instance;
                                        }
                                    }
                                    else {
                                        if ("creationTime".Equals(r.Value)) {
                                            r.Read();
                                            string _instance = ((string)(context.JsonContext.ReadElementUtil(r, typeof(string), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("creationTime", context.JsonContext, _retVal, context))));
                                            if ((_instance != null)) {
                                                _retVal.CreationTimeXml = _instance;
                                            }
                                        }
                                        else {
                                            if ("creationTimeModel".Equals(r.Value)) {
                                                r.Read();
                                                System.DateTimeOffset _instance = ((System.DateTimeOffset)(context.JsonContext.ReadElementUtil(r, typeof(System.DateTimeOffset), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("creationTimeModel", context.JsonContext, _retVal, context))));
                                                if ((_instance != null)) {
                                                    _retVal.CreationTime = _instance;
                                                }
                                            }
                                            else {
                                                if ("sequence".Equals(r.Value)) {
                                                    r.Read();
                                                    System.Nullable<decimal> _instance = ((System.Nullable<decimal>)(context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<decimal>), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("sequence", context.JsonContext, _retVal, context))));
                                                    if ((_instance != null)) {
                                                        _retVal.VersionSequence = _instance;
                                                    }
                                                }
                                                else {
                                                    if ("version".Equals(r.Value)) {
                                                        r.Read();
                                                        System.Nullable<System.Guid> _instance = ((System.Nullable<System.Guid>)(context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<System.Guid>), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("version", context.JsonContext, _retVal, context))));
                                                        if ((_instance != null)) {
                                                            _retVal.VersionKey = _instance;
                                                        }
                                                    }
                                                    else {
                                                        if ("previousVersion".Equals(r.Value)) {
                                                            r.Read();
                                                            System.Nullable<System.Guid> _instance = ((System.Nullable<System.Guid>)(context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<System.Guid>), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("previousVersion", context.JsonContext, _retVal, context))));
                                                            if ((_instance != null)) {
                                                                _retVal.PreviousVersionKey = _instance;
                                                            }
                                                        }
                                                        else {
                                                            if ("participation".Equals(r.Value)) {
                                                                r.Read();
                                                                OpenIZ.Core.Model.Collection.VersionedAssociationCollection<OpenIZ.Core.Model.Acts.ActParticipation> _instance = ((OpenIZ.Core.Model.Collection.VersionedAssociationCollection<OpenIZ.Core.Model.Acts.ActParticipation>)(context.JsonContext.ReadElementUtil(r, typeof(OpenIZ.Core.Model.Collection.VersionedAssociationCollection<OpenIZ.Core.Model.Acts.ActParticipation>), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("participation", context.JsonContext, _retVal, context))));
                                                                if ((_instance != null)) {
                                                                    _retVal.Participations = _instance;
                                                                }
                                                            }
                                                            else {
                                                                if ("protocolsModel".Equals(r.Value)) {
                                                                    r.Read();
                                                                    OpenIZ.Core.Model.Collection.VersionedAssociationCollection<OpenIZ.Core.Model.Acts.ActProtocol> _instance = ((OpenIZ.Core.Model.Collection.VersionedAssociationCollection<OpenIZ.Core.Model.Acts.ActProtocol>)(context.JsonContext.ReadElementUtil(r, typeof(OpenIZ.Core.Model.Collection.VersionedAssociationCollection<OpenIZ.Core.Model.Acts.ActProtocol>), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("protocolsModel", context.JsonContext, _retVal, context))));
                                                                    if ((_instance != null)) {
                                                                        _retVal.Protocols = _instance;
                                                                    }
                                                                }
                                                                else {
                                                                    if ("tag".Equals(r.Value)) {
                                                                        r.Read();
                                                                        OpenIZ.Core.Model.Collection.SimpleAssociationCollection<OpenIZ.Core.Model.DataTypes.ActTag> _instance = ((OpenIZ.Core.Model.Collection.SimpleAssociationCollection<OpenIZ.Core.Model.DataTypes.ActTag>)(context.JsonContext.ReadElementUtil(r, typeof(OpenIZ.Core.Model.Collection.SimpleAssociationCollection<OpenIZ.Core.Model.DataTypes.ActTag>), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("tag", context.JsonContext, _retVal, context))));
                                                                        if ((_instance != null)) {
                                                                            _retVal.Tags = _instance;
                                                                        }
                                                                    }
                                                                    else {
                                                                        if ("note".Equals(r.Value)) {
                                                                            r.Read();
                                                                            OpenIZ.Core.Model.Collection.VersionedAssociationCollection<OpenIZ.Core.Model.DataTypes.ActNote> _instance = ((OpenIZ.Core.Model.Collection.VersionedAssociationCollection<OpenIZ.Core.Model.DataTypes.ActNote>)(context.JsonContext.ReadElementUtil(r, typeof(OpenIZ.Core.Model.Collection.VersionedAssociationCollection<OpenIZ.Core.Model.DataTypes.ActNote>), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("note", context.JsonContext, _retVal, context))));
                                                                            if ((_instance != null)) {
                                                                                _retVal.Notes = _instance;
                                                                            }
                                                                        }
                                                                        else {
                                                                            if ("extension".Equals(r.Value)) {
                                                                                r.Read();
                                                                                OpenIZ.Core.Model.Collection.VersionedAssociationCollection<OpenIZ.Core.Model.DataTypes.ActExtension> _instance = ((OpenIZ.Core.Model.Collection.VersionedAssociationCollection<OpenIZ.Core.Model.DataTypes.ActExtension>)(context.JsonContext.ReadElementUtil(r, typeof(OpenIZ.Core.Model.Collection.VersionedAssociationCollection<OpenIZ.Core.Model.DataTypes.ActExtension>), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("extension", context.JsonContext, _retVal, context))));
                                                                                if ((_instance != null)) {
                                                                                    _retVal.Extensions = _instance;
                                                                                }
                                                                            }
                                                                            else {
                                                                                if ("policy".Equals(r.Value)) {
                                                                                    r.Read();
                                                                                    OpenIZ.Core.Model.Collection.SimpleAssociationCollection<OpenIZ.Core.Model.Security.SecurityPolicyInstance> _instance = ((OpenIZ.Core.Model.Collection.SimpleAssociationCollection<OpenIZ.Core.Model.Security.SecurityPolicyInstance>)(context.JsonContext.ReadElementUtil(r, typeof(OpenIZ.Core.Model.Collection.SimpleAssociationCollection<OpenIZ.Core.Model.Security.SecurityPolicyInstance>), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("policy", context.JsonContext, _retVal, context))));
                                                                                    if ((_instance != null)) {
                                                                                        _retVal.Policies = _instance;
                                                                                    }
                                                                                }
                                                                                else {
                                                                                    if ("relationship".Equals(r.Value)) {
                                                                                        r.Read();
                                                                                        OpenIZ.Core.Model.Collection.VersionedAssociationCollection<OpenIZ.Core.Model.Acts.ActRelationship> _instance = ((OpenIZ.Core.Model.Collection.VersionedAssociationCollection<OpenIZ.Core.Model.Acts.ActRelationship>)(context.JsonContext.ReadElementUtil(r, typeof(OpenIZ.Core.Model.Collection.VersionedAssociationCollection<OpenIZ.Core.Model.Acts.ActRelationship>), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("relationship", context.JsonContext, _retVal, context))));
                                                                                        if ((_instance != null)) {
                                                                                            _retVal.Relationships = _instance;
                                                                                        }
                                                                                    }
                                                                                    else {
                                                                                        if ("identifier".Equals(r.Value)) {
                                                                                            r.Read();
                                                                                            OpenIZ.Core.Model.Collection.VersionedAssociationCollection<OpenIZ.Core.Model.DataTypes.ActIdentifier> _instance = ((OpenIZ.Core.Model.Collection.VersionedAssociationCollection<OpenIZ.Core.Model.DataTypes.ActIdentifier>)(context.JsonContext.ReadElementUtil(r, typeof(OpenIZ.Core.Model.Collection.VersionedAssociationCollection<OpenIZ.Core.Model.DataTypes.ActIdentifier>), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("identifier", context.JsonContext, _retVal, context))));
                                                                                            if ((_instance != null)) {
                                                                                                _retVal.Identifiers = _instance;
                                                                                            }
                                                                                        }
                                                                                        else {
                                                                                            if ("typeConceptModel".Equals(r.Value)) {
                                                                                                r.Read();
                                                                                                OpenIZ.Core.Model.DataTypes.Concept _instance = ((OpenIZ.Core.Model.DataTypes.Concept)(context.JsonContext.ReadElementUtil(r, typeof(OpenIZ.Core.Model.DataTypes.Concept), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("typeConceptModel", context.JsonContext, _retVal, context))));
                                                                                                if ((_instance != null)) {
                                                                                                    _retVal.TypeConcept = _instance;
                                                                                                }
                                                                                            }
                                                                                            else {
                                                                                                if ("statusConceptModel".Equals(r.Value)) {
                                                                                                    r.Read();
                                                                                                    OpenIZ.Core.Model.DataTypes.Concept _instance = ((OpenIZ.Core.Model.DataTypes.Concept)(context.JsonContext.ReadElementUtil(r, typeof(OpenIZ.Core.Model.DataTypes.Concept), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("statusConceptModel", context.JsonContext, _retVal, context))));
                                                                                                    if ((_instance != null)) {
                                                                                                        _retVal.StatusConcept = _instance;
                                                                                                    }
                                                                                                }
                                                                                                else {
                                                                                                    if ("reasonConceptModel".Equals(r.Value)) {
                                                                                                        r.Read();
                                                                                                        OpenIZ.Core.Model.DataTypes.Concept _instance = ((OpenIZ.Core.Model.DataTypes.Concept)(context.JsonContext.ReadElementUtil(r, typeof(OpenIZ.Core.Model.DataTypes.Concept), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("reasonConceptModel", context.JsonContext, _retVal, context))));
                                                                                                        if ((_instance != null)) {
                                                                                                            _retVal.ReasonConcept = _instance;
                                                                                                        }
                                                                                                    }
                                                                                                    else {
                                                                                                        if ("moodConceptModel".Equals(r.Value)) {
                                                                                                            r.Read();
                                                                                                            OpenIZ.Core.Model.DataTypes.Concept _instance = ((OpenIZ.Core.Model.DataTypes.Concept)(context.JsonContext.ReadElementUtil(r, typeof(OpenIZ.Core.Model.DataTypes.Concept), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("moodConceptModel", context.JsonContext, _retVal, context))));
                                                                                                            if ((_instance != null)) {
                                                                                                                _retVal.MoodConcept = _instance;
                                                                                                            }
                                                                                                        }
                                                                                                        else {
                                                                                                            if ("classConceptModel".Equals(r.Value)) {
                                                                                                                r.Read();
                                                                                                                OpenIZ.Core.Model.DataTypes.Concept _instance = ((OpenIZ.Core.Model.DataTypes.Concept)(context.JsonContext.ReadElementUtil(r, typeof(OpenIZ.Core.Model.DataTypes.Concept), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("classConceptModel", context.JsonContext, _retVal, context))));
                                                                                                                if ((_instance != null)) {
                                                                                                                    _retVal.ClassConcept = _instance;
                                                                                                                }
                                                                                                            }
                                                                                                            else {
                                                                                                                if ("typeConcept".Equals(r.Value)) {
                                                                                                                    r.Read();
                                                                                                                    System.Nullable<System.Guid> _instance = ((System.Nullable<System.Guid>)(context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<System.Guid>), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("typeConcept", context.JsonContext, _retVal, context))));
                                                                                                                    if ((_instance != null)) {
                                                                                                                        _retVal.TypeConceptKey = _instance;
                                                                                                                    }
                                                                                                                }
                                                                                                                else {
                                                                                                                    if ("statusConcept".Equals(r.Value)) {
                                                                                                                        r.Read();
                                                                                                                        System.Nullable<System.Guid> _instance = ((System.Nullable<System.Guid>)(context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<System.Guid>), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("statusConcept", context.JsonContext, _retVal, context))));
                                                                                                                        if ((_instance != null)) {
                                                                                                                            _retVal.StatusConceptKey = _instance;
                                                                                                                        }
                                                                                                                    }
                                                                                                                    else {
                                                                                                                        if ("reasonConcept".Equals(r.Value)) {
                                                                                                                            r.Read();
                                                                                                                            System.Nullable<System.Guid> _instance = ((System.Nullable<System.Guid>)(context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<System.Guid>), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("reasonConcept", context.JsonContext, _retVal, context))));
                                                                                                                            if ((_instance != null)) {
                                                                                                                                _retVal.ReasonConceptKey = _instance;
                                                                                                                            }
                                                                                                                        }
                                                                                                                        else {
                                                                                                                            if ("moodConcept".Equals(r.Value)) {
                                                                                                                                r.Read();
                                                                                                                                System.Nullable<System.Guid> _instance = ((System.Nullable<System.Guid>)(context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<System.Guid>), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("moodConcept", context.JsonContext, _retVal, context))));
                                                                                                                                if ((_instance != null)) {
                                                                                                                                    _retVal.MoodConceptKey = _instance;
                                                                                                                                }
                                                                                                                            }
                                                                                                                            else {
                                                                                                                                if ("classConcept".Equals(r.Value)) {
                                                                                                                                    r.Read();
                                                                                                                                    System.Nullable<System.Guid> _instance = ((System.Nullable<System.Guid>)(context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<System.Guid>), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("classConcept", context.JsonContext, _retVal, context))));
                                                                                                                                    if ((_instance != null)) {
                                                                                                                                        _retVal.ClassConceptKey = _instance;
                                                                                                                                    }
                                                                                                                                }
                                                                                                                                else {
                                                                                                                                    if ("stopTime".Equals(r.Value)) {
                                                                                                                                        r.Read();
                                                                                                                                        string _instance = ((string)(context.JsonContext.ReadElementUtil(r, typeof(string), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("stopTime", context.JsonContext, _retVal, context))));
                                                                                                                                        if ((_instance != null)) {
                                                                                                                                            _retVal.StopTimeXml = _instance;
                                                                                                                                        }
                                                                                                                                    }
                                                                                                                                    else {
                                                                                                                                        if ("startTime".Equals(r.Value)) {
                                                                                                                                            r.Read();
                                                                                                                                            string _instance = ((string)(context.JsonContext.ReadElementUtil(r, typeof(string), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("startTime", context.JsonContext, _retVal, context))));
                                                                                                                                            if ((_instance != null)) {
                                                                                                                                                _retVal.StartTimeXml = _instance;
                                                                                                                                            }
                                                                                                                                        }
                                                                                                                                        else {
                                                                                                                                            if ("actTime".Equals(r.Value)) {
                                                                                                                                                r.Read();
                                                                                                                                                string _instance = ((string)(context.JsonContext.ReadElementUtil(r, typeof(string), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("actTime", context.JsonContext, _retVal, context))));
                                                                                                                                                if ((_instance != null)) {
                                                                                                                                                    _retVal.ActTimeXml = _instance;
                                                                                                                                                }
                                                                                                                                            }
                                                                                                                                            else {
                                                                                                                                                if ("template".Equals(r.Value)) {
                                                                                                                                                    r.Read();
                                                                                                                                                    OpenIZ.Core.Model.DataTypes.TemplateDefinition _instance = ((OpenIZ.Core.Model.DataTypes.TemplateDefinition)(context.JsonContext.ReadElementUtil(r, typeof(OpenIZ.Core.Model.DataTypes.TemplateDefinition), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("template", context.JsonContext, _retVal, context))));
                                                                                                                                                    if ((_instance != null)) {
                                                                                                                                                        _retVal.Template = _instance;
                                                                                                                                                    }
                                                                                                                                                }
                                                                                                                                                else {
                                                                                                                                                    if ("isNegated".Equals(r.Value)) {
                                                                                                                                                        r.Read();
                                                                                                                                                        bool _instance = ((bool)(context.JsonContext.ReadElementUtil(r, typeof(bool), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("isNegated", context.JsonContext, _retVal, context))));
                                                                                                                                                        if ((_instance != null)) {
                                                                                                                                                            _retVal.IsNegated = _instance;
                                                                                                                                                        }
                                                                                                                                                    }
                                                                                                                                                    else {
                                                                                                                                                        if ("$type".Equals(r.Value)) {
                                                                                                                                                            System.Type _type = this.m_binder.BindToType("OpenIZ.Core.Model, Version=0.6.14.21496, Culture=neutral, PublicKeyToken=null", r.ReadAsString());
                                                                                                                                                            if ((_type != typeof(OpenIZ.Core.Model.Acts.ControlAct))) {
                                                                                                                                                                OpenIZ.Core.Model.Acts.ControlAct _nretVal = ((OpenIZ.Core.Model.Acts.ControlAct)(context.JsonContext.GetFormatter(_type).Deserialize(r, _type, context)));
                                                                                                                                                                _nretVal.CopyObjectData(_retVal);
                                                                                                                                                                return _nretVal;
                                                                                                                                                            }
                                                                                                                                                        }
                                                                                                                                                        else {
                                                                                                                                                            r.Skip();
                                                                                                                                                        }
                                                                                                                                                    }
                                                                                                                                                }
                                                                                                                                            }
                                                                                                                                        }
                                                                                                                                    }
                                                                                                                                }
                                                                                                                            }
                                                                                                                        }
                                                                                                                    }
                                                                                                                }
                                                                                                            }
                                                                                                        }
                                                                                                    }
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
                else {
                    if (((r.TokenType == Newtonsoft.Json.JsonToken.EndObject) 
                                && (r.Depth == _depth))) {
                        return _retVal;
                    }
                    else {
                        throw new Newtonsoft.Json.JsonSerializationException("JSON in invalid state");
                    }
                }
            }
            return _retVal;
        }
        
        public object FromSimpleValue(object o) {
            return null;
        }
        
        public object GetSimpleValue(object o) {
            return null;
        }
    }
    
    public class ObservationViewModelSerializer : OpenIZ.Core.Applets.ViewModel.Json.IJsonViewModelTypeFormatter {
        
        private OpenIZ.Core.Model.Serialization.ModelSerializationBinder m_binder = new OpenIZ.Core.Model.Serialization.ModelSerializationBinder();
        
        private OpenIZ.Core.Diagnostics.Tracer m_tracer = OpenIZ.Core.Diagnostics.Tracer.GetTracer(typeof(ObservationViewModelSerializer));
        
        public System.Type HandlesType {
            get {
                return typeof(OpenIZ.Core.Model.Acts.Observation);
            }
        }
        
        public void Serialize(Newtonsoft.Json.JsonWriter w, OpenIZ.Core.Model.IdentifiedData o, OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext context) {
            if ((o == null)) {
                throw new System.ArgumentNullException("o");
            }
            OpenIZ.Core.Model.Acts.Observation _strong = null;
            OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext _jsonContext = null;
            bool _loaded = false;
            try {
                _strong = ((OpenIZ.Core.Model.Acts.Observation)(o));
            }
            catch (System.Exception e) {
                this.m_tracer.TraceError(string.Format("Casting Error: {0}", e));
                throw new System.ArgumentException(string.Format("Invalid type {0} provided, expected {1}", o.GetType(), typeof(OpenIZ.Core.Model.Acts.Observation)));
            }
            if (context.ShouldSerialize("interpretationConcept")) {
                if ((_strong.InterpretationConceptKey == null)) {
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "interpretationConcept", _strong.InterpretationConceptKey, context);
                }
            }
            if (context.ShouldSerialize("interpretationConceptModel")) {
                if ((_strong.InterpretationConcept == null)) {
                    if ((_strong.Key.HasValue && context.ShouldForceLoad("interpretationConceptModel", _strong.Key.Value))) {
                        OpenIZ.Core.Model.DataTypes.Concept _delay = null;
                        _delay = context.JsonContext.LoadRelated<OpenIZ.Core.Model.DataTypes.Concept>(_strong.InterpretationConceptKey);
                        _strong.InterpretationConcept = _delay;
                        if ((_delay != null)) {
                            _loaded = true;
                            context.JsonContext.WritePropertyUtil(w, "interpretationConceptModel", _strong.InterpretationConcept, context);
                        }
                    }
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "interpretationConceptModel", _strong.InterpretationConcept, context);
                }
            }
            if (context.ShouldSerialize("isNegated")) {
                if ((_strong.IsNegated == null)) {
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "isNegated", _strong.IsNegated, context);
                }
            }
            if (context.ShouldSerialize("template")) {
                if ((_strong.Template == null)) {
                    if ((_strong.Key.HasValue && context.ShouldForceLoad("template", _strong.Key.Value))) {
                        OpenIZ.Core.Model.DataTypes.TemplateDefinition _delay = null;
                    }
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "template", _strong.Template, context);
                }
            }
            if (context.ShouldSerialize("actTime")) {
                if ((_strong.ActTimeXml == null)) {
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "actTime", _strong.ActTimeXml, context);
                }
            }
            if (context.ShouldSerialize("startTime")) {
                if ((_strong.StartTimeXml == null)) {
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "startTime", _strong.StartTimeXml, context);
                }
            }
            if (context.ShouldSerialize("stopTime")) {
                if ((_strong.StopTimeXml == null)) {
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "stopTime", _strong.StopTimeXml, context);
                }
            }
            if (context.ShouldSerialize("classConcept")) {
                if ((_strong.ClassConceptKey == null)) {
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "classConcept", _strong.ClassConceptKey, context);
                }
            }
            if (context.ShouldSerialize("moodConcept")) {
                if ((_strong.MoodConceptKey == null)) {
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "moodConcept", _strong.MoodConceptKey, context);
                }
            }
            if (context.ShouldSerialize("reasonConcept")) {
                if ((_strong.ReasonConceptKey == null)) {
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "reasonConcept", _strong.ReasonConceptKey, context);
                }
            }
            if (context.ShouldSerialize("statusConcept")) {
                if ((_strong.StatusConceptKey == null)) {
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "statusConcept", _strong.StatusConceptKey, context);
                }
            }
            if (context.ShouldSerialize("typeConcept")) {
                if ((_strong.TypeConceptKey == null)) {
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "typeConcept", _strong.TypeConceptKey, context);
                }
            }
            if (context.ShouldSerialize("classConceptModel")) {
                if ((_strong.ClassConcept == null)) {
                    if ((_strong.Key.HasValue && context.ShouldForceLoad("classConceptModel", _strong.Key.Value))) {
                        OpenIZ.Core.Model.DataTypes.Concept _delay = null;
                        _delay = context.JsonContext.LoadRelated<OpenIZ.Core.Model.DataTypes.Concept>(_strong.ClassConceptKey);
                        _strong.ClassConcept = _delay;
                        if ((_delay != null)) {
                            _loaded = true;
                            context.JsonContext.WritePropertyUtil(w, "classConceptModel", _strong.ClassConcept, context);
                        }
                    }
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "classConceptModel", _strong.ClassConcept, context);
                }
            }
            if (context.ShouldSerialize("moodConceptModel")) {
                if ((_strong.MoodConcept == null)) {
                    if ((_strong.Key.HasValue && context.ShouldForceLoad("moodConceptModel", _strong.Key.Value))) {
                        OpenIZ.Core.Model.DataTypes.Concept _delay = null;
                        _delay = context.JsonContext.LoadRelated<OpenIZ.Core.Model.DataTypes.Concept>(_strong.MoodConceptKey);
                        _strong.MoodConcept = _delay;
                        if ((_delay != null)) {
                            _loaded = true;
                            context.JsonContext.WritePropertyUtil(w, "moodConceptModel", _strong.MoodConcept, context);
                        }
                    }
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "moodConceptModel", _strong.MoodConcept, context);
                }
            }
            if (context.ShouldSerialize("reasonConceptModel")) {
                if ((_strong.ReasonConcept == null)) {
                    if ((_strong.Key.HasValue && context.ShouldForceLoad("reasonConceptModel", _strong.Key.Value))) {
                        OpenIZ.Core.Model.DataTypes.Concept _delay = null;
                        _delay = context.JsonContext.LoadRelated<OpenIZ.Core.Model.DataTypes.Concept>(_strong.ReasonConceptKey);
                        _strong.ReasonConcept = _delay;
                        if ((_delay != null)) {
                            _loaded = true;
                            context.JsonContext.WritePropertyUtil(w, "reasonConceptModel", _strong.ReasonConcept, context);
                        }
                    }
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "reasonConceptModel", _strong.ReasonConcept, context);
                }
            }
            if (context.ShouldSerialize("statusConceptModel")) {
                if ((_strong.StatusConcept == null)) {
                    if ((_strong.Key.HasValue && context.ShouldForceLoad("statusConceptModel", _strong.Key.Value))) {
                        OpenIZ.Core.Model.DataTypes.Concept _delay = null;
                        _delay = context.JsonContext.LoadRelated<OpenIZ.Core.Model.DataTypes.Concept>(_strong.StatusConceptKey);
                        _strong.StatusConcept = _delay;
                        if ((_delay != null)) {
                            _loaded = true;
                            context.JsonContext.WritePropertyUtil(w, "statusConceptModel", _strong.StatusConcept, context);
                        }
                    }
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "statusConceptModel", _strong.StatusConcept, context);
                }
            }
            if (context.ShouldSerialize("typeConceptModel")) {
                if ((_strong.TypeConcept == null)) {
                    if ((_strong.Key.HasValue && context.ShouldForceLoad("typeConceptModel", _strong.Key.Value))) {
                        OpenIZ.Core.Model.DataTypes.Concept _delay = null;
                        _delay = context.JsonContext.LoadRelated<OpenIZ.Core.Model.DataTypes.Concept>(_strong.TypeConceptKey);
                        _strong.TypeConcept = _delay;
                        if ((_delay != null)) {
                            _loaded = true;
                            context.JsonContext.WritePropertyUtil(w, "typeConceptModel", _strong.TypeConcept, context);
                        }
                    }
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "typeConceptModel", _strong.TypeConcept, context);
                }
            }
            if (context.ShouldSerialize("identifier")) {
                if (((_strong.Identifiers == null) 
                            || (_strong.Identifiers.Count == 0))) {
                    if ((_strong.Key.HasValue && context.ShouldForceLoad("identifier", _strong.Key.Value))) {
                        OpenIZ.Core.Model.Collection.VersionedAssociationCollection<OpenIZ.Core.Model.DataTypes.ActIdentifier> _delay = null;
                        _delay = new OpenIZ.Core.Model.Collection.VersionedAssociationCollection<OpenIZ.Core.Model.DataTypes.ActIdentifier>(context.JsonContext.LoadCollection<OpenIZ.Core.Model.DataTypes.ActIdentifier>(_strong.Key.Value));
                        _strong.Identifiers = _delay;
                        if ((_delay.Count > 0)) {
                            _loaded = true;
                            context.JsonContext.WritePropertyUtil(w, "identifier", _strong.Identifiers, context);
                        }
                    }
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "identifier", _strong.Identifiers, context);
                }
            }
            if (context.ShouldSerialize("relationship")) {
                if (((_strong.Relationships == null) 
                            || (_strong.Relationships.Count == 0))) {
                    if ((_strong.Key.HasValue && context.ShouldForceLoad("relationship", _strong.Key.Value))) {
                        OpenIZ.Core.Model.Collection.VersionedAssociationCollection<OpenIZ.Core.Model.Acts.ActRelationship> _delay = null;
                        _delay = new OpenIZ.Core.Model.Collection.VersionedAssociationCollection<OpenIZ.Core.Model.Acts.ActRelationship>(context.JsonContext.LoadCollection<OpenIZ.Core.Model.Acts.ActRelationship>(_strong.Key.Value));
                        _strong.Relationships = _delay;
                        if ((_delay.Count > 0)) {
                            _loaded = true;
                            context.JsonContext.WritePropertyUtil(w, "relationship", _strong.Relationships, context);
                        }
                    }
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "relationship", _strong.Relationships, context);
                }
            }
            if (context.ShouldSerialize("policy")) {
                if (((_strong.Policies == null) 
                            || (_strong.Policies.Count == 0))) {
                    if ((_strong.Key.HasValue && context.ShouldForceLoad("policy", _strong.Key.Value))) {
                        OpenIZ.Core.Model.Collection.SimpleAssociationCollection<OpenIZ.Core.Model.Security.SecurityPolicyInstance> _delay = null;
                        _delay = new OpenIZ.Core.Model.Collection.SimpleAssociationCollection<OpenIZ.Core.Model.Security.SecurityPolicyInstance>(context.JsonContext.LoadCollection<OpenIZ.Core.Model.Security.SecurityPolicyInstance>(_strong.Key.Value));
                        _strong.Policies = _delay;
                        if ((_delay.Count > 0)) {
                            _loaded = true;
                            context.JsonContext.WritePropertyUtil(w, "policy", _strong.Policies, context);
                        }
                    }
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "policy", _strong.Policies, context);
                }
            }
            if (context.ShouldSerialize("extension")) {
                if (((_strong.Extensions == null) 
                            || (_strong.Extensions.Count == 0))) {
                    if ((_strong.Key.HasValue && context.ShouldForceLoad("extension", _strong.Key.Value))) {
                        OpenIZ.Core.Model.Collection.VersionedAssociationCollection<OpenIZ.Core.Model.DataTypes.ActExtension> _delay = null;
                        _delay = new OpenIZ.Core.Model.Collection.VersionedAssociationCollection<OpenIZ.Core.Model.DataTypes.ActExtension>(context.JsonContext.LoadCollection<OpenIZ.Core.Model.DataTypes.ActExtension>(_strong.Key.Value));
                        _strong.Extensions = _delay;
                        if ((_delay.Count > 0)) {
                            _loaded = true;
                            context.JsonContext.WritePropertyUtil(w, "extension", _strong.Extensions, context);
                        }
                    }
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "extension", _strong.Extensions, context);
                }
            }
            if (context.ShouldSerialize("note")) {
                if (((_strong.Notes == null) 
                            || (_strong.Notes.Count == 0))) {
                    if ((_strong.Key.HasValue && context.ShouldForceLoad("note", _strong.Key.Value))) {
                        OpenIZ.Core.Model.Collection.VersionedAssociationCollection<OpenIZ.Core.Model.DataTypes.ActNote> _delay = null;
                        _delay = new OpenIZ.Core.Model.Collection.VersionedAssociationCollection<OpenIZ.Core.Model.DataTypes.ActNote>(context.JsonContext.LoadCollection<OpenIZ.Core.Model.DataTypes.ActNote>(_strong.Key.Value));
                        _strong.Notes = _delay;
                        if ((_delay.Count > 0)) {
                            _loaded = true;
                            context.JsonContext.WritePropertyUtil(w, "note", _strong.Notes, context);
                        }
                    }
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "note", _strong.Notes, context);
                }
            }
            if (context.ShouldSerialize("tag")) {
                if (((_strong.Tags == null) 
                            || (_strong.Tags.Count == 0))) {
                    if ((_strong.Key.HasValue && context.ShouldForceLoad("tag", _strong.Key.Value))) {
                        OpenIZ.Core.Model.Collection.SimpleAssociationCollection<OpenIZ.Core.Model.DataTypes.ActTag> _delay = null;
                        _delay = new OpenIZ.Core.Model.Collection.SimpleAssociationCollection<OpenIZ.Core.Model.DataTypes.ActTag>(context.JsonContext.LoadCollection<OpenIZ.Core.Model.DataTypes.ActTag>(_strong.Key.Value));
                        _strong.Tags = _delay;
                        if ((_delay.Count > 0)) {
                            _loaded = true;
                            context.JsonContext.WritePropertyUtil(w, "tag", _strong.Tags, context);
                        }
                    }
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "tag", _strong.Tags, context);
                }
            }
            if (context.ShouldSerialize("protocolsModel")) {
                if (((_strong.Protocols == null) 
                            || (_strong.Protocols.Count == 0))) {
                    if ((_strong.Key.HasValue && context.ShouldForceLoad("protocolsModel", _strong.Key.Value))) {
                        OpenIZ.Core.Model.Collection.VersionedAssociationCollection<OpenIZ.Core.Model.Acts.ActProtocol> _delay = null;
                        _delay = new OpenIZ.Core.Model.Collection.VersionedAssociationCollection<OpenIZ.Core.Model.Acts.ActProtocol>(context.JsonContext.LoadCollection<OpenIZ.Core.Model.Acts.ActProtocol>(_strong.Key.Value));
                        _strong.Protocols = _delay;
                        if ((_delay.Count > 0)) {
                            _loaded = true;
                            context.JsonContext.WritePropertyUtil(w, "protocolsModel", _strong.Protocols, context);
                        }
                    }
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "protocolsModel", _strong.Protocols, context);
                }
            }
            if (context.ShouldSerialize("participation")) {
                if (((_strong.Participations == null) 
                            || (_strong.Participations.Count == 0))) {
                    if ((_strong.Key.HasValue && context.ShouldForceLoad("participation", _strong.Key.Value))) {
                        OpenIZ.Core.Model.Collection.VersionedAssociationCollection<OpenIZ.Core.Model.Acts.ActParticipation> _delay = null;
                        _delay = new OpenIZ.Core.Model.Collection.VersionedAssociationCollection<OpenIZ.Core.Model.Acts.ActParticipation>(context.JsonContext.LoadCollection<OpenIZ.Core.Model.Acts.ActParticipation>(_strong.Key.Value));
                        _strong.Participations = _delay;
                        if ((_delay.Count > 0)) {
                            _loaded = true;
                            context.JsonContext.WritePropertyUtil(w, "participation", _strong.Participations, context);
                        }
                    }
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "participation", _strong.Participations, context);
                }
            }
            if (context.ShouldSerialize("etag")) {
                if ((_strong.Tag == null)) {
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "etag", _strong.Tag, context);
                }
            }
            if (context.ShouldSerialize("previousVersion")) {
                if ((_strong.PreviousVersionKey == null)) {
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "previousVersion", _strong.PreviousVersionKey, context);
                }
            }
            if (context.ShouldSerialize("version")) {
                if ((_strong.VersionKey == null)) {
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "version", _strong.VersionKey, context);
                }
            }
            if (context.ShouldSerialize("sequence")) {
                if ((_strong.VersionSequence == null)) {
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "sequence", _strong.VersionSequence, context);
                }
            }
            if (context.ShouldSerialize("creationTimeModel")) {
                if ((_strong.CreationTime == null)) {
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "creationTimeModel", _strong.CreationTime, context);
                }
            }
            if (context.ShouldSerialize("creationTime")) {
                if ((_strong.CreationTimeXml == null)) {
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "creationTime", _strong.CreationTimeXml, context);
                }
            }
            if (context.ShouldSerialize("obsoletionTimeModel")) {
                if ((_strong.ObsoletionTime == null)) {
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "obsoletionTimeModel", _strong.ObsoletionTime, context);
                }
            }
            if (context.ShouldSerialize("obsoletionTime")) {
                if ((_strong.ObsoletionTimeXml == null)) {
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "obsoletionTime", _strong.ObsoletionTimeXml, context);
                }
            }
            if (context.ShouldSerialize("createdBy")) {
                if ((_strong.CreatedByKey == null)) {
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "createdBy", _strong.CreatedByKey, context);
                }
            }
            if (context.ShouldSerialize("obsoletedBy")) {
                if ((_strong.ObsoletedByKey == null)) {
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "obsoletedBy", _strong.ObsoletedByKey, context);
                }
            }
            if (context.ShouldSerialize("id")) {
                if ((_strong.Key == null)) {
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "id", _strong.Key, context);
                }
            }
            if (((_loaded && _strong.Key.HasValue) 
                        && _strong.VersionKey.HasValue)) {
                ((OpenIZ.Core.Services.IDataCachingService)(OpenIZ.Core.ApplicationServiceContext.Current.GetService(typeof(OpenIZ.Core.Services.IDataCachingService)))).Add(_strong);
            }
        }
        
        public object Deserialize(Newtonsoft.Json.JsonReader r, System.Type asType, OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext context) {
            OpenIZ.Core.Model.Acts.Observation _retVal = new OpenIZ.Core.Model.Acts.Observation();
            int _depth = r.Depth;
            if ((r.TokenType != Newtonsoft.Json.JsonToken.StartObject)) {
                _depth = (_depth - 1);
            }
            for (
            ; r.Read(); 
            ) {
                if ((r.TokenType == Newtonsoft.Json.JsonToken.PropertyName)) {
                    if ("id".Equals(r.Value)) {
                        r.Read();
                        System.Nullable<System.Guid> _instance = ((System.Nullable<System.Guid>)(context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<System.Guid>), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("id", context.JsonContext, _retVal, context))));
                        if ((_instance != null)) {
                            _retVal.Key = _instance;
                        }
                    }
                    else {
                        if ("obsoletedBy".Equals(r.Value)) {
                            r.Read();
                            System.Nullable<System.Guid> _instance = ((System.Nullable<System.Guid>)(context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<System.Guid>), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("obsoletedBy", context.JsonContext, _retVal, context))));
                            if ((_instance != null)) {
                                _retVal.ObsoletedByKey = _instance;
                            }
                        }
                        else {
                            if ("createdBy".Equals(r.Value)) {
                                r.Read();
                                System.Nullable<System.Guid> _instance = ((System.Nullable<System.Guid>)(context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<System.Guid>), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("createdBy", context.JsonContext, _retVal, context))));
                                if ((_instance != null)) {
                                    _retVal.CreatedByKey = _instance;
                                }
                            }
                            else {
                                if ("obsoletionTime".Equals(r.Value)) {
                                    r.Read();
                                    string _instance = ((string)(context.JsonContext.ReadElementUtil(r, typeof(string), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("obsoletionTime", context.JsonContext, _retVal, context))));
                                    if ((_instance != null)) {
                                        _retVal.ObsoletionTimeXml = _instance;
                                    }
                                }
                                else {
                                    if ("obsoletionTimeModel".Equals(r.Value)) {
                                        r.Read();
                                        System.Nullable<System.DateTimeOffset> _instance = ((System.Nullable<System.DateTimeOffset>)(context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<System.DateTimeOffset>), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("obsoletionTimeModel", context.JsonContext, _retVal, context))));
                                        if ((_instance != null)) {
                                            _retVal.ObsoletionTime = _instance;
                                        }
                                    }
                                    else {
                                        if ("creationTime".Equals(r.Value)) {
                                            r.Read();
                                            string _instance = ((string)(context.JsonContext.ReadElementUtil(r, typeof(string), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("creationTime", context.JsonContext, _retVal, context))));
                                            if ((_instance != null)) {
                                                _retVal.CreationTimeXml = _instance;
                                            }
                                        }
                                        else {
                                            if ("creationTimeModel".Equals(r.Value)) {
                                                r.Read();
                                                System.DateTimeOffset _instance = ((System.DateTimeOffset)(context.JsonContext.ReadElementUtil(r, typeof(System.DateTimeOffset), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("creationTimeModel", context.JsonContext, _retVal, context))));
                                                if ((_instance != null)) {
                                                    _retVal.CreationTime = _instance;
                                                }
                                            }
                                            else {
                                                if ("sequence".Equals(r.Value)) {
                                                    r.Read();
                                                    System.Nullable<decimal> _instance = ((System.Nullable<decimal>)(context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<decimal>), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("sequence", context.JsonContext, _retVal, context))));
                                                    if ((_instance != null)) {
                                                        _retVal.VersionSequence = _instance;
                                                    }
                                                }
                                                else {
                                                    if ("version".Equals(r.Value)) {
                                                        r.Read();
                                                        System.Nullable<System.Guid> _instance = ((System.Nullable<System.Guid>)(context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<System.Guid>), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("version", context.JsonContext, _retVal, context))));
                                                        if ((_instance != null)) {
                                                            _retVal.VersionKey = _instance;
                                                        }
                                                    }
                                                    else {
                                                        if ("previousVersion".Equals(r.Value)) {
                                                            r.Read();
                                                            System.Nullable<System.Guid> _instance = ((System.Nullable<System.Guid>)(context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<System.Guid>), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("previousVersion", context.JsonContext, _retVal, context))));
                                                            if ((_instance != null)) {
                                                                _retVal.PreviousVersionKey = _instance;
                                                            }
                                                        }
                                                        else {
                                                            if ("participation".Equals(r.Value)) {
                                                                r.Read();
                                                                OpenIZ.Core.Model.Collection.VersionedAssociationCollection<OpenIZ.Core.Model.Acts.ActParticipation> _instance = ((OpenIZ.Core.Model.Collection.VersionedAssociationCollection<OpenIZ.Core.Model.Acts.ActParticipation>)(context.JsonContext.ReadElementUtil(r, typeof(OpenIZ.Core.Model.Collection.VersionedAssociationCollection<OpenIZ.Core.Model.Acts.ActParticipation>), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("participation", context.JsonContext, _retVal, context))));
                                                                if ((_instance != null)) {
                                                                    _retVal.Participations = _instance;
                                                                }
                                                            }
                                                            else {
                                                                if ("protocolsModel".Equals(r.Value)) {
                                                                    r.Read();
                                                                    OpenIZ.Core.Model.Collection.VersionedAssociationCollection<OpenIZ.Core.Model.Acts.ActProtocol> _instance = ((OpenIZ.Core.Model.Collection.VersionedAssociationCollection<OpenIZ.Core.Model.Acts.ActProtocol>)(context.JsonContext.ReadElementUtil(r, typeof(OpenIZ.Core.Model.Collection.VersionedAssociationCollection<OpenIZ.Core.Model.Acts.ActProtocol>), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("protocolsModel", context.JsonContext, _retVal, context))));
                                                                    if ((_instance != null)) {
                                                                        _retVal.Protocols = _instance;
                                                                    }
                                                                }
                                                                else {
                                                                    if ("tag".Equals(r.Value)) {
                                                                        r.Read();
                                                                        OpenIZ.Core.Model.Collection.SimpleAssociationCollection<OpenIZ.Core.Model.DataTypes.ActTag> _instance = ((OpenIZ.Core.Model.Collection.SimpleAssociationCollection<OpenIZ.Core.Model.DataTypes.ActTag>)(context.JsonContext.ReadElementUtil(r, typeof(OpenIZ.Core.Model.Collection.SimpleAssociationCollection<OpenIZ.Core.Model.DataTypes.ActTag>), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("tag", context.JsonContext, _retVal, context))));
                                                                        if ((_instance != null)) {
                                                                            _retVal.Tags = _instance;
                                                                        }
                                                                    }
                                                                    else {
                                                                        if ("note".Equals(r.Value)) {
                                                                            r.Read();
                                                                            OpenIZ.Core.Model.Collection.VersionedAssociationCollection<OpenIZ.Core.Model.DataTypes.ActNote> _instance = ((OpenIZ.Core.Model.Collection.VersionedAssociationCollection<OpenIZ.Core.Model.DataTypes.ActNote>)(context.JsonContext.ReadElementUtil(r, typeof(OpenIZ.Core.Model.Collection.VersionedAssociationCollection<OpenIZ.Core.Model.DataTypes.ActNote>), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("note", context.JsonContext, _retVal, context))));
                                                                            if ((_instance != null)) {
                                                                                _retVal.Notes = _instance;
                                                                            }
                                                                        }
                                                                        else {
                                                                            if ("extension".Equals(r.Value)) {
                                                                                r.Read();
                                                                                OpenIZ.Core.Model.Collection.VersionedAssociationCollection<OpenIZ.Core.Model.DataTypes.ActExtension> _instance = ((OpenIZ.Core.Model.Collection.VersionedAssociationCollection<OpenIZ.Core.Model.DataTypes.ActExtension>)(context.JsonContext.ReadElementUtil(r, typeof(OpenIZ.Core.Model.Collection.VersionedAssociationCollection<OpenIZ.Core.Model.DataTypes.ActExtension>), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("extension", context.JsonContext, _retVal, context))));
                                                                                if ((_instance != null)) {
                                                                                    _retVal.Extensions = _instance;
                                                                                }
                                                                            }
                                                                            else {
                                                                                if ("policy".Equals(r.Value)) {
                                                                                    r.Read();
                                                                                    OpenIZ.Core.Model.Collection.SimpleAssociationCollection<OpenIZ.Core.Model.Security.SecurityPolicyInstance> _instance = ((OpenIZ.Core.Model.Collection.SimpleAssociationCollection<OpenIZ.Core.Model.Security.SecurityPolicyInstance>)(context.JsonContext.ReadElementUtil(r, typeof(OpenIZ.Core.Model.Collection.SimpleAssociationCollection<OpenIZ.Core.Model.Security.SecurityPolicyInstance>), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("policy", context.JsonContext, _retVal, context))));
                                                                                    if ((_instance != null)) {
                                                                                        _retVal.Policies = _instance;
                                                                                    }
                                                                                }
                                                                                else {
                                                                                    if ("relationship".Equals(r.Value)) {
                                                                                        r.Read();
                                                                                        OpenIZ.Core.Model.Collection.VersionedAssociationCollection<OpenIZ.Core.Model.Acts.ActRelationship> _instance = ((OpenIZ.Core.Model.Collection.VersionedAssociationCollection<OpenIZ.Core.Model.Acts.ActRelationship>)(context.JsonContext.ReadElementUtil(r, typeof(OpenIZ.Core.Model.Collection.VersionedAssociationCollection<OpenIZ.Core.Model.Acts.ActRelationship>), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("relationship", context.JsonContext, _retVal, context))));
                                                                                        if ((_instance != null)) {
                                                                                            _retVal.Relationships = _instance;
                                                                                        }
                                                                                    }
                                                                                    else {
                                                                                        if ("identifier".Equals(r.Value)) {
                                                                                            r.Read();
                                                                                            OpenIZ.Core.Model.Collection.VersionedAssociationCollection<OpenIZ.Core.Model.DataTypes.ActIdentifier> _instance = ((OpenIZ.Core.Model.Collection.VersionedAssociationCollection<OpenIZ.Core.Model.DataTypes.ActIdentifier>)(context.JsonContext.ReadElementUtil(r, typeof(OpenIZ.Core.Model.Collection.VersionedAssociationCollection<OpenIZ.Core.Model.DataTypes.ActIdentifier>), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("identifier", context.JsonContext, _retVal, context))));
                                                                                            if ((_instance != null)) {
                                                                                                _retVal.Identifiers = _instance;
                                                                                            }
                                                                                        }
                                                                                        else {
                                                                                            if ("typeConceptModel".Equals(r.Value)) {
                                                                                                r.Read();
                                                                                                OpenIZ.Core.Model.DataTypes.Concept _instance = ((OpenIZ.Core.Model.DataTypes.Concept)(context.JsonContext.ReadElementUtil(r, typeof(OpenIZ.Core.Model.DataTypes.Concept), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("typeConceptModel", context.JsonContext, _retVal, context))));
                                                                                                if ((_instance != null)) {
                                                                                                    _retVal.TypeConcept = _instance;
                                                                                                }
                                                                                            }
                                                                                            else {
                                                                                                if ("statusConceptModel".Equals(r.Value)) {
                                                                                                    r.Read();
                                                                                                    OpenIZ.Core.Model.DataTypes.Concept _instance = ((OpenIZ.Core.Model.DataTypes.Concept)(context.JsonContext.ReadElementUtil(r, typeof(OpenIZ.Core.Model.DataTypes.Concept), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("statusConceptModel", context.JsonContext, _retVal, context))));
                                                                                                    if ((_instance != null)) {
                                                                                                        _retVal.StatusConcept = _instance;
                                                                                                    }
                                                                                                }
                                                                                                else {
                                                                                                    if ("reasonConceptModel".Equals(r.Value)) {
                                                                                                        r.Read();
                                                                                                        OpenIZ.Core.Model.DataTypes.Concept _instance = ((OpenIZ.Core.Model.DataTypes.Concept)(context.JsonContext.ReadElementUtil(r, typeof(OpenIZ.Core.Model.DataTypes.Concept), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("reasonConceptModel", context.JsonContext, _retVal, context))));
                                                                                                        if ((_instance != null)) {
                                                                                                            _retVal.ReasonConcept = _instance;
                                                                                                        }
                                                                                                    }
                                                                                                    else {
                                                                                                        if ("moodConceptModel".Equals(r.Value)) {
                                                                                                            r.Read();
                                                                                                            OpenIZ.Core.Model.DataTypes.Concept _instance = ((OpenIZ.Core.Model.DataTypes.Concept)(context.JsonContext.ReadElementUtil(r, typeof(OpenIZ.Core.Model.DataTypes.Concept), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("moodConceptModel", context.JsonContext, _retVal, context))));
                                                                                                            if ((_instance != null)) {
                                                                                                                _retVal.MoodConcept = _instance;
                                                                                                            }
                                                                                                        }
                                                                                                        else {
                                                                                                            if ("classConceptModel".Equals(r.Value)) {
                                                                                                                r.Read();
                                                                                                                OpenIZ.Core.Model.DataTypes.Concept _instance = ((OpenIZ.Core.Model.DataTypes.Concept)(context.JsonContext.ReadElementUtil(r, typeof(OpenIZ.Core.Model.DataTypes.Concept), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("classConceptModel", context.JsonContext, _retVal, context))));
                                                                                                                if ((_instance != null)) {
                                                                                                                    _retVal.ClassConcept = _instance;
                                                                                                                }
                                                                                                            }
                                                                                                            else {
                                                                                                                if ("typeConcept".Equals(r.Value)) {
                                                                                                                    r.Read();
                                                                                                                    System.Nullable<System.Guid> _instance = ((System.Nullable<System.Guid>)(context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<System.Guid>), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("typeConcept", context.JsonContext, _retVal, context))));
                                                                                                                    if ((_instance != null)) {
                                                                                                                        _retVal.TypeConceptKey = _instance;
                                                                                                                    }
                                                                                                                }
                                                                                                                else {
                                                                                                                    if ("statusConcept".Equals(r.Value)) {
                                                                                                                        r.Read();
                                                                                                                        System.Nullable<System.Guid> _instance = ((System.Nullable<System.Guid>)(context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<System.Guid>), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("statusConcept", context.JsonContext, _retVal, context))));
                                                                                                                        if ((_instance != null)) {
                                                                                                                            _retVal.StatusConceptKey = _instance;
                                                                                                                        }
                                                                                                                    }
                                                                                                                    else {
                                                                                                                        if ("reasonConcept".Equals(r.Value)) {
                                                                                                                            r.Read();
                                                                                                                            System.Nullable<System.Guid> _instance = ((System.Nullable<System.Guid>)(context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<System.Guid>), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("reasonConcept", context.JsonContext, _retVal, context))));
                                                                                                                            if ((_instance != null)) {
                                                                                                                                _retVal.ReasonConceptKey = _instance;
                                                                                                                            }
                                                                                                                        }
                                                                                                                        else {
                                                                                                                            if ("moodConcept".Equals(r.Value)) {
                                                                                                                                r.Read();
                                                                                                                                System.Nullable<System.Guid> _instance = ((System.Nullable<System.Guid>)(context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<System.Guid>), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("moodConcept", context.JsonContext, _retVal, context))));
                                                                                                                                if ((_instance != null)) {
                                                                                                                                    _retVal.MoodConceptKey = _instance;
                                                                                                                                }
                                                                                                                            }
                                                                                                                            else {
                                                                                                                                if ("classConcept".Equals(r.Value)) {
                                                                                                                                    r.Read();
                                                                                                                                    System.Nullable<System.Guid> _instance = ((System.Nullable<System.Guid>)(context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<System.Guid>), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("classConcept", context.JsonContext, _retVal, context))));
                                                                                                                                    if ((_instance != null)) {
                                                                                                                                        _retVal.ClassConceptKey = _instance;
                                                                                                                                    }
                                                                                                                                }
                                                                                                                                else {
                                                                                                                                    if ("stopTime".Equals(r.Value)) {
                                                                                                                                        r.Read();
                                                                                                                                        string _instance = ((string)(context.JsonContext.ReadElementUtil(r, typeof(string), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("stopTime", context.JsonContext, _retVal, context))));
                                                                                                                                        if ((_instance != null)) {
                                                                                                                                            _retVal.StopTimeXml = _instance;
                                                                                                                                        }
                                                                                                                                    }
                                                                                                                                    else {
                                                                                                                                        if ("startTime".Equals(r.Value)) {
                                                                                                                                            r.Read();
                                                                                                                                            string _instance = ((string)(context.JsonContext.ReadElementUtil(r, typeof(string), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("startTime", context.JsonContext, _retVal, context))));
                                                                                                                                            if ((_instance != null)) {
                                                                                                                                                _retVal.StartTimeXml = _instance;
                                                                                                                                            }
                                                                                                                                        }
                                                                                                                                        else {
                                                                                                                                            if ("actTime".Equals(r.Value)) {
                                                                                                                                                r.Read();
                                                                                                                                                string _instance = ((string)(context.JsonContext.ReadElementUtil(r, typeof(string), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("actTime", context.JsonContext, _retVal, context))));
                                                                                                                                                if ((_instance != null)) {
                                                                                                                                                    _retVal.ActTimeXml = _instance;
                                                                                                                                                }
                                                                                                                                            }
                                                                                                                                            else {
                                                                                                                                                if ("template".Equals(r.Value)) {
                                                                                                                                                    r.Read();
                                                                                                                                                    OpenIZ.Core.Model.DataTypes.TemplateDefinition _instance = ((OpenIZ.Core.Model.DataTypes.TemplateDefinition)(context.JsonContext.ReadElementUtil(r, typeof(OpenIZ.Core.Model.DataTypes.TemplateDefinition), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("template", context.JsonContext, _retVal, context))));
                                                                                                                                                    if ((_instance != null)) {
                                                                                                                                                        _retVal.Template = _instance;
                                                                                                                                                    }
                                                                                                                                                }
                                                                                                                                                else {
                                                                                                                                                    if ("isNegated".Equals(r.Value)) {
                                                                                                                                                        r.Read();
                                                                                                                                                        bool _instance = ((bool)(context.JsonContext.ReadElementUtil(r, typeof(bool), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("isNegated", context.JsonContext, _retVal, context))));
                                                                                                                                                        if ((_instance != null)) {
                                                                                                                                                            _retVal.IsNegated = _instance;
                                                                                                                                                        }
                                                                                                                                                    }
                                                                                                                                                    else {
                                                                                                                                                        if ("interpretationConceptModel".Equals(r.Value)) {
                                                                                                                                                            r.Read();
                                                                                                                                                            OpenIZ.Core.Model.DataTypes.Concept _instance = ((OpenIZ.Core.Model.DataTypes.Concept)(context.JsonContext.ReadElementUtil(r, typeof(OpenIZ.Core.Model.DataTypes.Concept), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("interpretationConceptModel", context.JsonContext, _retVal, context))));
                                                                                                                                                            if ((_instance != null)) {
                                                                                                                                                                _retVal.InterpretationConcept = _instance;
                                                                                                                                                            }
                                                                                                                                                        }
                                                                                                                                                        else {
                                                                                                                                                            if ("interpretationConcept".Equals(r.Value)) {
                                                                                                                                                                r.Read();
                                                                                                                                                                System.Nullable<System.Guid> _instance = ((System.Nullable<System.Guid>)(context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<System.Guid>), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("interpretationConcept", context.JsonContext, _retVal, context))));
                                                                                                                                                                if ((_instance != null)) {
                                                                                                                                                                    _retVal.InterpretationConceptKey = _instance;
                                                                                                                                                                }
                                                                                                                                                            }
                                                                                                                                                            else {
                                                                                                                                                                if ("$type".Equals(r.Value)) {
                                                                                                                                                                    System.Type _type = this.m_binder.BindToType("OpenIZ.Core.Model, Version=0.6.14.21496, Culture=neutral, PublicKeyToken=null", r.ReadAsString());
                                                                                                                                                                    if ((_type != typeof(OpenIZ.Core.Model.Acts.Observation))) {
                                                                                                                                                                        OpenIZ.Core.Model.Acts.Observation _nretVal = ((OpenIZ.Core.Model.Acts.Observation)(context.JsonContext.GetFormatter(_type).Deserialize(r, _type, context)));
                                                                                                                                                                        _nretVal.CopyObjectData(_retVal);
                                                                                                                                                                        return _nretVal;
                                                                                                                                                                    }
                                                                                                                                                                }
                                                                                                                                                                else {
                                                                                                                                                                    r.Skip();
                                                                                                                                                                }
                                                                                                                                                            }
                                                                                                                                                        }
                                                                                                                                                    }
                                                                                                                                                }
                                                                                                                                            }
                                                                                                                                        }
                                                                                                                                    }
                                                                                                                                }
                                                                                                                            }
                                                                                                                        }
                                                                                                                    }
                                                                                                                }
                                                                                                            }
                                                                                                        }
                                                                                                    }
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
                else {
                    if (((r.TokenType == Newtonsoft.Json.JsonToken.EndObject) 
                                && (r.Depth == _depth))) {
                        return _retVal;
                    }
                    else {
                        throw new Newtonsoft.Json.JsonSerializationException("JSON in invalid state");
                    }
                }
            }
            return _retVal;
        }
        
        public object FromSimpleValue(object o) {
            return null;
        }
        
        public object GetSimpleValue(object o) {
            return null;
        }
    }
    
    public class QuantityObservationViewModelSerializer : OpenIZ.Core.Applets.ViewModel.Json.IJsonViewModelTypeFormatter {
        
        private OpenIZ.Core.Model.Serialization.ModelSerializationBinder m_binder = new OpenIZ.Core.Model.Serialization.ModelSerializationBinder();
        
        private OpenIZ.Core.Diagnostics.Tracer m_tracer = OpenIZ.Core.Diagnostics.Tracer.GetTracer(typeof(QuantityObservationViewModelSerializer));
        
        public System.Type HandlesType {
            get {
                return typeof(OpenIZ.Core.Model.Acts.QuantityObservation);
            }
        }
        
        public void Serialize(Newtonsoft.Json.JsonWriter w, OpenIZ.Core.Model.IdentifiedData o, OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext context) {
            if ((o == null)) {
                throw new System.ArgumentNullException("o");
            }
            OpenIZ.Core.Model.Acts.QuantityObservation _strong = null;
            OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext _jsonContext = null;
            bool _loaded = false;
            try {
                _strong = ((OpenIZ.Core.Model.Acts.QuantityObservation)(o));
            }
            catch (System.Exception e) {
                this.m_tracer.TraceError(string.Format("Casting Error: {0}", e));
                throw new System.ArgumentException(string.Format("Invalid type {0} provided, expected {1}", o.GetType(), typeof(OpenIZ.Core.Model.Acts.QuantityObservation)));
            }
            if (context.ShouldSerialize("value")) {
                if ((_strong.Value == null)) {
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "value", _strong.Value, context);
                }
            }
            if (context.ShouldSerialize("unitOfMeasure")) {
                if ((_strong.UnitOfMeasureKey == null)) {
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "unitOfMeasure", _strong.UnitOfMeasureKey, context);
                }
            }
            if (context.ShouldSerialize("unitOfMeasureModel")) {
                if ((_strong.UnitOfMeasure == null)) {
                    if ((_strong.Key.HasValue && context.ShouldForceLoad("unitOfMeasureModel", _strong.Key.Value))) {
                        OpenIZ.Core.Model.DataTypes.Concept _delay = null;
                        _delay = context.JsonContext.LoadRelated<OpenIZ.Core.Model.DataTypes.Concept>(_strong.UnitOfMeasureKey);
                        _strong.UnitOfMeasure = _delay;
                        if ((_delay != null)) {
                            _loaded = true;
                            context.JsonContext.WritePropertyUtil(w, "unitOfMeasureModel", _strong.UnitOfMeasure, context);
                        }
                    }
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "unitOfMeasureModel", _strong.UnitOfMeasure, context);
                }
            }
            if (context.ShouldSerialize("interpretationConcept")) {
                if ((_strong.InterpretationConceptKey == null)) {
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "interpretationConcept", _strong.InterpretationConceptKey, context);
                }
            }
            if (context.ShouldSerialize("interpretationConceptModel")) {
                if ((_strong.InterpretationConcept == null)) {
                    if ((_strong.Key.HasValue && context.ShouldForceLoad("interpretationConceptModel", _strong.Key.Value))) {
                        OpenIZ.Core.Model.DataTypes.Concept _delay = null;
                        _delay = context.JsonContext.LoadRelated<OpenIZ.Core.Model.DataTypes.Concept>(_strong.InterpretationConceptKey);
                        _strong.InterpretationConcept = _delay;
                        if ((_delay != null)) {
                            _loaded = true;
                            context.JsonContext.WritePropertyUtil(w, "interpretationConceptModel", _strong.InterpretationConcept, context);
                        }
                    }
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "interpretationConceptModel", _strong.InterpretationConcept, context);
                }
            }
            if (context.ShouldSerialize("isNegated")) {
                if ((_strong.IsNegated == null)) {
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "isNegated", _strong.IsNegated, context);
                }
            }
            if (context.ShouldSerialize("template")) {
                if ((_strong.Template == null)) {
                    if ((_strong.Key.HasValue && context.ShouldForceLoad("template", _strong.Key.Value))) {
                        OpenIZ.Core.Model.DataTypes.TemplateDefinition _delay = null;
                    }
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "template", _strong.Template, context);
                }
            }
            if (context.ShouldSerialize("actTime")) {
                if ((_strong.ActTimeXml == null)) {
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "actTime", _strong.ActTimeXml, context);
                }
            }
            if (context.ShouldSerialize("startTime")) {
                if ((_strong.StartTimeXml == null)) {
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "startTime", _strong.StartTimeXml, context);
                }
            }
            if (context.ShouldSerialize("stopTime")) {
                if ((_strong.StopTimeXml == null)) {
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "stopTime", _strong.StopTimeXml, context);
                }
            }
            if (context.ShouldSerialize("classConcept")) {
                if ((_strong.ClassConceptKey == null)) {
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "classConcept", _strong.ClassConceptKey, context);
                }
            }
            if (context.ShouldSerialize("moodConcept")) {
                if ((_strong.MoodConceptKey == null)) {
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "moodConcept", _strong.MoodConceptKey, context);
                }
            }
            if (context.ShouldSerialize("reasonConcept")) {
                if ((_strong.ReasonConceptKey == null)) {
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "reasonConcept", _strong.ReasonConceptKey, context);
                }
            }
            if (context.ShouldSerialize("statusConcept")) {
                if ((_strong.StatusConceptKey == null)) {
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "statusConcept", _strong.StatusConceptKey, context);
                }
            }
            if (context.ShouldSerialize("typeConcept")) {
                if ((_strong.TypeConceptKey == null)) {
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "typeConcept", _strong.TypeConceptKey, context);
                }
            }
            if (context.ShouldSerialize("classConceptModel")) {
                if ((_strong.ClassConcept == null)) {
                    if ((_strong.Key.HasValue && context.ShouldForceLoad("classConceptModel", _strong.Key.Value))) {
                        OpenIZ.Core.Model.DataTypes.Concept _delay = null;
                        _delay = context.JsonContext.LoadRelated<OpenIZ.Core.Model.DataTypes.Concept>(_strong.ClassConceptKey);
                        _strong.ClassConcept = _delay;
                        if ((_delay != null)) {
                            _loaded = true;
                            context.JsonContext.WritePropertyUtil(w, "classConceptModel", _strong.ClassConcept, context);
                        }
                    }
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "classConceptModel", _strong.ClassConcept, context);
                }
            }
            if (context.ShouldSerialize("moodConceptModel")) {
                if ((_strong.MoodConcept == null)) {
                    if ((_strong.Key.HasValue && context.ShouldForceLoad("moodConceptModel", _strong.Key.Value))) {
                        OpenIZ.Core.Model.DataTypes.Concept _delay = null;
                        _delay = context.JsonContext.LoadRelated<OpenIZ.Core.Model.DataTypes.Concept>(_strong.MoodConceptKey);
                        _strong.MoodConcept = _delay;
                        if ((_delay != null)) {
                            _loaded = true;
                            context.JsonContext.WritePropertyUtil(w, "moodConceptModel", _strong.MoodConcept, context);
                        }
                    }
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "moodConceptModel", _strong.MoodConcept, context);
                }
            }
            if (context.ShouldSerialize("reasonConceptModel")) {
                if ((_strong.ReasonConcept == null)) {
                    if ((_strong.Key.HasValue && context.ShouldForceLoad("reasonConceptModel", _strong.Key.Value))) {
                        OpenIZ.Core.Model.DataTypes.Concept _delay = null;
                        _delay = context.JsonContext.LoadRelated<OpenIZ.Core.Model.DataTypes.Concept>(_strong.ReasonConceptKey);
                        _strong.ReasonConcept = _delay;
                        if ((_delay != null)) {
                            _loaded = true;
                            context.JsonContext.WritePropertyUtil(w, "reasonConceptModel", _strong.ReasonConcept, context);
                        }
                    }
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "reasonConceptModel", _strong.ReasonConcept, context);
                }
            }
            if (context.ShouldSerialize("statusConceptModel")) {
                if ((_strong.StatusConcept == null)) {
                    if ((_strong.Key.HasValue && context.ShouldForceLoad("statusConceptModel", _strong.Key.Value))) {
                        OpenIZ.Core.Model.DataTypes.Concept _delay = null;
                        _delay = context.JsonContext.LoadRelated<OpenIZ.Core.Model.DataTypes.Concept>(_strong.StatusConceptKey);
                        _strong.StatusConcept = _delay;
                        if ((_delay != null)) {
                            _loaded = true;
                            context.JsonContext.WritePropertyUtil(w, "statusConceptModel", _strong.StatusConcept, context);
                        }
                    }
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "statusConceptModel", _strong.StatusConcept, context);
                }
            }
            if (context.ShouldSerialize("typeConceptModel")) {
                if ((_strong.TypeConcept == null)) {
                    if ((_strong.Key.HasValue && context.ShouldForceLoad("typeConceptModel", _strong.Key.Value))) {
                        OpenIZ.Core.Model.DataTypes.Concept _delay = null;
                        _delay = context.JsonContext.LoadRelated<OpenIZ.Core.Model.DataTypes.Concept>(_strong.TypeConceptKey);
                        _strong.TypeConcept = _delay;
                        if ((_delay != null)) {
                            _loaded = true;
                            context.JsonContext.WritePropertyUtil(w, "typeConceptModel", _strong.TypeConcept, context);
                        }
                    }
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "typeConceptModel", _strong.TypeConcept, context);
                }
            }
            if (context.ShouldSerialize("identifier")) {
                if (((_strong.Identifiers == null) 
                            || (_strong.Identifiers.Count == 0))) {
                    if ((_strong.Key.HasValue && context.ShouldForceLoad("identifier", _strong.Key.Value))) {
                        OpenIZ.Core.Model.Collection.VersionedAssociationCollection<OpenIZ.Core.Model.DataTypes.ActIdentifier> _delay = null;
                        _delay = new OpenIZ.Core.Model.Collection.VersionedAssociationCollection<OpenIZ.Core.Model.DataTypes.ActIdentifier>(context.JsonContext.LoadCollection<OpenIZ.Core.Model.DataTypes.ActIdentifier>(_strong.Key.Value));
                        _strong.Identifiers = _delay;
                        if ((_delay.Count > 0)) {
                            _loaded = true;
                            context.JsonContext.WritePropertyUtil(w, "identifier", _strong.Identifiers, context);
                        }
                    }
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "identifier", _strong.Identifiers, context);
                }
            }
            if (context.ShouldSerialize("relationship")) {
                if (((_strong.Relationships == null) 
                            || (_strong.Relationships.Count == 0))) {
                    if ((_strong.Key.HasValue && context.ShouldForceLoad("relationship", _strong.Key.Value))) {
                        OpenIZ.Core.Model.Collection.VersionedAssociationCollection<OpenIZ.Core.Model.Acts.ActRelationship> _delay = null;
                        _delay = new OpenIZ.Core.Model.Collection.VersionedAssociationCollection<OpenIZ.Core.Model.Acts.ActRelationship>(context.JsonContext.LoadCollection<OpenIZ.Core.Model.Acts.ActRelationship>(_strong.Key.Value));
                        _strong.Relationships = _delay;
                        if ((_delay.Count > 0)) {
                            _loaded = true;
                            context.JsonContext.WritePropertyUtil(w, "relationship", _strong.Relationships, context);
                        }
                    }
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "relationship", _strong.Relationships, context);
                }
            }
            if (context.ShouldSerialize("policy")) {
                if (((_strong.Policies == null) 
                            || (_strong.Policies.Count == 0))) {
                    if ((_strong.Key.HasValue && context.ShouldForceLoad("policy", _strong.Key.Value))) {
                        OpenIZ.Core.Model.Collection.SimpleAssociationCollection<OpenIZ.Core.Model.Security.SecurityPolicyInstance> _delay = null;
                        _delay = new OpenIZ.Core.Model.Collection.SimpleAssociationCollection<OpenIZ.Core.Model.Security.SecurityPolicyInstance>(context.JsonContext.LoadCollection<OpenIZ.Core.Model.Security.SecurityPolicyInstance>(_strong.Key.Value));
                        _strong.Policies = _delay;
                        if ((_delay.Count > 0)) {
                            _loaded = true;
                            context.JsonContext.WritePropertyUtil(w, "policy", _strong.Policies, context);
                        }
                    }
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "policy", _strong.Policies, context);
                }
            }
            if (context.ShouldSerialize("extension")) {
                if (((_strong.Extensions == null) 
                            || (_strong.Extensions.Count == 0))) {
                    if ((_strong.Key.HasValue && context.ShouldForceLoad("extension", _strong.Key.Value))) {
                        OpenIZ.Core.Model.Collection.VersionedAssociationCollection<OpenIZ.Core.Model.DataTypes.ActExtension> _delay = null;
                        _delay = new OpenIZ.Core.Model.Collection.VersionedAssociationCollection<OpenIZ.Core.Model.DataTypes.ActExtension>(context.JsonContext.LoadCollection<OpenIZ.Core.Model.DataTypes.ActExtension>(_strong.Key.Value));
                        _strong.Extensions = _delay;
                        if ((_delay.Count > 0)) {
                            _loaded = true;
                            context.JsonContext.WritePropertyUtil(w, "extension", _strong.Extensions, context);
                        }
                    }
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "extension", _strong.Extensions, context);
                }
            }
            if (context.ShouldSerialize("note")) {
                if (((_strong.Notes == null) 
                            || (_strong.Notes.Count == 0))) {
                    if ((_strong.Key.HasValue && context.ShouldForceLoad("note", _strong.Key.Value))) {
                        OpenIZ.Core.Model.Collection.VersionedAssociationCollection<OpenIZ.Core.Model.DataTypes.ActNote> _delay = null;
                        _delay = new OpenIZ.Core.Model.Collection.VersionedAssociationCollection<OpenIZ.Core.Model.DataTypes.ActNote>(context.JsonContext.LoadCollection<OpenIZ.Core.Model.DataTypes.ActNote>(_strong.Key.Value));
                        _strong.Notes = _delay;
                        if ((_delay.Count > 0)) {
                            _loaded = true;
                            context.JsonContext.WritePropertyUtil(w, "note", _strong.Notes, context);
                        }
                    }
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "note", _strong.Notes, context);
                }
            }
            if (context.ShouldSerialize("tag")) {
                if (((_strong.Tags == null) 
                            || (_strong.Tags.Count == 0))) {
                    if ((_strong.Key.HasValue && context.ShouldForceLoad("tag", _strong.Key.Value))) {
                        OpenIZ.Core.Model.Collection.SimpleAssociationCollection<OpenIZ.Core.Model.DataTypes.ActTag> _delay = null;
                        _delay = new OpenIZ.Core.Model.Collection.SimpleAssociationCollection<OpenIZ.Core.Model.DataTypes.ActTag>(context.JsonContext.LoadCollection<OpenIZ.Core.Model.DataTypes.ActTag>(_strong.Key.Value));
                        _strong.Tags = _delay;
                        if ((_delay.Count > 0)) {
                            _loaded = true;
                            context.JsonContext.WritePropertyUtil(w, "tag", _strong.Tags, context);
                        }
                    }
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "tag", _strong.Tags, context);
                }
            }
            if (context.ShouldSerialize("protocolsModel")) {
                if (((_strong.Protocols == null) 
                            || (_strong.Protocols.Count == 0))) {
                    if ((_strong.Key.HasValue && context.ShouldForceLoad("protocolsModel", _strong.Key.Value))) {
                        OpenIZ.Core.Model.Collection.VersionedAssociationCollection<OpenIZ.Core.Model.Acts.ActProtocol> _delay = null;
                        _delay = new OpenIZ.Core.Model.Collection.VersionedAssociationCollection<OpenIZ.Core.Model.Acts.ActProtocol>(context.JsonContext.LoadCollection<OpenIZ.Core.Model.Acts.ActProtocol>(_strong.Key.Value));
                        _strong.Protocols = _delay;
                        if ((_delay.Count > 0)) {
                            _loaded = true;
                            context.JsonContext.WritePropertyUtil(w, "protocolsModel", _strong.Protocols, context);
                        }
                    }
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "protocolsModel", _strong.Protocols, context);
                }
            }
            if (context.ShouldSerialize("participation")) {
                if (((_strong.Participations == null) 
                            || (_strong.Participations.Count == 0))) {
                    if ((_strong.Key.HasValue && context.ShouldForceLoad("participation", _strong.Key.Value))) {
                        OpenIZ.Core.Model.Collection.VersionedAssociationCollection<OpenIZ.Core.Model.Acts.ActParticipation> _delay = null;
                        _delay = new OpenIZ.Core.Model.Collection.VersionedAssociationCollection<OpenIZ.Core.Model.Acts.ActParticipation>(context.JsonContext.LoadCollection<OpenIZ.Core.Model.Acts.ActParticipation>(_strong.Key.Value));
                        _strong.Participations = _delay;
                        if ((_delay.Count > 0)) {
                            _loaded = true;
                            context.JsonContext.WritePropertyUtil(w, "participation", _strong.Participations, context);
                        }
                    }
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "participation", _strong.Participations, context);
                }
            }
            if (context.ShouldSerialize("etag")) {
                if ((_strong.Tag == null)) {
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "etag", _strong.Tag, context);
                }
            }
            if (context.ShouldSerialize("previousVersion")) {
                if ((_strong.PreviousVersionKey == null)) {
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "previousVersion", _strong.PreviousVersionKey, context);
                }
            }
            if (context.ShouldSerialize("version")) {
                if ((_strong.VersionKey == null)) {
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "version", _strong.VersionKey, context);
                }
            }
            if (context.ShouldSerialize("sequence")) {
                if ((_strong.VersionSequence == null)) {
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "sequence", _strong.VersionSequence, context);
                }
            }
            if (context.ShouldSerialize("creationTimeModel")) {
                if ((_strong.CreationTime == null)) {
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "creationTimeModel", _strong.CreationTime, context);
                }
            }
            if (context.ShouldSerialize("creationTime")) {
                if ((_strong.CreationTimeXml == null)) {
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "creationTime", _strong.CreationTimeXml, context);
                }
            }
            if (context.ShouldSerialize("obsoletionTimeModel")) {
                if ((_strong.ObsoletionTime == null)) {
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "obsoletionTimeModel", _strong.ObsoletionTime, context);
                }
            }
            if (context.ShouldSerialize("obsoletionTime")) {
                if ((_strong.ObsoletionTimeXml == null)) {
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "obsoletionTime", _strong.ObsoletionTimeXml, context);
                }
            }
            if (context.ShouldSerialize("createdBy")) {
                if ((_strong.CreatedByKey == null)) {
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "createdBy", _strong.CreatedByKey, context);
                }
            }
            if (context.ShouldSerialize("obsoletedBy")) {
                if ((_strong.ObsoletedByKey == null)) {
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "obsoletedBy", _strong.ObsoletedByKey, context);
                }
            }
            if (context.ShouldSerialize("id")) {
                if ((_strong.Key == null)) {
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "id", _strong.Key, context);
                }
            }
            if (((_loaded && _strong.Key.HasValue) 
                        && _strong.VersionKey.HasValue)) {
                ((OpenIZ.Core.Services.IDataCachingService)(OpenIZ.Core.ApplicationServiceContext.Current.GetService(typeof(OpenIZ.Core.Services.IDataCachingService)))).Add(_strong);
            }
        }
        
        public object Deserialize(Newtonsoft.Json.JsonReader r, System.Type asType, OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext context) {
            OpenIZ.Core.Model.Acts.QuantityObservation _retVal = new OpenIZ.Core.Model.Acts.QuantityObservation();
            int _depth = r.Depth;
            if ((r.TokenType != Newtonsoft.Json.JsonToken.StartObject)) {
                _depth = (_depth - 1);
            }
            for (
            ; r.Read(); 
            ) {
                if ((r.TokenType == Newtonsoft.Json.JsonToken.PropertyName)) {
                    if ("id".Equals(r.Value)) {
                        r.Read();
                        System.Nullable<System.Guid> _instance = ((System.Nullable<System.Guid>)(context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<System.Guid>), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("id", context.JsonContext, _retVal, context))));
                        if ((_instance != null)) {
                            _retVal.Key = _instance;
                        }
                    }
                    else {
                        if ("obsoletedBy".Equals(r.Value)) {
                            r.Read();
                            System.Nullable<System.Guid> _instance = ((System.Nullable<System.Guid>)(context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<System.Guid>), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("obsoletedBy", context.JsonContext, _retVal, context))));
                            if ((_instance != null)) {
                                _retVal.ObsoletedByKey = _instance;
                            }
                        }
                        else {
                            if ("createdBy".Equals(r.Value)) {
                                r.Read();
                                System.Nullable<System.Guid> _instance = ((System.Nullable<System.Guid>)(context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<System.Guid>), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("createdBy", context.JsonContext, _retVal, context))));
                                if ((_instance != null)) {
                                    _retVal.CreatedByKey = _instance;
                                }
                            }
                            else {
                                if ("obsoletionTime".Equals(r.Value)) {
                                    r.Read();
                                    string _instance = ((string)(context.JsonContext.ReadElementUtil(r, typeof(string), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("obsoletionTime", context.JsonContext, _retVal, context))));
                                    if ((_instance != null)) {
                                        _retVal.ObsoletionTimeXml = _instance;
                                    }
                                }
                                else {
                                    if ("obsoletionTimeModel".Equals(r.Value)) {
                                        r.Read();
                                        System.Nullable<System.DateTimeOffset> _instance = ((System.Nullable<System.DateTimeOffset>)(context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<System.DateTimeOffset>), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("obsoletionTimeModel", context.JsonContext, _retVal, context))));
                                        if ((_instance != null)) {
                                            _retVal.ObsoletionTime = _instance;
                                        }
                                    }
                                    else {
                                        if ("creationTime".Equals(r.Value)) {
                                            r.Read();
                                            string _instance = ((string)(context.JsonContext.ReadElementUtil(r, typeof(string), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("creationTime", context.JsonContext, _retVal, context))));
                                            if ((_instance != null)) {
                                                _retVal.CreationTimeXml = _instance;
                                            }
                                        }
                                        else {
                                            if ("creationTimeModel".Equals(r.Value)) {
                                                r.Read();
                                                System.DateTimeOffset _instance = ((System.DateTimeOffset)(context.JsonContext.ReadElementUtil(r, typeof(System.DateTimeOffset), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("creationTimeModel", context.JsonContext, _retVal, context))));
                                                if ((_instance != null)) {
                                                    _retVal.CreationTime = _instance;
                                                }
                                            }
                                            else {
                                                if ("sequence".Equals(r.Value)) {
                                                    r.Read();
                                                    System.Nullable<decimal> _instance = ((System.Nullable<decimal>)(context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<decimal>), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("sequence", context.JsonContext, _retVal, context))));
                                                    if ((_instance != null)) {
                                                        _retVal.VersionSequence = _instance;
                                                    }
                                                }
                                                else {
                                                    if ("version".Equals(r.Value)) {
                                                        r.Read();
                                                        System.Nullable<System.Guid> _instance = ((System.Nullable<System.Guid>)(context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<System.Guid>), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("version", context.JsonContext, _retVal, context))));
                                                        if ((_instance != null)) {
                                                            _retVal.VersionKey = _instance;
                                                        }
                                                    }
                                                    else {
                                                        if ("previousVersion".Equals(r.Value)) {
                                                            r.Read();
                                                            System.Nullable<System.Guid> _instance = ((System.Nullable<System.Guid>)(context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<System.Guid>), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("previousVersion", context.JsonContext, _retVal, context))));
                                                            if ((_instance != null)) {
                                                                _retVal.PreviousVersionKey = _instance;
                                                            }
                                                        }
                                                        else {
                                                            if ("participation".Equals(r.Value)) {
                                                                r.Read();
                                                                OpenIZ.Core.Model.Collection.VersionedAssociationCollection<OpenIZ.Core.Model.Acts.ActParticipation> _instance = ((OpenIZ.Core.Model.Collection.VersionedAssociationCollection<OpenIZ.Core.Model.Acts.ActParticipation>)(context.JsonContext.ReadElementUtil(r, typeof(OpenIZ.Core.Model.Collection.VersionedAssociationCollection<OpenIZ.Core.Model.Acts.ActParticipation>), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("participation", context.JsonContext, _retVal, context))));
                                                                if ((_instance != null)) {
                                                                    _retVal.Participations = _instance;
                                                                }
                                                            }
                                                            else {
                                                                if ("protocolsModel".Equals(r.Value)) {
                                                                    r.Read();
                                                                    OpenIZ.Core.Model.Collection.VersionedAssociationCollection<OpenIZ.Core.Model.Acts.ActProtocol> _instance = ((OpenIZ.Core.Model.Collection.VersionedAssociationCollection<OpenIZ.Core.Model.Acts.ActProtocol>)(context.JsonContext.ReadElementUtil(r, typeof(OpenIZ.Core.Model.Collection.VersionedAssociationCollection<OpenIZ.Core.Model.Acts.ActProtocol>), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("protocolsModel", context.JsonContext, _retVal, context))));
                                                                    if ((_instance != null)) {
                                                                        _retVal.Protocols = _instance;
                                                                    }
                                                                }
                                                                else {
                                                                    if ("tag".Equals(r.Value)) {
                                                                        r.Read();
                                                                        OpenIZ.Core.Model.Collection.SimpleAssociationCollection<OpenIZ.Core.Model.DataTypes.ActTag> _instance = ((OpenIZ.Core.Model.Collection.SimpleAssociationCollection<OpenIZ.Core.Model.DataTypes.ActTag>)(context.JsonContext.ReadElementUtil(r, typeof(OpenIZ.Core.Model.Collection.SimpleAssociationCollection<OpenIZ.Core.Model.DataTypes.ActTag>), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("tag", context.JsonContext, _retVal, context))));
                                                                        if ((_instance != null)) {
                                                                            _retVal.Tags = _instance;
                                                                        }
                                                                    }
                                                                    else {
                                                                        if ("note".Equals(r.Value)) {
                                                                            r.Read();
                                                                            OpenIZ.Core.Model.Collection.VersionedAssociationCollection<OpenIZ.Core.Model.DataTypes.ActNote> _instance = ((OpenIZ.Core.Model.Collection.VersionedAssociationCollection<OpenIZ.Core.Model.DataTypes.ActNote>)(context.JsonContext.ReadElementUtil(r, typeof(OpenIZ.Core.Model.Collection.VersionedAssociationCollection<OpenIZ.Core.Model.DataTypes.ActNote>), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("note", context.JsonContext, _retVal, context))));
                                                                            if ((_instance != null)) {
                                                                                _retVal.Notes = _instance;
                                                                            }
                                                                        }
                                                                        else {
                                                                            if ("extension".Equals(r.Value)) {
                                                                                r.Read();
                                                                                OpenIZ.Core.Model.Collection.VersionedAssociationCollection<OpenIZ.Core.Model.DataTypes.ActExtension> _instance = ((OpenIZ.Core.Model.Collection.VersionedAssociationCollection<OpenIZ.Core.Model.DataTypes.ActExtension>)(context.JsonContext.ReadElementUtil(r, typeof(OpenIZ.Core.Model.Collection.VersionedAssociationCollection<OpenIZ.Core.Model.DataTypes.ActExtension>), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("extension", context.JsonContext, _retVal, context))));
                                                                                if ((_instance != null)) {
                                                                                    _retVal.Extensions = _instance;
                                                                                }
                                                                            }
                                                                            else {
                                                                                if ("policy".Equals(r.Value)) {
                                                                                    r.Read();
                                                                                    OpenIZ.Core.Model.Collection.SimpleAssociationCollection<OpenIZ.Core.Model.Security.SecurityPolicyInstance> _instance = ((OpenIZ.Core.Model.Collection.SimpleAssociationCollection<OpenIZ.Core.Model.Security.SecurityPolicyInstance>)(context.JsonContext.ReadElementUtil(r, typeof(OpenIZ.Core.Model.Collection.SimpleAssociationCollection<OpenIZ.Core.Model.Security.SecurityPolicyInstance>), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("policy", context.JsonContext, _retVal, context))));
                                                                                    if ((_instance != null)) {
                                                                                        _retVal.Policies = _instance;
                                                                                    }
                                                                                }
                                                                                else {
                                                                                    if ("relationship".Equals(r.Value)) {
                                                                                        r.Read();
                                                                                        OpenIZ.Core.Model.Collection.VersionedAssociationCollection<OpenIZ.Core.Model.Acts.ActRelationship> _instance = ((OpenIZ.Core.Model.Collection.VersionedAssociationCollection<OpenIZ.Core.Model.Acts.ActRelationship>)(context.JsonContext.ReadElementUtil(r, typeof(OpenIZ.Core.Model.Collection.VersionedAssociationCollection<OpenIZ.Core.Model.Acts.ActRelationship>), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("relationship", context.JsonContext, _retVal, context))));
                                                                                        if ((_instance != null)) {
                                                                                            _retVal.Relationships = _instance;
                                                                                        }
                                                                                    }
                                                                                    else {
                                                                                        if ("identifier".Equals(r.Value)) {
                                                                                            r.Read();
                                                                                            OpenIZ.Core.Model.Collection.VersionedAssociationCollection<OpenIZ.Core.Model.DataTypes.ActIdentifier> _instance = ((OpenIZ.Core.Model.Collection.VersionedAssociationCollection<OpenIZ.Core.Model.DataTypes.ActIdentifier>)(context.JsonContext.ReadElementUtil(r, typeof(OpenIZ.Core.Model.Collection.VersionedAssociationCollection<OpenIZ.Core.Model.DataTypes.ActIdentifier>), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("identifier", context.JsonContext, _retVal, context))));
                                                                                            if ((_instance != null)) {
                                                                                                _retVal.Identifiers = _instance;
                                                                                            }
                                                                                        }
                                                                                        else {
                                                                                            if ("typeConceptModel".Equals(r.Value)) {
                                                                                                r.Read();
                                                                                                OpenIZ.Core.Model.DataTypes.Concept _instance = ((OpenIZ.Core.Model.DataTypes.Concept)(context.JsonContext.ReadElementUtil(r, typeof(OpenIZ.Core.Model.DataTypes.Concept), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("typeConceptModel", context.JsonContext, _retVal, context))));
                                                                                                if ((_instance != null)) {
                                                                                                    _retVal.TypeConcept = _instance;
                                                                                                }
                                                                                            }
                                                                                            else {
                                                                                                if ("statusConceptModel".Equals(r.Value)) {
                                                                                                    r.Read();
                                                                                                    OpenIZ.Core.Model.DataTypes.Concept _instance = ((OpenIZ.Core.Model.DataTypes.Concept)(context.JsonContext.ReadElementUtil(r, typeof(OpenIZ.Core.Model.DataTypes.Concept), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("statusConceptModel", context.JsonContext, _retVal, context))));
                                                                                                    if ((_instance != null)) {
                                                                                                        _retVal.StatusConcept = _instance;
                                                                                                    }
                                                                                                }
                                                                                                else {
                                                                                                    if ("reasonConceptModel".Equals(r.Value)) {
                                                                                                        r.Read();
                                                                                                        OpenIZ.Core.Model.DataTypes.Concept _instance = ((OpenIZ.Core.Model.DataTypes.Concept)(context.JsonContext.ReadElementUtil(r, typeof(OpenIZ.Core.Model.DataTypes.Concept), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("reasonConceptModel", context.JsonContext, _retVal, context))));
                                                                                                        if ((_instance != null)) {
                                                                                                            _retVal.ReasonConcept = _instance;
                                                                                                        }
                                                                                                    }
                                                                                                    else {
                                                                                                        if ("moodConceptModel".Equals(r.Value)) {
                                                                                                            r.Read();
                                                                                                            OpenIZ.Core.Model.DataTypes.Concept _instance = ((OpenIZ.Core.Model.DataTypes.Concept)(context.JsonContext.ReadElementUtil(r, typeof(OpenIZ.Core.Model.DataTypes.Concept), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("moodConceptModel", context.JsonContext, _retVal, context))));
                                                                                                            if ((_instance != null)) {
                                                                                                                _retVal.MoodConcept = _instance;
                                                                                                            }
                                                                                                        }
                                                                                                        else {
                                                                                                            if ("classConceptModel".Equals(r.Value)) {
                                                                                                                r.Read();
                                                                                                                OpenIZ.Core.Model.DataTypes.Concept _instance = ((OpenIZ.Core.Model.DataTypes.Concept)(context.JsonContext.ReadElementUtil(r, typeof(OpenIZ.Core.Model.DataTypes.Concept), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("classConceptModel", context.JsonContext, _retVal, context))));
                                                                                                                if ((_instance != null)) {
                                                                                                                    _retVal.ClassConcept = _instance;
                                                                                                                }
                                                                                                            }
                                                                                                            else {
                                                                                                                if ("typeConcept".Equals(r.Value)) {
                                                                                                                    r.Read();
                                                                                                                    System.Nullable<System.Guid> _instance = ((System.Nullable<System.Guid>)(context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<System.Guid>), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("typeConcept", context.JsonContext, _retVal, context))));
                                                                                                                    if ((_instance != null)) {
                                                                                                                        _retVal.TypeConceptKey = _instance;
                                                                                                                    }
                                                                                                                }
                                                                                                                else {
                                                                                                                    if ("statusConcept".Equals(r.Value)) {
                                                                                                                        r.Read();
                                                                                                                        System.Nullable<System.Guid> _instance = ((System.Nullable<System.Guid>)(context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<System.Guid>), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("statusConcept", context.JsonContext, _retVal, context))));
                                                                                                                        if ((_instance != null)) {
                                                                                                                            _retVal.StatusConceptKey = _instance;
                                                                                                                        }
                                                                                                                    }
                                                                                                                    else {
                                                                                                                        if ("reasonConcept".Equals(r.Value)) {
                                                                                                                            r.Read();
                                                                                                                            System.Nullable<System.Guid> _instance = ((System.Nullable<System.Guid>)(context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<System.Guid>), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("reasonConcept", context.JsonContext, _retVal, context))));
                                                                                                                            if ((_instance != null)) {
                                                                                                                                _retVal.ReasonConceptKey = _instance;
                                                                                                                            }
                                                                                                                        }
                                                                                                                        else {
                                                                                                                            if ("moodConcept".Equals(r.Value)) {
                                                                                                                                r.Read();
                                                                                                                                System.Nullable<System.Guid> _instance = ((System.Nullable<System.Guid>)(context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<System.Guid>), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("moodConcept", context.JsonContext, _retVal, context))));
                                                                                                                                if ((_instance != null)) {
                                                                                                                                    _retVal.MoodConceptKey = _instance;
                                                                                                                                }
                                                                                                                            }
                                                                                                                            else {
                                                                                                                                if ("classConcept".Equals(r.Value)) {
                                                                                                                                    r.Read();
                                                                                                                                    System.Nullable<System.Guid> _instance = ((System.Nullable<System.Guid>)(context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<System.Guid>), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("classConcept", context.JsonContext, _retVal, context))));
                                                                                                                                    if ((_instance != null)) {
                                                                                                                                        _retVal.ClassConceptKey = _instance;
                                                                                                                                    }
                                                                                                                                }
                                                                                                                                else {
                                                                                                                                    if ("stopTime".Equals(r.Value)) {
                                                                                                                                        r.Read();
                                                                                                                                        string _instance = ((string)(context.JsonContext.ReadElementUtil(r, typeof(string), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("stopTime", context.JsonContext, _retVal, context))));
                                                                                                                                        if ((_instance != null)) {
                                                                                                                                            _retVal.StopTimeXml = _instance;
                                                                                                                                        }
                                                                                                                                    }
                                                                                                                                    else {
                                                                                                                                        if ("startTime".Equals(r.Value)) {
                                                                                                                                            r.Read();
                                                                                                                                            string _instance = ((string)(context.JsonContext.ReadElementUtil(r, typeof(string), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("startTime", context.JsonContext, _retVal, context))));
                                                                                                                                            if ((_instance != null)) {
                                                                                                                                                _retVal.StartTimeXml = _instance;
                                                                                                                                            }
                                                                                                                                        }
                                                                                                                                        else {
                                                                                                                                            if ("actTime".Equals(r.Value)) {
                                                                                                                                                r.Read();
                                                                                                                                                string _instance = ((string)(context.JsonContext.ReadElementUtil(r, typeof(string), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("actTime", context.JsonContext, _retVal, context))));
                                                                                                                                                if ((_instance != null)) {
                                                                                                                                                    _retVal.ActTimeXml = _instance;
                                                                                                                                                }
                                                                                                                                            }
                                                                                                                                            else {
                                                                                                                                                if ("template".Equals(r.Value)) {
                                                                                                                                                    r.Read();
                                                                                                                                                    OpenIZ.Core.Model.DataTypes.TemplateDefinition _instance = ((OpenIZ.Core.Model.DataTypes.TemplateDefinition)(context.JsonContext.ReadElementUtil(r, typeof(OpenIZ.Core.Model.DataTypes.TemplateDefinition), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("template", context.JsonContext, _retVal, context))));
                                                                                                                                                    if ((_instance != null)) {
                                                                                                                                                        _retVal.Template = _instance;
                                                                                                                                                    }
                                                                                                                                                }
                                                                                                                                                else {
                                                                                                                                                    if ("isNegated".Equals(r.Value)) {
                                                                                                                                                        r.Read();
                                                                                                                                                        bool _instance = ((bool)(context.JsonContext.ReadElementUtil(r, typeof(bool), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("isNegated", context.JsonContext, _retVal, context))));
                                                                                                                                                        if ((_instance != null)) {
                                                                                                                                                            _retVal.IsNegated = _instance;
                                                                                                                                                        }
                                                                                                                                                    }
                                                                                                                                                    else {
                                                                                                                                                        if ("interpretationConceptModel".Equals(r.Value)) {
                                                                                                                                                            r.Read();
                                                                                                                                                            OpenIZ.Core.Model.DataTypes.Concept _instance = ((OpenIZ.Core.Model.DataTypes.Concept)(context.JsonContext.ReadElementUtil(r, typeof(OpenIZ.Core.Model.DataTypes.Concept), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("interpretationConceptModel", context.JsonContext, _retVal, context))));
                                                                                                                                                            if ((_instance != null)) {
                                                                                                                                                                _retVal.InterpretationConcept = _instance;
                                                                                                                                                            }
                                                                                                                                                        }
                                                                                                                                                        else {
                                                                                                                                                            if ("interpretationConcept".Equals(r.Value)) {
                                                                                                                                                                r.Read();
                                                                                                                                                                System.Nullable<System.Guid> _instance = ((System.Nullable<System.Guid>)(context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<System.Guid>), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("interpretationConcept", context.JsonContext, _retVal, context))));
                                                                                                                                                                if ((_instance != null)) {
                                                                                                                                                                    _retVal.InterpretationConceptKey = _instance;
                                                                                                                                                                }
                                                                                                                                                            }
                                                                                                                                                            else {
                                                                                                                                                                if ("unitOfMeasureModel".Equals(r.Value)) {
                                                                                                                                                                    r.Read();
                                                                                                                                                                    OpenIZ.Core.Model.DataTypes.Concept _instance = ((OpenIZ.Core.Model.DataTypes.Concept)(context.JsonContext.ReadElementUtil(r, typeof(OpenIZ.Core.Model.DataTypes.Concept), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("unitOfMeasureModel", context.JsonContext, _retVal, context))));
                                                                                                                                                                    if ((_instance != null)) {
                                                                                                                                                                        _retVal.UnitOfMeasure = _instance;
                                                                                                                                                                    }
                                                                                                                                                                }
                                                                                                                                                                else {
                                                                                                                                                                    if ("unitOfMeasure".Equals(r.Value)) {
                                                                                                                                                                        r.Read();
                                                                                                                                                                        System.Nullable<System.Guid> _instance = ((System.Nullable<System.Guid>)(context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<System.Guid>), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("unitOfMeasure", context.JsonContext, _retVal, context))));
                                                                                                                                                                        if ((_instance != null)) {
                                                                                                                                                                            _retVal.UnitOfMeasureKey = _instance;
                                                                                                                                                                        }
                                                                                                                                                                    }
                                                                                                                                                                    else {
                                                                                                                                                                        if ("value".Equals(r.Value)) {
                                                                                                                                                                            r.Read();
                                                                                                                                                                            decimal _instance = ((decimal)(context.JsonContext.ReadElementUtil(r, typeof(decimal), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("value", context.JsonContext, _retVal, context))));
                                                                                                                                                                            if ((_instance != null)) {
                                                                                                                                                                                _retVal.Value = _instance;
                                                                                                                                                                            }
                                                                                                                                                                        }
                                                                                                                                                                        else {
                                                                                                                                                                            if ("$type".Equals(r.Value)) {
                                                                                                                                                                                System.Type _type = this.m_binder.BindToType("OpenIZ.Core.Model, Version=0.6.14.21496, Culture=neutral, PublicKeyToken=null", r.ReadAsString());
                                                                                                                                                                                if ((_type != typeof(OpenIZ.Core.Model.Acts.QuantityObservation))) {
                                                                                                                                                                                    OpenIZ.Core.Model.Acts.QuantityObservation _nretVal = ((OpenIZ.Core.Model.Acts.QuantityObservation)(context.JsonContext.GetFormatter(_type).Deserialize(r, _type, context)));
                                                                                                                                                                                    _nretVal.CopyObjectData(_retVal);
                                                                                                                                                                                    return _nretVal;
                                                                                                                                                                                }
                                                                                                                                                                            }
                                                                                                                                                                            else {
                                                                                                                                                                                r.Skip();
                                                                                                                                                                            }
                                                                                                                                                                        }
                                                                                                                                                                    }
                                                                                                                                                                }
                                                                                                                                                            }
                                                                                                                                                        }
                                                                                                                                                    }
                                                                                                                                                }
                                                                                                                                            }
                                                                                                                                        }
                                                                                                                                    }
                                                                                                                                }
                                                                                                                            }
                                                                                                                        }
                                                                                                                    }
                                                                                                                }
                                                                                                            }
                                                                                                        }
                                                                                                    }
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
                else {
                    if (((r.TokenType == Newtonsoft.Json.JsonToken.EndObject) 
                                && (r.Depth == _depth))) {
                        return _retVal;
                    }
                    else {
                        throw new Newtonsoft.Json.JsonSerializationException("JSON in invalid state");
                    }
                }
            }
            return _retVal;
        }
        
        public object FromSimpleValue(object o) {
            return null;
        }
        
        public object GetSimpleValue(object o) {
            return null;
        }
    }
    
    public class TextObservationViewModelSerializer : OpenIZ.Core.Applets.ViewModel.Json.IJsonViewModelTypeFormatter {
        
        private OpenIZ.Core.Model.Serialization.ModelSerializationBinder m_binder = new OpenIZ.Core.Model.Serialization.ModelSerializationBinder();
        
        private OpenIZ.Core.Diagnostics.Tracer m_tracer = OpenIZ.Core.Diagnostics.Tracer.GetTracer(typeof(TextObservationViewModelSerializer));
        
        public System.Type HandlesType {
            get {
                return typeof(OpenIZ.Core.Model.Acts.TextObservation);
            }
        }
        
        public void Serialize(Newtonsoft.Json.JsonWriter w, OpenIZ.Core.Model.IdentifiedData o, OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext context) {
            if ((o == null)) {
                throw new System.ArgumentNullException("o");
            }
            OpenIZ.Core.Model.Acts.TextObservation _strong = null;
            OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext _jsonContext = null;
            bool _loaded = false;
            try {
                _strong = ((OpenIZ.Core.Model.Acts.TextObservation)(o));
            }
            catch (System.Exception e) {
                this.m_tracer.TraceError(string.Format("Casting Error: {0}", e));
                throw new System.ArgumentException(string.Format("Invalid type {0} provided, expected {1}", o.GetType(), typeof(OpenIZ.Core.Model.Acts.TextObservation)));
            }
            if (context.ShouldSerialize("value")) {
                if ((_strong.Value == null)) {
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "value", _strong.Value, context);
                }
            }
            if (context.ShouldSerialize("interpretationConcept")) {
                if ((_strong.InterpretationConceptKey == null)) {
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "interpretationConcept", _strong.InterpretationConceptKey, context);
                }
            }
            if (context.ShouldSerialize("interpretationConceptModel")) {
                if ((_strong.InterpretationConcept == null)) {
                    if ((_strong.Key.HasValue && context.ShouldForceLoad("interpretationConceptModel", _strong.Key.Value))) {
                        OpenIZ.Core.Model.DataTypes.Concept _delay = null;
                        _delay = context.JsonContext.LoadRelated<OpenIZ.Core.Model.DataTypes.Concept>(_strong.InterpretationConceptKey);
                        _strong.InterpretationConcept = _delay;
                        if ((_delay != null)) {
                            _loaded = true;
                            context.JsonContext.WritePropertyUtil(w, "interpretationConceptModel", _strong.InterpretationConcept, context);
                        }
                    }
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "interpretationConceptModel", _strong.InterpretationConcept, context);
                }
            }
            if (context.ShouldSerialize("isNegated")) {
                if ((_strong.IsNegated == null)) {
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "isNegated", _strong.IsNegated, context);
                }
            }
            if (context.ShouldSerialize("template")) {
                if ((_strong.Template == null)) {
                    if ((_strong.Key.HasValue && context.ShouldForceLoad("template", _strong.Key.Value))) {
                        OpenIZ.Core.Model.DataTypes.TemplateDefinition _delay = null;
                    }
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "template", _strong.Template, context);
                }
            }
            if (context.ShouldSerialize("actTime")) {
                if ((_strong.ActTimeXml == null)) {
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "actTime", _strong.ActTimeXml, context);
                }
            }
            if (context.ShouldSerialize("startTime")) {
                if ((_strong.StartTimeXml == null)) {
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "startTime", _strong.StartTimeXml, context);
                }
            }
            if (context.ShouldSerialize("stopTime")) {
                if ((_strong.StopTimeXml == null)) {
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "stopTime", _strong.StopTimeXml, context);
                }
            }
            if (context.ShouldSerialize("classConcept")) {
                if ((_strong.ClassConceptKey == null)) {
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "classConcept", _strong.ClassConceptKey, context);
                }
            }
            if (context.ShouldSerialize("moodConcept")) {
                if ((_strong.MoodConceptKey == null)) {
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "moodConcept", _strong.MoodConceptKey, context);
                }
            }
            if (context.ShouldSerialize("reasonConcept")) {
                if ((_strong.ReasonConceptKey == null)) {
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "reasonConcept", _strong.ReasonConceptKey, context);
                }
            }
            if (context.ShouldSerialize("statusConcept")) {
                if ((_strong.StatusConceptKey == null)) {
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "statusConcept", _strong.StatusConceptKey, context);
                }
            }
            if (context.ShouldSerialize("typeConcept")) {
                if ((_strong.TypeConceptKey == null)) {
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "typeConcept", _strong.TypeConceptKey, context);
                }
            }
            if (context.ShouldSerialize("classConceptModel")) {
                if ((_strong.ClassConcept == null)) {
                    if ((_strong.Key.HasValue && context.ShouldForceLoad("classConceptModel", _strong.Key.Value))) {
                        OpenIZ.Core.Model.DataTypes.Concept _delay = null;
                        _delay = context.JsonContext.LoadRelated<OpenIZ.Core.Model.DataTypes.Concept>(_strong.ClassConceptKey);
                        _strong.ClassConcept = _delay;
                        if ((_delay != null)) {
                            _loaded = true;
                            context.JsonContext.WritePropertyUtil(w, "classConceptModel", _strong.ClassConcept, context);
                        }
                    }
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "classConceptModel", _strong.ClassConcept, context);
                }
            }
            if (context.ShouldSerialize("moodConceptModel")) {
                if ((_strong.MoodConcept == null)) {
                    if ((_strong.Key.HasValue && context.ShouldForceLoad("moodConceptModel", _strong.Key.Value))) {
                        OpenIZ.Core.Model.DataTypes.Concept _delay = null;
                        _delay = context.JsonContext.LoadRelated<OpenIZ.Core.Model.DataTypes.Concept>(_strong.MoodConceptKey);
                        _strong.MoodConcept = _delay;
                        if ((_delay != null)) {
                            _loaded = true;
                            context.JsonContext.WritePropertyUtil(w, "moodConceptModel", _strong.MoodConcept, context);
                        }
                    }
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "moodConceptModel", _strong.MoodConcept, context);
                }
            }
            if (context.ShouldSerialize("reasonConceptModel")) {
                if ((_strong.ReasonConcept == null)) {
                    if ((_strong.Key.HasValue && context.ShouldForceLoad("reasonConceptModel", _strong.Key.Value))) {
                        OpenIZ.Core.Model.DataTypes.Concept _delay = null;
                        _delay = context.JsonContext.LoadRelated<OpenIZ.Core.Model.DataTypes.Concept>(_strong.ReasonConceptKey);
                        _strong.ReasonConcept = _delay;
                        if ((_delay != null)) {
                            _loaded = true;
                            context.JsonContext.WritePropertyUtil(w, "reasonConceptModel", _strong.ReasonConcept, context);
                        }
                    }
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "reasonConceptModel", _strong.ReasonConcept, context);
                }
            }
            if (context.ShouldSerialize("statusConceptModel")) {
                if ((_strong.StatusConcept == null)) {
                    if ((_strong.Key.HasValue && context.ShouldForceLoad("statusConceptModel", _strong.Key.Value))) {
                        OpenIZ.Core.Model.DataTypes.Concept _delay = null;
                        _delay = context.JsonContext.LoadRelated<OpenIZ.Core.Model.DataTypes.Concept>(_strong.StatusConceptKey);
                        _strong.StatusConcept = _delay;
                        if ((_delay != null)) {
                            _loaded = true;
                            context.JsonContext.WritePropertyUtil(w, "statusConceptModel", _strong.StatusConcept, context);
                        }
                    }
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "statusConceptModel", _strong.StatusConcept, context);
                }
            }
            if (context.ShouldSerialize("typeConceptModel")) {
                if ((_strong.TypeConcept == null)) {
                    if ((_strong.Key.HasValue && context.ShouldForceLoad("typeConceptModel", _strong.Key.Value))) {
                        OpenIZ.Core.Model.DataTypes.Concept _delay = null;
                        _delay = context.JsonContext.LoadRelated<OpenIZ.Core.Model.DataTypes.Concept>(_strong.TypeConceptKey);
                        _strong.TypeConcept = _delay;
                        if ((_delay != null)) {
                            _loaded = true;
                            context.JsonContext.WritePropertyUtil(w, "typeConceptModel", _strong.TypeConcept, context);
                        }
                    }
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "typeConceptModel", _strong.TypeConcept, context);
                }
            }
            if (context.ShouldSerialize("identifier")) {
                if (((_strong.Identifiers == null) 
                            || (_strong.Identifiers.Count == 0))) {
                    if ((_strong.Key.HasValue && context.ShouldForceLoad("identifier", _strong.Key.Value))) {
                        OpenIZ.Core.Model.Collection.VersionedAssociationCollection<OpenIZ.Core.Model.DataTypes.ActIdentifier> _delay = null;
                        _delay = new OpenIZ.Core.Model.Collection.VersionedAssociationCollection<OpenIZ.Core.Model.DataTypes.ActIdentifier>(context.JsonContext.LoadCollection<OpenIZ.Core.Model.DataTypes.ActIdentifier>(_strong.Key.Value));
                        _strong.Identifiers = _delay;
                        if ((_delay.Count > 0)) {
                            _loaded = true;
                            context.JsonContext.WritePropertyUtil(w, "identifier", _strong.Identifiers, context);
                        }
                    }
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "identifier", _strong.Identifiers, context);
                }
            }
            if (context.ShouldSerialize("relationship")) {
                if (((_strong.Relationships == null) 
                            || (_strong.Relationships.Count == 0))) {
                    if ((_strong.Key.HasValue && context.ShouldForceLoad("relationship", _strong.Key.Value))) {
                        OpenIZ.Core.Model.Collection.VersionedAssociationCollection<OpenIZ.Core.Model.Acts.ActRelationship> _delay = null;
                        _delay = new OpenIZ.Core.Model.Collection.VersionedAssociationCollection<OpenIZ.Core.Model.Acts.ActRelationship>(context.JsonContext.LoadCollection<OpenIZ.Core.Model.Acts.ActRelationship>(_strong.Key.Value));
                        _strong.Relationships = _delay;
                        if ((_delay.Count > 0)) {
                            _loaded = true;
                            context.JsonContext.WritePropertyUtil(w, "relationship", _strong.Relationships, context);
                        }
                    }
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "relationship", _strong.Relationships, context);
                }
            }
            if (context.ShouldSerialize("policy")) {
                if (((_strong.Policies == null) 
                            || (_strong.Policies.Count == 0))) {
                    if ((_strong.Key.HasValue && context.ShouldForceLoad("policy", _strong.Key.Value))) {
                        OpenIZ.Core.Model.Collection.SimpleAssociationCollection<OpenIZ.Core.Model.Security.SecurityPolicyInstance> _delay = null;
                        _delay = new OpenIZ.Core.Model.Collection.SimpleAssociationCollection<OpenIZ.Core.Model.Security.SecurityPolicyInstance>(context.JsonContext.LoadCollection<OpenIZ.Core.Model.Security.SecurityPolicyInstance>(_strong.Key.Value));
                        _strong.Policies = _delay;
                        if ((_delay.Count > 0)) {
                            _loaded = true;
                            context.JsonContext.WritePropertyUtil(w, "policy", _strong.Policies, context);
                        }
                    }
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "policy", _strong.Policies, context);
                }
            }
            if (context.ShouldSerialize("extension")) {
                if (((_strong.Extensions == null) 
                            || (_strong.Extensions.Count == 0))) {
                    if ((_strong.Key.HasValue && context.ShouldForceLoad("extension", _strong.Key.Value))) {
                        OpenIZ.Core.Model.Collection.VersionedAssociationCollection<OpenIZ.Core.Model.DataTypes.ActExtension> _delay = null;
                        _delay = new OpenIZ.Core.Model.Collection.VersionedAssociationCollection<OpenIZ.Core.Model.DataTypes.ActExtension>(context.JsonContext.LoadCollection<OpenIZ.Core.Model.DataTypes.ActExtension>(_strong.Key.Value));
                        _strong.Extensions = _delay;
                        if ((_delay.Count > 0)) {
                            _loaded = true;
                            context.JsonContext.WritePropertyUtil(w, "extension", _strong.Extensions, context);
                        }
                    }
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "extension", _strong.Extensions, context);
                }
            }
            if (context.ShouldSerialize("note")) {
                if (((_strong.Notes == null) 
                            || (_strong.Notes.Count == 0))) {
                    if ((_strong.Key.HasValue && context.ShouldForceLoad("note", _strong.Key.Value))) {
                        OpenIZ.Core.Model.Collection.VersionedAssociationCollection<OpenIZ.Core.Model.DataTypes.ActNote> _delay = null;
                        _delay = new OpenIZ.Core.Model.Collection.VersionedAssociationCollection<OpenIZ.Core.Model.DataTypes.ActNote>(context.JsonContext.LoadCollection<OpenIZ.Core.Model.DataTypes.ActNote>(_strong.Key.Value));
                        _strong.Notes = _delay;
                        if ((_delay.Count > 0)) {
                            _loaded = true;
                            context.JsonContext.WritePropertyUtil(w, "note", _strong.Notes, context);
                        }
                    }
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "note", _strong.Notes, context);
                }
            }
            if (context.ShouldSerialize("tag")) {
                if (((_strong.Tags == null) 
                            || (_strong.Tags.Count == 0))) {
                    if ((_strong.Key.HasValue && context.ShouldForceLoad("tag", _strong.Key.Value))) {
                        OpenIZ.Core.Model.Collection.SimpleAssociationCollection<OpenIZ.Core.Model.DataTypes.ActTag> _delay = null;
                        _delay = new OpenIZ.Core.Model.Collection.SimpleAssociationCollection<OpenIZ.Core.Model.DataTypes.ActTag>(context.JsonContext.LoadCollection<OpenIZ.Core.Model.DataTypes.ActTag>(_strong.Key.Value));
                        _strong.Tags = _delay;
                        if ((_delay.Count > 0)) {
                            _loaded = true;
                            context.JsonContext.WritePropertyUtil(w, "tag", _strong.Tags, context);
                        }
                    }
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "tag", _strong.Tags, context);
                }
            }
            if (context.ShouldSerialize("protocolsModel")) {
                if (((_strong.Protocols == null) 
                            || (_strong.Protocols.Count == 0))) {
                    if ((_strong.Key.HasValue && context.ShouldForceLoad("protocolsModel", _strong.Key.Value))) {
                        OpenIZ.Core.Model.Collection.VersionedAssociationCollection<OpenIZ.Core.Model.Acts.ActProtocol> _delay = null;
                        _delay = new OpenIZ.Core.Model.Collection.VersionedAssociationCollection<OpenIZ.Core.Model.Acts.ActProtocol>(context.JsonContext.LoadCollection<OpenIZ.Core.Model.Acts.ActProtocol>(_strong.Key.Value));
                        _strong.Protocols = _delay;
                        if ((_delay.Count > 0)) {
                            _loaded = true;
                            context.JsonContext.WritePropertyUtil(w, "protocolsModel", _strong.Protocols, context);
                        }
                    }
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "protocolsModel", _strong.Protocols, context);
                }
            }
            if (context.ShouldSerialize("participation")) {
                if (((_strong.Participations == null) 
                            || (_strong.Participations.Count == 0))) {
                    if ((_strong.Key.HasValue && context.ShouldForceLoad("participation", _strong.Key.Value))) {
                        OpenIZ.Core.Model.Collection.VersionedAssociationCollection<OpenIZ.Core.Model.Acts.ActParticipation> _delay = null;
                        _delay = new OpenIZ.Core.Model.Collection.VersionedAssociationCollection<OpenIZ.Core.Model.Acts.ActParticipation>(context.JsonContext.LoadCollection<OpenIZ.Core.Model.Acts.ActParticipation>(_strong.Key.Value));
                        _strong.Participations = _delay;
                        if ((_delay.Count > 0)) {
                            _loaded = true;
                            context.JsonContext.WritePropertyUtil(w, "participation", _strong.Participations, context);
                        }
                    }
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "participation", _strong.Participations, context);
                }
            }
            if (context.ShouldSerialize("etag")) {
                if ((_strong.Tag == null)) {
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "etag", _strong.Tag, context);
                }
            }
            if (context.ShouldSerialize("previousVersion")) {
                if ((_strong.PreviousVersionKey == null)) {
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "previousVersion", _strong.PreviousVersionKey, context);
                }
            }
            if (context.ShouldSerialize("version")) {
                if ((_strong.VersionKey == null)) {
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "version", _strong.VersionKey, context);
                }
            }
            if (context.ShouldSerialize("sequence")) {
                if ((_strong.VersionSequence == null)) {
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "sequence", _strong.VersionSequence, context);
                }
            }
            if (context.ShouldSerialize("creationTimeModel")) {
                if ((_strong.CreationTime == null)) {
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "creationTimeModel", _strong.CreationTime, context);
                }
            }
            if (context.ShouldSerialize("creationTime")) {
                if ((_strong.CreationTimeXml == null)) {
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "creationTime", _strong.CreationTimeXml, context);
                }
            }
            if (context.ShouldSerialize("obsoletionTimeModel")) {
                if ((_strong.ObsoletionTime == null)) {
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "obsoletionTimeModel", _strong.ObsoletionTime, context);
                }
            }
            if (context.ShouldSerialize("obsoletionTime")) {
                if ((_strong.ObsoletionTimeXml == null)) {
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "obsoletionTime", _strong.ObsoletionTimeXml, context);
                }
            }
            if (context.ShouldSerialize("createdBy")) {
                if ((_strong.CreatedByKey == null)) {
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "createdBy", _strong.CreatedByKey, context);
                }
            }
            if (context.ShouldSerialize("obsoletedBy")) {
                if ((_strong.ObsoletedByKey == null)) {
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "obsoletedBy", _strong.ObsoletedByKey, context);
                }
            }
            if (context.ShouldSerialize("id")) {
                if ((_strong.Key == null)) {
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "id", _strong.Key, context);
                }
            }
            if (((_loaded && _strong.Key.HasValue) 
                        && _strong.VersionKey.HasValue)) {
                ((OpenIZ.Core.Services.IDataCachingService)(OpenIZ.Core.ApplicationServiceContext.Current.GetService(typeof(OpenIZ.Core.Services.IDataCachingService)))).Add(_strong);
            }
        }
        
        public object Deserialize(Newtonsoft.Json.JsonReader r, System.Type asType, OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext context) {
            OpenIZ.Core.Model.Acts.TextObservation _retVal = new OpenIZ.Core.Model.Acts.TextObservation();
            int _depth = r.Depth;
            if ((r.TokenType != Newtonsoft.Json.JsonToken.StartObject)) {
                _depth = (_depth - 1);
            }
            for (
            ; r.Read(); 
            ) {
                if ((r.TokenType == Newtonsoft.Json.JsonToken.PropertyName)) {
                    if ("id".Equals(r.Value)) {
                        r.Read();
                        System.Nullable<System.Guid> _instance = ((System.Nullable<System.Guid>)(context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<System.Guid>), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("id", context.JsonContext, _retVal, context))));
                        if ((_instance != null)) {
                            _retVal.Key = _instance;
                        }
                    }
                    else {
                        if ("obsoletedBy".Equals(r.Value)) {
                            r.Read();
                            System.Nullable<System.Guid> _instance = ((System.Nullable<System.Guid>)(context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<System.Guid>), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("obsoletedBy", context.JsonContext, _retVal, context))));
                            if ((_instance != null)) {
                                _retVal.ObsoletedByKey = _instance;
                            }
                        }
                        else {
                            if ("createdBy".Equals(r.Value)) {
                                r.Read();
                                System.Nullable<System.Guid> _instance = ((System.Nullable<System.Guid>)(context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<System.Guid>), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("createdBy", context.JsonContext, _retVal, context))));
                                if ((_instance != null)) {
                                    _retVal.CreatedByKey = _instance;
                                }
                            }
                            else {
                                if ("obsoletionTime".Equals(r.Value)) {
                                    r.Read();
                                    string _instance = ((string)(context.JsonContext.ReadElementUtil(r, typeof(string), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("obsoletionTime", context.JsonContext, _retVal, context))));
                                    if ((_instance != null)) {
                                        _retVal.ObsoletionTimeXml = _instance;
                                    }
                                }
                                else {
                                    if ("obsoletionTimeModel".Equals(r.Value)) {
                                        r.Read();
                                        System.Nullable<System.DateTimeOffset> _instance = ((System.Nullable<System.DateTimeOffset>)(context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<System.DateTimeOffset>), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("obsoletionTimeModel", context.JsonContext, _retVal, context))));
                                        if ((_instance != null)) {
                                            _retVal.ObsoletionTime = _instance;
                                        }
                                    }
                                    else {
                                        if ("creationTime".Equals(r.Value)) {
                                            r.Read();
                                            string _instance = ((string)(context.JsonContext.ReadElementUtil(r, typeof(string), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("creationTime", context.JsonContext, _retVal, context))));
                                            if ((_instance != null)) {
                                                _retVal.CreationTimeXml = _instance;
                                            }
                                        }
                                        else {
                                            if ("creationTimeModel".Equals(r.Value)) {
                                                r.Read();
                                                System.DateTimeOffset _instance = ((System.DateTimeOffset)(context.JsonContext.ReadElementUtil(r, typeof(System.DateTimeOffset), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("creationTimeModel", context.JsonContext, _retVal, context))));
                                                if ((_instance != null)) {
                                                    _retVal.CreationTime = _instance;
                                                }
                                            }
                                            else {
                                                if ("sequence".Equals(r.Value)) {
                                                    r.Read();
                                                    System.Nullable<decimal> _instance = ((System.Nullable<decimal>)(context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<decimal>), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("sequence", context.JsonContext, _retVal, context))));
                                                    if ((_instance != null)) {
                                                        _retVal.VersionSequence = _instance;
                                                    }
                                                }
                                                else {
                                                    if ("version".Equals(r.Value)) {
                                                        r.Read();
                                                        System.Nullable<System.Guid> _instance = ((System.Nullable<System.Guid>)(context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<System.Guid>), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("version", context.JsonContext, _retVal, context))));
                                                        if ((_instance != null)) {
                                                            _retVal.VersionKey = _instance;
                                                        }
                                                    }
                                                    else {
                                                        if ("previousVersion".Equals(r.Value)) {
                                                            r.Read();
                                                            System.Nullable<System.Guid> _instance = ((System.Nullable<System.Guid>)(context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<System.Guid>), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("previousVersion", context.JsonContext, _retVal, context))));
                                                            if ((_instance != null)) {
                                                                _retVal.PreviousVersionKey = _instance;
                                                            }
                                                        }
                                                        else {
                                                            if ("participation".Equals(r.Value)) {
                                                                r.Read();
                                                                OpenIZ.Core.Model.Collection.VersionedAssociationCollection<OpenIZ.Core.Model.Acts.ActParticipation> _instance = ((OpenIZ.Core.Model.Collection.VersionedAssociationCollection<OpenIZ.Core.Model.Acts.ActParticipation>)(context.JsonContext.ReadElementUtil(r, typeof(OpenIZ.Core.Model.Collection.VersionedAssociationCollection<OpenIZ.Core.Model.Acts.ActParticipation>), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("participation", context.JsonContext, _retVal, context))));
                                                                if ((_instance != null)) {
                                                                    _retVal.Participations = _instance;
                                                                }
                                                            }
                                                            else {
                                                                if ("protocolsModel".Equals(r.Value)) {
                                                                    r.Read();
                                                                    OpenIZ.Core.Model.Collection.VersionedAssociationCollection<OpenIZ.Core.Model.Acts.ActProtocol> _instance = ((OpenIZ.Core.Model.Collection.VersionedAssociationCollection<OpenIZ.Core.Model.Acts.ActProtocol>)(context.JsonContext.ReadElementUtil(r, typeof(OpenIZ.Core.Model.Collection.VersionedAssociationCollection<OpenIZ.Core.Model.Acts.ActProtocol>), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("protocolsModel", context.JsonContext, _retVal, context))));
                                                                    if ((_instance != null)) {
                                                                        _retVal.Protocols = _instance;
                                                                    }
                                                                }
                                                                else {
                                                                    if ("tag".Equals(r.Value)) {
                                                                        r.Read();
                                                                        OpenIZ.Core.Model.Collection.SimpleAssociationCollection<OpenIZ.Core.Model.DataTypes.ActTag> _instance = ((OpenIZ.Core.Model.Collection.SimpleAssociationCollection<OpenIZ.Core.Model.DataTypes.ActTag>)(context.JsonContext.ReadElementUtil(r, typeof(OpenIZ.Core.Model.Collection.SimpleAssociationCollection<OpenIZ.Core.Model.DataTypes.ActTag>), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("tag", context.JsonContext, _retVal, context))));
                                                                        if ((_instance != null)) {
                                                                            _retVal.Tags = _instance;
                                                                        }
                                                                    }
                                                                    else {
                                                                        if ("note".Equals(r.Value)) {
                                                                            r.Read();
                                                                            OpenIZ.Core.Model.Collection.VersionedAssociationCollection<OpenIZ.Core.Model.DataTypes.ActNote> _instance = ((OpenIZ.Core.Model.Collection.VersionedAssociationCollection<OpenIZ.Core.Model.DataTypes.ActNote>)(context.JsonContext.ReadElementUtil(r, typeof(OpenIZ.Core.Model.Collection.VersionedAssociationCollection<OpenIZ.Core.Model.DataTypes.ActNote>), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("note", context.JsonContext, _retVal, context))));
                                                                            if ((_instance != null)) {
                                                                                _retVal.Notes = _instance;
                                                                            }
                                                                        }
                                                                        else {
                                                                            if ("extension".Equals(r.Value)) {
                                                                                r.Read();
                                                                                OpenIZ.Core.Model.Collection.VersionedAssociationCollection<OpenIZ.Core.Model.DataTypes.ActExtension> _instance = ((OpenIZ.Core.Model.Collection.VersionedAssociationCollection<OpenIZ.Core.Model.DataTypes.ActExtension>)(context.JsonContext.ReadElementUtil(r, typeof(OpenIZ.Core.Model.Collection.VersionedAssociationCollection<OpenIZ.Core.Model.DataTypes.ActExtension>), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("extension", context.JsonContext, _retVal, context))));
                                                                                if ((_instance != null)) {
                                                                                    _retVal.Extensions = _instance;
                                                                                }
                                                                            }
                                                                            else {
                                                                                if ("policy".Equals(r.Value)) {
                                                                                    r.Read();
                                                                                    OpenIZ.Core.Model.Collection.SimpleAssociationCollection<OpenIZ.Core.Model.Security.SecurityPolicyInstance> _instance = ((OpenIZ.Core.Model.Collection.SimpleAssociationCollection<OpenIZ.Core.Model.Security.SecurityPolicyInstance>)(context.JsonContext.ReadElementUtil(r, typeof(OpenIZ.Core.Model.Collection.SimpleAssociationCollection<OpenIZ.Core.Model.Security.SecurityPolicyInstance>), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("policy", context.JsonContext, _retVal, context))));
                                                                                    if ((_instance != null)) {
                                                                                        _retVal.Policies = _instance;
                                                                                    }
                                                                                }
                                                                                else {
                                                                                    if ("relationship".Equals(r.Value)) {
                                                                                        r.Read();
                                                                                        OpenIZ.Core.Model.Collection.VersionedAssociationCollection<OpenIZ.Core.Model.Acts.ActRelationship> _instance = ((OpenIZ.Core.Model.Collection.VersionedAssociationCollection<OpenIZ.Core.Model.Acts.ActRelationship>)(context.JsonContext.ReadElementUtil(r, typeof(OpenIZ.Core.Model.Collection.VersionedAssociationCollection<OpenIZ.Core.Model.Acts.ActRelationship>), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("relationship", context.JsonContext, _retVal, context))));
                                                                                        if ((_instance != null)) {
                                                                                            _retVal.Relationships = _instance;
                                                                                        }
                                                                                    }
                                                                                    else {
                                                                                        if ("identifier".Equals(r.Value)) {
                                                                                            r.Read();
                                                                                            OpenIZ.Core.Model.Collection.VersionedAssociationCollection<OpenIZ.Core.Model.DataTypes.ActIdentifier> _instance = ((OpenIZ.Core.Model.Collection.VersionedAssociationCollection<OpenIZ.Core.Model.DataTypes.ActIdentifier>)(context.JsonContext.ReadElementUtil(r, typeof(OpenIZ.Core.Model.Collection.VersionedAssociationCollection<OpenIZ.Core.Model.DataTypes.ActIdentifier>), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("identifier", context.JsonContext, _retVal, context))));
                                                                                            if ((_instance != null)) {
                                                                                                _retVal.Identifiers = _instance;
                                                                                            }
                                                                                        }
                                                                                        else {
                                                                                            if ("typeConceptModel".Equals(r.Value)) {
                                                                                                r.Read();
                                                                                                OpenIZ.Core.Model.DataTypes.Concept _instance = ((OpenIZ.Core.Model.DataTypes.Concept)(context.JsonContext.ReadElementUtil(r, typeof(OpenIZ.Core.Model.DataTypes.Concept), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("typeConceptModel", context.JsonContext, _retVal, context))));
                                                                                                if ((_instance != null)) {
                                                                                                    _retVal.TypeConcept = _instance;
                                                                                                }
                                                                                            }
                                                                                            else {
                                                                                                if ("statusConceptModel".Equals(r.Value)) {
                                                                                                    r.Read();
                                                                                                    OpenIZ.Core.Model.DataTypes.Concept _instance = ((OpenIZ.Core.Model.DataTypes.Concept)(context.JsonContext.ReadElementUtil(r, typeof(OpenIZ.Core.Model.DataTypes.Concept), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("statusConceptModel", context.JsonContext, _retVal, context))));
                                                                                                    if ((_instance != null)) {
                                                                                                        _retVal.StatusConcept = _instance;
                                                                                                    }
                                                                                                }
                                                                                                else {
                                                                                                    if ("reasonConceptModel".Equals(r.Value)) {
                                                                                                        r.Read();
                                                                                                        OpenIZ.Core.Model.DataTypes.Concept _instance = ((OpenIZ.Core.Model.DataTypes.Concept)(context.JsonContext.ReadElementUtil(r, typeof(OpenIZ.Core.Model.DataTypes.Concept), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("reasonConceptModel", context.JsonContext, _retVal, context))));
                                                                                                        if ((_instance != null)) {
                                                                                                            _retVal.ReasonConcept = _instance;
                                                                                                        }
                                                                                                    }
                                                                                                    else {
                                                                                                        if ("moodConceptModel".Equals(r.Value)) {
                                                                                                            r.Read();
                                                                                                            OpenIZ.Core.Model.DataTypes.Concept _instance = ((OpenIZ.Core.Model.DataTypes.Concept)(context.JsonContext.ReadElementUtil(r, typeof(OpenIZ.Core.Model.DataTypes.Concept), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("moodConceptModel", context.JsonContext, _retVal, context))));
                                                                                                            if ((_instance != null)) {
                                                                                                                _retVal.MoodConcept = _instance;
                                                                                                            }
                                                                                                        }
                                                                                                        else {
                                                                                                            if ("classConceptModel".Equals(r.Value)) {
                                                                                                                r.Read();
                                                                                                                OpenIZ.Core.Model.DataTypes.Concept _instance = ((OpenIZ.Core.Model.DataTypes.Concept)(context.JsonContext.ReadElementUtil(r, typeof(OpenIZ.Core.Model.DataTypes.Concept), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("classConceptModel", context.JsonContext, _retVal, context))));
                                                                                                                if ((_instance != null)) {
                                                                                                                    _retVal.ClassConcept = _instance;
                                                                                                                }
                                                                                                            }
                                                                                                            else {
                                                                                                                if ("typeConcept".Equals(r.Value)) {
                                                                                                                    r.Read();
                                                                                                                    System.Nullable<System.Guid> _instance = ((System.Nullable<System.Guid>)(context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<System.Guid>), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("typeConcept", context.JsonContext, _retVal, context))));
                                                                                                                    if ((_instance != null)) {
                                                                                                                        _retVal.TypeConceptKey = _instance;
                                                                                                                    }
                                                                                                                }
                                                                                                                else {
                                                                                                                    if ("statusConcept".Equals(r.Value)) {
                                                                                                                        r.Read();
                                                                                                                        System.Nullable<System.Guid> _instance = ((System.Nullable<System.Guid>)(context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<System.Guid>), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("statusConcept", context.JsonContext, _retVal, context))));
                                                                                                                        if ((_instance != null)) {
                                                                                                                            _retVal.StatusConceptKey = _instance;
                                                                                                                        }
                                                                                                                    }
                                                                                                                    else {
                                                                                                                        if ("reasonConcept".Equals(r.Value)) {
                                                                                                                            r.Read();
                                                                                                                            System.Nullable<System.Guid> _instance = ((System.Nullable<System.Guid>)(context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<System.Guid>), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("reasonConcept", context.JsonContext, _retVal, context))));
                                                                                                                            if ((_instance != null)) {
                                                                                                                                _retVal.ReasonConceptKey = _instance;
                                                                                                                            }
                                                                                                                        }
                                                                                                                        else {
                                                                                                                            if ("moodConcept".Equals(r.Value)) {
                                                                                                                                r.Read();
                                                                                                                                System.Nullable<System.Guid> _instance = ((System.Nullable<System.Guid>)(context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<System.Guid>), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("moodConcept", context.JsonContext, _retVal, context))));
                                                                                                                                if ((_instance != null)) {
                                                                                                                                    _retVal.MoodConceptKey = _instance;
                                                                                                                                }
                                                                                                                            }
                                                                                                                            else {
                                                                                                                                if ("classConcept".Equals(r.Value)) {
                                                                                                                                    r.Read();
                                                                                                                                    System.Nullable<System.Guid> _instance = ((System.Nullable<System.Guid>)(context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<System.Guid>), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("classConcept", context.JsonContext, _retVal, context))));
                                                                                                                                    if ((_instance != null)) {
                                                                                                                                        _retVal.ClassConceptKey = _instance;
                                                                                                                                    }
                                                                                                                                }
                                                                                                                                else {
                                                                                                                                    if ("stopTime".Equals(r.Value)) {
                                                                                                                                        r.Read();
                                                                                                                                        string _instance = ((string)(context.JsonContext.ReadElementUtil(r, typeof(string), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("stopTime", context.JsonContext, _retVal, context))));
                                                                                                                                        if ((_instance != null)) {
                                                                                                                                            _retVal.StopTimeXml = _instance;
                                                                                                                                        }
                                                                                                                                    }
                                                                                                                                    else {
                                                                                                                                        if ("startTime".Equals(r.Value)) {
                                                                                                                                            r.Read();
                                                                                                                                            string _instance = ((string)(context.JsonContext.ReadElementUtil(r, typeof(string), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("startTime", context.JsonContext, _retVal, context))));
                                                                                                                                            if ((_instance != null)) {
                                                                                                                                                _retVal.StartTimeXml = _instance;
                                                                                                                                            }
                                                                                                                                        }
                                                                                                                                        else {
                                                                                                                                            if ("actTime".Equals(r.Value)) {
                                                                                                                                                r.Read();
                                                                                                                                                string _instance = ((string)(context.JsonContext.ReadElementUtil(r, typeof(string), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("actTime", context.JsonContext, _retVal, context))));
                                                                                                                                                if ((_instance != null)) {
                                                                                                                                                    _retVal.ActTimeXml = _instance;
                                                                                                                                                }
                                                                                                                                            }
                                                                                                                                            else {
                                                                                                                                                if ("template".Equals(r.Value)) {
                                                                                                                                                    r.Read();
                                                                                                                                                    OpenIZ.Core.Model.DataTypes.TemplateDefinition _instance = ((OpenIZ.Core.Model.DataTypes.TemplateDefinition)(context.JsonContext.ReadElementUtil(r, typeof(OpenIZ.Core.Model.DataTypes.TemplateDefinition), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("template", context.JsonContext, _retVal, context))));
                                                                                                                                                    if ((_instance != null)) {
                                                                                                                                                        _retVal.Template = _instance;
                                                                                                                                                    }
                                                                                                                                                }
                                                                                                                                                else {
                                                                                                                                                    if ("isNegated".Equals(r.Value)) {
                                                                                                                                                        r.Read();
                                                                                                                                                        bool _instance = ((bool)(context.JsonContext.ReadElementUtil(r, typeof(bool), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("isNegated", context.JsonContext, _retVal, context))));
                                                                                                                                                        if ((_instance != null)) {
                                                                                                                                                            _retVal.IsNegated = _instance;
                                                                                                                                                        }
                                                                                                                                                    }
                                                                                                                                                    else {
                                                                                                                                                        if ("interpretationConceptModel".Equals(r.Value)) {
                                                                                                                                                            r.Read();
                                                                                                                                                            OpenIZ.Core.Model.DataTypes.Concept _instance = ((OpenIZ.Core.Model.DataTypes.Concept)(context.JsonContext.ReadElementUtil(r, typeof(OpenIZ.Core.Model.DataTypes.Concept), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("interpretationConceptModel", context.JsonContext, _retVal, context))));
                                                                                                                                                            if ((_instance != null)) {
                                                                                                                                                                _retVal.InterpretationConcept = _instance;
                                                                                                                                                            }
                                                                                                                                                        }
                                                                                                                                                        else {
                                                                                                                                                            if ("interpretationConcept".Equals(r.Value)) {
                                                                                                                                                                r.Read();
                                                                                                                                                                System.Nullable<System.Guid> _instance = ((System.Nullable<System.Guid>)(context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<System.Guid>), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("interpretationConcept", context.JsonContext, _retVal, context))));
                                                                                                                                                                if ((_instance != null)) {
                                                                                                                                                                    _retVal.InterpretationConceptKey = _instance;
                                                                                                                                                                }
                                                                                                                                                            }
                                                                                                                                                            else {
                                                                                                                                                                if ("value".Equals(r.Value)) {
                                                                                                                                                                    r.Read();
                                                                                                                                                                    string _instance = ((string)(context.JsonContext.ReadElementUtil(r, typeof(string), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("value", context.JsonContext, _retVal, context))));
                                                                                                                                                                    if ((_instance != null)) {
                                                                                                                                                                        _retVal.Value = _instance;
                                                                                                                                                                    }
                                                                                                                                                                }
                                                                                                                                                                else {
                                                                                                                                                                    if ("$type".Equals(r.Value)) {
                                                                                                                                                                        System.Type _type = this.m_binder.BindToType("OpenIZ.Core.Model, Version=0.6.14.21496, Culture=neutral, PublicKeyToken=null", r.ReadAsString());
                                                                                                                                                                        if ((_type != typeof(OpenIZ.Core.Model.Acts.TextObservation))) {
                                                                                                                                                                            OpenIZ.Core.Model.Acts.TextObservation _nretVal = ((OpenIZ.Core.Model.Acts.TextObservation)(context.JsonContext.GetFormatter(_type).Deserialize(r, _type, context)));
                                                                                                                                                                            _nretVal.CopyObjectData(_retVal);
                                                                                                                                                                            return _nretVal;
                                                                                                                                                                        }
                                                                                                                                                                    }
                                                                                                                                                                    else {
                                                                                                                                                                        r.Skip();
                                                                                                                                                                    }
                                                                                                                                                                }
                                                                                                                                                            }
                                                                                                                                                        }
                                                                                                                                                    }
                                                                                                                                                }
                                                                                                                                            }
                                                                                                                                        }
                                                                                                                                    }
                                                                                                                                }
                                                                                                                            }
                                                                                                                        }
                                                                                                                    }
                                                                                                                }
                                                                                                            }
                                                                                                        }
                                                                                                    }
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
                else {
                    if (((r.TokenType == Newtonsoft.Json.JsonToken.EndObject) 
                                && (r.Depth == _depth))) {
                        return _retVal;
                    }
                    else {
                        throw new Newtonsoft.Json.JsonSerializationException("JSON in invalid state");
                    }
                }
            }
            return _retVal;
        }
        
        public object FromSimpleValue(object o) {
            return null;
        }
        
        public object GetSimpleValue(object o) {
            return null;
        }
    }
    
    public class CodedObservationViewModelSerializer : OpenIZ.Core.Applets.ViewModel.Json.IJsonViewModelTypeFormatter {
        
        private OpenIZ.Core.Model.Serialization.ModelSerializationBinder m_binder = new OpenIZ.Core.Model.Serialization.ModelSerializationBinder();
        
        private OpenIZ.Core.Diagnostics.Tracer m_tracer = OpenIZ.Core.Diagnostics.Tracer.GetTracer(typeof(CodedObservationViewModelSerializer));
        
        public System.Type HandlesType {
            get {
                return typeof(OpenIZ.Core.Model.Acts.CodedObservation);
            }
        }
        
        public void Serialize(Newtonsoft.Json.JsonWriter w, OpenIZ.Core.Model.IdentifiedData o, OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext context) {
            if ((o == null)) {
                throw new System.ArgumentNullException("o");
            }
            OpenIZ.Core.Model.Acts.CodedObservation _strong = null;
            OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext _jsonContext = null;
            bool _loaded = false;
            try {
                _strong = ((OpenIZ.Core.Model.Acts.CodedObservation)(o));
            }
            catch (System.Exception e) {
                this.m_tracer.TraceError(string.Format("Casting Error: {0}", e));
                throw new System.ArgumentException(string.Format("Invalid type {0} provided, expected {1}", o.GetType(), typeof(OpenIZ.Core.Model.Acts.CodedObservation)));
            }
            if (context.ShouldSerialize("value")) {
                if ((_strong.ValueKey == null)) {
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "value", _strong.ValueKey, context);
                }
            }
            if (context.ShouldSerialize("valueModel")) {
                if ((_strong.Value == null)) {
                    if ((_strong.Key.HasValue && context.ShouldForceLoad("valueModel", _strong.Key.Value))) {
                        OpenIZ.Core.Model.DataTypes.Concept _delay = null;
                        _delay = context.JsonContext.LoadRelated<OpenIZ.Core.Model.DataTypes.Concept>(_strong.ValueKey);
                        _strong.Value = _delay;
                        if ((_delay != null)) {
                            _loaded = true;
                            context.JsonContext.WritePropertyUtil(w, "valueModel", _strong.Value, context);
                        }
                    }
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "valueModel", _strong.Value, context);
                }
            }
            if (context.ShouldSerialize("interpretationConcept")) {
                if ((_strong.InterpretationConceptKey == null)) {
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "interpretationConcept", _strong.InterpretationConceptKey, context);
                }
            }
            if (context.ShouldSerialize("interpretationConceptModel")) {
                if ((_strong.InterpretationConcept == null)) {
                    if ((_strong.Key.HasValue && context.ShouldForceLoad("interpretationConceptModel", _strong.Key.Value))) {
                        OpenIZ.Core.Model.DataTypes.Concept _delay = null;
                        _delay = context.JsonContext.LoadRelated<OpenIZ.Core.Model.DataTypes.Concept>(_strong.InterpretationConceptKey);
                        _strong.InterpretationConcept = _delay;
                        if ((_delay != null)) {
                            _loaded = true;
                            context.JsonContext.WritePropertyUtil(w, "interpretationConceptModel", _strong.InterpretationConcept, context);
                        }
                    }
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "interpretationConceptModel", _strong.InterpretationConcept, context);
                }
            }
            if (context.ShouldSerialize("isNegated")) {
                if ((_strong.IsNegated == null)) {
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "isNegated", _strong.IsNegated, context);
                }
            }
            if (context.ShouldSerialize("template")) {
                if ((_strong.Template == null)) {
                    if ((_strong.Key.HasValue && context.ShouldForceLoad("template", _strong.Key.Value))) {
                        OpenIZ.Core.Model.DataTypes.TemplateDefinition _delay = null;
                    }
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "template", _strong.Template, context);
                }
            }
            if (context.ShouldSerialize("actTime")) {
                if ((_strong.ActTimeXml == null)) {
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "actTime", _strong.ActTimeXml, context);
                }
            }
            if (context.ShouldSerialize("startTime")) {
                if ((_strong.StartTimeXml == null)) {
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "startTime", _strong.StartTimeXml, context);
                }
            }
            if (context.ShouldSerialize("stopTime")) {
                if ((_strong.StopTimeXml == null)) {
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "stopTime", _strong.StopTimeXml, context);
                }
            }
            if (context.ShouldSerialize("classConcept")) {
                if ((_strong.ClassConceptKey == null)) {
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "classConcept", _strong.ClassConceptKey, context);
                }
            }
            if (context.ShouldSerialize("moodConcept")) {
                if ((_strong.MoodConceptKey == null)) {
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "moodConcept", _strong.MoodConceptKey, context);
                }
            }
            if (context.ShouldSerialize("reasonConcept")) {
                if ((_strong.ReasonConceptKey == null)) {
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "reasonConcept", _strong.ReasonConceptKey, context);
                }
            }
            if (context.ShouldSerialize("statusConcept")) {
                if ((_strong.StatusConceptKey == null)) {
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "statusConcept", _strong.StatusConceptKey, context);
                }
            }
            if (context.ShouldSerialize("typeConcept")) {
                if ((_strong.TypeConceptKey == null)) {
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "typeConcept", _strong.TypeConceptKey, context);
                }
            }
            if (context.ShouldSerialize("classConceptModel")) {
                if ((_strong.ClassConcept == null)) {
                    if ((_strong.Key.HasValue && context.ShouldForceLoad("classConceptModel", _strong.Key.Value))) {
                        OpenIZ.Core.Model.DataTypes.Concept _delay = null;
                        _delay = context.JsonContext.LoadRelated<OpenIZ.Core.Model.DataTypes.Concept>(_strong.ClassConceptKey);
                        _strong.ClassConcept = _delay;
                        if ((_delay != null)) {
                            _loaded = true;
                            context.JsonContext.WritePropertyUtil(w, "classConceptModel", _strong.ClassConcept, context);
                        }
                    }
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "classConceptModel", _strong.ClassConcept, context);
                }
            }
            if (context.ShouldSerialize("moodConceptModel")) {
                if ((_strong.MoodConcept == null)) {
                    if ((_strong.Key.HasValue && context.ShouldForceLoad("moodConceptModel", _strong.Key.Value))) {
                        OpenIZ.Core.Model.DataTypes.Concept _delay = null;
                        _delay = context.JsonContext.LoadRelated<OpenIZ.Core.Model.DataTypes.Concept>(_strong.MoodConceptKey);
                        _strong.MoodConcept = _delay;
                        if ((_delay != null)) {
                            _loaded = true;
                            context.JsonContext.WritePropertyUtil(w, "moodConceptModel", _strong.MoodConcept, context);
                        }
                    }
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "moodConceptModel", _strong.MoodConcept, context);
                }
            }
            if (context.ShouldSerialize("reasonConceptModel")) {
                if ((_strong.ReasonConcept == null)) {
                    if ((_strong.Key.HasValue && context.ShouldForceLoad("reasonConceptModel", _strong.Key.Value))) {
                        OpenIZ.Core.Model.DataTypes.Concept _delay = null;
                        _delay = context.JsonContext.LoadRelated<OpenIZ.Core.Model.DataTypes.Concept>(_strong.ReasonConceptKey);
                        _strong.ReasonConcept = _delay;
                        if ((_delay != null)) {
                            _loaded = true;
                            context.JsonContext.WritePropertyUtil(w, "reasonConceptModel", _strong.ReasonConcept, context);
                        }
                    }
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "reasonConceptModel", _strong.ReasonConcept, context);
                }
            }
            if (context.ShouldSerialize("statusConceptModel")) {
                if ((_strong.StatusConcept == null)) {
                    if ((_strong.Key.HasValue && context.ShouldForceLoad("statusConceptModel", _strong.Key.Value))) {
                        OpenIZ.Core.Model.DataTypes.Concept _delay = null;
                        _delay = context.JsonContext.LoadRelated<OpenIZ.Core.Model.DataTypes.Concept>(_strong.StatusConceptKey);
                        _strong.StatusConcept = _delay;
                        if ((_delay != null)) {
                            _loaded = true;
                            context.JsonContext.WritePropertyUtil(w, "statusConceptModel", _strong.StatusConcept, context);
                        }
                    }
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "statusConceptModel", _strong.StatusConcept, context);
                }
            }
            if (context.ShouldSerialize("typeConceptModel")) {
                if ((_strong.TypeConcept == null)) {
                    if ((_strong.Key.HasValue && context.ShouldForceLoad("typeConceptModel", _strong.Key.Value))) {
                        OpenIZ.Core.Model.DataTypes.Concept _delay = null;
                        _delay = context.JsonContext.LoadRelated<OpenIZ.Core.Model.DataTypes.Concept>(_strong.TypeConceptKey);
                        _strong.TypeConcept = _delay;
                        if ((_delay != null)) {
                            _loaded = true;
                            context.JsonContext.WritePropertyUtil(w, "typeConceptModel", _strong.TypeConcept, context);
                        }
                    }
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "typeConceptModel", _strong.TypeConcept, context);
                }
            }
            if (context.ShouldSerialize("identifier")) {
                if (((_strong.Identifiers == null) 
                            || (_strong.Identifiers.Count == 0))) {
                    if ((_strong.Key.HasValue && context.ShouldForceLoad("identifier", _strong.Key.Value))) {
                        OpenIZ.Core.Model.Collection.VersionedAssociationCollection<OpenIZ.Core.Model.DataTypes.ActIdentifier> _delay = null;
                        _delay = new OpenIZ.Core.Model.Collection.VersionedAssociationCollection<OpenIZ.Core.Model.DataTypes.ActIdentifier>(context.JsonContext.LoadCollection<OpenIZ.Core.Model.DataTypes.ActIdentifier>(_strong.Key.Value));
                        _strong.Identifiers = _delay;
                        if ((_delay.Count > 0)) {
                            _loaded = true;
                            context.JsonContext.WritePropertyUtil(w, "identifier", _strong.Identifiers, context);
                        }
                    }
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "identifier", _strong.Identifiers, context);
                }
            }
            if (context.ShouldSerialize("relationship")) {
                if (((_strong.Relationships == null) 
                            || (_strong.Relationships.Count == 0))) {
                    if ((_strong.Key.HasValue && context.ShouldForceLoad("relationship", _strong.Key.Value))) {
                        OpenIZ.Core.Model.Collection.VersionedAssociationCollection<OpenIZ.Core.Model.Acts.ActRelationship> _delay = null;
                        _delay = new OpenIZ.Core.Model.Collection.VersionedAssociationCollection<OpenIZ.Core.Model.Acts.ActRelationship>(context.JsonContext.LoadCollection<OpenIZ.Core.Model.Acts.ActRelationship>(_strong.Key.Value));
                        _strong.Relationships = _delay;
                        if ((_delay.Count > 0)) {
                            _loaded = true;
                            context.JsonContext.WritePropertyUtil(w, "relationship", _strong.Relationships, context);
                        }
                    }
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "relationship", _strong.Relationships, context);
                }
            }
            if (context.ShouldSerialize("policy")) {
                if (((_strong.Policies == null) 
                            || (_strong.Policies.Count == 0))) {
                    if ((_strong.Key.HasValue && context.ShouldForceLoad("policy", _strong.Key.Value))) {
                        OpenIZ.Core.Model.Collection.SimpleAssociationCollection<OpenIZ.Core.Model.Security.SecurityPolicyInstance> _delay = null;
                        _delay = new OpenIZ.Core.Model.Collection.SimpleAssociationCollection<OpenIZ.Core.Model.Security.SecurityPolicyInstance>(context.JsonContext.LoadCollection<OpenIZ.Core.Model.Security.SecurityPolicyInstance>(_strong.Key.Value));
                        _strong.Policies = _delay;
                        if ((_delay.Count > 0)) {
                            _loaded = true;
                            context.JsonContext.WritePropertyUtil(w, "policy", _strong.Policies, context);
                        }
                    }
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "policy", _strong.Policies, context);
                }
            }
            if (context.ShouldSerialize("extension")) {
                if (((_strong.Extensions == null) 
                            || (_strong.Extensions.Count == 0))) {
                    if ((_strong.Key.HasValue && context.ShouldForceLoad("extension", _strong.Key.Value))) {
                        OpenIZ.Core.Model.Collection.VersionedAssociationCollection<OpenIZ.Core.Model.DataTypes.ActExtension> _delay = null;
                        _delay = new OpenIZ.Core.Model.Collection.VersionedAssociationCollection<OpenIZ.Core.Model.DataTypes.ActExtension>(context.JsonContext.LoadCollection<OpenIZ.Core.Model.DataTypes.ActExtension>(_strong.Key.Value));
                        _strong.Extensions = _delay;
                        if ((_delay.Count > 0)) {
                            _loaded = true;
                            context.JsonContext.WritePropertyUtil(w, "extension", _strong.Extensions, context);
                        }
                    }
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "extension", _strong.Extensions, context);
                }
            }
            if (context.ShouldSerialize("note")) {
                if (((_strong.Notes == null) 
                            || (_strong.Notes.Count == 0))) {
                    if ((_strong.Key.HasValue && context.ShouldForceLoad("note", _strong.Key.Value))) {
                        OpenIZ.Core.Model.Collection.VersionedAssociationCollection<OpenIZ.Core.Model.DataTypes.ActNote> _delay = null;
                        _delay = new OpenIZ.Core.Model.Collection.VersionedAssociationCollection<OpenIZ.Core.Model.DataTypes.ActNote>(context.JsonContext.LoadCollection<OpenIZ.Core.Model.DataTypes.ActNote>(_strong.Key.Value));
                        _strong.Notes = _delay;
                        if ((_delay.Count > 0)) {
                            _loaded = true;
                            context.JsonContext.WritePropertyUtil(w, "note", _strong.Notes, context);
                        }
                    }
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "note", _strong.Notes, context);
                }
            }
            if (context.ShouldSerialize("tag")) {
                if (((_strong.Tags == null) 
                            || (_strong.Tags.Count == 0))) {
                    if ((_strong.Key.HasValue && context.ShouldForceLoad("tag", _strong.Key.Value))) {
                        OpenIZ.Core.Model.Collection.SimpleAssociationCollection<OpenIZ.Core.Model.DataTypes.ActTag> _delay = null;
                        _delay = new OpenIZ.Core.Model.Collection.SimpleAssociationCollection<OpenIZ.Core.Model.DataTypes.ActTag>(context.JsonContext.LoadCollection<OpenIZ.Core.Model.DataTypes.ActTag>(_strong.Key.Value));
                        _strong.Tags = _delay;
                        if ((_delay.Count > 0)) {
                            _loaded = true;
                            context.JsonContext.WritePropertyUtil(w, "tag", _strong.Tags, context);
                        }
                    }
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "tag", _strong.Tags, context);
                }
            }
            if (context.ShouldSerialize("protocolsModel")) {
                if (((_strong.Protocols == null) 
                            || (_strong.Protocols.Count == 0))) {
                    if ((_strong.Key.HasValue && context.ShouldForceLoad("protocolsModel", _strong.Key.Value))) {
                        OpenIZ.Core.Model.Collection.VersionedAssociationCollection<OpenIZ.Core.Model.Acts.ActProtocol> _delay = null;
                        _delay = new OpenIZ.Core.Model.Collection.VersionedAssociationCollection<OpenIZ.Core.Model.Acts.ActProtocol>(context.JsonContext.LoadCollection<OpenIZ.Core.Model.Acts.ActProtocol>(_strong.Key.Value));
                        _strong.Protocols = _delay;
                        if ((_delay.Count > 0)) {
                            _loaded = true;
                            context.JsonContext.WritePropertyUtil(w, "protocolsModel", _strong.Protocols, context);
                        }
                    }
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "protocolsModel", _strong.Protocols, context);
                }
            }
            if (context.ShouldSerialize("participation")) {
                if (((_strong.Participations == null) 
                            || (_strong.Participations.Count == 0))) {
                    if ((_strong.Key.HasValue && context.ShouldForceLoad("participation", _strong.Key.Value))) {
                        OpenIZ.Core.Model.Collection.VersionedAssociationCollection<OpenIZ.Core.Model.Acts.ActParticipation> _delay = null;
                        _delay = new OpenIZ.Core.Model.Collection.VersionedAssociationCollection<OpenIZ.Core.Model.Acts.ActParticipation>(context.JsonContext.LoadCollection<OpenIZ.Core.Model.Acts.ActParticipation>(_strong.Key.Value));
                        _strong.Participations = _delay;
                        if ((_delay.Count > 0)) {
                            _loaded = true;
                            context.JsonContext.WritePropertyUtil(w, "participation", _strong.Participations, context);
                        }
                    }
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "participation", _strong.Participations, context);
                }
            }
            if (context.ShouldSerialize("etag")) {
                if ((_strong.Tag == null)) {
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "etag", _strong.Tag, context);
                }
            }
            if (context.ShouldSerialize("previousVersion")) {
                if ((_strong.PreviousVersionKey == null)) {
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "previousVersion", _strong.PreviousVersionKey, context);
                }
            }
            if (context.ShouldSerialize("version")) {
                if ((_strong.VersionKey == null)) {
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "version", _strong.VersionKey, context);
                }
            }
            if (context.ShouldSerialize("sequence")) {
                if ((_strong.VersionSequence == null)) {
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "sequence", _strong.VersionSequence, context);
                }
            }
            if (context.ShouldSerialize("creationTimeModel")) {
                if ((_strong.CreationTime == null)) {
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "creationTimeModel", _strong.CreationTime, context);
                }
            }
            if (context.ShouldSerialize("creationTime")) {
                if ((_strong.CreationTimeXml == null)) {
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "creationTime", _strong.CreationTimeXml, context);
                }
            }
            if (context.ShouldSerialize("obsoletionTimeModel")) {
                if ((_strong.ObsoletionTime == null)) {
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "obsoletionTimeModel", _strong.ObsoletionTime, context);
                }
            }
            if (context.ShouldSerialize("obsoletionTime")) {
                if ((_strong.ObsoletionTimeXml == null)) {
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "obsoletionTime", _strong.ObsoletionTimeXml, context);
                }
            }
            if (context.ShouldSerialize("createdBy")) {
                if ((_strong.CreatedByKey == null)) {
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "createdBy", _strong.CreatedByKey, context);
                }
            }
            if (context.ShouldSerialize("obsoletedBy")) {
                if ((_strong.ObsoletedByKey == null)) {
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "obsoletedBy", _strong.ObsoletedByKey, context);
                }
            }
            if (context.ShouldSerialize("id")) {
                if ((_strong.Key == null)) {
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "id", _strong.Key, context);
                }
            }
            if (((_loaded && _strong.Key.HasValue) 
                        && _strong.VersionKey.HasValue)) {
                ((OpenIZ.Core.Services.IDataCachingService)(OpenIZ.Core.ApplicationServiceContext.Current.GetService(typeof(OpenIZ.Core.Services.IDataCachingService)))).Add(_strong);
            }
        }
        
        public object Deserialize(Newtonsoft.Json.JsonReader r, System.Type asType, OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext context) {
            OpenIZ.Core.Model.Acts.CodedObservation _retVal = new OpenIZ.Core.Model.Acts.CodedObservation();
            int _depth = r.Depth;
            if ((r.TokenType != Newtonsoft.Json.JsonToken.StartObject)) {
                _depth = (_depth - 1);
            }
            for (
            ; r.Read(); 
            ) {
                if ((r.TokenType == Newtonsoft.Json.JsonToken.PropertyName)) {
                    if ("id".Equals(r.Value)) {
                        r.Read();
                        System.Nullable<System.Guid> _instance = ((System.Nullable<System.Guid>)(context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<System.Guid>), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("id", context.JsonContext, _retVal, context))));
                        if ((_instance != null)) {
                            _retVal.Key = _instance;
                        }
                    }
                    else {
                        if ("obsoletedBy".Equals(r.Value)) {
                            r.Read();
                            System.Nullable<System.Guid> _instance = ((System.Nullable<System.Guid>)(context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<System.Guid>), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("obsoletedBy", context.JsonContext, _retVal, context))));
                            if ((_instance != null)) {
                                _retVal.ObsoletedByKey = _instance;
                            }
                        }
                        else {
                            if ("createdBy".Equals(r.Value)) {
                                r.Read();
                                System.Nullable<System.Guid> _instance = ((System.Nullable<System.Guid>)(context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<System.Guid>), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("createdBy", context.JsonContext, _retVal, context))));
                                if ((_instance != null)) {
                                    _retVal.CreatedByKey = _instance;
                                }
                            }
                            else {
                                if ("obsoletionTime".Equals(r.Value)) {
                                    r.Read();
                                    string _instance = ((string)(context.JsonContext.ReadElementUtil(r, typeof(string), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("obsoletionTime", context.JsonContext, _retVal, context))));
                                    if ((_instance != null)) {
                                        _retVal.ObsoletionTimeXml = _instance;
                                    }
                                }
                                else {
                                    if ("obsoletionTimeModel".Equals(r.Value)) {
                                        r.Read();
                                        System.Nullable<System.DateTimeOffset> _instance = ((System.Nullable<System.DateTimeOffset>)(context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<System.DateTimeOffset>), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("obsoletionTimeModel", context.JsonContext, _retVal, context))));
                                        if ((_instance != null)) {
                                            _retVal.ObsoletionTime = _instance;
                                        }
                                    }
                                    else {
                                        if ("creationTime".Equals(r.Value)) {
                                            r.Read();
                                            string _instance = ((string)(context.JsonContext.ReadElementUtil(r, typeof(string), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("creationTime", context.JsonContext, _retVal, context))));
                                            if ((_instance != null)) {
                                                _retVal.CreationTimeXml = _instance;
                                            }
                                        }
                                        else {
                                            if ("creationTimeModel".Equals(r.Value)) {
                                                r.Read();
                                                System.DateTimeOffset _instance = ((System.DateTimeOffset)(context.JsonContext.ReadElementUtil(r, typeof(System.DateTimeOffset), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("creationTimeModel", context.JsonContext, _retVal, context))));
                                                if ((_instance != null)) {
                                                    _retVal.CreationTime = _instance;
                                                }
                                            }
                                            else {
                                                if ("sequence".Equals(r.Value)) {
                                                    r.Read();
                                                    System.Nullable<decimal> _instance = ((System.Nullable<decimal>)(context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<decimal>), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("sequence", context.JsonContext, _retVal, context))));
                                                    if ((_instance != null)) {
                                                        _retVal.VersionSequence = _instance;
                                                    }
                                                }
                                                else {
                                                    if ("version".Equals(r.Value)) {
                                                        r.Read();
                                                        System.Nullable<System.Guid> _instance = ((System.Nullable<System.Guid>)(context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<System.Guid>), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("version", context.JsonContext, _retVal, context))));
                                                        if ((_instance != null)) {
                                                            _retVal.VersionKey = _instance;
                                                        }
                                                    }
                                                    else {
                                                        if ("previousVersion".Equals(r.Value)) {
                                                            r.Read();
                                                            System.Nullable<System.Guid> _instance = ((System.Nullable<System.Guid>)(context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<System.Guid>), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("previousVersion", context.JsonContext, _retVal, context))));
                                                            if ((_instance != null)) {
                                                                _retVal.PreviousVersionKey = _instance;
                                                            }
                                                        }
                                                        else {
                                                            if ("participation".Equals(r.Value)) {
                                                                r.Read();
                                                                OpenIZ.Core.Model.Collection.VersionedAssociationCollection<OpenIZ.Core.Model.Acts.ActParticipation> _instance = ((OpenIZ.Core.Model.Collection.VersionedAssociationCollection<OpenIZ.Core.Model.Acts.ActParticipation>)(context.JsonContext.ReadElementUtil(r, typeof(OpenIZ.Core.Model.Collection.VersionedAssociationCollection<OpenIZ.Core.Model.Acts.ActParticipation>), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("participation", context.JsonContext, _retVal, context))));
                                                                if ((_instance != null)) {
                                                                    _retVal.Participations = _instance;
                                                                }
                                                            }
                                                            else {
                                                                if ("protocolsModel".Equals(r.Value)) {
                                                                    r.Read();
                                                                    OpenIZ.Core.Model.Collection.VersionedAssociationCollection<OpenIZ.Core.Model.Acts.ActProtocol> _instance = ((OpenIZ.Core.Model.Collection.VersionedAssociationCollection<OpenIZ.Core.Model.Acts.ActProtocol>)(context.JsonContext.ReadElementUtil(r, typeof(OpenIZ.Core.Model.Collection.VersionedAssociationCollection<OpenIZ.Core.Model.Acts.ActProtocol>), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("protocolsModel", context.JsonContext, _retVal, context))));
                                                                    if ((_instance != null)) {
                                                                        _retVal.Protocols = _instance;
                                                                    }
                                                                }
                                                                else {
                                                                    if ("tag".Equals(r.Value)) {
                                                                        r.Read();
                                                                        OpenIZ.Core.Model.Collection.SimpleAssociationCollection<OpenIZ.Core.Model.DataTypes.ActTag> _instance = ((OpenIZ.Core.Model.Collection.SimpleAssociationCollection<OpenIZ.Core.Model.DataTypes.ActTag>)(context.JsonContext.ReadElementUtil(r, typeof(OpenIZ.Core.Model.Collection.SimpleAssociationCollection<OpenIZ.Core.Model.DataTypes.ActTag>), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("tag", context.JsonContext, _retVal, context))));
                                                                        if ((_instance != null)) {
                                                                            _retVal.Tags = _instance;
                                                                        }
                                                                    }
                                                                    else {
                                                                        if ("note".Equals(r.Value)) {
                                                                            r.Read();
                                                                            OpenIZ.Core.Model.Collection.VersionedAssociationCollection<OpenIZ.Core.Model.DataTypes.ActNote> _instance = ((OpenIZ.Core.Model.Collection.VersionedAssociationCollection<OpenIZ.Core.Model.DataTypes.ActNote>)(context.JsonContext.ReadElementUtil(r, typeof(OpenIZ.Core.Model.Collection.VersionedAssociationCollection<OpenIZ.Core.Model.DataTypes.ActNote>), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("note", context.JsonContext, _retVal, context))));
                                                                            if ((_instance != null)) {
                                                                                _retVal.Notes = _instance;
                                                                            }
                                                                        }
                                                                        else {
                                                                            if ("extension".Equals(r.Value)) {
                                                                                r.Read();
                                                                                OpenIZ.Core.Model.Collection.VersionedAssociationCollection<OpenIZ.Core.Model.DataTypes.ActExtension> _instance = ((OpenIZ.Core.Model.Collection.VersionedAssociationCollection<OpenIZ.Core.Model.DataTypes.ActExtension>)(context.JsonContext.ReadElementUtil(r, typeof(OpenIZ.Core.Model.Collection.VersionedAssociationCollection<OpenIZ.Core.Model.DataTypes.ActExtension>), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("extension", context.JsonContext, _retVal, context))));
                                                                                if ((_instance != null)) {
                                                                                    _retVal.Extensions = _instance;
                                                                                }
                                                                            }
                                                                            else {
                                                                                if ("policy".Equals(r.Value)) {
                                                                                    r.Read();
                                                                                    OpenIZ.Core.Model.Collection.SimpleAssociationCollection<OpenIZ.Core.Model.Security.SecurityPolicyInstance> _instance = ((OpenIZ.Core.Model.Collection.SimpleAssociationCollection<OpenIZ.Core.Model.Security.SecurityPolicyInstance>)(context.JsonContext.ReadElementUtil(r, typeof(OpenIZ.Core.Model.Collection.SimpleAssociationCollection<OpenIZ.Core.Model.Security.SecurityPolicyInstance>), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("policy", context.JsonContext, _retVal, context))));
                                                                                    if ((_instance != null)) {
                                                                                        _retVal.Policies = _instance;
                                                                                    }
                                                                                }
                                                                                else {
                                                                                    if ("relationship".Equals(r.Value)) {
                                                                                        r.Read();
                                                                                        OpenIZ.Core.Model.Collection.VersionedAssociationCollection<OpenIZ.Core.Model.Acts.ActRelationship> _instance = ((OpenIZ.Core.Model.Collection.VersionedAssociationCollection<OpenIZ.Core.Model.Acts.ActRelationship>)(context.JsonContext.ReadElementUtil(r, typeof(OpenIZ.Core.Model.Collection.VersionedAssociationCollection<OpenIZ.Core.Model.Acts.ActRelationship>), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("relationship", context.JsonContext, _retVal, context))));
                                                                                        if ((_instance != null)) {
                                                                                            _retVal.Relationships = _instance;
                                                                                        }
                                                                                    }
                                                                                    else {
                                                                                        if ("identifier".Equals(r.Value)) {
                                                                                            r.Read();
                                                                                            OpenIZ.Core.Model.Collection.VersionedAssociationCollection<OpenIZ.Core.Model.DataTypes.ActIdentifier> _instance = ((OpenIZ.Core.Model.Collection.VersionedAssociationCollection<OpenIZ.Core.Model.DataTypes.ActIdentifier>)(context.JsonContext.ReadElementUtil(r, typeof(OpenIZ.Core.Model.Collection.VersionedAssociationCollection<OpenIZ.Core.Model.DataTypes.ActIdentifier>), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("identifier", context.JsonContext, _retVal, context))));
                                                                                            if ((_instance != null)) {
                                                                                                _retVal.Identifiers = _instance;
                                                                                            }
                                                                                        }
                                                                                        else {
                                                                                            if ("typeConceptModel".Equals(r.Value)) {
                                                                                                r.Read();
                                                                                                OpenIZ.Core.Model.DataTypes.Concept _instance = ((OpenIZ.Core.Model.DataTypes.Concept)(context.JsonContext.ReadElementUtil(r, typeof(OpenIZ.Core.Model.DataTypes.Concept), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("typeConceptModel", context.JsonContext, _retVal, context))));
                                                                                                if ((_instance != null)) {
                                                                                                    _retVal.TypeConcept = _instance;
                                                                                                }
                                                                                            }
                                                                                            else {
                                                                                                if ("statusConceptModel".Equals(r.Value)) {
                                                                                                    r.Read();
                                                                                                    OpenIZ.Core.Model.DataTypes.Concept _instance = ((OpenIZ.Core.Model.DataTypes.Concept)(context.JsonContext.ReadElementUtil(r, typeof(OpenIZ.Core.Model.DataTypes.Concept), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("statusConceptModel", context.JsonContext, _retVal, context))));
                                                                                                    if ((_instance != null)) {
                                                                                                        _retVal.StatusConcept = _instance;
                                                                                                    }
                                                                                                }
                                                                                                else {
                                                                                                    if ("reasonConceptModel".Equals(r.Value)) {
                                                                                                        r.Read();
                                                                                                        OpenIZ.Core.Model.DataTypes.Concept _instance = ((OpenIZ.Core.Model.DataTypes.Concept)(context.JsonContext.ReadElementUtil(r, typeof(OpenIZ.Core.Model.DataTypes.Concept), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("reasonConceptModel", context.JsonContext, _retVal, context))));
                                                                                                        if ((_instance != null)) {
                                                                                                            _retVal.ReasonConcept = _instance;
                                                                                                        }
                                                                                                    }
                                                                                                    else {
                                                                                                        if ("moodConceptModel".Equals(r.Value)) {
                                                                                                            r.Read();
                                                                                                            OpenIZ.Core.Model.DataTypes.Concept _instance = ((OpenIZ.Core.Model.DataTypes.Concept)(context.JsonContext.ReadElementUtil(r, typeof(OpenIZ.Core.Model.DataTypes.Concept), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("moodConceptModel", context.JsonContext, _retVal, context))));
                                                                                                            if ((_instance != null)) {
                                                                                                                _retVal.MoodConcept = _instance;
                                                                                                            }
                                                                                                        }
                                                                                                        else {
                                                                                                            if ("classConceptModel".Equals(r.Value)) {
                                                                                                                r.Read();
                                                                                                                OpenIZ.Core.Model.DataTypes.Concept _instance = ((OpenIZ.Core.Model.DataTypes.Concept)(context.JsonContext.ReadElementUtil(r, typeof(OpenIZ.Core.Model.DataTypes.Concept), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("classConceptModel", context.JsonContext, _retVal, context))));
                                                                                                                if ((_instance != null)) {
                                                                                                                    _retVal.ClassConcept = _instance;
                                                                                                                }
                                                                                                            }
                                                                                                            else {
                                                                                                                if ("typeConcept".Equals(r.Value)) {
                                                                                                                    r.Read();
                                                                                                                    System.Nullable<System.Guid> _instance = ((System.Nullable<System.Guid>)(context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<System.Guid>), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("typeConcept", context.JsonContext, _retVal, context))));
                                                                                                                    if ((_instance != null)) {
                                                                                                                        _retVal.TypeConceptKey = _instance;
                                                                                                                    }
                                                                                                                }
                                                                                                                else {
                                                                                                                    if ("statusConcept".Equals(r.Value)) {
                                                                                                                        r.Read();
                                                                                                                        System.Nullable<System.Guid> _instance = ((System.Nullable<System.Guid>)(context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<System.Guid>), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("statusConcept", context.JsonContext, _retVal, context))));
                                                                                                                        if ((_instance != null)) {
                                                                                                                            _retVal.StatusConceptKey = _instance;
                                                                                                                        }
                                                                                                                    }
                                                                                                                    else {
                                                                                                                        if ("reasonConcept".Equals(r.Value)) {
                                                                                                                            r.Read();
                                                                                                                            System.Nullable<System.Guid> _instance = ((System.Nullable<System.Guid>)(context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<System.Guid>), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("reasonConcept", context.JsonContext, _retVal, context))));
                                                                                                                            if ((_instance != null)) {
                                                                                                                                _retVal.ReasonConceptKey = _instance;
                                                                                                                            }
                                                                                                                        }
                                                                                                                        else {
                                                                                                                            if ("moodConcept".Equals(r.Value)) {
                                                                                                                                r.Read();
                                                                                                                                System.Nullable<System.Guid> _instance = ((System.Nullable<System.Guid>)(context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<System.Guid>), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("moodConcept", context.JsonContext, _retVal, context))));
                                                                                                                                if ((_instance != null)) {
                                                                                                                                    _retVal.MoodConceptKey = _instance;
                                                                                                                                }
                                                                                                                            }
                                                                                                                            else {
                                                                                                                                if ("classConcept".Equals(r.Value)) {
                                                                                                                                    r.Read();
                                                                                                                                    System.Nullable<System.Guid> _instance = ((System.Nullable<System.Guid>)(context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<System.Guid>), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("classConcept", context.JsonContext, _retVal, context))));
                                                                                                                                    if ((_instance != null)) {
                                                                                                                                        _retVal.ClassConceptKey = _instance;
                                                                                                                                    }
                                                                                                                                }
                                                                                                                                else {
                                                                                                                                    if ("stopTime".Equals(r.Value)) {
                                                                                                                                        r.Read();
                                                                                                                                        string _instance = ((string)(context.JsonContext.ReadElementUtil(r, typeof(string), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("stopTime", context.JsonContext, _retVal, context))));
                                                                                                                                        if ((_instance != null)) {
                                                                                                                                            _retVal.StopTimeXml = _instance;
                                                                                                                                        }
                                                                                                                                    }
                                                                                                                                    else {
                                                                                                                                        if ("startTime".Equals(r.Value)) {
                                                                                                                                            r.Read();
                                                                                                                                            string _instance = ((string)(context.JsonContext.ReadElementUtil(r, typeof(string), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("startTime", context.JsonContext, _retVal, context))));
                                                                                                                                            if ((_instance != null)) {
                                                                                                                                                _retVal.StartTimeXml = _instance;
                                                                                                                                            }
                                                                                                                                        }
                                                                                                                                        else {
                                                                                                                                            if ("actTime".Equals(r.Value)) {
                                                                                                                                                r.Read();
                                                                                                                                                string _instance = ((string)(context.JsonContext.ReadElementUtil(r, typeof(string), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("actTime", context.JsonContext, _retVal, context))));
                                                                                                                                                if ((_instance != null)) {
                                                                                                                                                    _retVal.ActTimeXml = _instance;
                                                                                                                                                }
                                                                                                                                            }
                                                                                                                                            else {
                                                                                                                                                if ("template".Equals(r.Value)) {
                                                                                                                                                    r.Read();
                                                                                                                                                    OpenIZ.Core.Model.DataTypes.TemplateDefinition _instance = ((OpenIZ.Core.Model.DataTypes.TemplateDefinition)(context.JsonContext.ReadElementUtil(r, typeof(OpenIZ.Core.Model.DataTypes.TemplateDefinition), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("template", context.JsonContext, _retVal, context))));
                                                                                                                                                    if ((_instance != null)) {
                                                                                                                                                        _retVal.Template = _instance;
                                                                                                                                                    }
                                                                                                                                                }
                                                                                                                                                else {
                                                                                                                                                    if ("isNegated".Equals(r.Value)) {
                                                                                                                                                        r.Read();
                                                                                                                                                        bool _instance = ((bool)(context.JsonContext.ReadElementUtil(r, typeof(bool), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("isNegated", context.JsonContext, _retVal, context))));
                                                                                                                                                        if ((_instance != null)) {
                                                                                                                                                            _retVal.IsNegated = _instance;
                                                                                                                                                        }
                                                                                                                                                    }
                                                                                                                                                    else {
                                                                                                                                                        if ("interpretationConceptModel".Equals(r.Value)) {
                                                                                                                                                            r.Read();
                                                                                                                                                            OpenIZ.Core.Model.DataTypes.Concept _instance = ((OpenIZ.Core.Model.DataTypes.Concept)(context.JsonContext.ReadElementUtil(r, typeof(OpenIZ.Core.Model.DataTypes.Concept), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("interpretationConceptModel", context.JsonContext, _retVal, context))));
                                                                                                                                                            if ((_instance != null)) {
                                                                                                                                                                _retVal.InterpretationConcept = _instance;
                                                                                                                                                            }
                                                                                                                                                        }
                                                                                                                                                        else {
                                                                                                                                                            if ("interpretationConcept".Equals(r.Value)) {
                                                                                                                                                                r.Read();
                                                                                                                                                                System.Nullable<System.Guid> _instance = ((System.Nullable<System.Guid>)(context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<System.Guid>), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("interpretationConcept", context.JsonContext, _retVal, context))));
                                                                                                                                                                if ((_instance != null)) {
                                                                                                                                                                    _retVal.InterpretationConceptKey = _instance;
                                                                                                                                                                }
                                                                                                                                                            }
                                                                                                                                                            else {
                                                                                                                                                                if ("valueModel".Equals(r.Value)) {
                                                                                                                                                                    r.Read();
                                                                                                                                                                    OpenIZ.Core.Model.DataTypes.Concept _instance = ((OpenIZ.Core.Model.DataTypes.Concept)(context.JsonContext.ReadElementUtil(r, typeof(OpenIZ.Core.Model.DataTypes.Concept), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("valueModel", context.JsonContext, _retVal, context))));
                                                                                                                                                                    if ((_instance != null)) {
                                                                                                                                                                        _retVal.Value = _instance;
                                                                                                                                                                    }
                                                                                                                                                                }
                                                                                                                                                                else {
                                                                                                                                                                    if ("value".Equals(r.Value)) {
                                                                                                                                                                        r.Read();
                                                                                                                                                                        System.Nullable<System.Guid> _instance = ((System.Nullable<System.Guid>)(context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<System.Guid>), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("value", context.JsonContext, _retVal, context))));
                                                                                                                                                                        if ((_instance != null)) {
                                                                                                                                                                            _retVal.ValueKey = _instance;
                                                                                                                                                                        }
                                                                                                                                                                    }
                                                                                                                                                                    else {
                                                                                                                                                                        if ("$type".Equals(r.Value)) {
                                                                                                                                                                            System.Type _type = this.m_binder.BindToType("OpenIZ.Core.Model, Version=0.6.14.21496, Culture=neutral, PublicKeyToken=null", r.ReadAsString());
                                                                                                                                                                            if ((_type != typeof(OpenIZ.Core.Model.Acts.CodedObservation))) {
                                                                                                                                                                                OpenIZ.Core.Model.Acts.CodedObservation _nretVal = ((OpenIZ.Core.Model.Acts.CodedObservation)(context.JsonContext.GetFormatter(_type).Deserialize(r, _type, context)));
                                                                                                                                                                                _nretVal.CopyObjectData(_retVal);
                                                                                                                                                                                return _nretVal;
                                                                                                                                                                            }
                                                                                                                                                                        }
                                                                                                                                                                        else {
                                                                                                                                                                            r.Skip();
                                                                                                                                                                        }
                                                                                                                                                                    }
                                                                                                                                                                }
                                                                                                                                                            }
                                                                                                                                                        }
                                                                                                                                                    }
                                                                                                                                                }
                                                                                                                                            }
                                                                                                                                        }
                                                                                                                                    }
                                                                                                                                }
                                                                                                                            }
                                                                                                                        }
                                                                                                                    }
                                                                                                                }
                                                                                                            }
                                                                                                        }
                                                                                                    }
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
                else {
                    if (((r.TokenType == Newtonsoft.Json.JsonToken.EndObject) 
                                && (r.Depth == _depth))) {
                        return _retVal;
                    }
                    else {
                        throw new Newtonsoft.Json.JsonSerializationException("JSON in invalid state");
                    }
                }
            }
            return _retVal;
        }
        
        public object FromSimpleValue(object o) {
            return null;
        }
        
        public object GetSimpleValue(object o) {
            return null;
        }
    }
    
    public class PatientEncounterViewModelSerializer : OpenIZ.Core.Applets.ViewModel.Json.IJsonViewModelTypeFormatter {
        
        private OpenIZ.Core.Model.Serialization.ModelSerializationBinder m_binder = new OpenIZ.Core.Model.Serialization.ModelSerializationBinder();
        
        private OpenIZ.Core.Diagnostics.Tracer m_tracer = OpenIZ.Core.Diagnostics.Tracer.GetTracer(typeof(PatientEncounterViewModelSerializer));
        
        public System.Type HandlesType {
            get {
                return typeof(OpenIZ.Core.Model.Acts.PatientEncounter);
            }
        }
        
        public void Serialize(Newtonsoft.Json.JsonWriter w, OpenIZ.Core.Model.IdentifiedData o, OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext context) {
            if ((o == null)) {
                throw new System.ArgumentNullException("o");
            }
            OpenIZ.Core.Model.Acts.PatientEncounter _strong = null;
            OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext _jsonContext = null;
            bool _loaded = false;
            try {
                _strong = ((OpenIZ.Core.Model.Acts.PatientEncounter)(o));
            }
            catch (System.Exception e) {
                this.m_tracer.TraceError(string.Format("Casting Error: {0}", e));
                throw new System.ArgumentException(string.Format("Invalid type {0} provided, expected {1}", o.GetType(), typeof(OpenIZ.Core.Model.Acts.PatientEncounter)));
            }
            if (context.ShouldSerialize("dischargeDisposition")) {
                if ((_strong.DischargeDispositionKey == null)) {
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "dischargeDisposition", _strong.DischargeDispositionKey, context);
                }
            }
            if (context.ShouldSerialize("dischargeDispositionModel")) {
                if ((_strong.DischargeDisposition == null)) {
                    if ((_strong.Key.HasValue && context.ShouldForceLoad("dischargeDispositionModel", _strong.Key.Value))) {
                        OpenIZ.Core.Model.DataTypes.Concept _delay = null;
                        _delay = context.JsonContext.LoadRelated<OpenIZ.Core.Model.DataTypes.Concept>(_strong.DischargeDispositionKey);
                        _strong.DischargeDisposition = _delay;
                        if ((_delay != null)) {
                            _loaded = true;
                            context.JsonContext.WritePropertyUtil(w, "dischargeDispositionModel", _strong.DischargeDisposition, context);
                        }
                    }
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "dischargeDispositionModel", _strong.DischargeDisposition, context);
                }
            }
            if (context.ShouldSerialize("isNegated")) {
                if ((_strong.IsNegated == null)) {
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "isNegated", _strong.IsNegated, context);
                }
            }
            if (context.ShouldSerialize("template")) {
                if ((_strong.Template == null)) {
                    if ((_strong.Key.HasValue && context.ShouldForceLoad("template", _strong.Key.Value))) {
                        OpenIZ.Core.Model.DataTypes.TemplateDefinition _delay = null;
                    }
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "template", _strong.Template, context);
                }
            }
            if (context.ShouldSerialize("actTime")) {
                if ((_strong.ActTimeXml == null)) {
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "actTime", _strong.ActTimeXml, context);
                }
            }
            if (context.ShouldSerialize("startTime")) {
                if ((_strong.StartTimeXml == null)) {
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "startTime", _strong.StartTimeXml, context);
                }
            }
            if (context.ShouldSerialize("stopTime")) {
                if ((_strong.StopTimeXml == null)) {
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "stopTime", _strong.StopTimeXml, context);
                }
            }
            if (context.ShouldSerialize("classConcept")) {
                if ((_strong.ClassConceptKey == null)) {
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "classConcept", _strong.ClassConceptKey, context);
                }
            }
            if (context.ShouldSerialize("moodConcept")) {
                if ((_strong.MoodConceptKey == null)) {
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "moodConcept", _strong.MoodConceptKey, context);
                }
            }
            if (context.ShouldSerialize("reasonConcept")) {
                if ((_strong.ReasonConceptKey == null)) {
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "reasonConcept", _strong.ReasonConceptKey, context);
                }
            }
            if (context.ShouldSerialize("statusConcept")) {
                if ((_strong.StatusConceptKey == null)) {
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "statusConcept", _strong.StatusConceptKey, context);
                }
            }
            if (context.ShouldSerialize("typeConcept")) {
                if ((_strong.TypeConceptKey == null)) {
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "typeConcept", _strong.TypeConceptKey, context);
                }
            }
            if (context.ShouldSerialize("classConceptModel")) {
                if ((_strong.ClassConcept == null)) {
                    if ((_strong.Key.HasValue && context.ShouldForceLoad("classConceptModel", _strong.Key.Value))) {
                        OpenIZ.Core.Model.DataTypes.Concept _delay = null;
                        _delay = context.JsonContext.LoadRelated<OpenIZ.Core.Model.DataTypes.Concept>(_strong.ClassConceptKey);
                        _strong.ClassConcept = _delay;
                        if ((_delay != null)) {
                            _loaded = true;
                            context.JsonContext.WritePropertyUtil(w, "classConceptModel", _strong.ClassConcept, context);
                        }
                    }
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "classConceptModel", _strong.ClassConcept, context);
                }
            }
            if (context.ShouldSerialize("moodConceptModel")) {
                if ((_strong.MoodConcept == null)) {
                    if ((_strong.Key.HasValue && context.ShouldForceLoad("moodConceptModel", _strong.Key.Value))) {
                        OpenIZ.Core.Model.DataTypes.Concept _delay = null;
                        _delay = context.JsonContext.LoadRelated<OpenIZ.Core.Model.DataTypes.Concept>(_strong.MoodConceptKey);
                        _strong.MoodConcept = _delay;
                        if ((_delay != null)) {
                            _loaded = true;
                            context.JsonContext.WritePropertyUtil(w, "moodConceptModel", _strong.MoodConcept, context);
                        }
                    }
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "moodConceptModel", _strong.MoodConcept, context);
                }
            }
            if (context.ShouldSerialize("reasonConceptModel")) {
                if ((_strong.ReasonConcept == null)) {
                    if ((_strong.Key.HasValue && context.ShouldForceLoad("reasonConceptModel", _strong.Key.Value))) {
                        OpenIZ.Core.Model.DataTypes.Concept _delay = null;
                        _delay = context.JsonContext.LoadRelated<OpenIZ.Core.Model.DataTypes.Concept>(_strong.ReasonConceptKey);
                        _strong.ReasonConcept = _delay;
                        if ((_delay != null)) {
                            _loaded = true;
                            context.JsonContext.WritePropertyUtil(w, "reasonConceptModel", _strong.ReasonConcept, context);
                        }
                    }
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "reasonConceptModel", _strong.ReasonConcept, context);
                }
            }
            if (context.ShouldSerialize("statusConceptModel")) {
                if ((_strong.StatusConcept == null)) {
                    if ((_strong.Key.HasValue && context.ShouldForceLoad("statusConceptModel", _strong.Key.Value))) {
                        OpenIZ.Core.Model.DataTypes.Concept _delay = null;
                        _delay = context.JsonContext.LoadRelated<OpenIZ.Core.Model.DataTypes.Concept>(_strong.StatusConceptKey);
                        _strong.StatusConcept = _delay;
                        if ((_delay != null)) {
                            _loaded = true;
                            context.JsonContext.WritePropertyUtil(w, "statusConceptModel", _strong.StatusConcept, context);
                        }
                    }
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "statusConceptModel", _strong.StatusConcept, context);
                }
            }
            if (context.ShouldSerialize("typeConceptModel")) {
                if ((_strong.TypeConcept == null)) {
                    if ((_strong.Key.HasValue && context.ShouldForceLoad("typeConceptModel", _strong.Key.Value))) {
                        OpenIZ.Core.Model.DataTypes.Concept _delay = null;
                        _delay = context.JsonContext.LoadRelated<OpenIZ.Core.Model.DataTypes.Concept>(_strong.TypeConceptKey);
                        _strong.TypeConcept = _delay;
                        if ((_delay != null)) {
                            _loaded = true;
                            context.JsonContext.WritePropertyUtil(w, "typeConceptModel", _strong.TypeConcept, context);
                        }
                    }
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "typeConceptModel", _strong.TypeConcept, context);
                }
            }
            if (context.ShouldSerialize("identifier")) {
                if (((_strong.Identifiers == null) 
                            || (_strong.Identifiers.Count == 0))) {
                    if ((_strong.Key.HasValue && context.ShouldForceLoad("identifier", _strong.Key.Value))) {
                        OpenIZ.Core.Model.Collection.VersionedAssociationCollection<OpenIZ.Core.Model.DataTypes.ActIdentifier> _delay = null;
                        _delay = new OpenIZ.Core.Model.Collection.VersionedAssociationCollection<OpenIZ.Core.Model.DataTypes.ActIdentifier>(context.JsonContext.LoadCollection<OpenIZ.Core.Model.DataTypes.ActIdentifier>(_strong.Key.Value));
                        _strong.Identifiers = _delay;
                        if ((_delay.Count > 0)) {
                            _loaded = true;
                            context.JsonContext.WritePropertyUtil(w, "identifier", _strong.Identifiers, context);
                        }
                    }
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "identifier", _strong.Identifiers, context);
                }
            }
            if (context.ShouldSerialize("relationship")) {
                if (((_strong.Relationships == null) 
                            || (_strong.Relationships.Count == 0))) {
                    if ((_strong.Key.HasValue && context.ShouldForceLoad("relationship", _strong.Key.Value))) {
                        OpenIZ.Core.Model.Collection.VersionedAssociationCollection<OpenIZ.Core.Model.Acts.ActRelationship> _delay = null;
                        _delay = new OpenIZ.Core.Model.Collection.VersionedAssociationCollection<OpenIZ.Core.Model.Acts.ActRelationship>(context.JsonContext.LoadCollection<OpenIZ.Core.Model.Acts.ActRelationship>(_strong.Key.Value));
                        _strong.Relationships = _delay;
                        if ((_delay.Count > 0)) {
                            _loaded = true;
                            context.JsonContext.WritePropertyUtil(w, "relationship", _strong.Relationships, context);
                        }
                    }
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "relationship", _strong.Relationships, context);
                }
            }
            if (context.ShouldSerialize("policy")) {
                if (((_strong.Policies == null) 
                            || (_strong.Policies.Count == 0))) {
                    if ((_strong.Key.HasValue && context.ShouldForceLoad("policy", _strong.Key.Value))) {
                        OpenIZ.Core.Model.Collection.SimpleAssociationCollection<OpenIZ.Core.Model.Security.SecurityPolicyInstance> _delay = null;
                        _delay = new OpenIZ.Core.Model.Collection.SimpleAssociationCollection<OpenIZ.Core.Model.Security.SecurityPolicyInstance>(context.JsonContext.LoadCollection<OpenIZ.Core.Model.Security.SecurityPolicyInstance>(_strong.Key.Value));
                        _strong.Policies = _delay;
                        if ((_delay.Count > 0)) {
                            _loaded = true;
                            context.JsonContext.WritePropertyUtil(w, "policy", _strong.Policies, context);
                        }
                    }
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "policy", _strong.Policies, context);
                }
            }
            if (context.ShouldSerialize("extension")) {
                if (((_strong.Extensions == null) 
                            || (_strong.Extensions.Count == 0))) {
                    if ((_strong.Key.HasValue && context.ShouldForceLoad("extension", _strong.Key.Value))) {
                        OpenIZ.Core.Model.Collection.VersionedAssociationCollection<OpenIZ.Core.Model.DataTypes.ActExtension> _delay = null;
                        _delay = new OpenIZ.Core.Model.Collection.VersionedAssociationCollection<OpenIZ.Core.Model.DataTypes.ActExtension>(context.JsonContext.LoadCollection<OpenIZ.Core.Model.DataTypes.ActExtension>(_strong.Key.Value));
                        _strong.Extensions = _delay;
                        if ((_delay.Count > 0)) {
                            _loaded = true;
                            context.JsonContext.WritePropertyUtil(w, "extension", _strong.Extensions, context);
                        }
                    }
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "extension", _strong.Extensions, context);
                }
            }
            if (context.ShouldSerialize("note")) {
                if (((_strong.Notes == null) 
                            || (_strong.Notes.Count == 0))) {
                    if ((_strong.Key.HasValue && context.ShouldForceLoad("note", _strong.Key.Value))) {
                        OpenIZ.Core.Model.Collection.VersionedAssociationCollection<OpenIZ.Core.Model.DataTypes.ActNote> _delay = null;
                        _delay = new OpenIZ.Core.Model.Collection.VersionedAssociationCollection<OpenIZ.Core.Model.DataTypes.ActNote>(context.JsonContext.LoadCollection<OpenIZ.Core.Model.DataTypes.ActNote>(_strong.Key.Value));
                        _strong.Notes = _delay;
                        if ((_delay.Count > 0)) {
                            _loaded = true;
                            context.JsonContext.WritePropertyUtil(w, "note", _strong.Notes, context);
                        }
                    }
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "note", _strong.Notes, context);
                }
            }
            if (context.ShouldSerialize("tag")) {
                if (((_strong.Tags == null) 
                            || (_strong.Tags.Count == 0))) {
                    if ((_strong.Key.HasValue && context.ShouldForceLoad("tag", _strong.Key.Value))) {
                        OpenIZ.Core.Model.Collection.SimpleAssociationCollection<OpenIZ.Core.Model.DataTypes.ActTag> _delay = null;
                        _delay = new OpenIZ.Core.Model.Collection.SimpleAssociationCollection<OpenIZ.Core.Model.DataTypes.ActTag>(context.JsonContext.LoadCollection<OpenIZ.Core.Model.DataTypes.ActTag>(_strong.Key.Value));
                        _strong.Tags = _delay;
                        if ((_delay.Count > 0)) {
                            _loaded = true;
                            context.JsonContext.WritePropertyUtil(w, "tag", _strong.Tags, context);
                        }
                    }
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "tag", _strong.Tags, context);
                }
            }
            if (context.ShouldSerialize("protocolsModel")) {
                if (((_strong.Protocols == null) 
                            || (_strong.Protocols.Count == 0))) {
                    if ((_strong.Key.HasValue && context.ShouldForceLoad("protocolsModel", _strong.Key.Value))) {
                        OpenIZ.Core.Model.Collection.VersionedAssociationCollection<OpenIZ.Core.Model.Acts.ActProtocol> _delay = null;
                        _delay = new OpenIZ.Core.Model.Collection.VersionedAssociationCollection<OpenIZ.Core.Model.Acts.ActProtocol>(context.JsonContext.LoadCollection<OpenIZ.Core.Model.Acts.ActProtocol>(_strong.Key.Value));
                        _strong.Protocols = _delay;
                        if ((_delay.Count > 0)) {
                            _loaded = true;
                            context.JsonContext.WritePropertyUtil(w, "protocolsModel", _strong.Protocols, context);
                        }
                    }
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "protocolsModel", _strong.Protocols, context);
                }
            }
            if (context.ShouldSerialize("participation")) {
                if (((_strong.Participations == null) 
                            || (_strong.Participations.Count == 0))) {
                    if ((_strong.Key.HasValue && context.ShouldForceLoad("participation", _strong.Key.Value))) {
                        OpenIZ.Core.Model.Collection.VersionedAssociationCollection<OpenIZ.Core.Model.Acts.ActParticipation> _delay = null;
                        _delay = new OpenIZ.Core.Model.Collection.VersionedAssociationCollection<OpenIZ.Core.Model.Acts.ActParticipation>(context.JsonContext.LoadCollection<OpenIZ.Core.Model.Acts.ActParticipation>(_strong.Key.Value));
                        _strong.Participations = _delay;
                        if ((_delay.Count > 0)) {
                            _loaded = true;
                            context.JsonContext.WritePropertyUtil(w, "participation", _strong.Participations, context);
                        }
                    }
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "participation", _strong.Participations, context);
                }
            }
            if (context.ShouldSerialize("etag")) {
                if ((_strong.Tag == null)) {
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "etag", _strong.Tag, context);
                }
            }
            if (context.ShouldSerialize("previousVersion")) {
                if ((_strong.PreviousVersionKey == null)) {
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "previousVersion", _strong.PreviousVersionKey, context);
                }
            }
            if (context.ShouldSerialize("version")) {
                if ((_strong.VersionKey == null)) {
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "version", _strong.VersionKey, context);
                }
            }
            if (context.ShouldSerialize("sequence")) {
                if ((_strong.VersionSequence == null)) {
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "sequence", _strong.VersionSequence, context);
                }
            }
            if (context.ShouldSerialize("creationTimeModel")) {
                if ((_strong.CreationTime == null)) {
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "creationTimeModel", _strong.CreationTime, context);
                }
            }
            if (context.ShouldSerialize("creationTime")) {
                if ((_strong.CreationTimeXml == null)) {
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "creationTime", _strong.CreationTimeXml, context);
                }
            }
            if (context.ShouldSerialize("obsoletionTimeModel")) {
                if ((_strong.ObsoletionTime == null)) {
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "obsoletionTimeModel", _strong.ObsoletionTime, context);
                }
            }
            if (context.ShouldSerialize("obsoletionTime")) {
                if ((_strong.ObsoletionTimeXml == null)) {
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "obsoletionTime", _strong.ObsoletionTimeXml, context);
                }
            }
            if (context.ShouldSerialize("createdBy")) {
                if ((_strong.CreatedByKey == null)) {
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "createdBy", _strong.CreatedByKey, context);
                }
            }
            if (context.ShouldSerialize("obsoletedBy")) {
                if ((_strong.ObsoletedByKey == null)) {
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "obsoletedBy", _strong.ObsoletedByKey, context);
                }
            }
            if (context.ShouldSerialize("id")) {
                if ((_strong.Key == null)) {
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "id", _strong.Key, context);
                }
            }
            if (((_loaded && _strong.Key.HasValue) 
                        && _strong.VersionKey.HasValue)) {
                ((OpenIZ.Core.Services.IDataCachingService)(OpenIZ.Core.ApplicationServiceContext.Current.GetService(typeof(OpenIZ.Core.Services.IDataCachingService)))).Add(_strong);
            }
        }
        
        public object Deserialize(Newtonsoft.Json.JsonReader r, System.Type asType, OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext context) {
            OpenIZ.Core.Model.Acts.PatientEncounter _retVal = new OpenIZ.Core.Model.Acts.PatientEncounter();
            int _depth = r.Depth;
            if ((r.TokenType != Newtonsoft.Json.JsonToken.StartObject)) {
                _depth = (_depth - 1);
            }
            for (
            ; r.Read(); 
            ) {
                if ((r.TokenType == Newtonsoft.Json.JsonToken.PropertyName)) {
                    if ("id".Equals(r.Value)) {
                        r.Read();
                        System.Nullable<System.Guid> _instance = ((System.Nullable<System.Guid>)(context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<System.Guid>), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("id", context.JsonContext, _retVal, context))));
                        if ((_instance != null)) {
                            _retVal.Key = _instance;
                        }
                    }
                    else {
                        if ("obsoletedBy".Equals(r.Value)) {
                            r.Read();
                            System.Nullable<System.Guid> _instance = ((System.Nullable<System.Guid>)(context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<System.Guid>), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("obsoletedBy", context.JsonContext, _retVal, context))));
                            if ((_instance != null)) {
                                _retVal.ObsoletedByKey = _instance;
                            }
                        }
                        else {
                            if ("createdBy".Equals(r.Value)) {
                                r.Read();
                                System.Nullable<System.Guid> _instance = ((System.Nullable<System.Guid>)(context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<System.Guid>), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("createdBy", context.JsonContext, _retVal, context))));
                                if ((_instance != null)) {
                                    _retVal.CreatedByKey = _instance;
                                }
                            }
                            else {
                                if ("obsoletionTime".Equals(r.Value)) {
                                    r.Read();
                                    string _instance = ((string)(context.JsonContext.ReadElementUtil(r, typeof(string), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("obsoletionTime", context.JsonContext, _retVal, context))));
                                    if ((_instance != null)) {
                                        _retVal.ObsoletionTimeXml = _instance;
                                    }
                                }
                                else {
                                    if ("obsoletionTimeModel".Equals(r.Value)) {
                                        r.Read();
                                        System.Nullable<System.DateTimeOffset> _instance = ((System.Nullable<System.DateTimeOffset>)(context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<System.DateTimeOffset>), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("obsoletionTimeModel", context.JsonContext, _retVal, context))));
                                        if ((_instance != null)) {
                                            _retVal.ObsoletionTime = _instance;
                                        }
                                    }
                                    else {
                                        if ("creationTime".Equals(r.Value)) {
                                            r.Read();
                                            string _instance = ((string)(context.JsonContext.ReadElementUtil(r, typeof(string), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("creationTime", context.JsonContext, _retVal, context))));
                                            if ((_instance != null)) {
                                                _retVal.CreationTimeXml = _instance;
                                            }
                                        }
                                        else {
                                            if ("creationTimeModel".Equals(r.Value)) {
                                                r.Read();
                                                System.DateTimeOffset _instance = ((System.DateTimeOffset)(context.JsonContext.ReadElementUtil(r, typeof(System.DateTimeOffset), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("creationTimeModel", context.JsonContext, _retVal, context))));
                                                if ((_instance != null)) {
                                                    _retVal.CreationTime = _instance;
                                                }
                                            }
                                            else {
                                                if ("sequence".Equals(r.Value)) {
                                                    r.Read();
                                                    System.Nullable<decimal> _instance = ((System.Nullable<decimal>)(context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<decimal>), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("sequence", context.JsonContext, _retVal, context))));
                                                    if ((_instance != null)) {
                                                        _retVal.VersionSequence = _instance;
                                                    }
                                                }
                                                else {
                                                    if ("version".Equals(r.Value)) {
                                                        r.Read();
                                                        System.Nullable<System.Guid> _instance = ((System.Nullable<System.Guid>)(context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<System.Guid>), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("version", context.JsonContext, _retVal, context))));
                                                        if ((_instance != null)) {
                                                            _retVal.VersionKey = _instance;
                                                        }
                                                    }
                                                    else {
                                                        if ("previousVersion".Equals(r.Value)) {
                                                            r.Read();
                                                            System.Nullable<System.Guid> _instance = ((System.Nullable<System.Guid>)(context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<System.Guid>), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("previousVersion", context.JsonContext, _retVal, context))));
                                                            if ((_instance != null)) {
                                                                _retVal.PreviousVersionKey = _instance;
                                                            }
                                                        }
                                                        else {
                                                            if ("participation".Equals(r.Value)) {
                                                                r.Read();
                                                                OpenIZ.Core.Model.Collection.VersionedAssociationCollection<OpenIZ.Core.Model.Acts.ActParticipation> _instance = ((OpenIZ.Core.Model.Collection.VersionedAssociationCollection<OpenIZ.Core.Model.Acts.ActParticipation>)(context.JsonContext.ReadElementUtil(r, typeof(OpenIZ.Core.Model.Collection.VersionedAssociationCollection<OpenIZ.Core.Model.Acts.ActParticipation>), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("participation", context.JsonContext, _retVal, context))));
                                                                if ((_instance != null)) {
                                                                    _retVal.Participations = _instance;
                                                                }
                                                            }
                                                            else {
                                                                if ("protocolsModel".Equals(r.Value)) {
                                                                    r.Read();
                                                                    OpenIZ.Core.Model.Collection.VersionedAssociationCollection<OpenIZ.Core.Model.Acts.ActProtocol> _instance = ((OpenIZ.Core.Model.Collection.VersionedAssociationCollection<OpenIZ.Core.Model.Acts.ActProtocol>)(context.JsonContext.ReadElementUtil(r, typeof(OpenIZ.Core.Model.Collection.VersionedAssociationCollection<OpenIZ.Core.Model.Acts.ActProtocol>), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("protocolsModel", context.JsonContext, _retVal, context))));
                                                                    if ((_instance != null)) {
                                                                        _retVal.Protocols = _instance;
                                                                    }
                                                                }
                                                                else {
                                                                    if ("tag".Equals(r.Value)) {
                                                                        r.Read();
                                                                        OpenIZ.Core.Model.Collection.SimpleAssociationCollection<OpenIZ.Core.Model.DataTypes.ActTag> _instance = ((OpenIZ.Core.Model.Collection.SimpleAssociationCollection<OpenIZ.Core.Model.DataTypes.ActTag>)(context.JsonContext.ReadElementUtil(r, typeof(OpenIZ.Core.Model.Collection.SimpleAssociationCollection<OpenIZ.Core.Model.DataTypes.ActTag>), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("tag", context.JsonContext, _retVal, context))));
                                                                        if ((_instance != null)) {
                                                                            _retVal.Tags = _instance;
                                                                        }
                                                                    }
                                                                    else {
                                                                        if ("note".Equals(r.Value)) {
                                                                            r.Read();
                                                                            OpenIZ.Core.Model.Collection.VersionedAssociationCollection<OpenIZ.Core.Model.DataTypes.ActNote> _instance = ((OpenIZ.Core.Model.Collection.VersionedAssociationCollection<OpenIZ.Core.Model.DataTypes.ActNote>)(context.JsonContext.ReadElementUtil(r, typeof(OpenIZ.Core.Model.Collection.VersionedAssociationCollection<OpenIZ.Core.Model.DataTypes.ActNote>), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("note", context.JsonContext, _retVal, context))));
                                                                            if ((_instance != null)) {
                                                                                _retVal.Notes = _instance;
                                                                            }
                                                                        }
                                                                        else {
                                                                            if ("extension".Equals(r.Value)) {
                                                                                r.Read();
                                                                                OpenIZ.Core.Model.Collection.VersionedAssociationCollection<OpenIZ.Core.Model.DataTypes.ActExtension> _instance = ((OpenIZ.Core.Model.Collection.VersionedAssociationCollection<OpenIZ.Core.Model.DataTypes.ActExtension>)(context.JsonContext.ReadElementUtil(r, typeof(OpenIZ.Core.Model.Collection.VersionedAssociationCollection<OpenIZ.Core.Model.DataTypes.ActExtension>), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("extension", context.JsonContext, _retVal, context))));
                                                                                if ((_instance != null)) {
                                                                                    _retVal.Extensions = _instance;
                                                                                }
                                                                            }
                                                                            else {
                                                                                if ("policy".Equals(r.Value)) {
                                                                                    r.Read();
                                                                                    OpenIZ.Core.Model.Collection.SimpleAssociationCollection<OpenIZ.Core.Model.Security.SecurityPolicyInstance> _instance = ((OpenIZ.Core.Model.Collection.SimpleAssociationCollection<OpenIZ.Core.Model.Security.SecurityPolicyInstance>)(context.JsonContext.ReadElementUtil(r, typeof(OpenIZ.Core.Model.Collection.SimpleAssociationCollection<OpenIZ.Core.Model.Security.SecurityPolicyInstance>), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("policy", context.JsonContext, _retVal, context))));
                                                                                    if ((_instance != null)) {
                                                                                        _retVal.Policies = _instance;
                                                                                    }
                                                                                }
                                                                                else {
                                                                                    if ("relationship".Equals(r.Value)) {
                                                                                        r.Read();
                                                                                        OpenIZ.Core.Model.Collection.VersionedAssociationCollection<OpenIZ.Core.Model.Acts.ActRelationship> _instance = ((OpenIZ.Core.Model.Collection.VersionedAssociationCollection<OpenIZ.Core.Model.Acts.ActRelationship>)(context.JsonContext.ReadElementUtil(r, typeof(OpenIZ.Core.Model.Collection.VersionedAssociationCollection<OpenIZ.Core.Model.Acts.ActRelationship>), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("relationship", context.JsonContext, _retVal, context))));
                                                                                        if ((_instance != null)) {
                                                                                            _retVal.Relationships = _instance;
                                                                                        }
                                                                                    }
                                                                                    else {
                                                                                        if ("identifier".Equals(r.Value)) {
                                                                                            r.Read();
                                                                                            OpenIZ.Core.Model.Collection.VersionedAssociationCollection<OpenIZ.Core.Model.DataTypes.ActIdentifier> _instance = ((OpenIZ.Core.Model.Collection.VersionedAssociationCollection<OpenIZ.Core.Model.DataTypes.ActIdentifier>)(context.JsonContext.ReadElementUtil(r, typeof(OpenIZ.Core.Model.Collection.VersionedAssociationCollection<OpenIZ.Core.Model.DataTypes.ActIdentifier>), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("identifier", context.JsonContext, _retVal, context))));
                                                                                            if ((_instance != null)) {
                                                                                                _retVal.Identifiers = _instance;
                                                                                            }
                                                                                        }
                                                                                        else {
                                                                                            if ("typeConceptModel".Equals(r.Value)) {
                                                                                                r.Read();
                                                                                                OpenIZ.Core.Model.DataTypes.Concept _instance = ((OpenIZ.Core.Model.DataTypes.Concept)(context.JsonContext.ReadElementUtil(r, typeof(OpenIZ.Core.Model.DataTypes.Concept), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("typeConceptModel", context.JsonContext, _retVal, context))));
                                                                                                if ((_instance != null)) {
                                                                                                    _retVal.TypeConcept = _instance;
                                                                                                }
                                                                                            }
                                                                                            else {
                                                                                                if ("statusConceptModel".Equals(r.Value)) {
                                                                                                    r.Read();
                                                                                                    OpenIZ.Core.Model.DataTypes.Concept _instance = ((OpenIZ.Core.Model.DataTypes.Concept)(context.JsonContext.ReadElementUtil(r, typeof(OpenIZ.Core.Model.DataTypes.Concept), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("statusConceptModel", context.JsonContext, _retVal, context))));
                                                                                                    if ((_instance != null)) {
                                                                                                        _retVal.StatusConcept = _instance;
                                                                                                    }
                                                                                                }
                                                                                                else {
                                                                                                    if ("reasonConceptModel".Equals(r.Value)) {
                                                                                                        r.Read();
                                                                                                        OpenIZ.Core.Model.DataTypes.Concept _instance = ((OpenIZ.Core.Model.DataTypes.Concept)(context.JsonContext.ReadElementUtil(r, typeof(OpenIZ.Core.Model.DataTypes.Concept), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("reasonConceptModel", context.JsonContext, _retVal, context))));
                                                                                                        if ((_instance != null)) {
                                                                                                            _retVal.ReasonConcept = _instance;
                                                                                                        }
                                                                                                    }
                                                                                                    else {
                                                                                                        if ("moodConceptModel".Equals(r.Value)) {
                                                                                                            r.Read();
                                                                                                            OpenIZ.Core.Model.DataTypes.Concept _instance = ((OpenIZ.Core.Model.DataTypes.Concept)(context.JsonContext.ReadElementUtil(r, typeof(OpenIZ.Core.Model.DataTypes.Concept), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("moodConceptModel", context.JsonContext, _retVal, context))));
                                                                                                            if ((_instance != null)) {
                                                                                                                _retVal.MoodConcept = _instance;
                                                                                                            }
                                                                                                        }
                                                                                                        else {
                                                                                                            if ("classConceptModel".Equals(r.Value)) {
                                                                                                                r.Read();
                                                                                                                OpenIZ.Core.Model.DataTypes.Concept _instance = ((OpenIZ.Core.Model.DataTypes.Concept)(context.JsonContext.ReadElementUtil(r, typeof(OpenIZ.Core.Model.DataTypes.Concept), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("classConceptModel", context.JsonContext, _retVal, context))));
                                                                                                                if ((_instance != null)) {
                                                                                                                    _retVal.ClassConcept = _instance;
                                                                                                                }
                                                                                                            }
                                                                                                            else {
                                                                                                                if ("typeConcept".Equals(r.Value)) {
                                                                                                                    r.Read();
                                                                                                                    System.Nullable<System.Guid> _instance = ((System.Nullable<System.Guid>)(context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<System.Guid>), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("typeConcept", context.JsonContext, _retVal, context))));
                                                                                                                    if ((_instance != null)) {
                                                                                                                        _retVal.TypeConceptKey = _instance;
                                                                                                                    }
                                                                                                                }
                                                                                                                else {
                                                                                                                    if ("statusConcept".Equals(r.Value)) {
                                                                                                                        r.Read();
                                                                                                                        System.Nullable<System.Guid> _instance = ((System.Nullable<System.Guid>)(context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<System.Guid>), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("statusConcept", context.JsonContext, _retVal, context))));
                                                                                                                        if ((_instance != null)) {
                                                                                                                            _retVal.StatusConceptKey = _instance;
                                                                                                                        }
                                                                                                                    }
                                                                                                                    else {
                                                                                                                        if ("reasonConcept".Equals(r.Value)) {
                                                                                                                            r.Read();
                                                                                                                            System.Nullable<System.Guid> _instance = ((System.Nullable<System.Guid>)(context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<System.Guid>), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("reasonConcept", context.JsonContext, _retVal, context))));
                                                                                                                            if ((_instance != null)) {
                                                                                                                                _retVal.ReasonConceptKey = _instance;
                                                                                                                            }
                                                                                                                        }
                                                                                                                        else {
                                                                                                                            if ("moodConcept".Equals(r.Value)) {
                                                                                                                                r.Read();
                                                                                                                                System.Nullable<System.Guid> _instance = ((System.Nullable<System.Guid>)(context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<System.Guid>), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("moodConcept", context.JsonContext, _retVal, context))));
                                                                                                                                if ((_instance != null)) {
                                                                                                                                    _retVal.MoodConceptKey = _instance;
                                                                                                                                }
                                                                                                                            }
                                                                                                                            else {
                                                                                                                                if ("classConcept".Equals(r.Value)) {
                                                                                                                                    r.Read();
                                                                                                                                    System.Nullable<System.Guid> _instance = ((System.Nullable<System.Guid>)(context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<System.Guid>), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("classConcept", context.JsonContext, _retVal, context))));
                                                                                                                                    if ((_instance != null)) {
                                                                                                                                        _retVal.ClassConceptKey = _instance;
                                                                                                                                    }
                                                                                                                                }
                                                                                                                                else {
                                                                                                                                    if ("stopTime".Equals(r.Value)) {
                                                                                                                                        r.Read();
                                                                                                                                        string _instance = ((string)(context.JsonContext.ReadElementUtil(r, typeof(string), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("stopTime", context.JsonContext, _retVal, context))));
                                                                                                                                        if ((_instance != null)) {
                                                                                                                                            _retVal.StopTimeXml = _instance;
                                                                                                                                        }
                                                                                                                                    }
                                                                                                                                    else {
                                                                                                                                        if ("startTime".Equals(r.Value)) {
                                                                                                                                            r.Read();
                                                                                                                                            string _instance = ((string)(context.JsonContext.ReadElementUtil(r, typeof(string), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("startTime", context.JsonContext, _retVal, context))));
                                                                                                                                            if ((_instance != null)) {
                                                                                                                                                _retVal.StartTimeXml = _instance;
                                                                                                                                            }
                                                                                                                                        }
                                                                                                                                        else {
                                                                                                                                            if ("actTime".Equals(r.Value)) {
                                                                                                                                                r.Read();
                                                                                                                                                string _instance = ((string)(context.JsonContext.ReadElementUtil(r, typeof(string), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("actTime", context.JsonContext, _retVal, context))));
                                                                                                                                                if ((_instance != null)) {
                                                                                                                                                    _retVal.ActTimeXml = _instance;
                                                                                                                                                }
                                                                                                                                            }
                                                                                                                                            else {
                                                                                                                                                if ("template".Equals(r.Value)) {
                                                                                                                                                    r.Read();
                                                                                                                                                    OpenIZ.Core.Model.DataTypes.TemplateDefinition _instance = ((OpenIZ.Core.Model.DataTypes.TemplateDefinition)(context.JsonContext.ReadElementUtil(r, typeof(OpenIZ.Core.Model.DataTypes.TemplateDefinition), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("template", context.JsonContext, _retVal, context))));
                                                                                                                                                    if ((_instance != null)) {
                                                                                                                                                        _retVal.Template = _instance;
                                                                                                                                                    }
                                                                                                                                                }
                                                                                                                                                else {
                                                                                                                                                    if ("isNegated".Equals(r.Value)) {
                                                                                                                                                        r.Read();
                                                                                                                                                        bool _instance = ((bool)(context.JsonContext.ReadElementUtil(r, typeof(bool), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("isNegated", context.JsonContext, _retVal, context))));
                                                                                                                                                        if ((_instance != null)) {
                                                                                                                                                            _retVal.IsNegated = _instance;
                                                                                                                                                        }
                                                                                                                                                    }
                                                                                                                                                    else {
                                                                                                                                                        if ("dischargeDispositionModel".Equals(r.Value)) {
                                                                                                                                                            r.Read();
                                                                                                                                                            OpenIZ.Core.Model.DataTypes.Concept _instance = ((OpenIZ.Core.Model.DataTypes.Concept)(context.JsonContext.ReadElementUtil(r, typeof(OpenIZ.Core.Model.DataTypes.Concept), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("dischargeDispositionModel", context.JsonContext, _retVal, context))));
                                                                                                                                                            if ((_instance != null)) {
                                                                                                                                                                _retVal.DischargeDisposition = _instance;
                                                                                                                                                            }
                                                                                                                                                        }
                                                                                                                                                        else {
                                                                                                                                                            if ("dischargeDisposition".Equals(r.Value)) {
                                                                                                                                                                r.Read();
                                                                                                                                                                System.Nullable<System.Guid> _instance = ((System.Nullable<System.Guid>)(context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<System.Guid>), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("dischargeDisposition", context.JsonContext, _retVal, context))));
                                                                                                                                                                if ((_instance != null)) {
                                                                                                                                                                    _retVal.DischargeDispositionKey = _instance;
                                                                                                                                                                }
                                                                                                                                                            }
                                                                                                                                                            else {
                                                                                                                                                                if ("$type".Equals(r.Value)) {
                                                                                                                                                                    System.Type _type = this.m_binder.BindToType("OpenIZ.Core.Model, Version=0.6.14.21496, Culture=neutral, PublicKeyToken=null", r.ReadAsString());
                                                                                                                                                                    if ((_type != typeof(OpenIZ.Core.Model.Acts.PatientEncounter))) {
                                                                                                                                                                        OpenIZ.Core.Model.Acts.PatientEncounter _nretVal = ((OpenIZ.Core.Model.Acts.PatientEncounter)(context.JsonContext.GetFormatter(_type).Deserialize(r, _type, context)));
                                                                                                                                                                        _nretVal.CopyObjectData(_retVal);
                                                                                                                                                                        return _nretVal;
                                                                                                                                                                    }
                                                                                                                                                                }
                                                                                                                                                                else {
                                                                                                                                                                    r.Skip();
                                                                                                                                                                }
                                                                                                                                                            }
                                                                                                                                                        }
                                                                                                                                                    }
                                                                                                                                                }
                                                                                                                                            }
                                                                                                                                        }
                                                                                                                                    }
                                                                                                                                }
                                                                                                                            }
                                                                                                                        }
                                                                                                                    }
                                                                                                                }
                                                                                                            }
                                                                                                        }
                                                                                                    }
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
                else {
                    if (((r.TokenType == Newtonsoft.Json.JsonToken.EndObject) 
                                && (r.Depth == _depth))) {
                        return _retVal;
                    }
                    else {
                        throw new Newtonsoft.Json.JsonSerializationException("JSON in invalid state");
                    }
                }
            }
            return _retVal;
        }
        
        public object FromSimpleValue(object o) {
            return null;
        }
        
        public object GetSimpleValue(object o) {
            return null;
        }
    }
    
    public class ProtocolViewModelSerializer : OpenIZ.Core.Applets.ViewModel.Json.IJsonViewModelTypeFormatter {
        
        private OpenIZ.Core.Model.Serialization.ModelSerializationBinder m_binder = new OpenIZ.Core.Model.Serialization.ModelSerializationBinder();
        
        private OpenIZ.Core.Diagnostics.Tracer m_tracer = OpenIZ.Core.Diagnostics.Tracer.GetTracer(typeof(ProtocolViewModelSerializer));
        
        public System.Type HandlesType {
            get {
                return typeof(OpenIZ.Core.Model.Acts.Protocol);
            }
        }
        
        public void Serialize(Newtonsoft.Json.JsonWriter w, OpenIZ.Core.Model.IdentifiedData o, OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext context) {
            if ((o == null)) {
                throw new System.ArgumentNullException("o");
            }
            OpenIZ.Core.Model.Acts.Protocol _strong = null;
            OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext _jsonContext = null;
            bool _loaded = false;
            try {
                _strong = ((OpenIZ.Core.Model.Acts.Protocol)(o));
            }
            catch (System.Exception e) {
                this.m_tracer.TraceError(string.Format("Casting Error: {0}", e));
                throw new System.ArgumentException(string.Format("Invalid type {0} provided, expected {1}", o.GetType(), typeof(OpenIZ.Core.Model.Acts.Protocol)));
            }
            if (context.ShouldSerialize("name")) {
                if ((_strong.Name == null)) {
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "name", _strong.Name, context);
                }
            }
            if (context.ShouldSerialize("handlerClass")) {
                if ((_strong.HandlerClassName == null)) {
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "handlerClass", _strong.HandlerClassName, context);
                }
            }
            if (context.ShouldSerialize("definition")) {
                if ((_strong.Definition == null)) {
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "definition", _strong.Definition, context);
                }
            }
            if (context.ShouldSerialize("creationTimeModel")) {
                if ((_strong.CreationTime == null)) {
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "creationTimeModel", _strong.CreationTime, context);
                }
            }
            if (context.ShouldSerialize("creationTime")) {
                if ((_strong.CreationTimeXml == null)) {
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "creationTime", _strong.CreationTimeXml, context);
                }
            }
            if (context.ShouldSerialize("obsoletionTimeModel")) {
                if ((_strong.ObsoletionTime == null)) {
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "obsoletionTimeModel", _strong.ObsoletionTime, context);
                }
            }
            if (context.ShouldSerialize("obsoletionTime")) {
                if ((_strong.ObsoletionTimeXml == null)) {
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "obsoletionTime", _strong.ObsoletionTimeXml, context);
                }
            }
            if (context.ShouldSerialize("createdBy")) {
                if ((_strong.CreatedByKey == null)) {
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "createdBy", _strong.CreatedByKey, context);
                }
            }
            if (context.ShouldSerialize("obsoletedBy")) {
                if ((_strong.ObsoletedByKey == null)) {
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "obsoletedBy", _strong.ObsoletedByKey, context);
                }
            }
            if (context.ShouldSerialize("id")) {
                if ((_strong.Key == null)) {
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "id", _strong.Key, context);
                }
            }
            if (context.ShouldSerialize("etag")) {
                if ((_strong.Tag == null)) {
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "etag", _strong.Tag, context);
                }
            }
            if ((_loaded && _strong.Key.HasValue)) {
                ((OpenIZ.Core.Services.IDataCachingService)(OpenIZ.Core.ApplicationServiceContext.Current.GetService(typeof(OpenIZ.Core.Services.IDataCachingService)))).Add(_strong);
            }
        }
        
        public object Deserialize(Newtonsoft.Json.JsonReader r, System.Type asType, OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext context) {
            OpenIZ.Core.Model.Acts.Protocol _retVal = new OpenIZ.Core.Model.Acts.Protocol();
            int _depth = r.Depth;
            if ((r.TokenType != Newtonsoft.Json.JsonToken.StartObject)) {
                _depth = (_depth - 1);
            }
            for (
            ; r.Read(); 
            ) {
                if ((r.TokenType == Newtonsoft.Json.JsonToken.PropertyName)) {
                    if ("id".Equals(r.Value)) {
                        r.Read();
                        System.Nullable<System.Guid> _instance = ((System.Nullable<System.Guid>)(context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<System.Guid>), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("id", context.JsonContext, _retVal, context))));
                        if ((_instance != null)) {
                            _retVal.Key = _instance;
                        }
                    }
                    else {
                        if ("obsoletedBy".Equals(r.Value)) {
                            r.Read();
                            System.Nullable<System.Guid> _instance = ((System.Nullable<System.Guid>)(context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<System.Guid>), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("obsoletedBy", context.JsonContext, _retVal, context))));
                            if ((_instance != null)) {
                                _retVal.ObsoletedByKey = _instance;
                            }
                        }
                        else {
                            if ("createdBy".Equals(r.Value)) {
                                r.Read();
                                System.Nullable<System.Guid> _instance = ((System.Nullable<System.Guid>)(context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<System.Guid>), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("createdBy", context.JsonContext, _retVal, context))));
                                if ((_instance != null)) {
                                    _retVal.CreatedByKey = _instance;
                                }
                            }
                            else {
                                if ("obsoletionTime".Equals(r.Value)) {
                                    r.Read();
                                    string _instance = ((string)(context.JsonContext.ReadElementUtil(r, typeof(string), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("obsoletionTime", context.JsonContext, _retVal, context))));
                                    if ((_instance != null)) {
                                        _retVal.ObsoletionTimeXml = _instance;
                                    }
                                }
                                else {
                                    if ("obsoletionTimeModel".Equals(r.Value)) {
                                        r.Read();
                                        System.Nullable<System.DateTimeOffset> _instance = ((System.Nullable<System.DateTimeOffset>)(context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<System.DateTimeOffset>), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("obsoletionTimeModel", context.JsonContext, _retVal, context))));
                                        if ((_instance != null)) {
                                            _retVal.ObsoletionTime = _instance;
                                        }
                                    }
                                    else {
                                        if ("creationTime".Equals(r.Value)) {
                                            r.Read();
                                            string _instance = ((string)(context.JsonContext.ReadElementUtil(r, typeof(string), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("creationTime", context.JsonContext, _retVal, context))));
                                            if ((_instance != null)) {
                                                _retVal.CreationTimeXml = _instance;
                                            }
                                        }
                                        else {
                                            if ("creationTimeModel".Equals(r.Value)) {
                                                r.Read();
                                                System.DateTimeOffset _instance = ((System.DateTimeOffset)(context.JsonContext.ReadElementUtil(r, typeof(System.DateTimeOffset), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("creationTimeModel", context.JsonContext, _retVal, context))));
                                                if ((_instance != null)) {
                                                    _retVal.CreationTime = _instance;
                                                }
                                            }
                                            else {
                                                if ("definition".Equals(r.Value)) {
                                                    r.Read();
                                                    byte[] _instance = ((byte[])(context.JsonContext.ReadElementUtil(r, typeof(byte[]), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("definition", context.JsonContext, _retVal, context))));
                                                    if ((_instance != null)) {
                                                        _retVal.Definition = _instance;
                                                    }
                                                }
                                                else {
                                                    if ("handlerClass".Equals(r.Value)) {
                                                        r.Read();
                                                        string _instance = ((string)(context.JsonContext.ReadElementUtil(r, typeof(string), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("handlerClass", context.JsonContext, _retVal, context))));
                                                        if ((_instance != null)) {
                                                            _retVal.HandlerClassName = _instance;
                                                        }
                                                    }
                                                    else {
                                                        if ("name".Equals(r.Value)) {
                                                            r.Read();
                                                            string _instance = ((string)(context.JsonContext.ReadElementUtil(r, typeof(string), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("name", context.JsonContext, _retVal, context))));
                                                            if ((_instance != null)) {
                                                                _retVal.Name = _instance;
                                                            }
                                                        }
                                                        else {
                                                            if ("$type".Equals(r.Value)) {
                                                                System.Type _type = this.m_binder.BindToType("OpenIZ.Core.Model, Version=0.6.14.21496, Culture=neutral, PublicKeyToken=null", r.ReadAsString());
                                                                if ((_type != typeof(OpenIZ.Core.Model.Acts.Protocol))) {
                                                                    OpenIZ.Core.Model.Acts.Protocol _nretVal = ((OpenIZ.Core.Model.Acts.Protocol)(context.JsonContext.GetFormatter(_type).Deserialize(r, _type, context)));
                                                                    _nretVal.CopyObjectData(_retVal);
                                                                    return _nretVal;
                                                                }
                                                            }
                                                            else {
                                                                r.Skip();
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
                else {
                    if (((r.TokenType == Newtonsoft.Json.JsonToken.EndObject) 
                                && (r.Depth == _depth))) {
                        return _retVal;
                    }
                    else {
                        throw new Newtonsoft.Json.JsonSerializationException("JSON in invalid state");
                    }
                }
            }
            return _retVal;
        }
        
        public object FromSimpleValue(object o) {
            return null;
        }
        
        public object GetSimpleValue(object o) {
            return null;
        }
    }
    
    public class SubstanceAdministrationViewModelSerializer : OpenIZ.Core.Applets.ViewModel.Json.IJsonViewModelTypeFormatter {
        
        private OpenIZ.Core.Model.Serialization.ModelSerializationBinder m_binder = new OpenIZ.Core.Model.Serialization.ModelSerializationBinder();
        
        private OpenIZ.Core.Diagnostics.Tracer m_tracer = OpenIZ.Core.Diagnostics.Tracer.GetTracer(typeof(SubstanceAdministrationViewModelSerializer));
        
        public System.Type HandlesType {
            get {
                return typeof(OpenIZ.Core.Model.Acts.SubstanceAdministration);
            }
        }
        
        public void Serialize(Newtonsoft.Json.JsonWriter w, OpenIZ.Core.Model.IdentifiedData o, OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext context) {
            if ((o == null)) {
                throw new System.ArgumentNullException("o");
            }
            OpenIZ.Core.Model.Acts.SubstanceAdministration _strong = null;
            OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext _jsonContext = null;
            bool _loaded = false;
            try {
                _strong = ((OpenIZ.Core.Model.Acts.SubstanceAdministration)(o));
            }
            catch (System.Exception e) {
                this.m_tracer.TraceError(string.Format("Casting Error: {0}", e));
                throw new System.ArgumentException(string.Format("Invalid type {0} provided, expected {1}", o.GetType(), typeof(OpenIZ.Core.Model.Acts.SubstanceAdministration)));
            }
            if (context.ShouldSerialize("route")) {
                if ((_strong.RouteKey == null)) {
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "route", _strong.RouteKey, context);
                }
            }
            if (context.ShouldSerialize("doseUnit")) {
                if ((_strong.DoseUnitKey == null)) {
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "doseUnit", _strong.DoseUnitKey, context);
                }
            }
            if (context.ShouldSerialize("routeModel")) {
                if ((_strong.Route == null)) {
                    if ((_strong.Key.HasValue && context.ShouldForceLoad("routeModel", _strong.Key.Value))) {
                        OpenIZ.Core.Model.DataTypes.Concept _delay = null;
                        _delay = context.JsonContext.LoadRelated<OpenIZ.Core.Model.DataTypes.Concept>(_strong.RouteKey);
                        _strong.Route = _delay;
                        if ((_delay != null)) {
                            _loaded = true;
                            context.JsonContext.WritePropertyUtil(w, "routeModel", _strong.Route, context);
                        }
                    }
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "routeModel", _strong.Route, context);
                }
            }
            if (context.ShouldSerialize("doseUnitModel")) {
                if ((_strong.DoseUnit == null)) {
                    if ((_strong.Key.HasValue && context.ShouldForceLoad("doseUnitModel", _strong.Key.Value))) {
                        OpenIZ.Core.Model.DataTypes.Concept _delay = null;
                        _delay = context.JsonContext.LoadRelated<OpenIZ.Core.Model.DataTypes.Concept>(_strong.DoseUnitKey);
                        _strong.DoseUnit = _delay;
                        if ((_delay != null)) {
                            _loaded = true;
                            context.JsonContext.WritePropertyUtil(w, "doseUnitModel", _strong.DoseUnit, context);
                        }
                    }
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "doseUnitModel", _strong.DoseUnit, context);
                }
            }
            if (context.ShouldSerialize("doseQuantity")) {
                if ((_strong.DoseQuantity == null)) {
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "doseQuantity", _strong.DoseQuantity, context);
                }
            }
            if (context.ShouldSerialize("doseSequence")) {
                if ((_strong.SequenceId == null)) {
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "doseSequence", _strong.SequenceId, context);
                }
            }
            if (context.ShouldSerialize("site")) {
                if ((_strong.SiteKey == null)) {
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "site", _strong.SiteKey, context);
                }
            }
            if (context.ShouldSerialize("siteModel")) {
                if ((_strong.Site == null)) {
                    if ((_strong.Key.HasValue && context.ShouldForceLoad("siteModel", _strong.Key.Value))) {
                        OpenIZ.Core.Model.DataTypes.Concept _delay = null;
                        _delay = context.JsonContext.LoadRelated<OpenIZ.Core.Model.DataTypes.Concept>(_strong.SiteKey);
                        _strong.Site = _delay;
                        if ((_delay != null)) {
                            _loaded = true;
                            context.JsonContext.WritePropertyUtil(w, "siteModel", _strong.Site, context);
                        }
                    }
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "siteModel", _strong.Site, context);
                }
            }
            if (context.ShouldSerialize("isNegated")) {
                if ((_strong.IsNegated == null)) {
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "isNegated", _strong.IsNegated, context);
                }
            }
            if (context.ShouldSerialize("template")) {
                if ((_strong.Template == null)) {
                    if ((_strong.Key.HasValue && context.ShouldForceLoad("template", _strong.Key.Value))) {
                        OpenIZ.Core.Model.DataTypes.TemplateDefinition _delay = null;
                    }
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "template", _strong.Template, context);
                }
            }
            if (context.ShouldSerialize("actTime")) {
                if ((_strong.ActTimeXml == null)) {
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "actTime", _strong.ActTimeXml, context);
                }
            }
            if (context.ShouldSerialize("startTime")) {
                if ((_strong.StartTimeXml == null)) {
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "startTime", _strong.StartTimeXml, context);
                }
            }
            if (context.ShouldSerialize("stopTime")) {
                if ((_strong.StopTimeXml == null)) {
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "stopTime", _strong.StopTimeXml, context);
                }
            }
            if (context.ShouldSerialize("classConcept")) {
                if ((_strong.ClassConceptKey == null)) {
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "classConcept", _strong.ClassConceptKey, context);
                }
            }
            if (context.ShouldSerialize("moodConcept")) {
                if ((_strong.MoodConceptKey == null)) {
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "moodConcept", _strong.MoodConceptKey, context);
                }
            }
            if (context.ShouldSerialize("reasonConcept")) {
                if ((_strong.ReasonConceptKey == null)) {
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "reasonConcept", _strong.ReasonConceptKey, context);
                }
            }
            if (context.ShouldSerialize("statusConcept")) {
                if ((_strong.StatusConceptKey == null)) {
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "statusConcept", _strong.StatusConceptKey, context);
                }
            }
            if (context.ShouldSerialize("typeConcept")) {
                if ((_strong.TypeConceptKey == null)) {
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "typeConcept", _strong.TypeConceptKey, context);
                }
            }
            if (context.ShouldSerialize("classConceptModel")) {
                if ((_strong.ClassConcept == null)) {
                    if ((_strong.Key.HasValue && context.ShouldForceLoad("classConceptModel", _strong.Key.Value))) {
                        OpenIZ.Core.Model.DataTypes.Concept _delay = null;
                        _delay = context.JsonContext.LoadRelated<OpenIZ.Core.Model.DataTypes.Concept>(_strong.ClassConceptKey);
                        _strong.ClassConcept = _delay;
                        if ((_delay != null)) {
                            _loaded = true;
                            context.JsonContext.WritePropertyUtil(w, "classConceptModel", _strong.ClassConcept, context);
                        }
                    }
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "classConceptModel", _strong.ClassConcept, context);
                }
            }
            if (context.ShouldSerialize("moodConceptModel")) {
                if ((_strong.MoodConcept == null)) {
                    if ((_strong.Key.HasValue && context.ShouldForceLoad("moodConceptModel", _strong.Key.Value))) {
                        OpenIZ.Core.Model.DataTypes.Concept _delay = null;
                        _delay = context.JsonContext.LoadRelated<OpenIZ.Core.Model.DataTypes.Concept>(_strong.MoodConceptKey);
                        _strong.MoodConcept = _delay;
                        if ((_delay != null)) {
                            _loaded = true;
                            context.JsonContext.WritePropertyUtil(w, "moodConceptModel", _strong.MoodConcept, context);
                        }
                    }
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "moodConceptModel", _strong.MoodConcept, context);
                }
            }
            if (context.ShouldSerialize("reasonConceptModel")) {
                if ((_strong.ReasonConcept == null)) {
                    if ((_strong.Key.HasValue && context.ShouldForceLoad("reasonConceptModel", _strong.Key.Value))) {
                        OpenIZ.Core.Model.DataTypes.Concept _delay = null;
                        _delay = context.JsonContext.LoadRelated<OpenIZ.Core.Model.DataTypes.Concept>(_strong.ReasonConceptKey);
                        _strong.ReasonConcept = _delay;
                        if ((_delay != null)) {
                            _loaded = true;
                            context.JsonContext.WritePropertyUtil(w, "reasonConceptModel", _strong.ReasonConcept, context);
                        }
                    }
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "reasonConceptModel", _strong.ReasonConcept, context);
                }
            }
            if (context.ShouldSerialize("statusConceptModel")) {
                if ((_strong.StatusConcept == null)) {
                    if ((_strong.Key.HasValue && context.ShouldForceLoad("statusConceptModel", _strong.Key.Value))) {
                        OpenIZ.Core.Model.DataTypes.Concept _delay = null;
                        _delay = context.JsonContext.LoadRelated<OpenIZ.Core.Model.DataTypes.Concept>(_strong.StatusConceptKey);
                        _strong.StatusConcept = _delay;
                        if ((_delay != null)) {
                            _loaded = true;
                            context.JsonContext.WritePropertyUtil(w, "statusConceptModel", _strong.StatusConcept, context);
                        }
                    }
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "statusConceptModel", _strong.StatusConcept, context);
                }
            }
            if (context.ShouldSerialize("typeConceptModel")) {
                if ((_strong.TypeConcept == null)) {
                    if ((_strong.Key.HasValue && context.ShouldForceLoad("typeConceptModel", _strong.Key.Value))) {
                        OpenIZ.Core.Model.DataTypes.Concept _delay = null;
                        _delay = context.JsonContext.LoadRelated<OpenIZ.Core.Model.DataTypes.Concept>(_strong.TypeConceptKey);
                        _strong.TypeConcept = _delay;
                        if ((_delay != null)) {
                            _loaded = true;
                            context.JsonContext.WritePropertyUtil(w, "typeConceptModel", _strong.TypeConcept, context);
                        }
                    }
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "typeConceptModel", _strong.TypeConcept, context);
                }
            }
            if (context.ShouldSerialize("identifier")) {
                if (((_strong.Identifiers == null) 
                            || (_strong.Identifiers.Count == 0))) {
                    if ((_strong.Key.HasValue && context.ShouldForceLoad("identifier", _strong.Key.Value))) {
                        OpenIZ.Core.Model.Collection.VersionedAssociationCollection<OpenIZ.Core.Model.DataTypes.ActIdentifier> _delay = null;
                        _delay = new OpenIZ.Core.Model.Collection.VersionedAssociationCollection<OpenIZ.Core.Model.DataTypes.ActIdentifier>(context.JsonContext.LoadCollection<OpenIZ.Core.Model.DataTypes.ActIdentifier>(_strong.Key.Value));
                        _strong.Identifiers = _delay;
                        if ((_delay.Count > 0)) {
                            _loaded = true;
                            context.JsonContext.WritePropertyUtil(w, "identifier", _strong.Identifiers, context);
                        }
                    }
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "identifier", _strong.Identifiers, context);
                }
            }
            if (context.ShouldSerialize("relationship")) {
                if (((_strong.Relationships == null) 
                            || (_strong.Relationships.Count == 0))) {
                    if ((_strong.Key.HasValue && context.ShouldForceLoad("relationship", _strong.Key.Value))) {
                        OpenIZ.Core.Model.Collection.VersionedAssociationCollection<OpenIZ.Core.Model.Acts.ActRelationship> _delay = null;
                        _delay = new OpenIZ.Core.Model.Collection.VersionedAssociationCollection<OpenIZ.Core.Model.Acts.ActRelationship>(context.JsonContext.LoadCollection<OpenIZ.Core.Model.Acts.ActRelationship>(_strong.Key.Value));
                        _strong.Relationships = _delay;
                        if ((_delay.Count > 0)) {
                            _loaded = true;
                            context.JsonContext.WritePropertyUtil(w, "relationship", _strong.Relationships, context);
                        }
                    }
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "relationship", _strong.Relationships, context);
                }
            }
            if (context.ShouldSerialize("policy")) {
                if (((_strong.Policies == null) 
                            || (_strong.Policies.Count == 0))) {
                    if ((_strong.Key.HasValue && context.ShouldForceLoad("policy", _strong.Key.Value))) {
                        OpenIZ.Core.Model.Collection.SimpleAssociationCollection<OpenIZ.Core.Model.Security.SecurityPolicyInstance> _delay = null;
                        _delay = new OpenIZ.Core.Model.Collection.SimpleAssociationCollection<OpenIZ.Core.Model.Security.SecurityPolicyInstance>(context.JsonContext.LoadCollection<OpenIZ.Core.Model.Security.SecurityPolicyInstance>(_strong.Key.Value));
                        _strong.Policies = _delay;
                        if ((_delay.Count > 0)) {
                            _loaded = true;
                            context.JsonContext.WritePropertyUtil(w, "policy", _strong.Policies, context);
                        }
                    }
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "policy", _strong.Policies, context);
                }
            }
            if (context.ShouldSerialize("extension")) {
                if (((_strong.Extensions == null) 
                            || (_strong.Extensions.Count == 0))) {
                    if ((_strong.Key.HasValue && context.ShouldForceLoad("extension", _strong.Key.Value))) {
                        OpenIZ.Core.Model.Collection.VersionedAssociationCollection<OpenIZ.Core.Model.DataTypes.ActExtension> _delay = null;
                        _delay = new OpenIZ.Core.Model.Collection.VersionedAssociationCollection<OpenIZ.Core.Model.DataTypes.ActExtension>(context.JsonContext.LoadCollection<OpenIZ.Core.Model.DataTypes.ActExtension>(_strong.Key.Value));
                        _strong.Extensions = _delay;
                        if ((_delay.Count > 0)) {
                            _loaded = true;
                            context.JsonContext.WritePropertyUtil(w, "extension", _strong.Extensions, context);
                        }
                    }
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "extension", _strong.Extensions, context);
                }
            }
            if (context.ShouldSerialize("note")) {
                if (((_strong.Notes == null) 
                            || (_strong.Notes.Count == 0))) {
                    if ((_strong.Key.HasValue && context.ShouldForceLoad("note", _strong.Key.Value))) {
                        OpenIZ.Core.Model.Collection.VersionedAssociationCollection<OpenIZ.Core.Model.DataTypes.ActNote> _delay = null;
                        _delay = new OpenIZ.Core.Model.Collection.VersionedAssociationCollection<OpenIZ.Core.Model.DataTypes.ActNote>(context.JsonContext.LoadCollection<OpenIZ.Core.Model.DataTypes.ActNote>(_strong.Key.Value));
                        _strong.Notes = _delay;
                        if ((_delay.Count > 0)) {
                            _loaded = true;
                            context.JsonContext.WritePropertyUtil(w, "note", _strong.Notes, context);
                        }
                    }
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "note", _strong.Notes, context);
                }
            }
            if (context.ShouldSerialize("tag")) {
                if (((_strong.Tags == null) 
                            || (_strong.Tags.Count == 0))) {
                    if ((_strong.Key.HasValue && context.ShouldForceLoad("tag", _strong.Key.Value))) {
                        OpenIZ.Core.Model.Collection.SimpleAssociationCollection<OpenIZ.Core.Model.DataTypes.ActTag> _delay = null;
                        _delay = new OpenIZ.Core.Model.Collection.SimpleAssociationCollection<OpenIZ.Core.Model.DataTypes.ActTag>(context.JsonContext.LoadCollection<OpenIZ.Core.Model.DataTypes.ActTag>(_strong.Key.Value));
                        _strong.Tags = _delay;
                        if ((_delay.Count > 0)) {
                            _loaded = true;
                            context.JsonContext.WritePropertyUtil(w, "tag", _strong.Tags, context);
                        }
                    }
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "tag", _strong.Tags, context);
                }
            }
            if (context.ShouldSerialize("protocolsModel")) {
                if (((_strong.Protocols == null) 
                            || (_strong.Protocols.Count == 0))) {
                    if ((_strong.Key.HasValue && context.ShouldForceLoad("protocolsModel", _strong.Key.Value))) {
                        OpenIZ.Core.Model.Collection.VersionedAssociationCollection<OpenIZ.Core.Model.Acts.ActProtocol> _delay = null;
                        _delay = new OpenIZ.Core.Model.Collection.VersionedAssociationCollection<OpenIZ.Core.Model.Acts.ActProtocol>(context.JsonContext.LoadCollection<OpenIZ.Core.Model.Acts.ActProtocol>(_strong.Key.Value));
                        _strong.Protocols = _delay;
                        if ((_delay.Count > 0)) {
                            _loaded = true;
                            context.JsonContext.WritePropertyUtil(w, "protocolsModel", _strong.Protocols, context);
                        }
                    }
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "protocolsModel", _strong.Protocols, context);
                }
            }
            if (context.ShouldSerialize("participation")) {
                if (((_strong.Participations == null) 
                            || (_strong.Participations.Count == 0))) {
                    if ((_strong.Key.HasValue && context.ShouldForceLoad("participation", _strong.Key.Value))) {
                        OpenIZ.Core.Model.Collection.VersionedAssociationCollection<OpenIZ.Core.Model.Acts.ActParticipation> _delay = null;
                        _delay = new OpenIZ.Core.Model.Collection.VersionedAssociationCollection<OpenIZ.Core.Model.Acts.ActParticipation>(context.JsonContext.LoadCollection<OpenIZ.Core.Model.Acts.ActParticipation>(_strong.Key.Value));
                        _strong.Participations = _delay;
                        if ((_delay.Count > 0)) {
                            _loaded = true;
                            context.JsonContext.WritePropertyUtil(w, "participation", _strong.Participations, context);
                        }
                    }
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "participation", _strong.Participations, context);
                }
            }
            if (context.ShouldSerialize("etag")) {
                if ((_strong.Tag == null)) {
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "etag", _strong.Tag, context);
                }
            }
            if (context.ShouldSerialize("previousVersion")) {
                if ((_strong.PreviousVersionKey == null)) {
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "previousVersion", _strong.PreviousVersionKey, context);
                }
            }
            if (context.ShouldSerialize("version")) {
                if ((_strong.VersionKey == null)) {
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "version", _strong.VersionKey, context);
                }
            }
            if (context.ShouldSerialize("sequence")) {
                if ((_strong.VersionSequence == null)) {
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "sequence", _strong.VersionSequence, context);
                }
            }
            if (context.ShouldSerialize("creationTimeModel")) {
                if ((_strong.CreationTime == null)) {
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "creationTimeModel", _strong.CreationTime, context);
                }
            }
            if (context.ShouldSerialize("creationTime")) {
                if ((_strong.CreationTimeXml == null)) {
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "creationTime", _strong.CreationTimeXml, context);
                }
            }
            if (context.ShouldSerialize("obsoletionTimeModel")) {
                if ((_strong.ObsoletionTime == null)) {
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "obsoletionTimeModel", _strong.ObsoletionTime, context);
                }
            }
            if (context.ShouldSerialize("obsoletionTime")) {
                if ((_strong.ObsoletionTimeXml == null)) {
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "obsoletionTime", _strong.ObsoletionTimeXml, context);
                }
            }
            if (context.ShouldSerialize("createdBy")) {
                if ((_strong.CreatedByKey == null)) {
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "createdBy", _strong.CreatedByKey, context);
                }
            }
            if (context.ShouldSerialize("obsoletedBy")) {
                if ((_strong.ObsoletedByKey == null)) {
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "obsoletedBy", _strong.ObsoletedByKey, context);
                }
            }
            if (context.ShouldSerialize("id")) {
                if ((_strong.Key == null)) {
                }
                else {
                    context.JsonContext.WritePropertyUtil(w, "id", _strong.Key, context);
                }
            }
            if (((_loaded && _strong.Key.HasValue) 
                        && _strong.VersionKey.HasValue)) {
                ((OpenIZ.Core.Services.IDataCachingService)(OpenIZ.Core.ApplicationServiceContext.Current.GetService(typeof(OpenIZ.Core.Services.IDataCachingService)))).Add(_strong);
            }
        }
        
        public object Deserialize(Newtonsoft.Json.JsonReader r, System.Type asType, OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext context) {
            OpenIZ.Core.Model.Acts.SubstanceAdministration _retVal = new OpenIZ.Core.Model.Acts.SubstanceAdministration();
            int _depth = r.Depth;
            if ((r.TokenType != Newtonsoft.Json.JsonToken.StartObject)) {
                _depth = (_depth - 1);
            }
            for (
            ; r.Read(); 
            ) {
                if ((r.TokenType == Newtonsoft.Json.JsonToken.PropertyName)) {
                    if ("id".Equals(r.Value)) {
                        r.Read();
                        System.Nullable<System.Guid> _instance = ((System.Nullable<System.Guid>)(context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<System.Guid>), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("id", context.JsonContext, _retVal, context))));
                        if ((_instance != null)) {
                            _retVal.Key = _instance;
                        }
                    }
                    else {
                        if ("obsoletedBy".Equals(r.Value)) {
                            r.Read();
                            System.Nullable<System.Guid> _instance = ((System.Nullable<System.Guid>)(context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<System.Guid>), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("obsoletedBy", context.JsonContext, _retVal, context))));
                            if ((_instance != null)) {
                                _retVal.ObsoletedByKey = _instance;
                            }
                        }
                        else {
                            if ("createdBy".Equals(r.Value)) {
                                r.Read();
                                System.Nullable<System.Guid> _instance = ((System.Nullable<System.Guid>)(context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<System.Guid>), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("createdBy", context.JsonContext, _retVal, context))));
                                if ((_instance != null)) {
                                    _retVal.CreatedByKey = _instance;
                                }
                            }
                            else {
                                if ("obsoletionTime".Equals(r.Value)) {
                                    r.Read();
                                    string _instance = ((string)(context.JsonContext.ReadElementUtil(r, typeof(string), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("obsoletionTime", context.JsonContext, _retVal, context))));
                                    if ((_instance != null)) {
                                        _retVal.ObsoletionTimeXml = _instance;
                                    }
                                }
                                else {
                                    if ("obsoletionTimeModel".Equals(r.Value)) {
                                        r.Read();
                                        System.Nullable<System.DateTimeOffset> _instance = ((System.Nullable<System.DateTimeOffset>)(context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<System.DateTimeOffset>), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("obsoletionTimeModel", context.JsonContext, _retVal, context))));
                                        if ((_instance != null)) {
                                            _retVal.ObsoletionTime = _instance;
                                        }
                                    }
                                    else {
                                        if ("creationTime".Equals(r.Value)) {
                                            r.Read();
                                            string _instance = ((string)(context.JsonContext.ReadElementUtil(r, typeof(string), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("creationTime", context.JsonContext, _retVal, context))));
                                            if ((_instance != null)) {
                                                _retVal.CreationTimeXml = _instance;
                                            }
                                        }
                                        else {
                                            if ("creationTimeModel".Equals(r.Value)) {
                                                r.Read();
                                                System.DateTimeOffset _instance = ((System.DateTimeOffset)(context.JsonContext.ReadElementUtil(r, typeof(System.DateTimeOffset), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("creationTimeModel", context.JsonContext, _retVal, context))));
                                                if ((_instance != null)) {
                                                    _retVal.CreationTime = _instance;
                                                }
                                            }
                                            else {
                                                if ("sequence".Equals(r.Value)) {
                                                    r.Read();
                                                    System.Nullable<decimal> _instance = ((System.Nullable<decimal>)(context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<decimal>), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("sequence", context.JsonContext, _retVal, context))));
                                                    if ((_instance != null)) {
                                                        _retVal.VersionSequence = _instance;
                                                    }
                                                }
                                                else {
                                                    if ("version".Equals(r.Value)) {
                                                        r.Read();
                                                        System.Nullable<System.Guid> _instance = ((System.Nullable<System.Guid>)(context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<System.Guid>), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("version", context.JsonContext, _retVal, context))));
                                                        if ((_instance != null)) {
                                                            _retVal.VersionKey = _instance;
                                                        }
                                                    }
                                                    else {
                                                        if ("previousVersion".Equals(r.Value)) {
                                                            r.Read();
                                                            System.Nullable<System.Guid> _instance = ((System.Nullable<System.Guid>)(context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<System.Guid>), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("previousVersion", context.JsonContext, _retVal, context))));
                                                            if ((_instance != null)) {
                                                                _retVal.PreviousVersionKey = _instance;
                                                            }
                                                        }
                                                        else {
                                                            if ("participation".Equals(r.Value)) {
                                                                r.Read();
                                                                OpenIZ.Core.Model.Collection.VersionedAssociationCollection<OpenIZ.Core.Model.Acts.ActParticipation> _instance = ((OpenIZ.Core.Model.Collection.VersionedAssociationCollection<OpenIZ.Core.Model.Acts.ActParticipation>)(context.JsonContext.ReadElementUtil(r, typeof(OpenIZ.Core.Model.Collection.VersionedAssociationCollection<OpenIZ.Core.Model.Acts.ActParticipation>), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("participation", context.JsonContext, _retVal, context))));
                                                                if ((_instance != null)) {
                                                                    _retVal.Participations = _instance;
                                                                }
                                                            }
                                                            else {
                                                                if ("protocolsModel".Equals(r.Value)) {
                                                                    r.Read();
                                                                    OpenIZ.Core.Model.Collection.VersionedAssociationCollection<OpenIZ.Core.Model.Acts.ActProtocol> _instance = ((OpenIZ.Core.Model.Collection.VersionedAssociationCollection<OpenIZ.Core.Model.Acts.ActProtocol>)(context.JsonContext.ReadElementUtil(r, typeof(OpenIZ.Core.Model.Collection.VersionedAssociationCollection<OpenIZ.Core.Model.Acts.ActProtocol>), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("protocolsModel", context.JsonContext, _retVal, context))));
                                                                    if ((_instance != null)) {
                                                                        _retVal.Protocols = _instance;
                                                                    }
                                                                }
                                                                else {
                                                                    if ("tag".Equals(r.Value)) {
                                                                        r.Read();
                                                                        OpenIZ.Core.Model.Collection.SimpleAssociationCollection<OpenIZ.Core.Model.DataTypes.ActTag> _instance = ((OpenIZ.Core.Model.Collection.SimpleAssociationCollection<OpenIZ.Core.Model.DataTypes.ActTag>)(context.JsonContext.ReadElementUtil(r, typeof(OpenIZ.Core.Model.Collection.SimpleAssociationCollection<OpenIZ.Core.Model.DataTypes.ActTag>), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("tag", context.JsonContext, _retVal, context))));
                                                                        if ((_instance != null)) {
                                                                            _retVal.Tags = _instance;
                                                                        }
                                                                    }
                                                                    else {
                                                                        if ("note".Equals(r.Value)) {
                                                                            r.Read();
                                                                            OpenIZ.Core.Model.Collection.VersionedAssociationCollection<OpenIZ.Core.Model.DataTypes.ActNote> _instance = ((OpenIZ.Core.Model.Collection.VersionedAssociationCollection<OpenIZ.Core.Model.DataTypes.ActNote>)(context.JsonContext.ReadElementUtil(r, typeof(OpenIZ.Core.Model.Collection.VersionedAssociationCollection<OpenIZ.Core.Model.DataTypes.ActNote>), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("note", context.JsonContext, _retVal, context))));
                                                                            if ((_instance != null)) {
                                                                                _retVal.Notes = _instance;
                                                                            }
                                                                        }
                                                                        else {
                                                                            if ("extension".Equals(r.Value)) {
                                                                                r.Read();
                                                                                OpenIZ.Core.Model.Collection.VersionedAssociationCollection<OpenIZ.Core.Model.DataTypes.ActExtension> _instance = ((OpenIZ.Core.Model.Collection.VersionedAssociationCollection<OpenIZ.Core.Model.DataTypes.ActExtension>)(context.JsonContext.ReadElementUtil(r, typeof(OpenIZ.Core.Model.Collection.VersionedAssociationCollection<OpenIZ.Core.Model.DataTypes.ActExtension>), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("extension", context.JsonContext, _retVal, context))));
                                                                                if ((_instance != null)) {
                                                                                    _retVal.Extensions = _instance;
                                                                                }
                                                                            }
                                                                            else {
                                                                                if ("policy".Equals(r.Value)) {
                                                                                    r.Read();
                                                                                    OpenIZ.Core.Model.Collection.SimpleAssociationCollection<OpenIZ.Core.Model.Security.SecurityPolicyInstance> _instance = ((OpenIZ.Core.Model.Collection.SimpleAssociationCollection<OpenIZ.Core.Model.Security.SecurityPolicyInstance>)(context.JsonContext.ReadElementUtil(r, typeof(OpenIZ.Core.Model.Collection.SimpleAssociationCollection<OpenIZ.Core.Model.Security.SecurityPolicyInstance>), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("policy", context.JsonContext, _retVal, context))));
                                                                                    if ((_instance != null)) {
                                                                                        _retVal.Policies = _instance;
                                                                                    }
                                                                                }
                                                                                else {
                                                                                    if ("relationship".Equals(r.Value)) {
                                                                                        r.Read();
                                                                                        OpenIZ.Core.Model.Collection.VersionedAssociationCollection<OpenIZ.Core.Model.Acts.ActRelationship> _instance = ((OpenIZ.Core.Model.Collection.VersionedAssociationCollection<OpenIZ.Core.Model.Acts.ActRelationship>)(context.JsonContext.ReadElementUtil(r, typeof(OpenIZ.Core.Model.Collection.VersionedAssociationCollection<OpenIZ.Core.Model.Acts.ActRelationship>), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("relationship", context.JsonContext, _retVal, context))));
                                                                                        if ((_instance != null)) {
                                                                                            _retVal.Relationships = _instance;
                                                                                        }
                                                                                    }
                                                                                    else {
                                                                                        if ("identifier".Equals(r.Value)) {
                                                                                            r.Read();
                                                                                            OpenIZ.Core.Model.Collection.VersionedAssociationCollection<OpenIZ.Core.Model.DataTypes.ActIdentifier> _instance = ((OpenIZ.Core.Model.Collection.VersionedAssociationCollection<OpenIZ.Core.Model.DataTypes.ActIdentifier>)(context.JsonContext.ReadElementUtil(r, typeof(OpenIZ.Core.Model.Collection.VersionedAssociationCollection<OpenIZ.Core.Model.DataTypes.ActIdentifier>), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("identifier", context.JsonContext, _retVal, context))));
                                                                                            if ((_instance != null)) {
                                                                                                _retVal.Identifiers = _instance;
                                                                                            }
                                                                                        }
                                                                                        else {
                                                                                            if ("typeConceptModel".Equals(r.Value)) {
                                                                                                r.Read();
                                                                                                OpenIZ.Core.Model.DataTypes.Concept _instance = ((OpenIZ.Core.Model.DataTypes.Concept)(context.JsonContext.ReadElementUtil(r, typeof(OpenIZ.Core.Model.DataTypes.Concept), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("typeConceptModel", context.JsonContext, _retVal, context))));
                                                                                                if ((_instance != null)) {
                                                                                                    _retVal.TypeConcept = _instance;
                                                                                                }
                                                                                            }
                                                                                            else {
                                                                                                if ("statusConceptModel".Equals(r.Value)) {
                                                                                                    r.Read();
                                                                                                    OpenIZ.Core.Model.DataTypes.Concept _instance = ((OpenIZ.Core.Model.DataTypes.Concept)(context.JsonContext.ReadElementUtil(r, typeof(OpenIZ.Core.Model.DataTypes.Concept), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("statusConceptModel", context.JsonContext, _retVal, context))));
                                                                                                    if ((_instance != null)) {
                                                                                                        _retVal.StatusConcept = _instance;
                                                                                                    }
                                                                                                }
                                                                                                else {
                                                                                                    if ("reasonConceptModel".Equals(r.Value)) {
                                                                                                        r.Read();
                                                                                                        OpenIZ.Core.Model.DataTypes.Concept _instance = ((OpenIZ.Core.Model.DataTypes.Concept)(context.JsonContext.ReadElementUtil(r, typeof(OpenIZ.Core.Model.DataTypes.Concept), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("reasonConceptModel", context.JsonContext, _retVal, context))));
                                                                                                        if ((_instance != null)) {
                                                                                                            _retVal.ReasonConcept = _instance;
                                                                                                        }
                                                                                                    }
                                                                                                    else {
                                                                                                        if ("moodConceptModel".Equals(r.Value)) {
                                                                                                            r.Read();
                                                                                                            OpenIZ.Core.Model.DataTypes.Concept _instance = ((OpenIZ.Core.Model.DataTypes.Concept)(context.JsonContext.ReadElementUtil(r, typeof(OpenIZ.Core.Model.DataTypes.Concept), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("moodConceptModel", context.JsonContext, _retVal, context))));
                                                                                                            if ((_instance != null)) {
                                                                                                                _retVal.MoodConcept = _instance;
                                                                                                            }
                                                                                                        }
                                                                                                        else {
                                                                                                            if ("classConceptModel".Equals(r.Value)) {
                                                                                                                r.Read();
                                                                                                                OpenIZ.Core.Model.DataTypes.Concept _instance = ((OpenIZ.Core.Model.DataTypes.Concept)(context.JsonContext.ReadElementUtil(r, typeof(OpenIZ.Core.Model.DataTypes.Concept), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("classConceptModel", context.JsonContext, _retVal, context))));
                                                                                                                if ((_instance != null)) {
                                                                                                                    _retVal.ClassConcept = _instance;
                                                                                                                }
                                                                                                            }
                                                                                                            else {
                                                                                                                if ("typeConcept".Equals(r.Value)) {
                                                                                                                    r.Read();
                                                                                                                    System.Nullable<System.Guid> _instance = ((System.Nullable<System.Guid>)(context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<System.Guid>), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("typeConcept", context.JsonContext, _retVal, context))));
                                                                                                                    if ((_instance != null)) {
                                                                                                                        _retVal.TypeConceptKey = _instance;
                                                                                                                    }
                                                                                                                }
                                                                                                                else {
                                                                                                                    if ("statusConcept".Equals(r.Value)) {
                                                                                                                        r.Read();
                                                                                                                        System.Nullable<System.Guid> _instance = ((System.Nullable<System.Guid>)(context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<System.Guid>), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("statusConcept", context.JsonContext, _retVal, context))));
                                                                                                                        if ((_instance != null)) {
                                                                                                                            _retVal.StatusConceptKey = _instance;
                                                                                                                        }
                                                                                                                    }
                                                                                                                    else {
                                                                                                                        if ("reasonConcept".Equals(r.Value)) {
                                                                                                                            r.Read();
                                                                                                                            System.Nullable<System.Guid> _instance = ((System.Nullable<System.Guid>)(context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<System.Guid>), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("reasonConcept", context.JsonContext, _retVal, context))));
                                                                                                                            if ((_instance != null)) {
                                                                                                                                _retVal.ReasonConceptKey = _instance;
                                                                                                                            }
                                                                                                                        }
                                                                                                                        else {
                                                                                                                            if ("moodConcept".Equals(r.Value)) {
                                                                                                                                r.Read();
                                                                                                                                System.Nullable<System.Guid> _instance = ((System.Nullable<System.Guid>)(context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<System.Guid>), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("moodConcept", context.JsonContext, _retVal, context))));
                                                                                                                                if ((_instance != null)) {
                                                                                                                                    _retVal.MoodConceptKey = _instance;
                                                                                                                                }
                                                                                                                            }
                                                                                                                            else {
                                                                                                                                if ("classConcept".Equals(r.Value)) {
                                                                                                                                    r.Read();
                                                                                                                                    System.Nullable<System.Guid> _instance = ((System.Nullable<System.Guid>)(context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<System.Guid>), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("classConcept", context.JsonContext, _retVal, context))));
                                                                                                                                    if ((_instance != null)) {
                                                                                                                                        _retVal.ClassConceptKey = _instance;
                                                                                                                                    }
                                                                                                                                }
                                                                                                                                else {
                                                                                                                                    if ("stopTime".Equals(r.Value)) {
                                                                                                                                        r.Read();
                                                                                                                                        string _instance = ((string)(context.JsonContext.ReadElementUtil(r, typeof(string), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("stopTime", context.JsonContext, _retVal, context))));
                                                                                                                                        if ((_instance != null)) {
                                                                                                                                            _retVal.StopTimeXml = _instance;
                                                                                                                                        }
                                                                                                                                    }
                                                                                                                                    else {
                                                                                                                                        if ("startTime".Equals(r.Value)) {
                                                                                                                                            r.Read();
                                                                                                                                            string _instance = ((string)(context.JsonContext.ReadElementUtil(r, typeof(string), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("startTime", context.JsonContext, _retVal, context))));
                                                                                                                                            if ((_instance != null)) {
                                                                                                                                                _retVal.StartTimeXml = _instance;
                                                                                                                                            }
                                                                                                                                        }
                                                                                                                                        else {
                                                                                                                                            if ("actTime".Equals(r.Value)) {
                                                                                                                                                r.Read();
                                                                                                                                                string _instance = ((string)(context.JsonContext.ReadElementUtil(r, typeof(string), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("actTime", context.JsonContext, _retVal, context))));
                                                                                                                                                if ((_instance != null)) {
                                                                                                                                                    _retVal.ActTimeXml = _instance;
                                                                                                                                                }
                                                                                                                                            }
                                                                                                                                            else {
                                                                                                                                                if ("template".Equals(r.Value)) {
                                                                                                                                                    r.Read();
                                                                                                                                                    OpenIZ.Core.Model.DataTypes.TemplateDefinition _instance = ((OpenIZ.Core.Model.DataTypes.TemplateDefinition)(context.JsonContext.ReadElementUtil(r, typeof(OpenIZ.Core.Model.DataTypes.TemplateDefinition), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("template", context.JsonContext, _retVal, context))));
                                                                                                                                                    if ((_instance != null)) {
                                                                                                                                                        _retVal.Template = _instance;
                                                                                                                                                    }
                                                                                                                                                }
                                                                                                                                                else {
                                                                                                                                                    if ("isNegated".Equals(r.Value)) {
                                                                                                                                                        r.Read();
                                                                                                                                                        bool _instance = ((bool)(context.JsonContext.ReadElementUtil(r, typeof(bool), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("isNegated", context.JsonContext, _retVal, context))));
                                                                                                                                                        if ((_instance != null)) {
                                                                                                                                                            _retVal.IsNegated = _instance;
                                                                                                                                                        }
                                                                                                                                                    }
                                                                                                                                                    else {
                                                                                                                                                        if ("siteModel".Equals(r.Value)) {
                                                                                                                                                            r.Read();
                                                                                                                                                            OpenIZ.Core.Model.DataTypes.Concept _instance = ((OpenIZ.Core.Model.DataTypes.Concept)(context.JsonContext.ReadElementUtil(r, typeof(OpenIZ.Core.Model.DataTypes.Concept), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("siteModel", context.JsonContext, _retVal, context))));
                                                                                                                                                            if ((_instance != null)) {
                                                                                                                                                                _retVal.Site = _instance;
                                                                                                                                                            }
                                                                                                                                                        }
                                                                                                                                                        else {
                                                                                                                                                            if ("site".Equals(r.Value)) {
                                                                                                                                                                r.Read();
                                                                                                                                                                System.Nullable<System.Guid> _instance = ((System.Nullable<System.Guid>)(context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<System.Guid>), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("site", context.JsonContext, _retVal, context))));
                                                                                                                                                                if ((_instance != null)) {
                                                                                                                                                                    _retVal.SiteKey = _instance;
                                                                                                                                                                }
                                                                                                                                                            }
                                                                                                                                                            else {
                                                                                                                                                                if ("doseSequence".Equals(r.Value)) {
                                                                                                                                                                    r.Read();
                                                                                                                                                                    int _instance = ((int)(context.JsonContext.ReadElementUtil(r, typeof(int), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("doseSequence", context.JsonContext, _retVal, context))));
                                                                                                                                                                    if ((_instance != null)) {
                                                                                                                                                                        _retVal.SequenceId = _instance;
                                                                                                                                                                    }
                                                                                                                                                                }
                                                                                                                                                                else {
                                                                                                                                                                    if ("doseQuantity".Equals(r.Value)) {
                                                                                                                                                                        r.Read();
                                                                                                                                                                        decimal _instance = ((decimal)(context.JsonContext.ReadElementUtil(r, typeof(decimal), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("doseQuantity", context.JsonContext, _retVal, context))));
                                                                                                                                                                        if ((_instance != null)) {
                                                                                                                                                                            _retVal.DoseQuantity = _instance;
                                                                                                                                                                        }
                                                                                                                                                                    }
                                                                                                                                                                    else {
                                                                                                                                                                        if ("doseUnitModel".Equals(r.Value)) {
                                                                                                                                                                            r.Read();
                                                                                                                                                                            OpenIZ.Core.Model.DataTypes.Concept _instance = ((OpenIZ.Core.Model.DataTypes.Concept)(context.JsonContext.ReadElementUtil(r, typeof(OpenIZ.Core.Model.DataTypes.Concept), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("doseUnitModel", context.JsonContext, _retVal, context))));
                                                                                                                                                                            if ((_instance != null)) {
                                                                                                                                                                                _retVal.DoseUnit = _instance;
                                                                                                                                                                            }
                                                                                                                                                                        }
                                                                                                                                                                        else {
                                                                                                                                                                            if ("routeModel".Equals(r.Value)) {
                                                                                                                                                                                r.Read();
                                                                                                                                                                                OpenIZ.Core.Model.DataTypes.Concept _instance = ((OpenIZ.Core.Model.DataTypes.Concept)(context.JsonContext.ReadElementUtil(r, typeof(OpenIZ.Core.Model.DataTypes.Concept), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("routeModel", context.JsonContext, _retVal, context))));
                                                                                                                                                                                if ((_instance != null)) {
                                                                                                                                                                                    _retVal.Route = _instance;
                                                                                                                                                                                }
                                                                                                                                                                            }
                                                                                                                                                                            else {
                                                                                                                                                                                if ("doseUnit".Equals(r.Value)) {
                                                                                                                                                                                    r.Read();
                                                                                                                                                                                    System.Nullable<System.Guid> _instance = ((System.Nullable<System.Guid>)(context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<System.Guid>), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("doseUnit", context.JsonContext, _retVal, context))));
                                                                                                                                                                                    if ((_instance != null)) {
                                                                                                                                                                                        _retVal.DoseUnitKey = _instance;
                                                                                                                                                                                    }
                                                                                                                                                                                }
                                                                                                                                                                                else {
                                                                                                                                                                                    if ("route".Equals(r.Value)) {
                                                                                                                                                                                        r.Read();
                                                                                                                                                                                        System.Nullable<System.Guid> _instance = ((System.Nullable<System.Guid>)(context.JsonContext.ReadElementUtil(r, typeof(System.Nullable<System.Guid>), new OpenIZ.Core.Applets.ViewModel.Json.JsonSerializationContext("route", context.JsonContext, _retVal, context))));
                                                                                                                                                                                        if ((_instance != null)) {
                                                                                                                                                                                            _retVal.RouteKey = _instance;
                                                                                                                                                                                        }
                                                                                                                                                                                    }
                                                                                                                                                                                    else {
                                                                                                                                                                                        if ("$type".Equals(r.Value)) {
                                                                                                                                                                                            System.Type _type = this.m_binder.BindToType("OpenIZ.Core.Model, Version=0.6.14.21496, Culture=neutral, PublicKeyToken=null", r.ReadAsString());
                                                                                                                                                                                            if ((_type != typeof(OpenIZ.Core.Model.Acts.SubstanceAdministration))) {
                                                                                                                                                                                                OpenIZ.Core.Model.Acts.SubstanceAdministration _nretVal = ((OpenIZ.Core.Model.Acts.SubstanceAdministration)(context.JsonContext.GetFormatter(_type).Deserialize(r, _type, context)));
                                                                                                                                                                                                _nretVal.CopyObjectData(_retVal);
                                                                                                                                                                                                return _nretVal;
                                                                                                                                                                                            }
                                                                                                                                                                                        }
                                                                                                                                                                                        else {
                                                                                                                                                                                            r.Skip();
                                                                                                                                                                                        }
                                                                                                                                                                                    }
                                                                                                                                                                                }
                                                                                                                                                                            }
                                                                                                                                                                        }
                                                                                                                                                                    }
                                                                                                                                                                }
                                                                                                                                                            }
                                                                                                                                                        }
                                                                                                                                                    }
                                                                                                                                                }
                                                                                                                                            }
                                                                                                                                        }
                                                                                                                                    }
                                                                                                                                }
                                                                                                                            }
                                                                                                                        }
                                                                                                                    }
                                                                                                                }
                                                                                                            }
                                                                                                        }
                                                                                                    }
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
                else {
                    if (((r.TokenType == Newtonsoft.Json.JsonToken.EndObject) 
                                && (r.Depth == _depth))) {
                        return _retVal;
                    }
                    else {
                        throw new Newtonsoft.Json.JsonSerializationException("JSON in invalid state");
                    }
                }
            }
            return _retVal;
        }
        
        public object FromSimpleValue(object o) {
            return null;
        }
        
        public object GetSimpleValue(object o) {
            return null;
        }
    }
}
